#include "monty.h"
#include "fusion_p.h"

template<typename T> struct _checked_ptr_1
{
  T * ptr;
  size_t sz;
  _checked_ptr_1<T>(T * ptr, size_t sz) : ptr(ptr), sz(sz) {}
  T & operator[](ptrdiff_t i) { assert(i >= 0 && i < sz); return ptr[i]; }
  const T & operator[](ptrdiff_t i) const { assert(i >= 0 && i < sz); return ptr[i]; }
  void update(T * ptr_, size_t sz_) { ptr = ptr_; sz = sz_; }
};

template<typename T> struct _checked_ptr_2
{
  T * ptr;
  size_t sz0, sz1;
  _checked_ptr_2<T>(T * ptr, size_t sz0, size_t sz1) : ptr(ptr), sz0(sz0),sz1(sz1) {}
  T & operator()(ptrdiff_t i0, ptrdiff_t i1) { assert(i0 >= 0 && i0 < sz0 && i1 >= 0 && i1 < sz1); return ptr[i0 * sz1 + i1]; }
  const T & operator()(ptrdiff_t i0, ptrdiff_t i1) const { assert(i0 >= 0 && i0 < sz0 && i1 >= 0 && i1 < sz1); return ptr[i0 * sz1 + i1]; }
  void update(T * ptr_, size_t sz0_, size_t sz1_) { ptr = ptr_; sz0 = sz0_; sz1 = sz1_; }
};

// See http://www.cplusplus.com/articles/DE18T05o/
//                 A      && ( (       B      && B1 && B2      ) || (      C      &&   C1 &&   C2  ) )
// A a and b a have different signs
// B, B1, B2 a and b are both non-negative, r is less than both a and b
// C, C1, C2 a and b are both negative, r is greater than both a and b

struct InternalNumericOverflow {};

template<typename T>
static inline T checked_add(T a, T b, bool & overflow) {
  int r = a+b;
  overflow = ((a ^ b) >= 0) && ( (( (a & b) >= 0) && r < a && r < b) || ( ((a & b) < 0) && a < r && b < r) );
  return r;
}

template<typename T>
static inline T safe_add_(T a, T b) {
  bool overflow;
  T r = checked_add(a,b,overflow);
  if (overflow)
    throw InternalNumericOverflow();
  else
    return r;
}

static inline           int safe_add(int a, int b) { return safe_add_<long long int>(a,b); }
static inline long long int safe_add(long long int a, long long int b) { return safe_add_<long long int>(a,b); }
static inline long long int safe_add(int a, long long int b) { return safe_add_<long long int>(a,b); }
static inline long long int safe_add(long long int a, int b) { return safe_add_<long long int>(a,b); }

template<typename T>
static inline T checked_mul(T a, T b, bool & overflow) {
  T r = a * b;
  overflow = b != 0 && (((a ^ b) >= 0 && a > std::numeric_limits<T>::max() / b) || ((a ^ b) < 0 && a < std::numeric_limits<T>::min() / b));
  return r;
}

template<typename T>
static inline T safe_mul_(T a, T b) {
  bool overflow;
  T r = checked_mul(a,b,overflow);
  if (overflow)
    throw InternalNumericOverflow();
  else
    return r;
}

static inline           int safe_mul(int a, int b) { return safe_mul_<long long int>(a,b); }
static inline long long int safe_mul(long long int a, long long int b) { return safe_mul_<long long int>(a,b); }
static inline long long int safe_mul(int a, long long int b) { return safe_mul_<long long int>(a,b); }
static inline long long int safe_mul(long long int a, int b) { return safe_mul_<long long int>(a,b); }

std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::StatusKey val){switch (val){case StatusKey::Unknown: os << "StatusKey::Unknown"; break;case StatusKey::Basic: os << "StatusKey::Basic"; break;case StatusKey::SuperBasic: os << "StatusKey::SuperBasic"; break;case StatusKey::OnBound: os << "StatusKey::OnBound"; break;case StatusKey::Infinity: os << "StatusKey::Infinity"; break;default: os << "StatusKey.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::SolutionType val){switch (val){case SolutionType::Default: os << "SolutionType::Default"; break;case SolutionType::Basic: os << "SolutionType::Basic"; break;case SolutionType::Interior: os << "SolutionType::Interior"; break;case SolutionType::Integer: os << "SolutionType::Integer"; break;default: os << "SolutionType.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::ProblemStatus val){switch (val){case ProblemStatus::Unknown: os << "ProblemStatus::Unknown"; break;case ProblemStatus::PrimalAndDualFeasible: os << "ProblemStatus::PrimalAndDualFeasible"; break;case ProblemStatus::PrimalFeasible: os << "ProblemStatus::PrimalFeasible"; break;case ProblemStatus::DualFeasible: os << "ProblemStatus::DualFeasible"; break;case ProblemStatus::PrimalInfeasible: os << "ProblemStatus::PrimalInfeasible"; break;case ProblemStatus::DualInfeasible: os << "ProblemStatus::DualInfeasible"; break;case ProblemStatus::PrimalAndDualInfeasible: os << "ProblemStatus::PrimalAndDualInfeasible"; break;case ProblemStatus::IllPosed: os << "ProblemStatus::IllPosed"; break;case ProblemStatus::PrimalInfeasibleOrUnbounded: os << "ProblemStatus::PrimalInfeasibleOrUnbounded"; break;default: os << "ProblemStatus.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::AccSolutionStatus val){switch (val){case AccSolutionStatus::Anything: os << "AccSolutionStatus::Anything"; break;case AccSolutionStatus::Optimal: os << "AccSolutionStatus::Optimal"; break;case AccSolutionStatus::Feasible: os << "AccSolutionStatus::Feasible"; break;case AccSolutionStatus::Certificate: os << "AccSolutionStatus::Certificate"; break;default: os << "AccSolutionStatus.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::SolutionStatus val){switch (val){case SolutionStatus::Undefined: os << "SolutionStatus::Undefined"; break;case SolutionStatus::Unknown: os << "SolutionStatus::Unknown"; break;case SolutionStatus::Optimal: os << "SolutionStatus::Optimal"; break;case SolutionStatus::Feasible: os << "SolutionStatus::Feasible"; break;case SolutionStatus::Certificate: os << "SolutionStatus::Certificate"; break;case SolutionStatus::IllposedCert: os << "SolutionStatus::IllposedCert"; break;default: os << "SolutionStatus.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::ObjectiveSense val){switch (val){case ObjectiveSense::Undefined: os << "ObjectiveSense::Undefined"; break;case ObjectiveSense::Minimize: os << "ObjectiveSense::Minimize"; break;case ObjectiveSense::Maximize: os << "ObjectiveSense::Maximize"; break;default: os << "ObjectiveSense.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::QConeKey val){switch (val){case QConeKey::InQCone: os << "QConeKey::InQCone"; break;case QConeKey::InRotatedQCone: os << "QConeKey::InRotatedQCone"; break;case QConeKey::InPExpCone: os << "QConeKey::InPExpCone"; break;case QConeKey::InPPowCone: os << "QConeKey::InPPowCone"; break;case QConeKey::InDExpCone: os << "QConeKey::InDExpCone"; break;case QConeKey::InDPowCone: os << "QConeKey::InDPowCone"; break;default: os << "QConeKey.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::PSDKey val){switch (val){case PSDKey::IsSymPSD: os << "PSDKey::IsSymPSD"; break;case PSDKey::IsTrilPSD: os << "PSDKey::IsTrilPSD"; break;default: os << "PSDKey.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::RelationKey val){switch (val){case RelationKey::EqualsTo: os << "RelationKey::EqualsTo"; break;case RelationKey::LessThan: os << "RelationKey::LessThan"; break;case RelationKey::GreaterThan: os << "RelationKey::GreaterThan"; break;case RelationKey::IsFree: os << "RelationKey::IsFree"; break;case RelationKey::InRange: os << "RelationKey::InRange"; break;default: os << "RelationKey.<invalid>"; break;}return os;}mosek::fusion::Sort::Sort(mosek::fusion::p_Sort *_impl) : _impl(_impl) { /*std::cout << "Sort() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Sort::~Sort() { delete _impl; _impl = nullptr; }mosek::fusion::p_Sort::p_Sort  (::mosek::fusion::Sort * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::Sort::argTransposeSort  ( std::shared_ptr< monty::ndarray< long long,1 > > _157,    std::shared_ptr< monty::ndarray< long long,1 > > _158,    int _159,    int _160,    int _161,    std::shared_ptr< monty::ndarray< long long,1 > > _162) { mosek::fusion::p_Sort::argTransposeSort(_157,_158,_159,_160,_161,_162); }void mosek::fusion::p_Sort::argTransposeSort(std::shared_ptr< monty::ndarray< long long,1 > > _157,std::shared_ptr< monty::ndarray< long long,1 > > _158,int _159,int _160,int _161,std::shared_ptr< monty::ndarray< long long,1 > > _162){
  _checked_ptr_1<long long> _ptr__157(_157 ? _157->raw() : nullptr, _157 ? _157->size(0) : 0);
  _checked_ptr_1<long long> _ptr__158(_158 ? _158->raw() : nullptr, _158 ? _158->size(0) : 0);
  _checked_ptr_1<long long> _ptr__162(_162 ? _162->raw() : nullptr, _162 ? _162->size(0) : 0);
  int _8624 = (int)0;
  int _8625 = safe_add( safe_mul( _159,_161 ),(int)1 );
  for (int _163 = _8624; _163 < _8625; ++_163)
  {
    {
      _ptr__158[_163] = (int)0;
    }
  }
  int _8626 = (int)0;
  int _8627 = (int)((_162)->size(0));
  for (int _164 = _8626; _164 < _8627; ++_164)
  {
    {
      ++ _ptr__158[safe_add( safe_add( safe_mul( (_ptr__162[_ptr__157[_164]] / safe_mul( _160,_161 )),_161 ),(_ptr__162[_ptr__157[_164]] % _161) ),(int)1 )];
    }
  }
  int _8628 = (int)0;
  int _8629 = safe_mul( _159,_161 );
  for (int _165 = _8628; _165 < _8629; ++_165)
  {
    {
      _ptr__158[safe_add( _165,(int)1 )] = safe_add( _ptr__158[safe_add( _165,(int)1 )],_ptr__158[_165] );
    }
  }
  std::vector<long long> _8630;
  for (int _167 = (int)0, _8631 = (int)((_157)->size(0)); _167 < _8631 ; ++_167)
  {
    _8630.push_back(_ptr__157[_167]);
  }
  auto _8632 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8630.size()),_8630.begin(),_8630.end()));
  std::shared_ptr< monty::ndarray< long long,1 > > _166 = _8632;
  _checked_ptr_1<long long> _ptr__166(_166 ? _166->raw() : nullptr,_166 ? _166->size(0) : 0);
  long long _8633 = (long long)0;
  long long _8634 = (long long)((_162)->size(0));
  for (long long _168 = _8633; _168 < _8634; ++_168)
  {
    {
      long long _169 = safe_add( safe_mul( (_ptr__162[_ptr__166[_168]] / safe_mul( _160,_161 )),_161 ),(_ptr__162[_ptr__166[_168]] % _161) );
      _ptr__157[_ptr__158[_169]] = _ptr__166[_168];
      ++ _ptr__158[_169];
    }
  }
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _170,    std::shared_ptr< monty::ndarray< long long,1 > > _171) { mosek::fusion::p_Sort::argsort(_170,_171); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _170,std::shared_ptr< monty::ndarray< long long,1 > > _171){
  _checked_ptr_1<long long> _ptr__170(_170 ? _170->raw() : nullptr, _170 ? _170->size(0) : 0);
  _checked_ptr_1<long long> _ptr__171(_171 ? _171->raw() : nullptr, _171 ? _171->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_170,_171,(long long)((int)0),(long long)((int)((_170)->size(0))),false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _172,    std::shared_ptr< monty::ndarray< int,1 > > _173) { mosek::fusion::p_Sort::argsort(_172,_173); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _172,std::shared_ptr< monty::ndarray< int,1 > > _173){
  _checked_ptr_1<long long> _ptr__172(_172 ? _172->raw() : nullptr, _172 ? _172->size(0) : 0);
  _checked_ptr_1<int> _ptr__173(_173 ? _173->raw() : nullptr, _173 ? _173->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_172,_173,(long long)((int)0),(long long)((int)((_172)->size(0))),false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _174,    std::shared_ptr< monty::ndarray< long long,1 > > _175,    std::shared_ptr< monty::ndarray< long long,1 > > _176) { mosek::fusion::p_Sort::argsort(_174,_175,_176); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _174,std::shared_ptr< monty::ndarray< long long,1 > > _175,std::shared_ptr< monty::ndarray< long long,1 > > _176){
  _checked_ptr_1<long long> _ptr__174(_174 ? _174->raw() : nullptr, _174 ? _174->size(0) : 0);
  _checked_ptr_1<long long> _ptr__175(_175 ? _175->raw() : nullptr, _175 ? _175->size(0) : 0);
  _checked_ptr_1<long long> _ptr__176(_176 ? _176->raw() : nullptr, _176 ? _176->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_174,_175,_176,(long long)((int)0),(long long)((int)((_174)->size(0))),false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _177,    std::shared_ptr< monty::ndarray< int,1 > > _178,    std::shared_ptr< monty::ndarray< int,1 > > _179) { mosek::fusion::p_Sort::argsort(_177,_178,_179); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _177,std::shared_ptr< monty::ndarray< int,1 > > _178,std::shared_ptr< monty::ndarray< int,1 > > _179){
  _checked_ptr_1<long long> _ptr__177(_177 ? _177->raw() : nullptr, _177 ? _177->size(0) : 0);
  _checked_ptr_1<int> _ptr__178(_178 ? _178->raw() : nullptr, _178 ? _178->size(0) : 0);
  _checked_ptr_1<int> _ptr__179(_179 ? _179->raw() : nullptr, _179 ? _179->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_177,_178,_179,(long long)((int)0),(long long)((int)((_177)->size(0))),false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _180,    std::shared_ptr< monty::ndarray< long long,1 > > _181,    long long _182,    long long _183) { mosek::fusion::p_Sort::argsort(_180,_181,_182,_183); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _180,std::shared_ptr< monty::ndarray< long long,1 > > _181,long long _182,long long _183){
  _checked_ptr_1<long long> _ptr__180(_180 ? _180->raw() : nullptr, _180 ? _180->size(0) : 0);
  _checked_ptr_1<long long> _ptr__181(_181 ? _181->raw() : nullptr, _181 ? _181->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_180,_181,_182,_183,false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _184,    std::shared_ptr< monty::ndarray< int,1 > > _185,    long long _186,    long long _187) { mosek::fusion::p_Sort::argsort(_184,_185,_186,_187); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _184,std::shared_ptr< monty::ndarray< int,1 > > _185,long long _186,long long _187){
  _checked_ptr_1<long long> _ptr__184(_184 ? _184->raw() : nullptr, _184 ? _184->size(0) : 0);
  _checked_ptr_1<int> _ptr__185(_185 ? _185->raw() : nullptr, _185 ? _185->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_184,_185,_186,_187,false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _188,    std::shared_ptr< monty::ndarray< long long,1 > > _189,    std::shared_ptr< monty::ndarray< long long,1 > > _190,    long long _191,    long long _192) { mosek::fusion::p_Sort::argsort(_188,_189,_190,_191,_192); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _188,std::shared_ptr< monty::ndarray< long long,1 > > _189,std::shared_ptr< monty::ndarray< long long,1 > > _190,long long _191,long long _192){
  _checked_ptr_1<long long> _ptr__188(_188 ? _188->raw() : nullptr, _188 ? _188->size(0) : 0);
  _checked_ptr_1<long long> _ptr__189(_189 ? _189->raw() : nullptr, _189 ? _189->size(0) : 0);
  _checked_ptr_1<long long> _ptr__190(_190 ? _190->raw() : nullptr, _190 ? _190->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_188,_189,_190,_191,_192,false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _193,    std::shared_ptr< monty::ndarray< int,1 > > _194,    std::shared_ptr< monty::ndarray< int,1 > > _195,    long long _196,    long long _197) { mosek::fusion::p_Sort::argsort(_193,_194,_195,_196,_197); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _193,std::shared_ptr< monty::ndarray< int,1 > > _194,std::shared_ptr< monty::ndarray< int,1 > > _195,long long _196,long long _197){
  _checked_ptr_1<long long> _ptr__193(_193 ? _193->raw() : nullptr, _193 ? _193->size(0) : 0);
  _checked_ptr_1<int> _ptr__194(_194 ? _194->raw() : nullptr, _194 ? _194->size(0) : 0);
  _checked_ptr_1<int> _ptr__195(_195 ? _195->raw() : nullptr, _195 ? _195->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_193,_194,_195,_196,_197,false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _198,    std::shared_ptr< monty::ndarray< long long,1 > > _199,    long long _200,    long long _201,    bool _202) { mosek::fusion::p_Sort::argsort(_198,_199,_200,_201,_202); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _198,std::shared_ptr< monty::ndarray< long long,1 > > _199,long long _200,long long _201,bool _202){
  _checked_ptr_1<long long> _ptr__198(_198 ? _198->raw() : nullptr, _198 ? _198->size(0) : 0);
  _checked_ptr_1<long long> _ptr__199(_199 ? _199->raw() : nullptr, _199 ? _199->size(0) : 0);
  if (((!_202) || ((_201 - _200) < (int)16)))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_198,_199,_200,_201);
    }
  }
  else if((!::mosek::fusion::p_Sort::issorted(_198,_199,_200,_201,_202)))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _203 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)4)));
      _checked_ptr_1<long long> _ptr__203(_203 ? _203->raw() : nullptr,_203 ? _203->size(0) : 0);
      int _204 = (int)2;
      ::mosek::fusion::p_Sort::getminmax(_198,_199,nullptr,_200,_201,_203);
      if (((_ptr__203[(int)1] - _ptr__203[(int)0]) < safe_mul( _204,(_201 - _200) )))
      {
        {
          ::mosek::fusion::p_Sort::argbucketsort(_198,_199,_200,_201,_ptr__203[(int)0],_ptr__203[(int)1]);
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::argsort(_198,_199,_200,_201);
        }
      }
    }
  }
  {}
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _205,    std::shared_ptr< monty::ndarray< int,1 > > _206,    long long _207,    long long _208,    bool _209) { mosek::fusion::p_Sort::argsort(_205,_206,_207,_208,_209); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _205,std::shared_ptr< monty::ndarray< int,1 > > _206,long long _207,long long _208,bool _209){
  _checked_ptr_1<long long> _ptr__205(_205 ? _205->raw() : nullptr, _205 ? _205->size(0) : 0);
  _checked_ptr_1<int> _ptr__206(_206 ? _206->raw() : nullptr, _206 ? _206->size(0) : 0);
  if (((!_209) || ((_208 - _207) < (int)16)))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_205,_206,_207,_208);
    }
  }
  else if((!::mosek::fusion::p_Sort::issorted(_205,_206,_207,_208,_209)))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _210 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)4)));
      _checked_ptr_1<int> _ptr__210(_210 ? _210->raw() : nullptr,_210 ? _210->size(0) : 0);
      int _211 = (int)2;
      ::mosek::fusion::p_Sort::getminmax(_205,_206,nullptr,_207,_208,_210);
      if (((_ptr__210[(int)1] - _ptr__210[(int)0]) < safe_mul( _211,(_208 - _207) )))
      {
        {
          ::mosek::fusion::p_Sort::argbucketsort(_205,_206,_207,_208,_ptr__210[(int)0],_ptr__210[(int)1]);
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::argsort(_205,_206,_207,_208);
        }
      }
    }
  }
  {}
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _212,    std::shared_ptr< monty::ndarray< long long,1 > > _213,    std::shared_ptr< monty::ndarray< long long,1 > > _214,    long long _215,    long long _216,    bool _217) { mosek::fusion::p_Sort::argsort(_212,_213,_214,_215,_216,_217); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _212,std::shared_ptr< monty::ndarray< long long,1 > > _213,std::shared_ptr< monty::ndarray< long long,1 > > _214,long long _215,long long _216,bool _217){
  _checked_ptr_1<long long> _ptr__212(_212 ? _212->raw() : nullptr, _212 ? _212->size(0) : 0);
  _checked_ptr_1<long long> _ptr__213(_213 ? _213->raw() : nullptr, _213 ? _213->size(0) : 0);
  _checked_ptr_1<long long> _ptr__214(_214 ? _214->raw() : nullptr, _214 ? _214->size(0) : 0);
  if (((!_217) || ((_216 - _215) < (int)16)))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_212,_213,_214,_215,_216);
    }
  }
  else if((!::mosek::fusion::p_Sort::issorted(_212,_213,_214,_215,_216,_217)))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _218 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)4)));
      _checked_ptr_1<long long> _ptr__218(_218 ? _218->raw() : nullptr,_218 ? _218->size(0) : 0);
      int _219 = (int)2;
      ::mosek::fusion::p_Sort::getminmax(_212,_213,_214,_215,_216,_218);
      if ((((_ptr__218[(int)1] - _ptr__218[(int)0]) < safe_mul( _219,(_216 - _215) )) && ((_ptr__218[(int)3] - _ptr__218[(int)2]) < safe_mul( _219,(_216 - _215) ))))
      {
        {
          ::mosek::fusion::p_Sort::argbucketsort(_212,_214,_215,_216,_ptr__218[(int)2],_ptr__218[(int)3]);
          ::mosek::fusion::p_Sort::argbucketsort(_212,_213,_215,_216,_ptr__218[(int)0],_ptr__218[(int)1]);
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::argsort(_212,_213,_214,_215,_216);
        }
      }
    }
  }
  {}
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _220,    std::shared_ptr< monty::ndarray< int,1 > > _221,    std::shared_ptr< monty::ndarray< int,1 > > _222,    long long _223,    long long _224,    bool _225) { mosek::fusion::p_Sort::argsort(_220,_221,_222,_223,_224,_225); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _220,std::shared_ptr< monty::ndarray< int,1 > > _221,std::shared_ptr< monty::ndarray< int,1 > > _222,long long _223,long long _224,bool _225){
  _checked_ptr_1<long long> _ptr__220(_220 ? _220->raw() : nullptr, _220 ? _220->size(0) : 0);
  _checked_ptr_1<int> _ptr__221(_221 ? _221->raw() : nullptr, _221 ? _221->size(0) : 0);
  _checked_ptr_1<int> _ptr__222(_222 ? _222->raw() : nullptr, _222 ? _222->size(0) : 0);
  if (((!_225) || ((_224 - _223) < (int)16)))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_220,_221,_222,_223,_224);
    }
  }
  else if((!::mosek::fusion::p_Sort::issorted(_220,_221,_222,_223,_224,_225)))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _226 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)4)));
      _checked_ptr_1<int> _ptr__226(_226 ? _226->raw() : nullptr,_226 ? _226->size(0) : 0);
      int _227 = (int)2;
      ::mosek::fusion::p_Sort::getminmax(_220,_221,_222,_223,_224,_226);
      if ((((_ptr__226[(int)1] - _ptr__226[(int)0]) < safe_mul( _227,(_224 - _223) )) && ((_ptr__226[(int)3] - _ptr__226[(int)2]) < safe_mul( _227,(_224 - _223) ))))
      {
        {
          ::mosek::fusion::p_Sort::argbucketsort(_220,_222,_223,_224,_ptr__226[(int)2],_ptr__226[(int)3]);
          ::mosek::fusion::p_Sort::argbucketsort(_220,_221,_223,_224,_ptr__226[(int)0],_ptr__226[(int)1]);
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::argsort(_220,_221,_222,_223,_224);
        }
      }
    }
  }
  {}
}
void mosek::fusion::Sort::argbucketsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _228,    std::shared_ptr< monty::ndarray< long long,1 > > _229,    long long _230,    long long _231,    long long _232,    long long _233) { mosek::fusion::p_Sort::argbucketsort(_228,_229,_230,_231,_232,_233); }void mosek::fusion::p_Sort::argbucketsort(std::shared_ptr< monty::ndarray< long long,1 > > _228,std::shared_ptr< monty::ndarray< long long,1 > > _229,long long _230,long long _231,long long _232,long long _233){
  _checked_ptr_1<long long> _ptr__228(_228 ? _228->raw() : nullptr, _228 ? _228->size(0) : 0);
  _checked_ptr_1<long long> _ptr__229(_229 ? _229->raw() : nullptr, _229 ? _229->size(0) : 0);
  ::mosek::fusion::Utils::Tools::bucketsort(_228,_230,_231,_229,_232,_233);
}
void mosek::fusion::Sort::argbucketsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _234,    std::shared_ptr< monty::ndarray< int,1 > > _235,    long long _236,    long long _237,    int _238,    int _239) { mosek::fusion::p_Sort::argbucketsort(_234,_235,_236,_237,_238,_239); }void mosek::fusion::p_Sort::argbucketsort(std::shared_ptr< monty::ndarray< long long,1 > > _234,std::shared_ptr< monty::ndarray< int,1 > > _235,long long _236,long long _237,int _238,int _239){
  _checked_ptr_1<long long> _ptr__234(_234 ? _234->raw() : nullptr, _234 ? _234->size(0) : 0);
  _checked_ptr_1<int> _ptr__235(_235 ? _235->raw() : nullptr, _235 ? _235->size(0) : 0);
  ::mosek::fusion::Utils::Tools::bucketsort(_234,_236,_237,_235,_238,_239);
}
void mosek::fusion::Sort::getminmax  ( std::shared_ptr< monty::ndarray< long long,1 > > _240,    std::shared_ptr< monty::ndarray< long long,1 > > _241,    std::shared_ptr< monty::ndarray< long long,1 > > _242,    long long _243,    long long _244,    std::shared_ptr< monty::ndarray< long long,1 > > _245) { mosek::fusion::p_Sort::getminmax(_240,_241,_242,_243,_244,_245); }void mosek::fusion::p_Sort::getminmax(std::shared_ptr< monty::ndarray< long long,1 > > _240,std::shared_ptr< monty::ndarray< long long,1 > > _241,std::shared_ptr< monty::ndarray< long long,1 > > _242,long long _243,long long _244,std::shared_ptr< monty::ndarray< long long,1 > > _245){
  _checked_ptr_1<long long> _ptr__240(_240 ? _240->raw() : nullptr, _240 ? _240->size(0) : 0);
  _checked_ptr_1<long long> _ptr__241(_241 ? _241->raw() : nullptr, _241 ? _241->size(0) : 0);
  _checked_ptr_1<long long> _ptr__242(_242 ? _242->raw() : nullptr, _242 ? _242->size(0) : 0);
  _checked_ptr_1<long long> _ptr__245(_245 ? _245->raw() : nullptr, _245 ? _245->size(0) : 0);
  _ptr__245[(int)0] = _ptr__241[_ptr__240[_243]];
  _ptr__245[(int)1] = _ptr__241[_ptr__240[_243]];
  long long _8635 = safe_add( _243,(int)1 );
  long long _8636 = _244;
  for (long long _246 = _8635; _246 < _8636; ++_246)
  {
    {
      if ((_ptr__245[(int)0] > _ptr__241[_ptr__240[_246]]))
      {
        {
          _ptr__245[(int)0] = _ptr__241[_ptr__240[_246]];
        }
      }
      {}
      if ((_ptr__245[(int)1] < _ptr__241[_ptr__240[_246]]))
      {
        {
          _ptr__245[(int)1] = _ptr__241[_ptr__240[_246]];
        }
      }
      {}
    }
  }
  if ((NULL != _242.get()))
  {
    {
      _ptr__245[(int)2] = _ptr__242[_ptr__240[_243]];
      _ptr__245[(int)3] = _ptr__242[_ptr__240[_243]];
      long long _8637 = safe_add( _243,(int)1 );
      long long _8638 = _244;
      for (long long _247 = _8637; _247 < _8638; ++_247)
      {
        {
          if ((_ptr__245[(int)2] > _ptr__242[_ptr__240[_247]]))
          {
            {
              _ptr__245[(int)2] = _ptr__242[_ptr__240[_247]];
            }
          }
          {}
          if ((_ptr__245[(int)3] < _ptr__242[_ptr__240[_247]]))
          {
            {
              _ptr__245[(int)3] = _ptr__242[_ptr__240[_247]];
            }
          }
          {}
        }
      }
    }
  }
  {}
}
void mosek::fusion::Sort::getminmax  ( std::shared_ptr< monty::ndarray< long long,1 > > _248,    std::shared_ptr< monty::ndarray< int,1 > > _249,    std::shared_ptr< monty::ndarray< int,1 > > _250,    long long _251,    long long _252,    std::shared_ptr< monty::ndarray< int,1 > > _253) { mosek::fusion::p_Sort::getminmax(_248,_249,_250,_251,_252,_253); }void mosek::fusion::p_Sort::getminmax(std::shared_ptr< monty::ndarray< long long,1 > > _248,std::shared_ptr< monty::ndarray< int,1 > > _249,std::shared_ptr< monty::ndarray< int,1 > > _250,long long _251,long long _252,std::shared_ptr< monty::ndarray< int,1 > > _253){
  _checked_ptr_1<long long> _ptr__248(_248 ? _248->raw() : nullptr, _248 ? _248->size(0) : 0);
  _checked_ptr_1<int> _ptr__249(_249 ? _249->raw() : nullptr, _249 ? _249->size(0) : 0);
  _checked_ptr_1<int> _ptr__250(_250 ? _250->raw() : nullptr, _250 ? _250->size(0) : 0);
  _checked_ptr_1<int> _ptr__253(_253 ? _253->raw() : nullptr, _253 ? _253->size(0) : 0);
  _ptr__253[(int)0] = _ptr__249[_ptr__248[_251]];
  _ptr__253[(int)1] = _ptr__249[_ptr__248[_251]];
  long long _8639 = safe_add( _251,(int)1 );
  long long _8640 = _252;
  for (long long _254 = _8639; _254 < _8640; ++_254)
  {
    {
      if ((_ptr__253[(int)0] > _ptr__249[_ptr__248[_254]]))
      {
        {
          _ptr__253[(int)0] = _ptr__249[_ptr__248[_254]];
        }
      }
      {}
      if ((_ptr__253[(int)1] < _ptr__249[_ptr__248[_254]]))
      {
        {
          _ptr__253[(int)1] = _ptr__249[_ptr__248[_254]];
        }
      }
      {}
    }
  }
  if ((NULL != _250.get()))
  {
    {
      _ptr__253[(int)2] = _ptr__250[_ptr__248[_251]];
      _ptr__253[(int)3] = _ptr__250[_ptr__248[_251]];
      long long _8641 = safe_add( _251,(int)1 );
      long long _8642 = _252;
      for (long long _255 = _8641; _255 < _8642; ++_255)
      {
        {
          if ((_ptr__253[(int)2] > _ptr__250[_ptr__248[_255]]))
          {
            {
              _ptr__253[(int)2] = _ptr__250[_ptr__248[_255]];
            }
          }
          {}
          if ((_ptr__253[(int)3] < _ptr__250[_ptr__248[_255]]))
          {
            {
              _ptr__253[(int)3] = _ptr__250[_ptr__248[_255]];
            }
          }
          {}
        }
      }
    }
  }
  {}
}
bool mosek::fusion::Sort::issorted  ( std::shared_ptr< monty::ndarray< long long,1 > > _256,    std::shared_ptr< monty::ndarray< long long,1 > > _257,    long long _258,    long long _259,    bool _260) { return mosek::fusion::p_Sort::issorted(_256,_257,_258,_259,_260); }bool mosek::fusion::p_Sort::issorted(std::shared_ptr< monty::ndarray< long long,1 > > _256,std::shared_ptr< monty::ndarray< long long,1 > > _257,long long _258,long long _259,bool _260){
  _checked_ptr_1<long long> _ptr__256(_256 ? _256->raw() : nullptr, _256 ? _256->size(0) : 0);
  _checked_ptr_1<long long> _ptr__257(_257 ? _257->raw() : nullptr, _257 ? _257->size(0) : 0);
  long long _8643 = _258;
  long long _8644 = (_259 - (int)1);
  for (long long _261 = _8643; _261 < _8644; ++_261)
  {
    {
      if ((_ptr__257[_ptr__256[_261]] > _ptr__257[_ptr__256[safe_add( _261,(int)1 )]]))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
bool mosek::fusion::Sort::issorted  ( std::shared_ptr< monty::ndarray< long long,1 > > _262,    std::shared_ptr< monty::ndarray< int,1 > > _263,    long long _264,    long long _265,    bool _266) { return mosek::fusion::p_Sort::issorted(_262,_263,_264,_265,_266); }bool mosek::fusion::p_Sort::issorted(std::shared_ptr< monty::ndarray< long long,1 > > _262,std::shared_ptr< monty::ndarray< int,1 > > _263,long long _264,long long _265,bool _266){
  _checked_ptr_1<long long> _ptr__262(_262 ? _262->raw() : nullptr, _262 ? _262->size(0) : 0);
  _checked_ptr_1<int> _ptr__263(_263 ? _263->raw() : nullptr, _263 ? _263->size(0) : 0);
  long long _8645 = _264;
  long long _8646 = (_265 - (int)1);
  for (long long _267 = _8645; _267 < _8646; ++_267)
  {
    {
      if ((_ptr__263[_ptr__262[_267]] > _ptr__263[_ptr__262[safe_add( _267,(int)1 )]]))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
bool mosek::fusion::Sort::issorted  ( std::shared_ptr< monty::ndarray< long long,1 > > _268,    std::shared_ptr< monty::ndarray< long long,1 > > _269,    std::shared_ptr< monty::ndarray< long long,1 > > _270,    long long _271,    long long _272,    bool _273) { return mosek::fusion::p_Sort::issorted(_268,_269,_270,_271,_272,_273); }bool mosek::fusion::p_Sort::issorted(std::shared_ptr< monty::ndarray< long long,1 > > _268,std::shared_ptr< monty::ndarray< long long,1 > > _269,std::shared_ptr< monty::ndarray< long long,1 > > _270,long long _271,long long _272,bool _273){
  _checked_ptr_1<long long> _ptr__268(_268 ? _268->raw() : nullptr, _268 ? _268->size(0) : 0);
  _checked_ptr_1<long long> _ptr__269(_269 ? _269->raw() : nullptr, _269 ? _269->size(0) : 0);
  _checked_ptr_1<long long> _ptr__270(_270 ? _270->raw() : nullptr, _270 ? _270->size(0) : 0);
  long long _8647 = _271;
  long long _8648 = (_272 - (int)1);
  for (long long _274 = _8647; _274 < _8648; ++_274)
  {
    {
      if (((_ptr__269[_ptr__268[_274]] > _ptr__269[_ptr__268[safe_add( _274,(int)1 )]]) || ((_ptr__269[_ptr__268[safe_add( _274,(int)1 )]] == _ptr__269[_ptr__268[_274]]) && (_ptr__270[_ptr__268[_274]] > _ptr__270[_ptr__268[safe_add( _274,(int)1 )]]))))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
bool mosek::fusion::Sort::issorted  ( std::shared_ptr< monty::ndarray< long long,1 > > _275,    std::shared_ptr< monty::ndarray< int,1 > > _276,    std::shared_ptr< monty::ndarray< int,1 > > _277,    long long _278,    long long _279,    bool _280) { return mosek::fusion::p_Sort::issorted(_275,_276,_277,_278,_279,_280); }bool mosek::fusion::p_Sort::issorted(std::shared_ptr< monty::ndarray< long long,1 > > _275,std::shared_ptr< monty::ndarray< int,1 > > _276,std::shared_ptr< monty::ndarray< int,1 > > _277,long long _278,long long _279,bool _280){
  _checked_ptr_1<long long> _ptr__275(_275 ? _275->raw() : nullptr, _275 ? _275->size(0) : 0);
  _checked_ptr_1<int> _ptr__276(_276 ? _276->raw() : nullptr, _276 ? _276->size(0) : 0);
  _checked_ptr_1<int> _ptr__277(_277 ? _277->raw() : nullptr, _277 ? _277->size(0) : 0);
  long long _8649 = _278;
  long long _8650 = (_279 - (int)1);
  for (long long _281 = _8649; _281 < _8650; ++_281)
  {
    {
      if (((_ptr__276[_ptr__275[_281]] > _ptr__276[_ptr__275[safe_add( _281,(int)1 )]]) || ((_ptr__276[_ptr__275[_281]] == _ptr__276[_ptr__275[safe_add( _281,(int)1 )]]) && (_ptr__277[_ptr__275[_281]] > _ptr__277[_ptr__275[safe_add( _281,(int)1 )]]))))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
void mosek::fusion::p_Sort::destroy(){}void mosek::fusion::Sort::destroy() { mosek::fusion::p_Sort::_get_impl(this)->destroy(); }mosek::fusion::IndexCounter::IndexCounter(mosek::fusion::p_IndexCounter *_impl) : _impl(_impl) { /*std::cout << "IndexCounter() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::IndexCounter::~IndexCounter() { delete _impl; _impl = nullptr; }mosek::fusion::p_IndexCounter::p_IndexCounter  (::mosek::fusion::IndexCounter * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::IndexCounter::t mosek::fusion::p_IndexCounter::_new_IndexCounter  (std::shared_ptr< monty::ndarray< int,1 > > _282){ return new mosek::fusion::IndexCounter(_282); }mosek::fusion::IndexCounter::IndexCounter  (std::shared_ptr< monty::ndarray< int,1 > > _282) :    IndexCounter(new mosek::fusion::p_IndexCounter(this)){ mosek::fusion::p_IndexCounter::_get_impl(this)->_initialize(_282); }void mosek::fusion::p_IndexCounter::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _282){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__282(_282 ? _282->raw() : nullptr, _282 ? _282->size(0) : 0);
    n = (int)((_282)->size(0));
    ii = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(n)));
    st = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(n)));
    start = (long long)0;
    strides = ::mosek::fusion::p_Set::strides(_282);
    std::vector<int> _8651;
    for (int _283 = (int)0, _8652 = (int)((_282)->size(0)); _283 < _8652 ; ++_283)
    {
      _8651.push_back(_ptr__282[_283]);
    }
    auto _8653 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8651.size()),_8651.begin(),_8651.end()));
    dims = _8653;
  }
}mosek::fusion::IndexCounter::t mosek::fusion::p_IndexCounter::_new_IndexCounter  (long long _284,    std::shared_ptr< monty::ndarray< int,1 > > _285,    std::shared_ptr< monty::ndarray< int,1 > > _286){ return new mosek::fusion::IndexCounter(_284,_285,_286); }mosek::fusion::IndexCounter::IndexCounter  (long long _284,    std::shared_ptr< monty::ndarray< int,1 > > _285,    std::shared_ptr< monty::ndarray< int,1 > > _286) :    IndexCounter(new mosek::fusion::p_IndexCounter(this)){ mosek::fusion::p_IndexCounter::_get_impl(this)->_initialize(_284,_285,_286); }void mosek::fusion::p_IndexCounter::_initialize  (long long _284,    std::shared_ptr< monty::ndarray< int,1 > > _285,    std::shared_ptr< monty::ndarray< int,1 > > _286){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__285(_285 ? _285->raw() : nullptr, _285 ? _285->size(0) : 0);
    _checked_ptr_1<int> _ptr__286(_286 ? _286->raw() : nullptr, _286 ? _286->size(0) : 0);
    int _287 = (int)((_286)->size(0));
    n = (int)((_285)->size(0));
    ii = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(n)));
    st = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(n)));
    int _8654 = (int)0;
    int _8655 = n;
    for (int _288 = _8654; _288 < _8655; ++_288)
    {
      {
        ((*st)(_288)) = _284;
      }
    }
    strides = ::mosek::fusion::p_Set::strides(_286);
    dims = _285;
    start = _284;
  }
}mosek::fusion::IndexCounter::t mosek::fusion::p_IndexCounter::_new_IndexCounter  (long long _289,    std::shared_ptr< monty::ndarray< int,1 > > _290,    std::shared_ptr< monty::ndarray< long long,1 > > _291){ return new mosek::fusion::IndexCounter(_289,_290,_291); }mosek::fusion::IndexCounter::IndexCounter  (long long _289,    std::shared_ptr< monty::ndarray< int,1 > > _290,    std::shared_ptr< monty::ndarray< long long,1 > > _291) :    IndexCounter(new mosek::fusion::p_IndexCounter(this)){ mosek::fusion::p_IndexCounter::_get_impl(this)->_initialize(_289,_290,_291); }void mosek::fusion::p_IndexCounter::_initialize  (long long _289,    std::shared_ptr< monty::ndarray< int,1 > > _290,    std::shared_ptr< monty::ndarray< long long,1 > > _291){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__290(_290 ? _290->raw() : nullptr, _290 ? _290->size(0) : 0);
    _checked_ptr_1<long long> _ptr__291(_291 ? _291->raw() : nullptr, _291 ? _291->size(0) : 0);
    n = (int)((_290)->size(0));
    ii = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(n)));
    st = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(n)));
    int _8656 = (int)0;
    int _8657 = n;
    for (int _292 = _8656; _292 < _8657; ++_292)
    {
      {
        ((*st)(_292)) = _289;
      }
    }
    strides = _291;
    dims = _290;
    start = _289;
  }
}bool mosek::fusion::IndexCounter :: atEnd() { return mosek::fusion::p_IndexCounter::_get_impl(this)->atEnd(); }bool mosek::fusion::p_IndexCounter::atEnd(){
  return (((*ii)((n - (int)1))) >= ((*dims)((n - (int)1))));
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::IndexCounter :: getIndex() { return mosek::fusion::p_IndexCounter::_get_impl(this)->getIndex(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_IndexCounter::getIndex(){
  return ii;
}
long long mosek::fusion::IndexCounter :: next() { return mosek::fusion::p_IndexCounter::_get_impl(this)->next(); }long long mosek::fusion::p_IndexCounter::next(){
  long long _293 = _pubthis->get();
  _pubthis->inc();
  return _293;
}
long long mosek::fusion::IndexCounter :: get() { return mosek::fusion::p_IndexCounter::_get_impl(this)->get(); }long long mosek::fusion::p_IndexCounter::get(){
  return ((*st)((int)0));
}
void mosek::fusion::IndexCounter :: inc() { mosek::fusion::p_IndexCounter::_get_impl(this)->inc(); }void mosek::fusion::p_IndexCounter::inc(){
  ++ ((*ii)((int)0));
  ((*st)((int)0)) = safe_add( ((*st)((int)0)),((*strides)((n - (int)1))) );
  int _294;
  {
    _294 = (int)0;
    for(;((_294 < (n - (int)1)) && (((*ii)(_294)) == ((*dims)(((n - _294) - (int)1)))));++ _294)
    {
      {
        ((*ii)(_294)) = (int)0;
        ++ ((*ii)(safe_add( _294,(int)1 )));
        ((*st)(safe_add( _294,(int)1 ))) = safe_add( ((*st)(safe_add( _294,(int)1 ))),((*strides)(((n - _294) - (int)2))) );
      }
    }
  }
  int _8658 = (int)0;
  int _8659 = _294;
  for (int _295 = _8658; _295 < _8659; ++_295)
  {
    {
      ((*st)(_295)) = ((*st)(_294));
    }
  }
}
void mosek::fusion::IndexCounter :: reset() { mosek::fusion::p_IndexCounter::_get_impl(this)->reset(); }void mosek::fusion::p_IndexCounter::reset(){
  st = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(n)));
  int _8660 = (int)0;
  int _8661 = n;
  for (int _296 = _8660; _296 < _8661; ++_296)
  {
    {
      ((*st)(_296)) = start;
    }
  }
}
void mosek::fusion::p_IndexCounter::destroy(){dims.reset();strides.reset();st.reset();ii.reset();}void mosek::fusion::IndexCounter::destroy() { mosek::fusion::p_IndexCounter::_get_impl(this)->destroy(); }mosek::fusion::CommonTools::CommonTools(mosek::fusion::p_CommonTools *_impl) : _impl(_impl) { /*std::cout << "CommonTools() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::CommonTools::~CommonTools() { delete _impl; _impl = nullptr; }mosek::fusion::p_CommonTools::p_CommonTools  (::mosek::fusion::CommonTools * _pubthis) :     _pubthis(_pubthis){}std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::CommonTools::resize  ( std::shared_ptr< monty::ndarray< long long,1 > > _297,    int _298) { return mosek::fusion::p_CommonTools::resize(_297,_298); }std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_CommonTools::resize(std::shared_ptr< monty::ndarray< long long,1 > > _297,int _298){
  _checked_ptr_1<long long> _ptr__297(_297 ? _297->raw() : nullptr, _297 ? _297->size(0) : 0);
  if ((_298 == (int)((_297)->size(0))))
  {
    {
      return _297;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _299 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_298)));
      _checked_ptr_1<long long> _ptr__299(_299 ? _299->raw() : nullptr,_299 ? _299->size(0) : 0);
      if ((_298 > (int)((_297)->size(0))))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_297,(int)0,_299,(int)0,(int)((_297)->size(0)));
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_297,(int)0,_299,(int)0,_298);
        }
      }
      return _299;
    }
  }
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::CommonTools::resize  ( std::shared_ptr< monty::ndarray< int,1 > > _300,    int _301) { return mosek::fusion::p_CommonTools::resize(_300,_301); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_CommonTools::resize(std::shared_ptr< monty::ndarray< int,1 > > _300,int _301){
  _checked_ptr_1<int> _ptr__300(_300 ? _300->raw() : nullptr, _300 ? _300->size(0) : 0);
  if ((_301 == (int)((_300)->size(0))))
  {
    {
      return _300;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _302 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_301)));
      _checked_ptr_1<int> _ptr__302(_302 ? _302->raw() : nullptr,_302 ? _302->size(0) : 0);
      if ((_301 > (int)((_300)->size(0))))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_300,(int)0,_302,(int)0,(int)((_300)->size(0)));
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_300,(int)0,_302,(int)0,_301);
        }
      }
      return _302;
    }
  }
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::CommonTools::resize  ( std::shared_ptr< monty::ndarray< double,1 > > _303,    int _304) { return mosek::fusion::p_CommonTools::resize(_303,_304); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_CommonTools::resize(std::shared_ptr< monty::ndarray< double,1 > > _303,int _304){
  _checked_ptr_1<double> _ptr__303(_303 ? _303->raw() : nullptr, _303 ? _303->size(0) : 0);
  if ((_304 == (int)((_303)->size(0))))
  {
    {
      return _303;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _305 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_304)));
      _checked_ptr_1<double> _ptr__305(_305 ? _305->raw() : nullptr,_305 ? _305->size(0) : 0);
      if ((_304 > (int)((_303)->size(0))))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_303,(int)0,_305,(int)0,(int)((_303)->size(0)));
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_303,(int)0,_305,(int)0,_304);
        }
      }
      return _305;
    }
  }
}
int mosek::fusion::CommonTools::binarySearch  ( std::shared_ptr< monty::ndarray< int,1 > > _306,    int _307) { return mosek::fusion::p_CommonTools::binarySearch(_306,_307); }int mosek::fusion::p_CommonTools::binarySearch(std::shared_ptr< monty::ndarray< int,1 > > _306,int _307){
  _checked_ptr_1<int> _ptr__306(_306 ? _306->raw() : nullptr, _306 ? _306->size(0) : 0);
  int _308 = (int)0;
  int _309 = (int)((_306)->size(0));
  if ((_ptr__306[_308] == _307))
  {
    {
      return _308;
    }
  }
  else if((_ptr__306[(_309 - (int)1)] == _307))
  {
    {
      return (_309 - (int)1);
    }
  }
  {}
  while ( (_308 < (_309 - (int)1)) )
  {
    {
      int _310 = ((_309 - _308) / (int)2);
      if ((_307 < _ptr__306[_310]))
      {
        {
          _308 = safe_add( _310,(int)1 );
        }
      }
      else if((_307 > _ptr__306[_310]))
      {
        {
          _309 = _310;
        }
      }
      else
      {
        {
          return _310;
        }
      }
    }
  }
  return (-(int)1);
}
int mosek::fusion::CommonTools::binarySearch  ( std::shared_ptr< monty::ndarray< long long,1 > > _311,    long long _312) { return mosek::fusion::p_CommonTools::binarySearch(_311,_312); }int mosek::fusion::p_CommonTools::binarySearch(std::shared_ptr< monty::ndarray< long long,1 > > _311,long long _312){
  _checked_ptr_1<long long> _ptr__311(_311 ? _311->raw() : nullptr, _311 ? _311->size(0) : 0);
  int _313 = ::mosek::fusion::p_CommonTools::binarySearchL(_311,_312);
  if (((_313 < (int)((_311)->size(0))) && (_ptr__311[_313] == _312)))
  {
    {
      return _313;
    }
  }
  else
  {
    {
      return (-(int)1);
    }
  }
}
int mosek::fusion::CommonTools::binarySearchR  ( std::shared_ptr< monty::ndarray< long long,1 > > _314,    long long _315) { return mosek::fusion::p_CommonTools::binarySearchR(_314,_315); }int mosek::fusion::p_CommonTools::binarySearchR(std::shared_ptr< monty::ndarray< long long,1 > > _314,long long _315){
  _checked_ptr_1<long long> _ptr__314(_314 ? _314->raw() : nullptr, _314 ? _314->size(0) : 0);
  int _316 = (int)0;
  int _317 = (int)((_314)->size(0));
  if ((_ptr__314[_316] > _315))
  {
    {
      return _316;
    }
  }
  {}
  while ( (_316 < (_317 - (int)1)) )
  {
    {
      int _318 = (safe_add( _317,_316 ) / (int)2);
      if ((_315 >= _ptr__314[_318]))
      {
        {
          _316 = _318;
        }
      }
      else
      {
        {
          _317 = _318;
        }
      }
    }
  }
  return _317;
}
int mosek::fusion::CommonTools::binarySearchL  ( std::shared_ptr< monty::ndarray< long long,1 > > _319,    long long _320) { return mosek::fusion::p_CommonTools::binarySearchL(_319,_320); }int mosek::fusion::p_CommonTools::binarySearchL(std::shared_ptr< monty::ndarray< long long,1 > > _319,long long _320){
  _checked_ptr_1<long long> _ptr__319(_319 ? _319->raw() : nullptr, _319 ? _319->size(0) : 0);
  int _321 = (int)0;
  int _322 = (int)((_319)->size(0));
  if ((_320 <= _ptr__319[_321]))
  {
    {
      return _321;
    }
  }
  {}
  while ( (_321 < (_322 - (int)1)) )
  {
    {
      int _323 = (safe_add( _322,_321 ) / (int)2);
      if ((_ptr__319[_323] < _320))
      {
        {
          _321 = _323;
        }
      }
      else
      {
        {
          _322 = _323;
        }
      }
    }
  }
  return _322;
}
void mosek::fusion::CommonTools::ndIncr  ( std::shared_ptr< monty::ndarray< int,1 > > _324,    std::shared_ptr< monty::ndarray< int,1 > > _325,    std::shared_ptr< monty::ndarray< int,1 > > _326) { mosek::fusion::p_CommonTools::ndIncr(_324,_325,_326); }void mosek::fusion::p_CommonTools::ndIncr(std::shared_ptr< monty::ndarray< int,1 > > _324,std::shared_ptr< monty::ndarray< int,1 > > _325,std::shared_ptr< monty::ndarray< int,1 > > _326){
  _checked_ptr_1<int> _ptr__324(_324 ? _324->raw() : nullptr, _324 ? _324->size(0) : 0);
  _checked_ptr_1<int> _ptr__325(_325 ? _325->raw() : nullptr, _325 ? _325->size(0) : 0);
  _checked_ptr_1<int> _ptr__326(_326 ? _326->raw() : nullptr, _326 ? _326->size(0) : 0);
  int _327 = ((int)((_324)->size(0)) - (int)1);
  ++ _ptr__324[_327];
  while ( ((_327 > (int)0) && (_ptr__324[_327] >= _ptr__326[_327])) )
  {
    {
      _ptr__324[_327] = _ptr__325[_327];
      ++ _ptr__324[(_327 - (int)1)];
    }
  }
}
void mosek::fusion::CommonTools::transposeTriplets  ( std::shared_ptr< monty::ndarray< int,1 > > _328,    std::shared_ptr< monty::ndarray< int,1 > > _329,    std::shared_ptr< monty::ndarray< double,1 > > _330,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _331,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _332,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _333,    long long _334,    int _335,    int _336) { mosek::fusion::p_CommonTools::transposeTriplets(_328,_329,_330,_331,_332,_333,_334,_335,_336); }void mosek::fusion::p_CommonTools::transposeTriplets(std::shared_ptr< monty::ndarray< int,1 > > _328,std::shared_ptr< monty::ndarray< int,1 > > _329,std::shared_ptr< monty::ndarray< double,1 > > _330,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _331,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _332,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _333,long long _334,int _335,int _336){
  _checked_ptr_1<int> _ptr__328(_328 ? _328->raw() : nullptr, _328 ? _328->size(0) : 0);
  _checked_ptr_1<int> _ptr__329(_329 ? _329->raw() : nullptr, _329 ? _329->size(0) : 0);
  _checked_ptr_1<double> _ptr__330(_330 ? _330->raw() : nullptr, _330 ? _330->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _337 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _335,(int)2 ))));
  _checked_ptr_1<long long> _ptr__337(_337 ? _337->raw() : nullptr,_337 ? _337->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _338 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _336,(int)2 ))));
  _checked_ptr_1<long long> _ptr__338(_338 ? _338->raw() : nullptr,_338 ? _338->size(0) : 0);
  {
    long long _339 = (long long)0;
    for(;(_339 < _334);++ _339)
    {
      {
        _ptr__338[safe_add( _ptr__329[_339],(int)2 )] = safe_add( _ptr__338[safe_add( _ptr__329[_339],(int)2 )],(int)1 );
        _ptr__337[safe_add( _ptr__328[_339],(int)2 )] = safe_add( _ptr__337[safe_add( _ptr__328[_339],(int)2 )],(int)1 );
      }
    }
  }
  {
    int _340 = (int)1;
    for(;(_340 < _335);++ _340)
    {
      {
        _ptr__337[safe_add( _340,(int)1 )] = safe_add( _ptr__337[safe_add( _340,(int)1 )],_ptr__337[_340] );
      }
    }
  }
  {
    int _341 = (int)1;
    for(;(_341 < _336);++ _341)
    {
      {
        _ptr__338[safe_add( _341,(int)1 )] = safe_add( _ptr__338[safe_add( _341,(int)1 )],_ptr__338[_341] );
      }
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _342 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_334)));
  _checked_ptr_1<long long> _ptr__342(_342 ? _342->raw() : nullptr,_342 ? _342->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _343 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_334)));
  _checked_ptr_1<long long> _ptr__343(_343 ? _343->raw() : nullptr,_343 ? _343->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _344 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_334)));
  _checked_ptr_1<double> _ptr__344(_344 ? _344->raw() : nullptr,_344 ? _344->size(0) : 0);
  int _8662 = (int)0;
  int _8663 = _335;
  for (int _345 = _8662; _345 < _8663; ++_345)
  {
    {
      {
        long long _346 = _ptr__337[_345];
        for(;(_346 < _ptr__337[safe_add( _345,(int)1 )]);++ _346)
        {
          {
            int _347 = _ptr__329[_346];
            long long _348 = _ptr__338[_347];
            _ptr__342[_348] = _345;
            _ptr__343[_348] = _347;
            _ptr__344[_348] = _ptr__330[_346];
            _ptr__338[_347] = safe_add( _348,(int)1 );
          }
        }
      }
    }
  }
  ((*_331)((int)0)) = _343;
  ((*_332)((int)0)) = _342;
  ((*_333)((int)0)) = _344;
}
void mosek::fusion::CommonTools::transposeTriplets  ( std::shared_ptr< monty::ndarray< int,1 > > _349,    std::shared_ptr< monty::ndarray< int,1 > > _350,    std::shared_ptr< monty::ndarray< double,1 > > _351,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _352,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _353,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _354,    long long _355,    int _356,    int _357) { mosek::fusion::p_CommonTools::transposeTriplets(_349,_350,_351,_352,_353,_354,_355,_356,_357); }void mosek::fusion::p_CommonTools::transposeTriplets(std::shared_ptr< monty::ndarray< int,1 > > _349,std::shared_ptr< monty::ndarray< int,1 > > _350,std::shared_ptr< monty::ndarray< double,1 > > _351,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _352,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _353,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _354,long long _355,int _356,int _357){
  _checked_ptr_1<int> _ptr__349(_349 ? _349->raw() : nullptr, _349 ? _349->size(0) : 0);
  _checked_ptr_1<int> _ptr__350(_350 ? _350->raw() : nullptr, _350 ? _350->size(0) : 0);
  _checked_ptr_1<double> _ptr__351(_351 ? _351->raw() : nullptr, _351 ? _351->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _358 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _356,(int)2 ))));
  _checked_ptr_1<long long> _ptr__358(_358 ? _358->raw() : nullptr,_358 ? _358->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _359 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _357,(int)2 ))));
  _checked_ptr_1<long long> _ptr__359(_359 ? _359->raw() : nullptr,_359 ? _359->size(0) : 0);
  {
    long long _360 = (long long)0;
    for(;(_360 < _355);++ _360)
    {
      {
        _ptr__359[safe_add( _ptr__350[_360],(int)2 )] = safe_add( _ptr__359[safe_add( _ptr__350[_360],(int)2 )],(int)1 );
        _ptr__358[safe_add( _ptr__349[_360],(int)2 )] = safe_add( _ptr__358[safe_add( _ptr__349[_360],(int)2 )],(int)1 );
      }
    }
  }
  {
    int _361 = (int)1;
    for(;(_361 < _356);++ _361)
    {
      {
        _ptr__358[safe_add( _361,(int)1 )] = safe_add( _ptr__358[safe_add( _361,(int)1 )],_ptr__358[_361] );
      }
    }
  }
  {
    int _362 = (int)1;
    for(;(_362 < _357);++ _362)
    {
      {
        _ptr__359[safe_add( _362,(int)1 )] = safe_add( _ptr__359[safe_add( _362,(int)1 )],_ptr__359[_362] );
      }
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _363 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_355)));
  _checked_ptr_1<int> _ptr__363(_363 ? _363->raw() : nullptr,_363 ? _363->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _364 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_355)));
  _checked_ptr_1<int> _ptr__364(_364 ? _364->raw() : nullptr,_364 ? _364->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _365 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_355)));
  _checked_ptr_1<double> _ptr__365(_365 ? _365->raw() : nullptr,_365 ? _365->size(0) : 0);
  {
    int _366 = (int)0;
    for(;(_366 < _356);++ _366)
    {
      {
        long long _8664 = _ptr__358[_366];
        long long _8665 = _ptr__358[safe_add( _366,(int)1 )];
        for (long long _367 = _8664; _367 < _8665; ++_367)
        {
          {
            int _368 = _ptr__350[_367];
            long long _369 = _ptr__359[_368];
            _ptr__363[_369] = _366;
            _ptr__364[_369] = _368;
            _ptr__365[_369] = _ptr__351[_367];
            _ptr__359[_368] = safe_add( _369,(int)1 );
          }
        }
      }
    }
  }
  ((*_352)((int)0)) = _364;
  ((*_353)((int)0)) = _363;
  ((*_354)((int)0)) = _365;
}
void mosek::fusion::CommonTools::tripletSort  ( std::shared_ptr< monty::ndarray< int,1 > > _370,    std::shared_ptr< monty::ndarray< int,1 > > _371,    std::shared_ptr< monty::ndarray< double,1 > > _372,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _373,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _374,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _375,    long long _376,    int _377,    int _378) { mosek::fusion::p_CommonTools::tripletSort(_370,_371,_372,_373,_374,_375,_376,_377,_378); }void mosek::fusion::p_CommonTools::tripletSort(std::shared_ptr< monty::ndarray< int,1 > > _370,std::shared_ptr< monty::ndarray< int,1 > > _371,std::shared_ptr< monty::ndarray< double,1 > > _372,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _373,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _374,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _375,long long _376,int _377,int _378){
  _checked_ptr_1<int> _ptr__370(_370 ? _370->raw() : nullptr, _370 ? _370->size(0) : 0);
  _checked_ptr_1<int> _ptr__371(_371 ? _371->raw() : nullptr, _371 ? _371->size(0) : 0);
  _checked_ptr_1<double> _ptr__372(_372 ? _372->raw() : nullptr, _372 ? _372->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _379 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_376)));
  _checked_ptr_1<int> _ptr__379(_379 ? _379->raw() : nullptr,_379 ? _379->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _380 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _378,(int)2 ))));
  _checked_ptr_1<long long> _ptr__380(_380 ? _380->raw() : nullptr,_380 ? _380->size(0) : 0);
  long long _8666 = (long long)0;
  long long _8667 = _376;
  for (long long _381 = _8666; _381 < _8667; ++_381)
  {
    {
      _ptr__380[safe_add( _ptr__371[_381],(int)2 )] = safe_add( _ptr__380[safe_add( _ptr__371[_381],(int)2 )],(int)1 );
    }
  }
  int _8668 = (int)1;
  int _8669 = _378;
  for (int _382 = _8668; _382 < _8669; ++_382)
  {
    {
      _ptr__380[safe_add( _382,(int)1 )] = safe_add( _ptr__380[safe_add( _382,(int)1 )],_ptr__380[_382] );
    }
  }
  int _8670 = (int)0;
  int _8671 = (int)_376;
  for (int _383 = _8670; _383 < _8671; ++_383)
  {
    {
      int _384 = _ptr__371[_383];
      _ptr__379[_ptr__380[safe_add( _384,(int)1 )]] = _383;
      _ptr__380[safe_add( _384,(int)1 )] = safe_add( _ptr__380[safe_add( _384,(int)1 )],(int)1 );
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _385 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _377,(int)2 ))));
  _checked_ptr_1<long long> _ptr__385(_385 ? _385->raw() : nullptr,_385 ? _385->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _386 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_376)));
  _checked_ptr_1<int> _ptr__386(_386 ? _386->raw() : nullptr,_386 ? _386->size(0) : 0);
  {
    int _387 = (int)0;
    for(;(_387 < _376);++ _387)
    {
      {
        _ptr__385[safe_add( _ptr__370[_387],(int)2 )] = safe_add( _ptr__385[safe_add( _ptr__370[_387],(int)2 )],(int)1 );
      }
    }
  }
  {
    int _388 = (int)1;
    for(;(_388 < _377);++ _388)
    {
      {
        _ptr__385[safe_add( _388,(int)1 )] = safe_add( _ptr__385[safe_add( _388,(int)1 )],_ptr__385[_388] );
      }
    }
  }
  {
    int _389 = (int)0;
    for(;(_389 < _378);++ _389)
    {
      {
        {
          long long _390 = _ptr__380[_389];
          for(;(_390 < _ptr__380[safe_add( _389,(int)1 )]);++ _390)
          {
            {
              int _391 = _ptr__370[_ptr__379[_390]];
              _ptr__386[_ptr__385[safe_add( _391,(int)1 )]] = _ptr__379[_390];
              _ptr__385[safe_add( _391,(int)1 )] = safe_add( _ptr__385[safe_add( _391,(int)1 )],(int)1 );
            }
          }
        }
      }
    }
  }
  int _392 = (int)1;
  {
    int _393 = _ptr__370[_ptr__386[(int)0]];
    int _394 = _ptr__371[_ptr__386[(int)0]];
    {
      int _395 = (int)1;
      for(;(_395 < _376);++ _395)
      {
        {
          int _396 = _ptr__386[_395];
          if (((_393 != _ptr__370[_396]) || (_394 != _ptr__371[_396])))
          {
            {
              _393 = _ptr__370[_396];
              _394 = _ptr__371[_396];
              ++ _392;
            }
          }
          {}
        }
      }
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _397 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_392)));
  _checked_ptr_1<int> _ptr__397(_397 ? _397->raw() : nullptr,_397 ? _397->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _398 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_392)));
  _checked_ptr_1<int> _ptr__398(_398 ? _398->raw() : nullptr,_398 ? _398->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _399 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_392)));
  _checked_ptr_1<double> _ptr__399(_399 ? _399->raw() : nullptr,_399 ? _399->size(0) : 0);
  {
    int _400 = _ptr__386[(int)0];
    _ptr__397[(int)0] = _ptr__370[_400];
    _ptr__398[(int)0] = _ptr__371[_400];
    _ptr__399[(int)0] = _ptr__372[_400];
  }
  int _401 = (int)1;
  int _8672 = (int)1;
  long long _8673 = _376;
  for (long long _402 = _8672; _402 < _8673; ++_402)
  {
    {
      int _403 = _ptr__386[_402];
      if (((_ptr__397[(_401 - (int)1)] == _ptr__370[_403]) && (_ptr__398[(_401 - (int)1)] == _ptr__371[_403])))
      {
        {
          _ptr__399[(_401 - (int)1)] = (_ptr__399[(_401 - (int)1)] + _ptr__372[_403]);
        }
      }
      else
      {
        {
          _ptr__397[_401] = _ptr__370[_403];
          _ptr__398[_401] = _ptr__371[_403];
          _ptr__399[_401] = _ptr__372[_403];
          ++ _401;
        }
      }
    }
  }
  ((*_373)((int)0)) = _397;
  ((*_374)((int)0)) = _398;
  ((*_375)((int)0)) = _399;
}
void mosek::fusion::CommonTools::argMSort  ( std::shared_ptr< monty::ndarray< int,1 > > _404,    std::shared_ptr< monty::ndarray< int,1 > > _405) { mosek::fusion::p_CommonTools::argMSort(_404,_405); }void mosek::fusion::p_CommonTools::argMSort(std::shared_ptr< monty::ndarray< int,1 > > _404,std::shared_ptr< monty::ndarray< int,1 > > _405){
  _checked_ptr_1<int> _ptr__404(_404 ? _404->raw() : nullptr, _404 ? _404->size(0) : 0);
  _checked_ptr_1<int> _ptr__405(_405 ? _405->raw() : nullptr, _405 ? _405->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _406 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_404)->size(0)))));
  _checked_ptr_1<int> _ptr__406(_406 ? _406->raw() : nullptr,_406 ? _406->size(0) : 0);
  bool _407 = false;
  {
    int _408 = (int)1;
    for(;(_408 < (int)((_404)->size(0)));_408 *= (int)2)
    {
      {
        _407 = (!_407);
        int _8674 = (int)0;
        int _8675 = (int)((_404)->size(0));
        int _8676 = safe_mul( _408,(int)2 );
        for (int _409 = _8674; _409 < _8675; _409 += _8676)
        {
          {
            if (_407)
            {
              {
                ::mosek::fusion::p_CommonTools::mergeInto(_404,_406,_405,_409,safe_add( _409,_408 ),safe_add( _409,safe_mul( (int)2,_408 ) ));
              }
            }
            else
            {
              {
                ::mosek::fusion::p_CommonTools::mergeInto(_406,_404,_405,_409,safe_add( _409,_408 ),safe_add( _409,safe_mul( (int)2,_408 ) ));
              }
            }
          }
        }
      }
    }
  }
  if (_407)
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(_406,(int)0,_404,(int)0,(int)((_404)->size(0)));
    }
  }
  {}
}
void mosek::fusion::p_CommonTools::mergeInto(std::shared_ptr< monty::ndarray< int,1 > > _410,std::shared_ptr< monty::ndarray< int,1 > > _411,std::shared_ptr< monty::ndarray< int,1 > > _412,int _413,int _414,int _415){
  _checked_ptr_1<int> _ptr__410(_410 ? _410->raw() : nullptr, _410 ? _410->size(0) : 0);
  _checked_ptr_1<int> _ptr__411(_411 ? _411->raw() : nullptr, _411 ? _411->size(0) : 0);
  _checked_ptr_1<int> _ptr__412(_412 ? _412->raw() : nullptr, _412 ? _412->size(0) : 0);
  int _8677;
  bool _8678 = (_415 > (int)((_410)->size(0)));
  if (_8678)
  {
    _8677 = (int)((_410)->size(0));
  }
  else
  {
    _8677 = _415;
  }
  int _416 = _8677;
  int _8679;
  bool _8680 = (_414 > _416);
  if (_8680)
  {
    _8679 = _416;
  }
  else
  {
    _8679 = _414;
  }
  int _417 = _8679;
  if ((_417 == _416))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(_410,_413,_411,_413,(_417 - _413));
    }
  }
  else
  {
    {
      int _418 = _413;
      int _419 = _417;
      int _420;
      {
        _420 = _413;
        for(;((_418 < _417) && (_419 < _416));++ _420)
        {
          {
            if ((_ptr__412[_ptr__410[_418]] < _ptr__412[_ptr__410[_419]]))
            {
              {
                _ptr__411[_420] = _ptr__410[_418];
                ++ _418;
              }
            }
            else
            {
              {
                _ptr__411[_420] = _ptr__410[_419];
                ++ _419;
              }
            }
          }
        }
      }
      while ( (_418 < _417) )
      {
        {
          _ptr__411[_420] = _ptr__410[_418];
          ++ _418;
          ++ _420;
        }
      }
      while ( (_419 < _416) )
      {
        {
          _ptr__411[_420] = _ptr__410[_419];
          ++ _419;
          ++ _420;
        }
      }
    }
  }
}
void mosek::fusion::CommonTools::argQsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _421,    std::shared_ptr< monty::ndarray< long long,1 > > _422,    std::shared_ptr< monty::ndarray< long long,1 > > _423,    long long _424,    long long _425) { mosek::fusion::p_CommonTools::argQsort(_421,_422,_423,_424,_425); }void mosek::fusion::p_CommonTools::argQsort(std::shared_ptr< monty::ndarray< long long,1 > > _421,std::shared_ptr< monty::ndarray< long long,1 > > _422,std::shared_ptr< monty::ndarray< long long,1 > > _423,long long _424,long long _425){
  _checked_ptr_1<long long> _ptr__421(_421 ? _421->raw() : nullptr, _421 ? _421->size(0) : 0);
  _checked_ptr_1<long long> _ptr__422(_422 ? _422->raw() : nullptr, _422 ? _422->size(0) : 0);
  _checked_ptr_1<long long> _ptr__423(_423 ? _423->raw() : nullptr, _423 ? _423->size(0) : 0);
  if ((NULL == _423.get()))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_421,_422,_424,_425);
    }
  }
  else
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_421,_422,_423,_424,_425);
    }
  }
}
void mosek::fusion::CommonTools::argQsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _426,    std::shared_ptr< monty::ndarray< int,1 > > _427,    std::shared_ptr< monty::ndarray< int,1 > > _428,    long long _429,    long long _430) { mosek::fusion::p_CommonTools::argQsort(_426,_427,_428,_429,_430); }void mosek::fusion::p_CommonTools::argQsort(std::shared_ptr< monty::ndarray< long long,1 > > _426,std::shared_ptr< monty::ndarray< int,1 > > _427,std::shared_ptr< monty::ndarray< int,1 > > _428,long long _429,long long _430){
  _checked_ptr_1<long long> _ptr__426(_426 ? _426->raw() : nullptr, _426 ? _426->size(0) : 0);
  _checked_ptr_1<int> _ptr__427(_427 ? _427->raw() : nullptr, _427 ? _427->size(0) : 0);
  _checked_ptr_1<int> _ptr__428(_428 ? _428->raw() : nullptr, _428 ? _428->size(0) : 0);
  if ((NULL == _428.get()))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_426,_427,_429,_430);
    }
  }
  else
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_426,_427,_428,_429,_430);
    }
  }
}
void mosek::fusion::p_CommonTools::destroy(){}void mosek::fusion::CommonTools::destroy() { mosek::fusion::p_CommonTools::_get_impl(this)->destroy(); }mosek::fusion::SolutionStruct::SolutionStruct(mosek::fusion::p_SolutionStruct *_impl) : _impl(_impl) { /*std::cout << "SolutionStruct() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::SolutionStruct::~SolutionStruct() { delete _impl; _impl = nullptr; }mosek::fusion::p_SolutionStruct::p_SolutionStruct  (::mosek::fusion::SolutionStruct * _pubthis) :     _pubthis(_pubthis){}std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_yx() { return _impl->yx; }
void mosek::fusion::SolutionStruct::set_yx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->yx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_snx() { return _impl->snx; }
void mosek::fusion::SolutionStruct::set_snx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->snx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_sux() { return _impl->sux; }
void mosek::fusion::SolutionStruct::set_sux(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->sux = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_slx() { return _impl->slx; }
void mosek::fusion::SolutionStruct::set_slx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->slx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_bars() { return _impl->bars; }
void mosek::fusion::SolutionStruct::set_bars(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->bars = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_barx() { return _impl->barx; }
void mosek::fusion::SolutionStruct::set_barx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->barx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_y() { return _impl->y; }
void mosek::fusion::SolutionStruct::set_y(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->y = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_suc() { return _impl->suc; }
void mosek::fusion::SolutionStruct::set_suc(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->suc = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_slc() { return _impl->slc; }
void mosek::fusion::SolutionStruct::set_slc(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->slc = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_xx() { return _impl->xx; }
void mosek::fusion::SolutionStruct::set_xx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->xx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_xc() { return _impl->xc; }
void mosek::fusion::SolutionStruct::set_xc(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->xc = _val; }
double mosek::fusion::SolutionStruct::get_dobj() { return _impl->dobj; }
void mosek::fusion::SolutionStruct::set_dobj(double _val) { _impl->dobj = _val; }
double mosek::fusion::SolutionStruct::get_pobj() { return _impl->pobj; }
void mosek::fusion::SolutionStruct::set_pobj(double _val) { _impl->pobj = _val; }
mosek::fusion::ProblemStatus mosek::fusion::SolutionStruct::get_probstatus() { return _impl->probstatus; }
void mosek::fusion::SolutionStruct::set_probstatus(mosek::fusion::ProblemStatus _val) { _impl->probstatus = _val; }
mosek::fusion::SolutionStatus mosek::fusion::SolutionStruct::get_dstatus() { return _impl->dstatus; }
void mosek::fusion::SolutionStruct::set_dstatus(mosek::fusion::SolutionStatus _val) { _impl->dstatus = _val; }
mosek::fusion::SolutionStatus mosek::fusion::SolutionStruct::get_pstatus() { return _impl->pstatus; }
void mosek::fusion::SolutionStruct::set_pstatus(mosek::fusion::SolutionStatus _val) { _impl->pstatus = _val; }
int mosek::fusion::SolutionStruct::get_sol_numbarvar() { return _impl->sol_numbarvar; }
void mosek::fusion::SolutionStruct::set_sol_numbarvar(int _val) { _impl->sol_numbarvar = _val; }
int mosek::fusion::SolutionStruct::get_sol_numcone() { return _impl->sol_numcone; }
void mosek::fusion::SolutionStruct::set_sol_numcone(int _val) { _impl->sol_numcone = _val; }
int mosek::fusion::SolutionStruct::get_sol_numvar() { return _impl->sol_numvar; }
void mosek::fusion::SolutionStruct::set_sol_numvar(int _val) { _impl->sol_numvar = _val; }
int mosek::fusion::SolutionStruct::get_sol_numcon() { return _impl->sol_numcon; }
void mosek::fusion::SolutionStruct::set_sol_numcon(int _val) { _impl->sol_numcon = _val; }
mosek::fusion::SolutionStruct::t mosek::fusion::p_SolutionStruct::_new_SolutionStruct  (int _431,    int _432,    int _433,    int _434){ return new mosek::fusion::SolutionStruct(_431,_432,_433,_434); }mosek::fusion::SolutionStruct::SolutionStruct  (int _431,    int _432,    int _433,    int _434) :    SolutionStruct(new mosek::fusion::p_SolutionStruct(this)){ mosek::fusion::p_SolutionStruct::_get_impl(this)->_initialize(_431,_432,_433,_434); }void mosek::fusion::p_SolutionStruct::_initialize  (int _431,    int _432,    int _433,    int _434){monty::rc_reserve __reserve_this(_pubthis);   {
    pobj = 0.0;
    dobj = 0.0;
    pstatus = ::mosek::fusion::SolutionStatus::Unknown;
    dstatus = ::mosek::fusion::SolutionStatus::Unknown;
    probstatus = ::mosek::fusion::ProblemStatus::Unknown;
    sol_numvar = _431;
    sol_numcon = _432;
    sol_numcone = _433;
    sol_numbarvar = _434;
    slx = nullptr;
    sux = nullptr;
    xx = nullptr;
    yx = nullptr;
    slc = nullptr;
    suc = nullptr;
    y = nullptr;
    xc = nullptr;
    snx = nullptr;
    barx = nullptr;
    bars = nullptr;
    if ((_431 > (int)0))
    {
      {
        slx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_431)));
        sux = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_431)));
        xx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_431)));
        yx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_431)));
      }
    }
    {}
    if ((_434 > (int)0))
    {
      {
        barx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_434)));
        bars = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_434)));
      }
    }
    {}
    if ((_432 > (int)0))
    {
      {
        slc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_432)));
        suc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_432)));
        y = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_432)));
        xc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_432)));
      }
    }
    {}
    if ((_433 > (int)0))
    {
      {
        snx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_431)));
      }
    }
    {}
  }
}mosek::fusion::SolutionStruct::t mosek::fusion::p_SolutionStruct::_new_SolutionStruct  (monty::rc_ptr< ::mosek::fusion::SolutionStruct > _435){ return new mosek::fusion::SolutionStruct(_435); }mosek::fusion::SolutionStruct::SolutionStruct  (monty::rc_ptr< ::mosek::fusion::SolutionStruct > _435) :    SolutionStruct(new mosek::fusion::p_SolutionStruct(this)){ mosek::fusion::p_SolutionStruct::_get_impl(this)->_initialize(_435); }void mosek::fusion::p_SolutionStruct::_initialize  (monty::rc_ptr< ::mosek::fusion::SolutionStruct > _435){monty::rc_reserve __reserve_this(_pubthis);   {
    sol_numcon = mosek::fusion::p_SolutionStruct::_get_impl(_435)->sol_numcon;
    sol_numvar = mosek::fusion::p_SolutionStruct::_get_impl(_435)->sol_numvar;
    sol_numcone = mosek::fusion::p_SolutionStruct::_get_impl(_435)->sol_numcone;
    sol_numbarvar = mosek::fusion::p_SolutionStruct::_get_impl(_435)->sol_numbarvar;
    pstatus = mosek::fusion::p_SolutionStruct::_get_impl(_435)->pstatus;
    dstatus = mosek::fusion::p_SolutionStruct::_get_impl(_435)->dstatus;
    probstatus = mosek::fusion::p_SolutionStruct::_get_impl(_435)->probstatus;
    pobj = mosek::fusion::p_SolutionStruct::_get_impl(_435)->pobj;
    dobj = mosek::fusion::p_SolutionStruct::_get_impl(_435)->dobj;
    std::shared_ptr< monty::ndarray< double,1 > > _8681;
    bool _8682 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_435)->xc.get());
    if (_8682)
    {
      _8681 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_435)->xc);
    }
    else
    {
      _8681 = nullptr;
    }
    xc = _8681;
    std::shared_ptr< monty::ndarray< double,1 > > _8683;
    bool _8684 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_435)->xx.get());
    if (_8684)
    {
      _8683 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_435)->xx);
    }
    else
    {
      _8683 = nullptr;
    }
    xx = _8683;
    std::shared_ptr< monty::ndarray< double,1 > > _8685;
    bool _8686 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_435)->yx.get());
    if (_8686)
    {
      _8685 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_435)->yx);
    }
    else
    {
      _8685 = nullptr;
    }
    yx = _8685;
    std::shared_ptr< monty::ndarray< double,1 > > _8687;
    bool _8688 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_435)->slc.get());
    if (_8688)
    {
      _8687 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_435)->slx);
    }
    else
    {
      _8687 = nullptr;
    }
    slc = _8687;
    std::shared_ptr< monty::ndarray< double,1 > > _8689;
    bool _8690 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_435)->suc.get());
    if (_8690)
    {
      _8689 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_435)->sux);
    }
    else
    {
      _8689 = nullptr;
    }
    suc = _8689;
    std::shared_ptr< monty::ndarray< double,1 > > _8691;
    bool _8692 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_435)->y.get());
    if (_8692)
    {
      _8691 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_435)->y);
    }
    else
    {
      _8691 = nullptr;
    }
    y = _8691;
    barx = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_435)->barx);
    bars = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_435)->bars);
    std::shared_ptr< monty::ndarray< double,1 > > _8693;
    bool _8694 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_435)->slx.get());
    if (_8694)
    {
      _8693 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_435)->slx);
    }
    else
    {
      _8693 = nullptr;
    }
    slx = _8693;
    std::shared_ptr< monty::ndarray< double,1 > > _8695;
    bool _8696 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_435)->sux.get());
    if (_8696)
    {
      _8695 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_435)->sux);
    }
    else
    {
      _8695 = nullptr;
    }
    sux = _8695;
    std::shared_ptr< monty::ndarray< double,1 > > _8697;
    bool _8698 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_435)->snx.get());
    if (_8698)
    {
      _8697 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_435)->snx);
    }
    else
    {
      _8697 = nullptr;
    }
    snx = _8697;
  }
}monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::SolutionStruct :: __mosek_2fusion_2SolutionStruct__clone() { return mosek::fusion::p_SolutionStruct::_get_impl(this)->__mosek_2fusion_2SolutionStruct__clone(); }monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::SolutionStruct::clone() { return __mosek_2fusion_2SolutionStruct__clone(); }
monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::p_SolutionStruct::__mosek_2fusion_2SolutionStruct__clone(){
  return ::mosek::fusion::p_SolutionStruct::_new_SolutionStruct(::mosek::fusion::SolutionStruct::t(_pubthis));
}
void mosek::fusion::SolutionStruct :: resize(int _436,int _437,int _438,int _439) { mosek::fusion::p_SolutionStruct::_get_impl(this)->resize(_436,_437,_438,_439); }void mosek::fusion::p_SolutionStruct::resize(int _436,int _437,int _438,int _439){
  if ((_439 < (int)0))
  {
    {
    }
  }
  else if((_439 <= sol_numbarvar))
  {
    {
      sol_numbarvar = _439;
    }
  }
  else if((_439 <= (int)((barx)->size(0))))
  {
    {
    }
  }
  else
  {
    {
      int _440;
      if ((safe_mul( sol_numbarvar,(int)2 ) > safe_add( _439,(int)100 )))
      {
        {
          _440 = safe_mul( sol_numbarvar,(int)2 );
        }
      }
      else
      {
        {
          _440 = safe_add( _439,(int)100 );
        }
      }
      barx = ::mosek::fusion::p_CommonTools::resize(barx,_440);
      bars = ::mosek::fusion::p_CommonTools::resize(bars,_440);
      sol_numbarvar = _440;
    }
  }
  if ((_436 < (int)0))
  {
    {
    }
  }
  else if((_436 <= sol_numvar))
  {
    {
      sol_numvar = _436;
    }
  }
  else if((_436 <= (int)((xx)->size(0))))
  {
    {
      int _8699 = sol_numvar;
      int _8700 = _436;
      for (int _441 = _8699; _441 < _8700; ++_441)
      {
        {
          ((*slx)(_441)) = 0.0;
          ((*sux)(_441)) = 0.0;
          ((*xx)(_441)) = 0.0;
          ((*yx)(_441)) = 0.0;
        }
      }
      sol_numvar = _436;
    }
  }
  else
  {
    {
      int _442;
      if ((safe_mul( sol_numvar,(int)2 ) > safe_add( _436,(int)100 )))
      {
        {
          _442 = safe_mul( sol_numvar,(int)2 );
        }
      }
      else
      {
        {
          _442 = safe_add( _436,(int)100 );
        }
      }
      std::shared_ptr< monty::ndarray< double,1 > > _443 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_442)));
      _checked_ptr_1<double> _ptr__443(_443 ? _443->raw() : nullptr,_443 ? _443->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(slx,(int)0,_443,(int)0,(int)((slx)->size(0)));
      slx = _443;
      std::shared_ptr< monty::ndarray< double,1 > > _444 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_442)));
      _checked_ptr_1<double> _ptr__444(_444 ? _444->raw() : nullptr,_444 ? _444->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(sux,(int)0,_444,(int)0,(int)((sux)->size(0)));
      sux = _444;
      std::shared_ptr< monty::ndarray< double,1 > > _445 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_442)));
      _checked_ptr_1<double> _ptr__445(_445 ? _445->raw() : nullptr,_445 ? _445->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(xx,(int)0,_445,(int)0,(int)((xx)->size(0)));
      xx = _445;
      std::shared_ptr< monty::ndarray< double,1 > > _446 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_442)));
      _checked_ptr_1<double> _ptr__446(_446 ? _446->raw() : nullptr,_446 ? _446->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(yx,(int)0,_446,(int)0,(int)((yx)->size(0)));
      yx = _446;
      {
        int _447 = sol_numvar;
        for(;(_447 < _436);++ _447)
        {
          {
            ((*slx)(_447)) = 0.0;
            ((*sux)(_447)) = 0.0;
            ((*xx)(_447)) = 0.0;
          }
        }
      }
      sol_numvar = _436;
    }
  }
  if ((_437 < (int)0))
  {
    {
    }
  }
  else if((_437 <= sol_numcon))
  {
    {
      sol_numcon = _437;
    }
  }
  else if((_437 <= (int)((xx)->size(0))))
  {
    {
      int _8701 = sol_numcon;
      int _8702 = _437;
      for (int _448 = _8701; _448 < _8702; ++_448)
      {
        {
          ((*slc)(_448)) = 0.0;
          ((*suc)(_448)) = 0.0;
          ((*xc)(_448)) = 0.0;
          ((*y)(_448)) = 0.0;
        }
      }
      sol_numcon = _437;
    }
  }
  else
  {
    {
      int _449;
      if ((safe_mul( sol_numcon,(int)2 ) > safe_add( _437,(int)100 )))
      {
        {
          _449 = safe_mul( sol_numcon,(int)2 );
        }
      }
      else
      {
        {
          _449 = safe_add( _437,(int)100 );
        }
      }
      std::shared_ptr< monty::ndarray< double,1 > > _450 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_449)));
      _checked_ptr_1<double> _ptr__450(_450 ? _450->raw() : nullptr,_450 ? _450->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(slc,(int)0,_450,(int)0,(int)((slc)->size(0)));
      slc = _450;
      std::shared_ptr< monty::ndarray< double,1 > > _451 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_449)));
      _checked_ptr_1<double> _ptr__451(_451 ? _451->raw() : nullptr,_451 ? _451->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(suc,(int)0,_451,(int)0,(int)((suc)->size(0)));
      suc = _451;
      std::shared_ptr< monty::ndarray< double,1 > > _452 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_449)));
      _checked_ptr_1<double> _ptr__452(_452 ? _452->raw() : nullptr,_452 ? _452->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(xc,(int)0,_452,(int)0,(int)((xc)->size(0)));
      xc = _452;
      std::shared_ptr< monty::ndarray< double,1 > > _453 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_449)));
      _checked_ptr_1<double> _ptr__453(_453 ? _453->raw() : nullptr,_453 ? _453->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(y,(int)0,_453,(int)0,(int)((y)->size(0)));
      y = _453;
      int _8703 = sol_numcon;
      int _8704 = _437;
      for (int _454 = _8703; _454 < _8704; ++_454)
      {
        {
          ((*slc)(_454)) = 0.0;
          ((*suc)(_454)) = 0.0;
          ((*xc)(_454)) = 0.0;
          ((*y)(_454)) = 0.0;
        }
      }
      sol_numcon = _437;
    }
  }
  if ((_438 < (int)0))
  {
    {
    }
  }
  else if((_438 <= sol_numcone))
  {
    {
      sol_numcone = _438;
    }
  }
  else if((_438 <= (int)((xx)->size(0))))
  {
    {
      int _8705 = sol_numcone;
      int _8706 = _438;
      for (int _455 = _8705; _455 < _8706; ++_455)
      {
        {
          ((*snx)(_455)) = 0.0;
        }
      }
      sol_numcone = _438;
    }
  }
  else
  {
    {
      int _456;
      if ((safe_mul( sol_numcone,(int)2 ) > safe_add( _438,(int)100 )))
      {
        {
          _456 = safe_mul( sol_numcone,(int)2 );
        }
      }
      else
      {
        {
          _456 = safe_add( _438,(int)100 );
        }
      }
      std::shared_ptr< monty::ndarray< double,1 > > _457 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_456)));
      _checked_ptr_1<double> _ptr__457(_457 ? _457->raw() : nullptr,_457 ? _457->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(snx,(int)0,_457,(int)0,(int)((snx)->size(0)));
      snx = _457;
      {
        int _458 = sol_numcone;
        for(;(_458 < _438);++ _458)
        {
          {
            ((*snx)(_458)) = 0.0;
          }
        }
      }
      sol_numcone = _438;
    }
  }
}
bool mosek::fusion::SolutionStruct :: isDualAcceptable(mosek::fusion::AccSolutionStatus _459) { return mosek::fusion::p_SolutionStruct::_get_impl(this)->isDualAcceptable(_459); }bool mosek::fusion::p_SolutionStruct::isDualAcceptable(mosek::fusion::AccSolutionStatus _459){
  return isAcceptable(dstatus,_459);
}
bool mosek::fusion::SolutionStruct :: isPrimalAcceptable(mosek::fusion::AccSolutionStatus _460) { return mosek::fusion::p_SolutionStruct::_get_impl(this)->isPrimalAcceptable(_460); }bool mosek::fusion::p_SolutionStruct::isPrimalAcceptable(mosek::fusion::AccSolutionStatus _460){
  return isAcceptable(pstatus,_460);
}
bool mosek::fusion::p_SolutionStruct::isAcceptable(mosek::fusion::SolutionStatus _461,mosek::fusion::AccSolutionStatus _462){
  if ((_462 == ::mosek::fusion::AccSolutionStatus::Anything))
  {
    {
      return true;
    }
  }
  else if((_462 == ::mosek::fusion::AccSolutionStatus::Optimal))
  {
    {
      return (_461 == ::mosek::fusion::SolutionStatus::Optimal);
    }
  }
  else if((_462 == ::mosek::fusion::AccSolutionStatus::Feasible))
  {
    {
      return ((_461 == ::mosek::fusion::SolutionStatus::Optimal) || (_461 == ::mosek::fusion::SolutionStatus::Feasible));
    }
  }
  else if((_462 == ::mosek::fusion::AccSolutionStatus::Certificate))
  {
    {
      return (_461 == ::mosek::fusion::SolutionStatus::Certificate);
    }
  }
  {}
  return false;
}
void mosek::fusion::p_SolutionStruct::destroy(){yx.reset();snx.reset();sux.reset();slx.reset();bars.reset();barx.reset();y.reset();suc.reset();slc.reset();xx.reset();xc.reset();}void mosek::fusion::SolutionStruct::destroy() { mosek::fusion::p_SolutionStruct::_get_impl(this)->destroy(); }mosek::fusion::ConNZStruct::ConNZStruct(mosek::fusion::p_ConNZStruct *_impl) : _impl(_impl) { /*std::cout << "ConNZStruct() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::ConNZStruct::~ConNZStruct() { delete _impl; _impl = nullptr; }mosek::fusion::p_ConNZStruct::p_ConNZStruct  (::mosek::fusion::ConNZStruct * _pubthis) :     _pubthis(_pubthis){}std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConNZStruct::get_barmidx() { return _impl->barmidx; }
void mosek::fusion::ConNZStruct::set_barmidx(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->barmidx = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConNZStruct::get_barsubj() { return _impl->barsubj; }
void mosek::fusion::ConNZStruct::set_barsubj(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->barsubj = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConNZStruct::get_barsubi() { return _impl->barsubi; }
void mosek::fusion::ConNZStruct::set_barsubi(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->barsubi = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::ConNZStruct::get_bfix() { return _impl->bfix; }
void mosek::fusion::ConNZStruct::set_bfix(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->bfix = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::ConNZStruct::get_cof() { return _impl->cof; }
void mosek::fusion::ConNZStruct::set_cof(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->cof = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConNZStruct::get_subj() { return _impl->subj; }
void mosek::fusion::ConNZStruct::set_subj(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->subj = _val; }
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::ConNZStruct::get_ptrb() { return _impl->ptrb; }
void mosek::fusion::ConNZStruct::set_ptrb(std::shared_ptr< monty::ndarray< long long,1 > > _val) { _impl->ptrb = _val; }
mosek::fusion::ConNZStruct::t mosek::fusion::p_ConNZStruct::_new_ConNZStruct  (std::shared_ptr< monty::ndarray< long long,1 > > _463,    std::shared_ptr< monty::ndarray< int,1 > > _464,    std::shared_ptr< monty::ndarray< double,1 > > _465,    std::shared_ptr< monty::ndarray< double,1 > > _466,    std::shared_ptr< monty::ndarray< int,1 > > _467,    std::shared_ptr< monty::ndarray< int,1 > > _468,    std::shared_ptr< monty::ndarray< int,1 > > _469){ return new mosek::fusion::ConNZStruct(_463,_464,_465,_466,_467,_468,_469); }mosek::fusion::ConNZStruct::ConNZStruct  (std::shared_ptr< monty::ndarray< long long,1 > > _463,    std::shared_ptr< monty::ndarray< int,1 > > _464,    std::shared_ptr< monty::ndarray< double,1 > > _465,    std::shared_ptr< monty::ndarray< double,1 > > _466,    std::shared_ptr< monty::ndarray< int,1 > > _467,    std::shared_ptr< monty::ndarray< int,1 > > _468,    std::shared_ptr< monty::ndarray< int,1 > > _469) :    ConNZStruct(new mosek::fusion::p_ConNZStruct(this)){ mosek::fusion::p_ConNZStruct::_get_impl(this)->_initialize(_463,_464,_465,_466,_467,_468,_469); }void mosek::fusion::p_ConNZStruct::_initialize  (std::shared_ptr< monty::ndarray< long long,1 > > _463,    std::shared_ptr< monty::ndarray< int,1 > > _464,    std::shared_ptr< monty::ndarray< double,1 > > _465,    std::shared_ptr< monty::ndarray< double,1 > > _466,    std::shared_ptr< monty::ndarray< int,1 > > _467,    std::shared_ptr< monty::ndarray< int,1 > > _468,    std::shared_ptr< monty::ndarray< int,1 > > _469){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__463(_463 ? _463->raw() : nullptr, _463 ? _463->size(0) : 0);
    _checked_ptr_1<int> _ptr__464(_464 ? _464->raw() : nullptr, _464 ? _464->size(0) : 0);
    _checked_ptr_1<double> _ptr__465(_465 ? _465->raw() : nullptr, _465 ? _465->size(0) : 0);
    _checked_ptr_1<double> _ptr__466(_466 ? _466->raw() : nullptr, _466 ? _466->size(0) : 0);
    _checked_ptr_1<int> _ptr__467(_467 ? _467->raw() : nullptr, _467 ? _467->size(0) : 0);
    _checked_ptr_1<int> _ptr__468(_468 ? _468->raw() : nullptr, _468 ? _468->size(0) : 0);
    _checked_ptr_1<int> _ptr__469(_469 ? _469->raw() : nullptr, _469 ? _469->size(0) : 0);
    ptrb = _463;
    subj = _464;
    cof = _465;
    bfix = _466;
    barsubi = _467;
    barsubj = _468;
    barmidx = _469;
  }
}void mosek::fusion::p_ConNZStruct::destroy(){barmidx.reset();barsubj.reset();barsubi.reset();bfix.reset();cof.reset();subj.reset();ptrb.reset();}void mosek::fusion::ConNZStruct::destroy() { mosek::fusion::p_ConNZStruct::_get_impl(this)->destroy(); }mosek::fusion::Model::Model(mosek::fusion::p_Model *_impl) : mosek::fusion::BaseModel(_impl) { /*std::cout << "Model()" << this << std::endl; */ }mosek::fusion::Model::~Model() {  /* std::cout << "~Model()" << this << std::endl << std::flush; */ }mosek::fusion::p_Model::p_Model  (::mosek::fusion::Model * _pubthis) :     mosek::fusion::p_BaseModel(_pubthis),    _pubthis(_pubthis){}mosek::fusion::Model::t mosek::fusion::p_Model::_new_Model  (monty::rc_ptr< ::mosek::fusion::Model > _470){ return new mosek::fusion::Model(_470); }mosek::fusion::Model::Model  (monty::rc_ptr< ::mosek::fusion::Model > _470) :    Model(new mosek::fusion::p_Model(this)){ mosek::fusion::p_Model::_get_impl(this)->_initialize(_470); }void mosek::fusion::p_Model::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _470){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseModel::_initialize(_470);
    monty::rc_ptr< ::mosek::fusion::Model > _471 = ::mosek::fusion::Model::t(_pubthis);
    model_name = mosek::fusion::p_Model::_get_impl(_470)->model_name;
    acceptable_sol = mosek::fusion::p_Model::_get_impl(_470)->acceptable_sol;
    solutionptr = mosek::fusion::p_Model::_get_impl(_470)->solutionptr;
    natvarmap_blockid = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natvarmap_blockid);
    natvarmap_idx = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natvarmap_idx);
    natvarmap_type = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natvarmap_type);
    natvarmap = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks(mosek::fusion::p_Model::_get_impl(_470)->natvarmap);
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelVariable >> _8707;
    for (int _472 = (int)0, _8708 = (int)((mosek::fusion::p_Model::_get_impl(_470)->vars)->size(0)); _472 < _8708 ; ++_472)
    {
      monty::rc_ptr< ::mosek::fusion::ModelVariable > _8709;
      bool _8710 = (NULL != ((*mosek::fusion::p_Model::_get_impl(_470)->vars)(_472)).get());
      if (_8710)
      {
        _8709 = mosek::fusion::p_ModelVariable::_get_impl(((*mosek::fusion::p_Model::_get_impl(_470)->vars)(_472)).get())->__mosek_2fusion_2ModelVariable__clone(_471);
      }
      else
      {
        _8709 = nullptr;
      }
      _8707.push_back(_8709);
    }
    auto _8711 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_8707.size()),_8707.begin(),_8707.end()));
    vars = _8711;
    natconemap = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks(mosek::fusion::p_Model::_get_impl(_470)->natconemap);
    natconemap_dim = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconemap_dim);
    natbarvar_numbarvarelm = mosek::fusion::p_Model::_get_impl(_470)->natbarvar_numbarvarelm;
    natbarvar_ptr = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natbarvar_ptr);
    natbarvar_i = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natbarvar_i);
    natbarvar_j = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natbarvar_j);
    natbarvar_idx = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natbarvar_idx);
    natbarvarmap_nblock = mosek::fusion::p_Model::_get_impl(_470)->natbarvarmap_nblock;
    natbarvar_dim = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natbarvar_dim);
    natbarvarmap_num = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natbarvarmap_num);
    natbarvarmap_ptr = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natbarvarmap_ptr);
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelVariable >> _8712;
    for (int _473 = (int)0, _8713 = (int)((mosek::fusion::p_Model::_get_impl(_470)->barvars)->size(0)); _473 < _8713 ; ++_473)
    {
      monty::rc_ptr< ::mosek::fusion::ModelVariable > _8714;
      bool _8715 = (NULL != ((*mosek::fusion::p_Model::_get_impl(_470)->barvars)(_473)).get());
      if (_8715)
      {
        _8714 = mosek::fusion::p_ModelVariable::_get_impl(((*mosek::fusion::p_Model::_get_impl(_470)->barvars)(_473)).get())->__mosek_2fusion_2ModelVariable__clone(_471);
      }
      else
      {
        _8714 = nullptr;
      }
      _8712.push_back(_8714);
    }
    auto _8716 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_8712.size()),_8712.begin(),_8712.end()));
    barvars = _8716;
    var_map = mosek::fusion::p_Model::_get_impl(_470)->var_map->__mosek_2fusion_2Utils_2StringIntMap__clone();
    natconmap_blockid = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_blockid);
    natconmap_slackidx = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_slackidx);
    natconmap_idx = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_idx);
    natconmap_type = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_type);
    natconmap = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks(mosek::fusion::p_Model::_get_impl(_470)->natconmap);
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelConstraint >> _8717;
    for (int _474 = (int)0, _8718 = (int)((mosek::fusion::p_Model::_get_impl(_470)->cons)->size(0)); _474 < _8718 ; ++_474)
    {
      monty::rc_ptr< ::mosek::fusion::ModelConstraint > _8719;
      bool _8720 = (NULL != ((*mosek::fusion::p_Model::_get_impl(_470)->cons)(_474)).get());
      if (_8720)
      {
        _8719 = mosek::fusion::p_ModelConstraint::_get_impl(((*mosek::fusion::p_Model::_get_impl(_470)->cons)(_474)).get())->__mosek_2fusion_2ModelConstraint__clone(_471);
      }
      else
      {
        _8719 = nullptr;
      }
      _8717.push_back(_8719);
    }
    auto _8721 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape(_8717.size()),_8717.begin(),_8717.end()));
    cons = _8721;
    con_map = mosek::fusion::p_Model::_get_impl(_470)->con_map->__mosek_2fusion_2Utils_2StringIntMap__clone();
    numparameter = mosek::fusion::p_Model::_get_impl(_470)->numparameter;
    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _8722;
    bool _8723 = (NULL == mosek::fusion::p_Model::_get_impl(_470)->parameters.get());
    if (_8723)
    {
      _8722 = nullptr;
    }
    else
    {
      std::vector<monty::rc_ptr< ::mosek::fusion::Parameter >> _8724;
      for (int _475 = (int)0, _8725 = (int)((mosek::fusion::p_Model::_get_impl(_470)->parameters)->size(0)); _475 < _8725 ; ++_475)
      {
        monty::rc_ptr< ::mosek::fusion::Parameter > _8726;
        bool _8727 = (NULL != ((*mosek::fusion::p_Model::_get_impl(_470)->parameters)(_475)).get());
        if (_8727)
        {
          _8726 = ((*mosek::fusion::p_Model::_get_impl(_470)->parameters)(_475))->__mosek_2fusion_2Parameter__clone(_471);
        }
        else
        {
          _8726 = nullptr;
        }
        _8724.push_back(_8726);
      }
      auto _8728 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >(monty::shape(_8724.size()),_8724.begin(),_8724.end()));
      _8722 = _8728;
    }
    parameters = _8722;
    par_map = mosek::fusion::p_Model::_get_impl(_470)->par_map->__mosek_2fusion_2Utils_2StringIntMap__clone();
    param_num = mosek::fusion::p_Model::_get_impl(_470)->param_num;
    std::shared_ptr< monty::ndarray< double,1 > > _8729;
    bool _8730 = (NULL != mosek::fusion::p_Model::_get_impl(_470)->param_value.get());
    if (_8730)
    {
      _8729 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->param_value);
    }
    else
    {
      _8729 = nullptr;
    }
    param_value = _8729;
    natconmap_codenztop = mosek::fusion::p_Model::_get_impl(_470)->natconmap_codenztop;
    natconmap_codeatomtop = mosek::fusion::p_Model::_get_impl(_470)->natconmap_codeatomtop;
    natconmap_numparameterized = mosek::fusion::p_Model::_get_impl(_470)->natconmap_numparameterized;
    natconmap_coderowptrb = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_coderowptrb);
    natconmap_coderowptre = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_coderowptre);
    natconmap_codenidx = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_codenidx);
    natconmap_codeptr = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_codeptr);
    natconmap_code = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_code);
    natconmap_cconst = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_cconst);
    std::shared_ptr< monty::ndarray< long long,1 > > _8731;
    bool _8732 = (NULL != mosek::fusion::p_Model::_get_impl(_470)->natconmap_objcodenidx.get());
    if (_8732)
    {
      _8731 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_objcodenidx);
    }
    else
    {
      _8731 = nullptr;
    }
    natconmap_objcodenidx = _8731;
    std::shared_ptr< monty::ndarray< int,1 > > _8733;
    bool _8734 = (NULL != mosek::fusion::p_Model::_get_impl(_470)->natconmap_objcodeptr.get());
    if (_8734)
    {
      _8733 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_objcodeptr);
    }
    else
    {
      _8733 = nullptr;
    }
    natconmap_objcodeptr = _8733;
    std::shared_ptr< monty::ndarray< int,1 > > _8735;
    bool _8736 = (NULL != mosek::fusion::p_Model::_get_impl(_470)->natconmap_objcode.get());
    if (_8736)
    {
      _8735 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_objcode);
    }
    else
    {
      _8735 = nullptr;
    }
    natconmap_objcode = _8735;
    std::shared_ptr< monty::ndarray< double,1 > > _8737;
    bool _8738 = (NULL != mosek::fusion::p_Model::_get_impl(_470)->natconmap_objcconst.get());
    if (_8738)
    {
      _8737 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_objcconst);
    }
    else
    {
      _8737 = nullptr;
    }
    natconmap_objcconst = _8737;
    initsol_xx = nullptr;
    initsol_xx_flag = nullptr;
    bfixidx = mosek::fusion::p_Model::_get_impl(_470)->bfixidx;
    rs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
    ws = ::mosek::fusion::p_WorkStack::_new_WorkStack();
    xs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  }
}mosek::fusion::Model::t mosek::fusion::p_Model::_new_Model  (const std::string &  _476){ return new mosek::fusion::Model(_476); }mosek::fusion::Model::Model  (const std::string &  _476) :    Model(new mosek::fusion::p_Model(this)){ mosek::fusion::p_Model::_get_impl(this)->_initialize(_476); }void mosek::fusion::p_Model::_initialize  (const std::string &  _476){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseModel::_initialize(_476,std::string (""));
    model_name = _476;
    acceptable_sol = ::mosek::fusion::AccSolutionStatus::Optimal;
    solutionptr = ::mosek::fusion::SolutionType::Default;
    natvarmap = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks();
    natvarmap_blockid = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natvarmap_idx = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natvarmap_type = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelVariable >> _8739;
    for (int _477 = (int)0, _8740 = (int)1024; _477 < _8740 ; ++_477)
    {
      _8739.push_back(nullptr);
    }
    auto _8741 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_8739.size()),_8739.begin(),_8739.end()));
    vars = _8741;
    natconemap = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks();
    natconemap_dim = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
    barvars = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape((int)0)));
    natbarvar_ptr = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0)));
    natbarvar_numbarvarelm = (int)0;
    natbarvar_i = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
    natbarvar_j = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
    natbarvar_idx = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
    natbarvarmap_nblock = (int)0;
    natbarvar_dim = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
    natbarvarmap_num = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
    natbarvarmap_ptr = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0)});
    barvars = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape((int)0)));
    var_map = ::mosek::fusion::Utils::p_StringIntMap::_new_StringIntMap();
    initsol_xx = nullptr;
    initsol_xx_flag = nullptr;
    natconmap = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks();
    natconmap_blockid = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natconmap_slackidx = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1024)));
    natconmap_idx = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natconmap_type = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natconmap_coderowptrb = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natconmap_coderowptre = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelConstraint >> _8742;
    for (int _478 = (int)0, _8743 = (int)1024; _478 < _8743 ; ++_478)
    {
      _8742.push_back(nullptr);
    }
    auto _8744 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape(_8742.size()),_8742.begin(),_8742.end()));
    cons = _8744;
    con_map = ::mosek::fusion::Utils::p_StringIntMap::_new_StringIntMap();
    numparameter = (int)0;
    parameters = nullptr;
    par_map = ::mosek::fusion::Utils::p_StringIntMap::_new_StringIntMap();
    param_num = (int)0;
    param_value = nullptr;
    natconmap_numparameterized = (int)0;
    natconmap_codeatomtop = (int)0;
    natconmap_codenztop = (int)0;
    natconmap_codenidx = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1024)));
    natconmap_codeptr = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natconmap_code = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natconmap_cconst = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)1024)));
    natconmap_objcodenidx = nullptr;
    natconmap_objcodeptr = nullptr;
    natconmap_objcode = nullptr;
    natconmap_objcconst = nullptr;
    bfixidx = natvarmap_alloc((int)1);
    task_var_putboundlist_fx(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(bfixidx)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}));
    task_var_name(bfixidx,std::string ("1.0"));
    rs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
    ws = ::mosek::fusion::p_WorkStack::_new_WorkStack();
    xs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  }
}mosek::fusion::Model::t mosek::fusion::p_Model::_new_Model  (){ return new mosek::fusion::Model(); }mosek::fusion::Model::Model  () :    Model(new mosek::fusion::p_Model(this)){ mosek::fusion::p_Model::_get_impl(this)->_initialize(); }void mosek::fusion::p_Model::_initialize  (){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_Model::_initialize(std::string (""));
  }
}monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_Model::__mosek_2fusion_2Model__formstConstr(monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _479,std::shared_ptr< monty::ndarray< int,1 > > _480,std::shared_ptr< monty::ndarray< int,1 > > _481){
  _checked_ptr_1<int> _ptr__480(_480 ? _480->raw() : nullptr, _480 ? _480->size(0) : 0);
  _checked_ptr_1<int> _ptr__481(_481 ? _481->raw() : nullptr, _481 ? _481->size(0) : 0);
  return _479;
}
void mosek::fusion::p_Model::connames(std::shared_ptr< monty::ndarray< int,1 > > _482,const std::string & _483,std::shared_ptr< monty::ndarray< int,1 > > _484,std::shared_ptr< monty::ndarray< long long,1 > > _485){
  _checked_ptr_1<int> _ptr__482(_482 ? _482->raw() : nullptr, _482 ? _482->size(0) : 0);
  _checked_ptr_1<int> _ptr__484(_484 ? _484->raw() : nullptr, _484 ? _484->size(0) : 0);
  _checked_ptr_1<long long> _ptr__485(_485 ? _485->raw() : nullptr, _485 ? _485->size(0) : 0);
  task_format_con_names(_482,_483,_484,_485);
}
void mosek::fusion::p_Model::varnames(std::shared_ptr< monty::ndarray< int,1 > > _486,const std::string & _487,std::shared_ptr< monty::ndarray< int,1 > > _488,std::shared_ptr< monty::ndarray< long long,1 > > _489){
  _checked_ptr_1<int> _ptr__486(_486 ? _486->raw() : nullptr, _486 ? _486->size(0) : 0);
  _checked_ptr_1<int> _ptr__488(_488 ? _488->raw() : nullptr, _488 ? _488->size(0) : 0);
  _checked_ptr_1<long long> _ptr__489(_489 ? _489->raw() : nullptr, _489 ? _489->size(0) : 0);
  task_format_var_names(_486,_487,_488,_489);
}
void mosek::fusion::p_Model::varname(int _490,const std::string & _491){
  task_var_name(_490,_491);
}
void mosek::fusion::p_Model::natbarvarmap_get(int _492,std::shared_ptr< monty::ndarray< int,1 > > _493){
  _checked_ptr_1<int> _ptr__493(_493 ? _493->raw() : nullptr, _493 ? _493->size(0) : 0);
  int _494 = ((*natbarvarmap_ptr)(_492));
  int _495 = ((*natbarvarmap_num)(_492));
  int _8745 = (int)0;
  int _8746 = _495;
  for (int _496 = _8745; _496 < _8746; ++_496)
  {
    {
      _ptr__493[_496] = safe_add( _494,_496 );
    }
  }
}
void mosek::fusion::p_Model::natbarvar_get(int _497,std::shared_ptr< monty::ndarray< long long,1 > > _498){
  _checked_ptr_1<long long> _ptr__498(_498 ? _498->raw() : nullptr, _498 ? _498->size(0) : 0);
  int _499 = ((*natbarvarmap_ptr)(_497));
  int _500 = ((*natbarvarmap_num)(_497));
  int _501 = ((*natbarvar_dim)(((*natbarvarmap_ptr)(_497))));
  int _502 = (safe_mul( safe_mul( _500,_501 ),safe_add( _501,(int)1 ) ) / (int)2);
  long long _503 = ((*natbarvar_ptr)(_499));
  int _8747 = (int)0;
  int _8748 = _502;
  for (int _504 = _8747; _504 < _8748; ++_504)
  {
    {
      _ptr__498[_504] = safe_add( _503,_504 );
    }
  }
}
int mosek::fusion::p_Model::natbarvarmap_alloc(int _505,int _506){
  int _507 = (int)((natbarvar_idx)->size(0));
  int _508 = task_numbarvar();
  int _509 = (safe_mul( _506,safe_add( _506,(int)1 ) ) / (int)2);
  int _510 = safe_mul( _505,_509 );
  if ((safe_add( natbarvar_numbarvarelm,_510 ) >= _507))
  {
    {
      if ((_510 < _507))
      {
        {
          _510 = _507;
        }
      }
      {}
      natbarvar_idx = ::mosek::fusion::p_CommonTools::resize(natbarvar_idx,safe_add( _507,_510 ));
      natbarvar_i = ::mosek::fusion::p_CommonTools::resize(natbarvar_i,safe_add( _507,_510 ));
      natbarvar_j = ::mosek::fusion::p_CommonTools::resize(natbarvar_j,safe_add( _507,_510 ));
    }
  }
  {}
  if ((safe_add( natbarvarmap_nblock,(int)1 ) >= (int)((natbarvarmap_num)->size(0))))
  {
    {
      int _8749;
      bool _8750 = ((int)((natbarvarmap_num)->size(0)) > (int)0);
      if (_8750)
      {
        _8749 = safe_mul( (int)((natbarvarmap_num)->size(0)),(int)2 );
      }
      else
      {
        _8749 = (int)32;
      }
      int _511 = _8749;
      natbarvarmap_num = ::mosek::fusion::p_CommonTools::resize(natbarvarmap_num,_511);
      natbarvarmap_ptr = ::mosek::fusion::p_CommonTools::resize(natbarvarmap_ptr,safe_add( _511,(int)1 ));
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > > _512 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_511)));
      int _8751 = (int)0;
      int _8752 = (int)((barvars)->size(0));
      for (int _513 = _8751; _513 < _8752; ++_513)
      {
        {
          ((*_512)(_513)) = ((*barvars)(_513));
        }
      }
      barvars = _512;
    }
  }
  {}
  if ((safe_add( _508,_505 ) > (int)((natbarvar_dim)->size(0))))
  {
    {
      int _8753;
      bool _8754 = (safe_add( _508,_505 ) < safe_mul( (int)((natbarvar_dim)->size(0)),(int)2 ));
      if (_8754)
      {
        _8753 = safe_mul( (int)((natbarvar_dim)->size(0)),(int)2 );
      }
      else
      {
        _8753 = safe_add( _508,_505 );
      }
      int _514 = _8753;
      natbarvar_dim = ::mosek::fusion::p_CommonTools::resize(natbarvar_dim,_514);
    }
  }
  {}
  if ((safe_add( _508,_505 ) >= (int)((natbarvar_ptr)->size(0))))
  {
    {
      int _8755;
      bool _8756 = (_505 > (int)((natbarvar_ptr)->size(0)));
      if (_8756)
      {
        _8755 = _505;
      }
      else
      {
        _8755 = (int)((natbarvar_ptr)->size(0));
      }
      int _515 = _8755;
      natbarvar_ptr = ::mosek::fusion::p_CommonTools::resize(natbarvar_ptr,safe_add( safe_add( (int)((natbarvar_ptr)->size(0)),_515 ),(int)1 ));
    }
  }
  {}
  int _8757 = (int)0;
  int _8758 = _505;
  for (int _516 = _8757; _516 < _8758; ++_516)
  {
    {
      ((*natbarvar_dim)(safe_add( _508,_516 ))) = _506;
    }
  }
  ((*natbarvarmap_num)(natbarvarmap_nblock)) = _505;
  ((*natbarvarmap_ptr)(safe_add( natbarvarmap_nblock,(int)1 ))) = safe_add( ((*natbarvarmap_ptr)(natbarvarmap_nblock)),_505 );
  int _517 = task_append_barvar(_506,_505);
  int _518 = ((*natbarvarmap_ptr)(natbarvarmap_nblock));
  {
    long long _519 = ((*natbarvar_ptr)(_508));
    int _8759 = (int)0;
    int _8760 = _506;
    for (int _520 = _8759; _520 < _8760; ++_520)
    {
      {
        int _8761 = _520;
        int _8762 = _506;
        for (int _521 = _8761; _521 < _8762; ++_521)
        {
          {
            int _8763 = (int)0;
            int _8764 = _505;
            for (int _522 = _8763; _522 < _8764; ++_522)
            {
              {
                ((*natbarvar_idx)(safe_add( _519,safe_mul( _522,_509 ) ))) = safe_add( _518,_522 );
                ((*natbarvar_i)(safe_add( _519,safe_mul( _522,_509 ) ))) = _521;
                ((*natbarvar_j)(safe_add( _519,safe_mul( _522,_509 ) ))) = _520;
              }
            }
            ++ _519;
          }
        }
      }
    }
    int _8765 = (int)0;
    int _8766 = _505;
    for (int _523 = _8765; _523 < _8766; ++_523)
    {
      {
        ((*natbarvar_ptr)(safe_add( safe_add( _518,_523 ),(int)1 ))) = safe_add( ((*natbarvar_ptr)(safe_add( _518,_523 ))),_509 );
      }
    }
  }
  natbarvarmap_nblock += (int)1;
  natbarvar_numbarvarelm += safe_mul( _505,_509 );
  return (natbarvarmap_nblock - (int)1);
}
int mosek::fusion::p_Model::natvarmap_alloc(int _524){
  int _525 = natvarmap->alloc(_524);
  int _526 = safe_add( natvarmap->maxidx(_525),(int)1 );
  int _527 = natvarmap->capacity();
  int _528 = natvarmap->numblocks();
  if (((int)((natvarmap_idx)->size(0)) < _527))
  {
    {
      int _529 = (int)((natvarmap_idx)->size(0));
      natvarmap_idx = ::mosek::fusion::p_CommonTools::resize(natvarmap_idx,_527);
      int _8767 = _529;
      int _8768 = _527;
      for (int _530 = _8767; _530 < _8768; ++_530)
      {
        {
          ((*natvarmap_idx)(_530)) = (-(int)1);
        }
      }
      natvarmap_blockid = ::mosek::fusion::p_CommonTools::resize(natvarmap_blockid,_527);
    }
  }
  {}
  if (((int)((vars)->size(0)) < _528))
  {
    {
      natvarmap_type = ::mosek::fusion::p_CommonTools::resize(natvarmap_type,_528);
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > > _531 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_528)));
      int _8769 = (int)0;
      int _8770 = (int)((vars)->size(0));
      for (int _532 = _8769; _532 < _8770; ++_532)
      {
        {
          ((*_531)(_532)) = ((*vars)(_532));
        }
      }
      int _8771 = (int)((vars)->size(0));
      int _8772 = (int)((_531)->size(0));
      for (int _533 = _8771; _533 < _8772; ++_533)
      {
        {
          ((*_531)(_533)) = nullptr;
        }
      }
      vars = _531;
    }
  }
  {}
  if ((task_numvar() < _526))
  {
    {
      task_append_var((_526 - task_numvar()));
    }
  }
  {}
  return _525;
}
void mosek::fusion::p_Model::natconmap_codealloc(int _534,int _535){
  int _536 = safe_add( _534,natconmap_codenztop );
  int _537 = safe_add( _535,natconmap_codeatomtop );
  if (((safe_add( _536,(int)1 ) > (int)((natconmap_codeptr)->size(0))) || (_536 > (int)((natconmap_codenidx)->size(0)))))
  {
    {
      if ((_536 < safe_mul( (int)2,(int)((natconmap_codenidx)->size(0)) )))
      {
        {
          _536 = safe_mul( (int)2,(int)((natconmap_codenidx)->size(0)) );
        }
      }
      {}
      std::shared_ptr< monty::ndarray< long long,1 > > _538 = natconmap_codenidx;
      _checked_ptr_1<long long> _ptr__538(_538 ? _538->raw() : nullptr,_538 ? _538->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _539 = natconmap_codeptr;
      _checked_ptr_1<int> _ptr__539(_539 ? _539->raw() : nullptr,_539 ? _539->size(0) : 0);
      natconmap_codenidx = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_536)));
      ::mosek::fusion::Utils::Tools::arraycopy(_538,(int)0,natconmap_codenidx,(int)0,(int)((_538)->size(0)));
      natconmap_codeptr = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _536,(int)1 ))));
      ::mosek::fusion::Utils::Tools::arraycopy(_539,(int)0,natconmap_codeptr,(int)0,(int)((_539)->size(0)));
    }
  }
  {}
  if (((safe_add( _537,(int)1 ) > (int)((natconmap_cconst)->size(0))) || (_537 > (int)((natconmap_code)->size(0)))))
  {
    {
      if ((_537 < safe_mul( (int)2,(int)((natconmap_code)->size(0)) )))
      {
        {
          _537 = safe_mul( (int)2,(int)((natconmap_code)->size(0)) );
        }
      }
      {}
      std::shared_ptr< monty::ndarray< int,1 > > _540 = natconmap_code;
      _checked_ptr_1<int> _ptr__540(_540 ? _540->raw() : nullptr,_540 ? _540->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _541 = natconmap_cconst;
      _checked_ptr_1<double> _ptr__541(_541 ? _541->raw() : nullptr,_541 ? _541->size(0) : 0);
      natconmap_code = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_537)));
      ::mosek::fusion::Utils::Tools::arraycopy(_540,(int)0,natconmap_code,(int)0,(int)((_540)->size(0)));
      natconmap_cconst = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_add( _537,(int)1 ))));
      ::mosek::fusion::Utils::Tools::arraycopy(_541,(int)0,natconmap_cconst,(int)0,(int)((_541)->size(0)));
    }
  }
  {}
  natconmap_codenztop += _534;
  natconmap_codeatomtop += _535;
}
int mosek::fusion::p_Model::natconmap_alloc(int _542){
  int _543 = natconmap->alloc(_542);
  int _544 = safe_add( natconmap->maxidx(_543),(int)1 );
  int _545 = natconmap->capacity();
  int _546 = natconmap->numblocks();
  if (((int)((natconmap_idx)->size(0)) < _545))
  {
    {
      int _547 = (int)((natconmap_idx)->size(0));
      natconmap_idx = ::mosek::fusion::p_CommonTools::resize(natconmap_idx,_545);
      int _8773 = _547;
      int _8774 = _545;
      for (int _548 = _8773; _548 < _8774; ++_548)
      {
        {
          ((*natconmap_idx)(_548)) = (-(int)1);
        }
      }
      natconmap_blockid = ::mosek::fusion::p_CommonTools::resize(natconmap_blockid,_545);
      natconmap_slackidx = ::mosek::fusion::p_CommonTools::resize(natconmap_slackidx,_545);
      natconmap_coderowptrb = ::mosek::fusion::p_CommonTools::resize(natconmap_coderowptrb,_545);
      natconmap_coderowptre = ::mosek::fusion::p_CommonTools::resize(natconmap_coderowptre,_545);
    }
  }
  {}
  if (((int)((cons)->size(0)) < _546))
  {
    {
      natconmap_type = ::mosek::fusion::p_CommonTools::resize(natconmap_type,_546);
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > > _549 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape(_546)));
      int _8775 = (int)0;
      int _8776 = (int)((cons)->size(0));
      for (int _550 = _8775; _550 < _8776; ++_550)
      {
        {
          ((*_549)(_550)) = ((*cons)(_550));
        }
      }
      int _8777 = (int)((cons)->size(0));
      int _8778 = _546;
      for (int _551 = _8777; _551 < _8778; ++_551)
      {
        {
          ((*_549)(_551)) = nullptr;
        }
      }
      cons = _549;
    }
  }
  {}
  if ((_544 > task_numcon()))
  {
    {
      task_append_con((_544 - task_numcon()));
    }
  }
  {}
  return _543;
}
int mosek::fusion::p_Model::natconemap_alloc(int _552){
  int _553 = natconemap->alloc(_552);
  int _554 = safe_add( natconemap->maxidx(_553),(int)1 );
  if ((_554 > task_numcone()))
  {
    {
      task_append_zerocones((_554 - task_numcone()));
    }
  }
  {}
  natconemap_dim = ::mosek::fusion::p_CommonTools::resize(natconemap_dim,natconemap->numblocks());
  return _553;
}
void mosek::fusion::p_Model::make_continuous(std::shared_ptr< monty::ndarray< long long,1 > > _555){
  _checked_ptr_1<long long> _ptr__555(_555 ? _555->raw() : nullptr, _555 ? _555->size(0) : 0);
  int _556 = (int)0;
  int _8779 = (int)0;
  int _8780 = (int)((_555)->size(0));
  for (int _557 = _8779; _557 < _8780; ++_557)
  {
    {
      if ((_ptr__555[_557] > (int)0))
      {
        {
          ++ _556;
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _558 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_556)));
  _checked_ptr_1<int> _ptr__558(_558 ? _558->raw() : nullptr,_558 ? _558->size(0) : 0);
  int _559 = (int)0;
  int _8781 = (int)0;
  int _8782 = (int)((_555)->size(0));
  for (int _560 = _8781; _560 < _8782; ++_560)
  {
    {
      if ((_ptr__555[_560] > (int)0))
      {
        {
          _ptr__558[_559] = (int)_ptr__555[_560];
          ++ _559;
        }
      }
      {}
    }
  }
  task_var_putcontlist(_558);
}
void mosek::fusion::p_Model::make_integer(std::shared_ptr< monty::ndarray< long long,1 > > _561){
  _checked_ptr_1<long long> _ptr__561(_561 ? _561->raw() : nullptr, _561 ? _561->size(0) : 0);
  int _562 = (int)0;
  int _8783 = (int)0;
  int _8784 = (int)((_561)->size(0));
  for (int _563 = _8783; _563 < _8784; ++_563)
  {
    {
      if ((_ptr__561[_563] > (int)0))
      {
        {
          ++ _562;
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _564 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_562)));
  _checked_ptr_1<int> _ptr__564(_564 ? _564->raw() : nullptr,_564 ? _564->size(0) : 0);
  int _565 = (int)0;
  int _8785 = (int)0;
  int _8786 = (int)((_561)->size(0));
  for (int _566 = _8785; _566 < _8786; ++_566)
  {
    {
      if ((_ptr__561[_566] > (int)0))
      {
        {
          _ptr__564[_565] = (int)_ptr__561[_566];
          ++ _565;
        }
      }
      {}
    }
  }
  task_var_putintlist(_564);
}
void mosek::fusion::Model::putlicensewait  ( bool _567) { mosek::fusion::p_Model::putlicensewait(_567); }void mosek::fusion::p_Model::putlicensewait(bool _567){
  ::mosek::fusion::p_BaseModel::env_putlicensewait(_567);
}
void mosek::fusion::Model::putlicensepath  ( const std::string & _568) { mosek::fusion::p_Model::putlicensepath(_568); }void mosek::fusion::p_Model::putlicensepath(const std::string & _568){
  ::mosek::fusion::p_BaseModel::env_putlicensepath(_568);
}
void mosek::fusion::Model::putlicensecode  ( std::shared_ptr< monty::ndarray< int,1 > > _569) { mosek::fusion::p_Model::putlicensecode(_569); }void mosek::fusion::p_Model::putlicensecode(std::shared_ptr< monty::ndarray< int,1 > > _569){
  _checked_ptr_1<int> _ptr__569(_569 ? _569->raw() : nullptr, _569 ? _569->size(0) : 0);
  ::mosek::fusion::p_BaseModel::env_putlicensecode(_569);
}
void mosek::fusion::Model :: dispose() { mosek::fusion::p_Model::_get_impl(this)->dispose(); }void mosek::fusion::p_Model::dispose(){
  int _8787 = (int)0;
  int _8788 = (int)((vars)->size(0));
  for (int _570 = _8787; _570 < _8788; ++_570)
  {
    {
      ((*vars)(_570)) = nullptr;
    }
  }
  int _8789 = (int)0;
  int _8790 = (int)((cons)->size(0));
  for (int _571 = _8789; _571 < _8790; ++_571)
  {
    {
      ((*cons)(_571)) = nullptr;
    }
  }
  int _8791 = (int)0;
  int _8792 = (int)((barvars)->size(0));
  for (int _572 = _8791; _572 < _8792; ++_572)
  {
    {
      ((*barvars)(_572)) = nullptr;
    }
  }
  if ((NULL != parameters.get()))
  {
    {
      int _8793 = (int)0;
      int _8794 = (int)((parameters)->size(0));
      for (int _573 = _8793; _573 < _8794; ++_573)
      {
        {
          ((*parameters)(_573)) = nullptr;
        }
      }
    }
  }
  {}
  ::mosek::fusion::p_BaseModel::dispose();
}
void mosek::fusion::p_Model::nativeVarToStr(int _574,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _575){
  if (((_574 < (int)0) || ((_574 >= (int)((natvarmap_idx)->size(0))) || (((*natvarmap_idx)(_574)) < (int)0))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Native variable index is invalid"));
    }
  }
  {}
  ((*vars)(((*natvarmap_blockid)(_574))))->elementName((long long)(((*natvarmap_idx)(_574))),_575);
}
MSKtask_t mosek::fusion::Model :: __mosek_2fusion_2Model__getTask() { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getTask(); }MSKtask_t mosek::fusion::Model::getTask() { return __mosek_2fusion_2Model__getTask(); }
MSKtask_t mosek::fusion::p_Model::__mosek_2fusion_2Model__getTask(){
  return __mosek_2fusion_2BaseModel__task_get();
}
void mosek::fusion::Model :: getConstraintDuals(bool _576,std::shared_ptr< monty::ndarray< int,1 > > _577,std::shared_ptr< monty::ndarray< double,1 > > _578,int _579) { mosek::fusion::p_Model::_get_impl(this)->getConstraintDuals(_576,_577,_578,_579); }void mosek::fusion::p_Model::getConstraintDuals(bool _576,std::shared_ptr< monty::ndarray< int,1 > > _577,std::shared_ptr< monty::ndarray< double,1 > > _578,int _579){
  _checked_ptr_1<int> _ptr__577(_577 ? _577->raw() : nullptr, _577 ? _577->size(0) : 0);
  _checked_ptr_1<double> _ptr__578(_578 ? _578->raw() : nullptr, _578 ? _578->size(0) : 0);
  int _580 = (int)((_577)->size(0));
  std::shared_ptr< monty::ndarray< double,1 > > _581 = getSolution_slx(::mosek::fusion::SolutionType::Default);
  _checked_ptr_1<double> _ptr__581(_581 ? _581->raw() : nullptr,_581 ? _581->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _582 = getSolution_sux(::mosek::fusion::SolutionType::Default);
  _checked_ptr_1<double> _ptr__582(_582 ? _582->raw() : nullptr,_582 ? _582->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _583 = getSolution_bars(::mosek::fusion::SolutionType::Default);
  _checked_ptr_1<double> _ptr__583(_583 ? _583->raw() : nullptr,_583 ? _583->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _584 = getSolution_slc(::mosek::fusion::SolutionType::Default);
  _checked_ptr_1<double> _ptr__584(_584 ? _584->raw() : nullptr,_584 ? _584->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _585 = getSolution_suc(::mosek::fusion::SolutionType::Default);
  _checked_ptr_1<double> _ptr__585(_585 ? _585->raw() : nullptr,_585 ? _585->size(0) : 0);
  int _8795 = (int)0;
  int _8796 = _580;
  for (int _586 = _8795; _586 < _8796; ++_586)
  {
    {
      long long _587 = ((*natconmap_slackidx)(_ptr__577[_586]));
      if ((_587 < (int)0))
      {
        {
          long long _588 = (-safe_add( _587,(int)1 ));
          if (_576)
          {
            {
              _ptr__578[safe_add( _579,_586 )] = _ptr__583[_588];
            }
          }
          else
          {
            {
              _ptr__578[safe_add( _579,_586 )] = (-_ptr__583[_588]);
            }
          }
        }
      }
      else if((_587 > (int)0))
      {
        {
          _ptr__578[safe_add( _579,_586 )] = (_ptr__581[(_587 - (int)1)] - _ptr__582[(_587 - (int)1)]);
        }
      }
      else
      {
        {
          if (_576)
          {
            {
              _ptr__578[safe_add( _579,_586 )] = _ptr__584[_ptr__577[_586]];
            }
          }
          else
          {
            {
              _ptr__578[safe_add( _579,_586 )] = (-_ptr__585[_ptr__577[_586]]);
            }
          }
        }
      }
    }
  }
}
void mosek::fusion::Model :: getConstraintValues(bool _589,std::shared_ptr< monty::ndarray< int,1 > > _590,std::shared_ptr< monty::ndarray< double,1 > > _591,int _592) { mosek::fusion::p_Model::_get_impl(this)->getConstraintValues(_589,_590,_591,_592); }void mosek::fusion::p_Model::getConstraintValues(bool _589,std::shared_ptr< monty::ndarray< int,1 > > _590,std::shared_ptr< monty::ndarray< double,1 > > _591,int _592){
  _checked_ptr_1<int> _ptr__590(_590 ? _590->raw() : nullptr, _590 ? _590->size(0) : 0);
  _checked_ptr_1<double> _ptr__591(_591 ? _591->raw() : nullptr, _591 ? _591->size(0) : 0);
  int _593 = (int)((_590)->size(0));
  std::shared_ptr< monty::ndarray< double,1 > > _8797;
  bool _8798 = _589;
  if (_8798)
  {
    _8797 = getSolution_xx(::mosek::fusion::SolutionType::Default);
  }
  else
  {
    _8797 = getSolution_yx(::mosek::fusion::SolutionType::Default);
  }
  std::shared_ptr< monty::ndarray< double,1 > > _594 = _8797;
  _checked_ptr_1<double> _ptr__594(_594 ? _594->raw() : nullptr,_594 ? _594->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _8799;
  bool _8800 = _589;
  if (_8800)
  {
    _8799 = getSolution_barx(::mosek::fusion::SolutionType::Default);
  }
  else
  {
    _8799 = getSolution_bars(::mosek::fusion::SolutionType::Default);
  }
  std::shared_ptr< monty::ndarray< double,1 > > _595 = _8799;
  _checked_ptr_1<double> _ptr__595(_595 ? _595->raw() : nullptr,_595 ? _595->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _8801;
  bool _8802 = _589;
  if (_8802)
  {
    _8801 = getSolution_xc(::mosek::fusion::SolutionType::Default);
  }
  else
  {
    _8801 = getSolution_y(::mosek::fusion::SolutionType::Default);
  }
  std::shared_ptr< monty::ndarray< double,1 > > _596 = _8801;
  _checked_ptr_1<double> _ptr__596(_596 ? _596->raw() : nullptr,_596 ? _596->size(0) : 0);
  int _8803 = (int)0;
  int _8804 = _593;
  for (int _597 = _8803; _597 < _8804; ++_597)
  {
    {
      long long _598 = ((*natconmap_slackidx)(_ptr__590[_597]));
      if ((_598 < (int)0))
      {
        {
          long long _599 = (-safe_add( _598,(int)1 ));
          _ptr__591[safe_add( _592,_597 )] = _ptr__595[_599];
        }
      }
      else if((_598 > (int)0))
      {
        {
          _ptr__591[safe_add( _592,_597 )] = _ptr__594[(_598 - (int)1)];
        }
      }
      else
      {
        {
          _ptr__591[safe_add( _592,_597 )] = _ptr__596[_ptr__590[_597]];
        }
      }
    }
  }
}
void mosek::fusion::Model :: getVariableDuals(bool _600,std::shared_ptr< monty::ndarray< long long,1 > > _601,std::shared_ptr< monty::ndarray< double,1 > > _602,int _603) { mosek::fusion::p_Model::_get_impl(this)->getVariableDuals(_600,_601,_602,_603); }void mosek::fusion::p_Model::getVariableDuals(bool _600,std::shared_ptr< monty::ndarray< long long,1 > > _601,std::shared_ptr< monty::ndarray< double,1 > > _602,int _603){
  _checked_ptr_1<long long> _ptr__601(_601 ? _601->raw() : nullptr, _601 ? _601->size(0) : 0);
  _checked_ptr_1<double> _ptr__602(_602 ? _602->raw() : nullptr, _602 ? _602->size(0) : 0);
  int _604 = (int)((_601)->size(0));
  if (_600)
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _605 = getSolution_slx(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<double> _ptr__605(_605 ? _605->raw() : nullptr,_605 ? _605->size(0) : 0);
      int _8805 = (int)0;
      int _8806 = _604;
      for (int _606 = _8805; _606 < _8806; ++_606)
      {
        {
          if ((_ptr__601[_606] > (int)0))
          {
            {
              _ptr__602[safe_add( _603,_606 )] = _ptr__605[_ptr__601[_606]];
            }
          }
          else
          {
            {
              _ptr__602[safe_add( _603,_606 )] = (int)0;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _607 = getSolution_sux(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<double> _ptr__607(_607 ? _607->raw() : nullptr,_607 ? _607->size(0) : 0);
      int _8807 = (int)0;
      int _8808 = _604;
      for (int _608 = _8807; _608 < _8808; ++_608)
      {
        {
          if ((_ptr__601[_608] > (int)0))
          {
            {
              _ptr__602[safe_add( _603,_608 )] = (-_ptr__607[_ptr__601[_608]]);
            }
          }
          else
          {
            {
              _ptr__602[safe_add( _603,_608 )] = (int)0;
            }
          }
        }
      }
    }
  }
}
void mosek::fusion::Model :: getVariableValues(bool _609,std::shared_ptr< monty::ndarray< long long,1 > > _610,std::shared_ptr< monty::ndarray< double,1 > > _611,int _612) { mosek::fusion::p_Model::_get_impl(this)->getVariableValues(_609,_610,_611,_612); }void mosek::fusion::p_Model::getVariableValues(bool _609,std::shared_ptr< monty::ndarray< long long,1 > > _610,std::shared_ptr< monty::ndarray< double,1 > > _611,int _612){
  _checked_ptr_1<long long> _ptr__610(_610 ? _610->raw() : nullptr, _610 ? _610->size(0) : 0);
  _checked_ptr_1<double> _ptr__611(_611 ? _611->raw() : nullptr, _611 ? _611->size(0) : 0);
  int _613 = (int)((_610)->size(0));
  std::shared_ptr< monty::ndarray< double,1 > > _8809;
  bool _8810 = _609;
  if (_8810)
  {
    _8809 = getSolution_xx(::mosek::fusion::SolutionType::Default);
  }
  else
  {
    _8809 = getSolution_yx(::mosek::fusion::SolutionType::Default);
  }
  std::shared_ptr< monty::ndarray< double,1 > > _614 = _8809;
  _checked_ptr_1<double> _ptr__614(_614 ? _614->raw() : nullptr,_614 ? _614->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _8811;
  bool _8812 = (natbarvar_numbarvarelm > (int)0);
  if (_8812)
  {
    std::shared_ptr< monty::ndarray< double,1 > > _8813;
    bool _8814 = _609;
    if (_8814)
    {
      _8813 = getSolution_barx(::mosek::fusion::SolutionType::Default);
    }
    else
    {
      _8813 = getSolution_bars(::mosek::fusion::SolutionType::Default);
    }
    _8811 = _8813;
  }
  else
  {
    _8811 = nullptr;
  }
  std::shared_ptr< monty::ndarray< double,1 > > _615 = _8811;
  _checked_ptr_1<double> _ptr__615(_615 ? _615->raw() : nullptr,_615 ? _615->size(0) : 0);
  int _8815 = (int)0;
  int _8816 = _613;
  for (int _616 = _8815; _616 < _8816; ++_616)
  {
    {
      if ((_ptr__610[_616] > (int)0))
      {
        {
          _ptr__611[safe_add( _612,_616 )] = _ptr__614[_ptr__610[_616]];
        }
      }
      else if((_ptr__610[_616] < (int)0))
      {
        {
          long long _617 = (-safe_add( _ptr__610[_616],(int)1 ));
          _ptr__611[safe_add( _612,_616 )] = _ptr__615[_617];
        }
      }
      else
      {
        {
          _ptr__611[safe_add( _612,_616 )] = (int)0;
        }
      }
    }
  }
}
void mosek::fusion::Model :: setVariableValues(bool _618,std::shared_ptr< monty::ndarray< long long,1 > > _619,std::shared_ptr< monty::ndarray< double,1 > > _620) { mosek::fusion::p_Model::_get_impl(this)->setVariableValues(_618,_619,_620); }void mosek::fusion::p_Model::setVariableValues(bool _618,std::shared_ptr< monty::ndarray< long long,1 > > _619,std::shared_ptr< monty::ndarray< double,1 > > _620){
  _checked_ptr_1<long long> _ptr__619(_619 ? _619->raw() : nullptr, _619 ? _619->size(0) : 0);
  _checked_ptr_1<double> _ptr__620(_620 ? _620->raw() : nullptr, _620 ? _620->size(0) : 0);
  if (_618)
  {
    {
      int _621 = (int)0;
      int _8817 = (int)0;
      int _8818 = (int)((_619)->size(0));
      for (int _622 = _8817; _622 < _8818; ++_622)
      {
        {
          if ((_ptr__619[_622] >= (int)0))
          {
            {
              ++ _621;
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _623 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_621)));
      _checked_ptr_1<int> _ptr__623(_623 ? _623->raw() : nullptr,_623 ? _623->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _624 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_621)));
      _checked_ptr_1<double> _ptr__624(_624 ? _624->raw() : nullptr,_624 ? _624->size(0) : 0);
      int _625 = (int)0;
      int _8819 = (int)0;
      int _8820 = (int)((_619)->size(0));
      for (int _626 = _8819; _626 < _8820; ++_626)
      {
        {
          if ((_ptr__619[_626] >= (int)0))
          {
            {
              _ptr__623[_625] = (int)_ptr__619[_626];
              _ptr__624[_625] = _ptr__620[_626];
              ++ _625;
            }
          }
          {}
        }
      }
      setSolution_xx(_623,_624);
    }
  }
  else
  {
    {
    }
  }
}
void mosek::fusion::Model :: flushNames() { mosek::fusion::p_Model::_get_impl(this)->flushNames(); }void mosek::fusion::p_Model::flushNames(){
  int _8821 = (int)0;
  int _8822 = (int)((vars)->size(0));
  for (int _627 = _8821; _627 < _8822; ++_627)
  {
    {
      if ((NULL != ((*vars)(_627)).get()))
      {
        {
          mosek::fusion::p_ModelVariable::_get_impl(((*vars)(_627)).get())->flushNames();
        }
      }
      {}
    }
  }
  int _8823 = (int)0;
  int _8824 = (int)((barvars)->size(0));
  for (int _628 = _8823; _628 < _8824; ++_628)
  {
    {
      if ((NULL != ((*barvars)(_628)).get()))
      {
        {
          mosek::fusion::p_ModelVariable::_get_impl(((*barvars)(_628)).get())->flushNames();
        }
      }
      {}
    }
  }
  int _8825 = (int)0;
  int _8826 = (int)((cons)->size(0));
  for (int _629 = _8825; _629 < _8826; ++_629)
  {
    {
      if ((NULL != ((*cons)(_629)).get()))
      {
        {
          mosek::fusion::p_ModelConstraint::_get_impl(((*cons)(_629)).get())->flushNames();
        }
      }
      {}
    }
  }
}
void mosek::fusion::Model :: writeTaskNoFlush(const std::string & _630) { mosek::fusion::p_Model::_get_impl(this)->writeTaskNoFlush(_630); }void mosek::fusion::p_Model::writeTaskNoFlush(const std::string & _630){
  _pubthis->flushNames();
  task_write(_630);
}
void mosek::fusion::Model :: writeTask(const std::string & _631) { mosek::fusion::p_Model::_get_impl(this)->writeTask(_631); }void mosek::fusion::p_Model::writeTask(const std::string & _631){
  _pubthis->flushNames();
  flush_parameters();
  task_write(_631);
}
long long mosek::fusion::Model :: getSolverLIntInfo(const std::string & _632) { return mosek::fusion::p_Model::_get_impl(this)->getSolverLIntInfo(_632); }long long mosek::fusion::p_Model::getSolverLIntInfo(const std::string & _632){
  return task_get_liinf(_632);
}
int mosek::fusion::Model :: getSolverIntInfo(const std::string & _633) { return mosek::fusion::p_Model::_get_impl(this)->getSolverIntInfo(_633); }int mosek::fusion::p_Model::getSolverIntInfo(const std::string & _633){
  return task_get_iinf(_633);
}
double mosek::fusion::Model :: getSolverDoubleInfo(const std::string & _634) { return mosek::fusion::p_Model::_get_impl(this)->getSolverDoubleInfo(_634); }double mosek::fusion::p_Model::getSolverDoubleInfo(const std::string & _634){
  return task_get_dinf(_634);
}
void mosek::fusion::Model :: setCallbackHandler(mosek::cbhandler_t _635) { mosek::fusion::p_Model::_get_impl(this)->setCallbackHandler(_635); }void mosek::fusion::p_Model::setCallbackHandler(mosek::cbhandler_t _635){
  task_setCallbackHandler(_635);
}
void mosek::fusion::Model :: setDataCallbackHandler(mosek::datacbhandler_t _636) { mosek::fusion::p_Model::_get_impl(this)->setDataCallbackHandler(_636); }void mosek::fusion::p_Model::setDataCallbackHandler(mosek::datacbhandler_t _636){
  task_setDataCallbackHandler(_636);
}
void mosek::fusion::Model :: setLogHandler(mosek::msghandler_t _637) { mosek::fusion::p_Model::_get_impl(this)->setLogHandler(_637); }void mosek::fusion::p_Model::setLogHandler(mosek::msghandler_t _637){
  task_setLogHandler(_637);
}
void mosek::fusion::Model :: setSolverParam(const std::string & _638,double _639) { mosek::fusion::p_Model::_get_impl(this)->setSolverParam(_638,_639); }void mosek::fusion::p_Model::setSolverParam(const std::string & _638,double _639){
  ::mosek::fusion::p_Parameters::setParameter(::mosek::fusion::Model::t(_pubthis),_638,_639);
}
void mosek::fusion::Model :: setSolverParam(const std::string & _640,int _641) { mosek::fusion::p_Model::_get_impl(this)->setSolverParam(_640,_641); }void mosek::fusion::p_Model::setSolverParam(const std::string & _640,int _641){
  ::mosek::fusion::p_Parameters::setParameter(::mosek::fusion::Model::t(_pubthis),_640,_641);
}
void mosek::fusion::Model :: setSolverParam(const std::string & _642,const std::string & _643) { mosek::fusion::p_Model::_get_impl(this)->setSolverParam(_642,_643); }void mosek::fusion::p_Model::setSolverParam(const std::string & _642,const std::string & _643){
  ::mosek::fusion::p_Parameters::setParameter(::mosek::fusion::Model::t(_pubthis),_642,_643);
}
void mosek::fusion::Model :: breakSolver() { mosek::fusion::p_Model::_get_impl(this)->breakSolver(); }void mosek::fusion::p_Model::breakSolver(){
  task_break_solve();
}
void mosek::fusion::Model :: optserverHost(const std::string & _644) { mosek::fusion::p_Model::_get_impl(this)->optserverHost(_644); }void mosek::fusion::p_Model::optserverHost(const std::string & _644){
  task_putoptserver_host(_644);
}
void mosek::fusion::Model :: solve(const std::string & _645,const std::string & _646) { mosek::fusion::p_Model::_get_impl(this)->solve(_645,_646); }void mosek::fusion::p_Model::solve(const std::string & _645,const std::string & _646){
  _pubthis->flushSolutions();
  flush_parameters();
  task_solve(true,_645,_646);
}
void mosek::fusion::Model :: solve() { mosek::fusion::p_Model::_get_impl(this)->solve(); }void mosek::fusion::p_Model::solve(){
  _pubthis->flushSolutions();
  flush_parameters();
  task_solve(false,std::string (""),std::string (""));
}
void mosek::fusion::p_Model::flush_parameters(){
  if ((natconmap_numparameterized > (int)0))
  {
    {
      int _647 = task_numcon();
      std::shared_ptr< monty::ndarray< int,1 > > _648 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(natconmap_numparameterized)));
      _checked_ptr_1<int> _ptr__648(_648 ? _648->raw() : nullptr,_648 ? _648->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _649 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(natconmap_numparameterized)));
      _checked_ptr_1<int> _ptr__649(_649 ? _649->raw() : nullptr,_649 ? _649->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _650 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(natconmap_numparameterized)));
      _checked_ptr_1<double> _ptr__650(_650 ? _650->raw() : nullptr,_650 ? _650->size(0) : 0);
      int _651 = (int)0;
      int _8827 = (int)0;
      int _8828 = _647;
      for (int _652 = _8827; _652 < _8828; ++_652)
      {
        {
          int _653 = (((*natconmap_coderowptre)(_652)) - ((*natconmap_coderowptrb)(_652)));
          if ((_653 > (int)0))
          {
            {
              int _8829 = _651;
              int _8830 = safe_add( _651,_653 );
              for (int _654 = _8829; _654 < _8830; ++_654)
              {
                {
                  _ptr__648[_654] = _652;
                }
              }
              _651 += _653;
            }
          }
          {}
        }
      }
      evaluate_parameterized(xs,_647,natconmap_coderowptrb,natconmap_coderowptre,natconmap_codenidx,natconmap_codeptr,natconmap_code,natconmap_cconst,_649,_650);
      task_putaijlist(_648,_649,_650,(long long)(natconmap_numparameterized));
    }
  }
  {}
  if ((NULL != natconmap_objcodenidx.get()))
  {
    {
      int _655 = (int)((natconmap_objcodenidx)->size(0));
      std::shared_ptr< monty::ndarray< int,1 > > _656 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_655)));
      _checked_ptr_1<int> _ptr__656(_656 ? _656->raw() : nullptr,_656 ? _656->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _657 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_655)));
      _checked_ptr_1<double> _ptr__657(_657 ? _657->raw() : nullptr,_657 ? _657->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _658 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0)});
      _checked_ptr_1<int> _ptr__658(_658 ? _658->raw() : nullptr,_658 ? _658->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _659 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((natconmap_objcodenidx)->size(0)))});
      _checked_ptr_1<int> _ptr__659(_659 ? _659->raw() : nullptr,_659 ? _659->size(0) : 0);
      evaluate_parameterized(xs,(int)1,_658,_659,natconmap_objcodenidx,natconmap_objcodeptr,natconmap_objcode,natconmap_objcconst,_656,_657);
      task_putclist(_656,_657);
    }
  }
  {}
}
void mosek::fusion::Model :: flushParameters() { mosek::fusion::p_Model::_get_impl(this)->flushParameters(); }void mosek::fusion::p_Model::flushParameters(){
  flush_parameters();
}
void mosek::fusion::p_Model::evaluate_parameterized(monty::rc_ptr< ::mosek::fusion::WorkStack > _660,int _661,std::shared_ptr< monty::ndarray< int,1 > > _662,std::shared_ptr< monty::ndarray< int,1 > > _663,std::shared_ptr< monty::ndarray< long long,1 > > _664,std::shared_ptr< monty::ndarray< int,1 > > _665,std::shared_ptr< monty::ndarray< int,1 > > _666,std::shared_ptr< monty::ndarray< double,1 > > _667,std::shared_ptr< monty::ndarray< int,1 > > _668,std::shared_ptr< monty::ndarray< double,1 > > _669){
  _checked_ptr_1<int> _ptr__662(_662 ? _662->raw() : nullptr, _662 ? _662->size(0) : 0);
  _checked_ptr_1<int> _ptr__663(_663 ? _663->raw() : nullptr, _663 ? _663->size(0) : 0);
  _checked_ptr_1<long long> _ptr__664(_664 ? _664->raw() : nullptr, _664 ? _664->size(0) : 0);
  _checked_ptr_1<int> _ptr__665(_665 ? _665->raw() : nullptr, _665 ? _665->size(0) : 0);
  _checked_ptr_1<int> _ptr__666(_666 ? _666->raw() : nullptr, _666 ? _666->size(0) : 0);
  _checked_ptr_1<double> _ptr__667(_667 ? _667->raw() : nullptr, _667 ? _667->size(0) : 0);
  _checked_ptr_1<int> _ptr__668(_668 ? _668->raw() : nullptr, _668 ? _668->size(0) : 0);
  _checked_ptr_1<double> _ptr__669(_669 ? _669->raw() : nullptr, _669 ? _669->size(0) : 0);
  int _670 = _660->allocf64((int)((_666)->size(0)));
  int _671 = (int)0;
  std::shared_ptr< monty::ndarray< double,1 > > _672 = mosek::fusion::p_WorkStack::_get_impl(_660)->f64;
  _checked_ptr_1<double> _ptr__672(_672 ? _672->raw() : nullptr,_672 ? _672->size(0) : 0);
  int _673 = (int)0;
  int _8831 = (int)0;
  int _8832 = _661;
  for (int _674 = _8831; _674 < _8832; ++_674)
  {
    {
      int _8833 = _ptr__662[_674];
      int _8834 = _ptr__663[_674];
      for (int _675 = _8833; _675 < _8834; ++_675)
      {
        {
          int _8835 = _ptr__665[_675];
          int _8836 = _ptr__665[safe_add( _675,(int)1 )];
          for (int _676 = _8835; _676 < _8836; ++_676)
          {
            {
              if ((_ptr__666[_676] == 0))
              {
                {
                }
              }
              else
              {
                {
                  if ((_ptr__666[_676] == 1))
                  {
                    {
                      _ptr__672[safe_add( _670,_671 )] = ((*param_value)((int)_ptr__667[_676]));
                      ++ _671;
                    }
                  }
                  else
                  {
                    {
                      if ((_ptr__666[_676] == 2))
                      {
                        {
                          _ptr__672[safe_add( _670,_671 )] = _ptr__667[_676];
                          ++ _671;
                        }
                      }
                      else
                      {
                        {
                          if ((_ptr__666[_676] == 3))
                          {
                            {
                              _ptr__672[(safe_add( _670,_671 ) - (int)2)] += _ptr__672[(safe_add( _670,_671 ) - (int)1)];
                              -- _671;
                            }
                          }
                          else
                          {
                            {
                              if ((_ptr__666[_676] == 4))
                              {
                                {
                                  _ptr__672[(safe_add( _670,_671 ) - (int)1)] = (-_ptr__672[(safe_add( _670,_671 ) - (int)1)]);
                                }
                              }
                              else
                              {
                                {
                                  if ((_ptr__666[_676] == 5))
                                  {
                                    {
                                      _ptr__672[(safe_add( _670,_671 ) - (int)2)] *= _ptr__672[(safe_add( _670,_671 ) - (int)1)];
                                      -- _671;
                                    }
                                  }
                                  else
                                  {
                                    {
                                      if ((_ptr__666[_676] == 6))
                                      {
                                        {
                                          _ptr__672[(safe_add( _670,_671 ) - (int)1)] = (1.0 / _ptr__672[(safe_add( _670,_671 ) - (int)1)]);
                                        }
                                      }
                                      else
                                      {
                                        {
                                          if ((_ptr__666[_676] == 8))
                                          {
                                            {
                                              double _677 = 0.0;
                                              int _8837 = (int)0;
                                              int _8838 = (int)_ptr__667[_676];
                                              for (int _678 = _8837; _678 < _8838; ++_678)
                                              {
                                                {
                                                  _677 += _ptr__672[(safe_add( _670,_671 ) - (int)1)];
                                                  -- _671;
                                                }
                                              }
                                              _ptr__672[safe_add( _670,_671 )] = _677;
                                              ++ _671;
                                            }
                                          }
                                          else
                                          {
                                            {
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          _ptr__668[_673] = (int)_ptr__664[_675];
          _ptr__669[_673] = _ptr__672[_670];
          _671 = (int)0;
          ++ _673;
        }
      }
    }
  }
  _660->popf64((int)((_666)->size(0)));
}
void mosek::fusion::Model :: flushSolutions() { mosek::fusion::p_Model::_get_impl(this)->flushSolutions(); }void mosek::fusion::p_Model::flushSolutions(){
  flush_initsol(::mosek::fusion::SolutionType::Interior);
  flush_initsol(::mosek::fusion::SolutionType::Integer);
  flush_initsol(::mosek::fusion::SolutionType::Basic);
}
void mosek::fusion::p_Model::flush_initsol(mosek::fusion::SolutionType _679){
  if ((NULL != initsol_xx.get()))
  {
    {
      int _680 = task_numvar();
      std::shared_ptr< monty::ndarray< double,1 > > _681 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_680)));
      _checked_ptr_1<double> _ptr__681(_681 ? _681->raw() : nullptr,_681 ? _681->size(0) : 0);
      try
      {
        {
          monty::rc_ptr< ::mosek::fusion::SolutionStruct > _683 = __mosek_2fusion_2Model__get_sol_cache(_679,true);
          if ((NULL != mosek::fusion::p_SolutionStruct::_get_impl(_683)->xx.get()))
          {
            {
              int _8839;
              bool _8840 = ((int)((mosek::fusion::p_SolutionStruct::_get_impl(_683)->xx)->size(0)) <= _680);
              if (_8840)
              {
                _8839 = (int)((mosek::fusion::p_SolutionStruct::_get_impl(_683)->xx)->size(0));
              }
              else
              {
                _8839 = _680;
              }
              ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_683)->xx,(int)0,_681,(int)0,_8839);
            }
          }
          {}
        }
      }
      catch (mosek::fusion::SolutionError _682)
      {
        {
        }
      }
      int _8841;
      bool _8842 = ((int)((initsol_xx)->size(0)) <= _680);
      if (_8842)
      {
        _8841 = (int)((initsol_xx)->size(0));
      }
      else
      {
        _8841 = _680;
      }
      int _684 = _8841;
      int _8843 = (int)0;
      int _8844 = _684;
      for (int _685 = _8843; _685 < _8844; ++_685)
      {
        {
          if (((*initsol_xx_flag)(_685)))
          {
            {
              _ptr__681[_685] = ((*initsol_xx)(_685));
            }
          }
          {}
        }
      }
      task_putxx_slice(_679,(int)0,_680,_681);
    }
  }
  {}
}
mosek::fusion::SolutionStatus mosek::fusion::Model :: getDualSolutionStatus() { return mosek::fusion::p_Model::_get_impl(this)->getDualSolutionStatus(); }mosek::fusion::SolutionStatus mosek::fusion::p_Model::getDualSolutionStatus(){
  return _pubthis->getDualSolutionStatus(solutionptr);
}
mosek::fusion::ProblemStatus mosek::fusion::Model :: getProblemStatus() { return mosek::fusion::p_Model::_get_impl(this)->getProblemStatus(); }mosek::fusion::ProblemStatus mosek::fusion::p_Model::getProblemStatus(){
  return _pubthis->getProblemStatus(solutionptr);
}
mosek::fusion::SolutionStatus mosek::fusion::Model :: getPrimalSolutionStatus() { return mosek::fusion::p_Model::_get_impl(this)->getPrimalSolutionStatus(); }mosek::fusion::SolutionStatus mosek::fusion::p_Model::getPrimalSolutionStatus(){
  return _pubthis->getPrimalSolutionStatus(solutionptr);
}
double mosek::fusion::Model :: dualObjValue() { return mosek::fusion::p_Model::_get_impl(this)->dualObjValue(); }double mosek::fusion::p_Model::dualObjValue(){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(::mosek::fusion::SolutionType::Default,false))->dobj;
}
double mosek::fusion::Model :: primalObjValue() { return mosek::fusion::p_Model::_get_impl(this)->primalObjValue(); }double mosek::fusion::p_Model::primalObjValue(){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(::mosek::fusion::SolutionType::Default,true))->pobj;
}
monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::p_Model::__mosek_2fusion_2Model__get_sol_cache(mosek::fusion::SolutionType _686,bool _687,bool _688){
  monty::rc_ptr< ::mosek::fusion::SolutionStruct > _689 = nullptr;
  mosek::fusion::SolutionType _690 = _686;
  if ((_690 == ::mosek::fusion::SolutionType::Default))
  {
    {
      _690 = solutionptr;
    }
  }
  {}
  if ((_690 == ::mosek::fusion::SolutionType::Default))
  {
    {
      if ((NULL != sol_itg.get()))
      {
        {
          _689 = sol_itg;
        }
      }
      else if((NULL != sol_bas.get()))
      {
        {
          _689 = sol_bas;
        }
      }
      else
      {
        {
          _689 = sol_itr;
        }
      }
    }
  }
  else if((_690 == ::mosek::fusion::SolutionType::Interior))
  {
    {
      _689 = sol_itr;
    }
  }
  else if((_690 == ::mosek::fusion::SolutionType::Basic))
  {
    {
      _689 = sol_bas;
    }
  }
  else if((_690 == ::mosek::fusion::SolutionType::Integer))
  {
    {
      _689 = sol_itg;
    }
  }
  {}
  if ((NULL == _689.get()))
  {
    {
      throw ::mosek::fusion::SolutionError(std::string ("Solution not available"));
    }
  }
  else
  {
    {
      if ((_688 || ((_687 && _689->isPrimalAcceptable(acceptable_sol)) || ((!_687) && _689->isDualAcceptable(acceptable_sol)))))
      {
        {
          return _689;
        }
      }
      else
      {
        {
          monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _691 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
          mosek::fusion::SolutionStatus _692 = mosek::fusion::p_SolutionStruct::_get_impl(_689)->pstatus;
          mosek::fusion::ProblemStatus _693 = mosek::fusion::p_SolutionStruct::_get_impl(_689)->probstatus;
          if ((!_687))
          {
            {
              _692 = mosek::fusion::p_SolutionStruct::_get_impl(_689)->dstatus;
            }
          }
          {}
          _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Solution status is "));
          if ((_692 == ::mosek::fusion::SolutionStatus::Undefined))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Undefined"));
            }
          }
          else if((_692 == ::mosek::fusion::SolutionStatus::Unknown))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Unknown"));
            }
          }
          else if((_692 == ::mosek::fusion::SolutionStatus::Optimal))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Optimal"));
            }
          }
          else if((_692 == ::mosek::fusion::SolutionStatus::Feasible))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Feasible"));
            }
          }
          else if((_692 == ::mosek::fusion::SolutionStatus::Certificate))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Certificate"));
            }
          }
          else if((_692 == ::mosek::fusion::SolutionStatus::IllposedCert))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("IllposedCert"));
            }
          }
          {}
          _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" but "));
          if ((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Anything))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Anything"));
            }
          }
          else if((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Optimal))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Optimal"));
            }
          }
          else if((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Feasible))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("at least Feasible"));
            }
          }
          else if((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Certificate))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Certificate"));
            }
          }
          {}
          _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" is expected. Reason: Accessing "));
          if ((_689 == sol_itr))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("interior-point solution"));
            }
          }
          else if((_689 == sol_bas))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("basic solution"));
            }
          }
          else if((_689 == sol_itg))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("integer solution"));
            }
          }
          {}
          _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" whose problem status is "));
          if ((_693 == ::mosek::fusion::ProblemStatus::Unknown))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Unknown"));
            }
          }
          else if((_693 == ::mosek::fusion::ProblemStatus::PrimalAndDualFeasible))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalAndDualFeasible"));
            }
          }
          else if((_693 == ::mosek::fusion::ProblemStatus::PrimalFeasible))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalFeasible"));
            }
          }
          else if((_693 == ::mosek::fusion::ProblemStatus::DualFeasible))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("DualFeasible"));
            }
          }
          else if((_693 == ::mosek::fusion::ProblemStatus::PrimalInfeasible))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalInfeasible"));
            }
          }
          else if((_693 == ::mosek::fusion::ProblemStatus::DualInfeasible))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("DualInfeasible"));
            }
          }
          else if((_693 == ::mosek::fusion::ProblemStatus::PrimalAndDualInfeasible))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalAndDualInfeasible"));
            }
          }
          else if((_693 == ::mosek::fusion::ProblemStatus::IllPosed))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("IllPosed"));
            }
          }
          else if((_693 == ::mosek::fusion::ProblemStatus::PrimalInfeasibleOrUnbounded))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalInfeasibleOrUnbounded"));
            }
          }
          {}
          _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("."));
          throw ::mosek::fusion::SolutionError(_691->toString());
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::p_Model::__mosek_2fusion_2Model__get_sol_cache(mosek::fusion::SolutionType _694,bool _695){
  return __mosek_2fusion_2Model__get_sol_cache(_694,_695,false);
}
void mosek::fusion::p_Model::setSolution_xx(std::shared_ptr< monty::ndarray< int,1 > > _696,std::shared_ptr< monty::ndarray< double,1 > > _697){
  _checked_ptr_1<int> _ptr__696(_696 ? _696->raw() : nullptr, _696 ? _696->size(0) : 0);
  _checked_ptr_1<double> _ptr__697(_697 ? _697->raw() : nullptr, _697 ? _697->size(0) : 0);
  ensure_initsol_xx();
  int _8845 = (int)0;
  int _8846 = (int)((_696)->size(0));
  for (int _698 = _8845; _698 < _8846; ++_698)
  {
    {
      ((*initsol_xx)(_ptr__696[_698])) = _ptr__697[_698];
      ((*initsol_xx_flag)(_ptr__696[_698])) = true;
    }
  }
}
void mosek::fusion::p_Model::ensure_initsol_xx(){
  int _699 = (int)((natvarmap_idx)->size(0));
  if ((NULL == initsol_xx.get()))
  {
    {
      initsol_xx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_699)));
      std::vector<bool> _8847;
      for (int _700 = (int)0, _8848 = _699; _700 < _8848 ; ++_700)
      {
        _8847.push_back(false);
      }
      auto _8849 = std::shared_ptr< monty::ndarray< bool,1 > >(new monty::ndarray< bool,1 >(monty::shape(_8847.size()),_8847.begin(),_8847.end()));
      initsol_xx_flag = _8849;
    }
  }
  else if(((int)((initsol_xx)->size(0)) < _699))
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _701 = initsol_xx;
      _checked_ptr_1<double> _ptr__701(_701 ? _701->raw() : nullptr,_701 ? _701->size(0) : 0);
      std::shared_ptr< monty::ndarray< bool,1 > > _702 = initsol_xx_flag;
      initsol_xx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_699)));
      initsol_xx_flag = std::shared_ptr< monty::ndarray< bool,1 > >(new monty::ndarray< bool,1 >(monty::shape(_699)));
      ::mosek::fusion::Utils::Tools::arraycopy(_701,(int)0,initsol_xx,(int)0,_699);
      int _8850 = (int)0;
      int _8851 = _699;
      for (int _703 = _8850; _703 < _8851; ++_703)
      {
        {
          ((*initsol_xx_flag)(_703)) = ((*_702)(_703));
        }
      }
    }
  }
  {}
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_bars(mosek::fusion::SolutionType _704){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_704,false))->bars;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_barx(mosek::fusion::SolutionType _705){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_705,true))->barx;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_y(mosek::fusion::SolutionType _706){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_706,false))->y;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_xc(mosek::fusion::SolutionType _707){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_707,true))->xc;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_snx(mosek::fusion::SolutionType _708){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_708,false))->snx;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_suc(mosek::fusion::SolutionType _709){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_709,false))->suc;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_slc(mosek::fusion::SolutionType _710){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_710,false))->slc;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_sux(mosek::fusion::SolutionType _711){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_711,false))->sux;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_slx(mosek::fusion::SolutionType _712){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_712,false))->slx;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_yx(mosek::fusion::SolutionType _713){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_713,false))->yx;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_xx(mosek::fusion::SolutionType _714){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_714,true))->xx;
}
void mosek::fusion::Model :: selectedSolution(mosek::fusion::SolutionType _715) { mosek::fusion::p_Model::_get_impl(this)->selectedSolution(_715); }void mosek::fusion::p_Model::selectedSolution(mosek::fusion::SolutionType _715){
  solutionptr = _715;
}
mosek::fusion::AccSolutionStatus mosek::fusion::Model :: getAcceptedSolutionStatus() { return mosek::fusion::p_Model::_get_impl(this)->getAcceptedSolutionStatus(); }mosek::fusion::AccSolutionStatus mosek::fusion::p_Model::getAcceptedSolutionStatus(){
  return acceptable_sol;
}
void mosek::fusion::Model :: acceptedSolutionStatus(mosek::fusion::AccSolutionStatus _716) { mosek::fusion::p_Model::_get_impl(this)->acceptedSolutionStatus(_716); }void mosek::fusion::p_Model::acceptedSolutionStatus(mosek::fusion::AccSolutionStatus _716){
  acceptable_sol = _716;
}
mosek::fusion::ProblemStatus mosek::fusion::Model :: getProblemStatus(mosek::fusion::SolutionType _717) { return mosek::fusion::p_Model::_get_impl(this)->getProblemStatus(_717); }mosek::fusion::ProblemStatus mosek::fusion::p_Model::getProblemStatus(mosek::fusion::SolutionType _717){
  monty::rc_ptr< ::mosek::fusion::SolutionStruct > _718 = nullptr;
  if ((_717 == ::mosek::fusion::SolutionType::Default))
  {
    {
      if ((NULL != sol_itg.get()))
      {
        {
          _718 = sol_itg;
        }
      }
      else if((NULL != sol_bas.get()))
      {
        {
          _718 = sol_bas;
        }
      }
      else
      {
        {
          _718 = sol_itr;
        }
      }
    }
  }
  else if((_717 == ::mosek::fusion::SolutionType::Interior))
  {
    {
      _718 = sol_itr;
    }
  }
  else if((_717 == ::mosek::fusion::SolutionType::Basic))
  {
    {
      _718 = sol_bas;
    }
  }
  else if((_717 == ::mosek::fusion::SolutionType::Integer))
  {
    {
      _718 = sol_itg;
    }
  }
  {}
  if ((NULL == _718.get()))
  {
    {
      return ::mosek::fusion::ProblemStatus::Unknown;
    }
  }
  else
  {
    {
      return mosek::fusion::p_SolutionStruct::_get_impl(_718)->probstatus;
    }
  }
}
mosek::fusion::SolutionStatus mosek::fusion::Model :: getDualSolutionStatus(mosek::fusion::SolutionType _719) { return mosek::fusion::p_Model::_get_impl(this)->getDualSolutionStatus(_719); }mosek::fusion::SolutionStatus mosek::fusion::p_Model::getDualSolutionStatus(mosek::fusion::SolutionType _719){
  return getSolutionStatus(_719,false);
}
mosek::fusion::SolutionStatus mosek::fusion::Model :: getPrimalSolutionStatus(mosek::fusion::SolutionType _720) { return mosek::fusion::p_Model::_get_impl(this)->getPrimalSolutionStatus(_720); }mosek::fusion::SolutionStatus mosek::fusion::p_Model::getPrimalSolutionStatus(mosek::fusion::SolutionType _720){
  return getSolutionStatus(_720,true);
}
mosek::fusion::SolutionStatus mosek::fusion::p_Model::getSolutionStatus(mosek::fusion::SolutionType _721,bool _722){
  try
  {
    {
      monty::rc_ptr< ::mosek::fusion::SolutionStruct > _724 = __mosek_2fusion_2Model__get_sol_cache(_721,_722,true);
      if (_722)
      {
        {
          return mosek::fusion::p_SolutionStruct::_get_impl(_724)->pstatus;
        }
      }
      else
      {
        {
          return mosek::fusion::p_SolutionStruct::_get_impl(_724)->dstatus;
        }
      }
    }
  }
  catch (mosek::fusion::SolutionError _723)
  {
    {
      return ::mosek::fusion::SolutionStatus::Undefined;
    }
  }
}
void mosek::fusion::p_Model::update(std::shared_ptr< monty::ndarray< int,1 > > _725,monty::rc_ptr< ::mosek::fusion::Expression > _726){
  _checked_ptr_1<int> _ptr__725(_725 ? _725->raw() : nullptr, _725 ? _725->size(0) : 0);
  ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_726)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())->eval(ws,rs,xs);
  ws->pop_expr();
  int _727 = mosek::fusion::p_WorkStack::_get_impl(ws)->nd;
  int _728 = mosek::fusion::p_WorkStack::_get_impl(ws)->shape_base;
  int _729 = mosek::fusion::p_WorkStack::_get_impl(ws)->nelem;
  int _730 = mosek::fusion::p_WorkStack::_get_impl(ws)->nnz;
  bool _731 = mosek::fusion::p_WorkStack::_get_impl(ws)->hassp;
  int _732 = mosek::fusion::p_WorkStack::_get_impl(ws)->ncodeatom;
  int _733 = mosek::fusion::p_WorkStack::_get_impl(ws)->ptr_base;
  int _734 = mosek::fusion::p_WorkStack::_get_impl(ws)->sp_base;
  int _735 = mosek::fusion::p_WorkStack::_get_impl(ws)->nidxs_base;
  int _736 = mosek::fusion::p_WorkStack::_get_impl(ws)->cof_base;
  int _737 = mosek::fusion::p_WorkStack::_get_impl(ws)->code_base;
  int _738 = mosek::fusion::p_WorkStack::_get_impl(ws)->codeptr_base;
  int _739 = mosek::fusion::p_WorkStack::_get_impl(ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _740 = mosek::fusion::p_WorkStack::_get_impl(ws)->i32;
  _checked_ptr_1<int> _ptr__740(_740 ? _740->raw() : nullptr,_740 ? _740->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _741 = mosek::fusion::p_WorkStack::_get_impl(ws)->i64;
  _checked_ptr_1<long long> _ptr__741(_741 ? _741->raw() : nullptr,_741 ? _741->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _742 = mosek::fusion::p_WorkStack::_get_impl(ws)->f64;
  _checked_ptr_1<double> _ptr__742(_742 ? _742->raw() : nullptr,_742 ? _742->size(0) : 0);
  int _743 = (int)0;
  int _8852 = (int)0;
  int _8853 = _729;
  for (int _744 = _8852; _744 < _8853; ++_744)
  {
    {
      if ((((*natconmap_slackidx)(_ptr__725[_744])) > (int)0))
      {
        {
          ++ _743;
        }
      }
      {}
    }
  }
  int _745 = _729;
  int _746 = safe_add( _730,_743 );
  std::shared_ptr< monty::ndarray< long long,1 > > _747 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _729,(int)1 ))));
  _checked_ptr_1<long long> _ptr__747(_747 ? _747->raw() : nullptr,_747 ? _747->size(0) : 0);
  int _8854 = (int)0;
  int _8855 = _729;
  for (int _748 = _8854; _748 < _8855; ++_748)
  {
    {
      int _8856 = _ptr__740[safe_add( _733,_748 )];
      int _8857 = _ptr__740[safe_add( safe_add( _733,_748 ),(int)1 )];
      for (int _749 = _8856; _749 < _8857; ++_749)
      {
        {
          if ((_ptr__741[safe_add( _735,_749 )] >= (int)0))
          {
            {
              ++ _ptr__747[safe_add( _748,(int)1 )];
            }
          }
          {}
        }
      }
      if ((((*natconmap_slackidx)(_ptr__725[_748])) > (int)0))
      {
        {
          ++ _ptr__747[safe_add( _748,(int)1 )];
        }
      }
      {}
    }
  }
  int _8858 = (int)0;
  int _8859 = _729;
  for (int _750 = _8858; _750 < _8859; ++_750)
  {
    {
      _ptr__747[safe_add( _750,(int)1 )] += _ptr__747[_750];
    }
  }
  long long _751 = _ptr__747[_729];
  std::shared_ptr< monty::ndarray< int,1 > > _752 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_751)));
  _checked_ptr_1<int> _ptr__752(_752 ? _752->raw() : nullptr,_752 ? _752->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _753 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_751)));
  _checked_ptr_1<double> _ptr__753(_753 ? _753->raw() : nullptr,_753 ? _753->size(0) : 0);
  int _754 = (int)0;
  int _8860 = (int)0;
  int _8861 = _729;
  for (int _755 = _8860; _755 < _8861; ++_755)
  {
    {
      int _8862 = _ptr__740[safe_add( _733,_755 )];
      int _8863 = _ptr__740[safe_add( safe_add( _733,_755 ),(int)1 )];
      for (int _756 = _8862; _756 < _8863; ++_756)
      {
        {
          if ((_ptr__741[safe_add( _735,_756 )] >= (int)0))
          {
            {
              _ptr__752[_754] = (int)_ptr__741[safe_add( _735,_756 )];
              _ptr__753[_754] = _ptr__742[safe_add( _736,_756 )];
              ++ _754;
            }
          }
          {}
        }
      }
      if ((((*natconmap_slackidx)(_ptr__725[_755])) > (int)0))
      {
        {
          _ptr__752[_754] = (int)(((*natconmap_slackidx)(_ptr__725[_755])) - (int)1);
          _ptr__753[_754] = (-1.0);
          ++ _754;
        }
      }
      {}
    }
  }
  task_putarowlist(_725,_747,_752,_753);
  if ((_732 == (int)0))
  {
    {
      int _8864 = (int)0;
      int _8865 = _729;
      for (int _757 = _8864; _757 < _8865; ++_757)
      {
        {
          natconmap_numparameterized -= (((*natconmap_coderowptre)(_ptr__725[_757])) - ((*natconmap_coderowptrb)(_ptr__725[_757])));
          ((*natconmap_coderowptre)(_ptr__725[_757])) = ((*natconmap_coderowptrb)(_ptr__725[_757]));
        }
      }
    }
  }
  else
  {
    {
      bool _758 = true;
      int _759 = (int)0;
      int _760 = (int)0;
      int _8866 = (int)0;
      int _8867 = _729;
      for (int _761 = _8866; _761 < _8867; ++_761)
      {
        {
          int _8868 = _ptr__740[safe_add( _733,_761 )];
          int _8869 = _ptr__740[safe_add( safe_add( _733,_761 ),(int)1 )];
          for (int _762 = _8868; _762 < _8869; ++_762)
          {
            {
              if ((((_ptr__740[safe_add( safe_add( _738,_762 ),(int)1 )] - _ptr__740[safe_add( _738,_762 )]) == (int)1) && ((_ptr__740[safe_add( _737,_ptr__740[safe_add( _738,_762 )] )] == 10) || (_ptr__740[safe_add( _737,_ptr__740[safe_add( _738,_762 )] )] == 2))))
              {
                {
                }
              }
              else
              {
                {
                  ++ _760;
                  _759 += (_ptr__740[safe_add( safe_add( _738,_762 ),(int)1 )] - _ptr__740[safe_add( _738,_762 )]);
                }
              }
            }
          }
        }
      }
      int _763 = natconmap_codenztop;
      int _764 = natconmap_codeatomtop;
      natconmap_codealloc(_760,_759);
      int _765 = _764;
      int _766 = _763;
      int _8870 = (int)0;
      int _8871 = _729;
      for (int _767 = _8870; _767 < _8871; ++_767)
      {
        {
          natconmap_numparameterized -= (((*natconmap_coderowptre)(_ptr__725[_767])) - ((*natconmap_coderowptrb)(_ptr__725[_767])));
          ((*natconmap_coderowptrb)(_ptr__725[_767])) = _766;
          int _8872 = _ptr__740[safe_add( _733,_767 )];
          int _8873 = _ptr__740[safe_add( safe_add( _733,_767 ),(int)1 )];
          for (int _768 = _8872; _768 < _8873; ++_768)
          {
            {
              if ((((_ptr__740[safe_add( safe_add( _738,_768 ),(int)1 )] - _ptr__740[safe_add( _738,_768 )]) == (int)1) && ((_ptr__740[safe_add( _737,_ptr__740[safe_add( _738,_768 )] )] == 10) || (_ptr__740[safe_add( _737,_ptr__740[safe_add( _738,_768 )] )] == 2))))
              {
                {
                }
              }
              else
              {
                {
                  int _8874 = _ptr__740[safe_add( _738,_768 )];
                  int _8875 = _ptr__740[safe_add( safe_add( _738,_768 ),(int)1 )];
                  for (int _769 = _8874; _769 < _8875; ++_769)
                  {
                    {
                      ((*natconmap_code)(_765)) = _ptr__740[safe_add( _737,_769 )];
                      ((*natconmap_cconst)(_765)) = _ptr__742[safe_add( _739,_769 )];
                      ++ _765;
                    }
                  }
                  ((*natconmap_codeptr)(safe_add( _766,(int)1 ))) = _765;
                  ((*natconmap_codenidx)(_766)) = _ptr__741[safe_add( _735,_768 )];
                  _758 = (_ptr__741[safe_add( _735,_768 )] >= (int)0);
                  ++ _766;
                }
              }
            }
          }
          ((*natconmap_coderowptre)(_ptr__725[_767])) = _766;
        }
      }
      natconmap_numparameterized += _760;
      if ((!_758))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Expression contains parameterized SDP non-zero"));
        }
      }
      {}
    }
  }
}
void mosek::fusion::p_Model::update(std::shared_ptr< monty::ndarray< int,1 > > _770,monty::rc_ptr< ::mosek::fusion::Expression > _771,std::shared_ptr< monty::ndarray< int,1 > > _772){
  _checked_ptr_1<int> _ptr__770(_770 ? _770->raw() : nullptr, _770 ? _770->size(0) : 0);
  _checked_ptr_1<int> _ptr__772(_772 ? _772->raw() : nullptr, _772 ? _772->size(0) : 0);
  int _8876 = (int)0;
  int _8877 = (int)((_770)->size(0));
  for (int _773 = _8876; _773 < _8877; ++_773)
  {
    {
      if ((((*natconmap_coderowptrb)(_773)) < ((*natconmap_coderowptre)(_773))))
      {
        {
          throw ::mosek::fusion::UpdateError(std::string ("Cannot update parameterized constraint"));
        }
      }
      {}
    }
  }
  int _774 = safe_mul( (int)((_770)->size(0)),(int)((_772)->size(0)) );
  std::shared_ptr< monty::ndarray< double,1 > > _775 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_774)));
  _checked_ptr_1<double> _ptr__775(_775 ? _775->raw() : nullptr,_775 ? _775->size(0) : 0);
  std::vector<int> _8878;
  for (int _777 = (int)0, _8879 = (int)((_770)->size(0)); _777 < _8879 ; ++_777)
  {
    for (int _778 = (int)0, _8880 = (int)((_772)->size(0)); _778 < _8880 ; ++_778)
    {
      _8878.push_back(_ptr__770[_777]);
    }
  }
  auto _8881 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8878.size()),_8878.begin(),_8878.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _776 = _8881;
  _checked_ptr_1<int> _ptr__776(_776 ? _776->raw() : nullptr,_776 ? _776->size(0) : 0);
  std::vector<int> _8882;
  for (int _780 = (int)0, _8883 = (int)((_770)->size(0)); _780 < _8883 ; ++_780)
  {
    for (int _781 = (int)0, _8884 = (int)((_772)->size(0)); _781 < _8884 ; ++_781)
    {
      _8882.push_back(_ptr__772[_781]);
    }
  }
  auto _8885 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8882.size()),_8882.begin(),_8882.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _779 = _8885;
  _checked_ptr_1<int> _ptr__779(_779 ? _779->raw() : nullptr,_779 ? _779->size(0) : 0);
  ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_771)).as<::mosek::fusion::Expression>())->eval(ws,rs,xs);
  ws->pop_expr();
  int _782 = mosek::fusion::p_WorkStack::_get_impl(ws)->nd;
  int _783 = mosek::fusion::p_WorkStack::_get_impl(ws)->nelem;
  int _784 = mosek::fusion::p_WorkStack::_get_impl(ws)->nnz;
  bool _785 = mosek::fusion::p_WorkStack::_get_impl(ws)->hassp;
  int _786 = mosek::fusion::p_WorkStack::_get_impl(ws)->ncodeatom;
  int _787 = mosek::fusion::p_WorkStack::_get_impl(ws)->shape_base;
  int _788 = mosek::fusion::p_WorkStack::_get_impl(ws)->ptr_base;
  int _789 = mosek::fusion::p_WorkStack::_get_impl(ws)->sp_base;
  int _790 = mosek::fusion::p_WorkStack::_get_impl(ws)->nidxs_base;
  int _791 = mosek::fusion::p_WorkStack::_get_impl(ws)->cof_base;
  int _792 = mosek::fusion::p_WorkStack::_get_impl(ws)->code_base;
  int _793 = mosek::fusion::p_WorkStack::_get_impl(ws)->codeptr_base;
  int _794 = mosek::fusion::p_WorkStack::_get_impl(ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _795 = mosek::fusion::p_WorkStack::_get_impl(ws)->i32;
  _checked_ptr_1<int> _ptr__795(_795 ? _795->raw() : nullptr,_795 ? _795->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _796 = mosek::fusion::p_WorkStack::_get_impl(ws)->i64;
  _checked_ptr_1<long long> _ptr__796(_796 ? _796->raw() : nullptr,_796 ? _796->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _797 = mosek::fusion::p_WorkStack::_get_impl(ws)->f64;
  _checked_ptr_1<double> _ptr__797(_797 ? _797->raw() : nullptr,_797 ? _797->size(0) : 0);
  int _798 = (int)0;
  int _8886 = (int)0;
  int _8887 = _783;
  for (int _799 = _8886; _799 < _8887; ++_799)
  {
    {
      int _800 = _ptr__795[safe_add( _788,_799 )];
      int _801 = _ptr__795[safe_add( safe_add( _788,_799 ),(int)1 )];
      int _802 = _800;
      int _803 = (int)0;
      while ( ((_803 < (int)((_772)->size(0))) && (_802 < _801)) )
      {
        {
          if ((_ptr__772[_803] < _ptr__796[safe_add( _790,_802 )]))
          {
            {
              ++ _803;
            }
          }
          else if((_ptr__772[_803] > _ptr__796[safe_add( _790,_802 )]))
          {
            {
              ++ _802;
            }
          }
          else
          {
            {
              _ptr__775[safe_add( _798,_803 )] = _ptr__797[safe_add( _791,_802 )];
              ++ _803;
              ++ _802;
            }
          }
        }
      }
      _798 += (int)((_772)->size(0));
    }
  }
  task_putaijlist(_776,_779,_775,(long long)(_774));
  if ((_786 == (int)0))
  {
    {
      int _8888 = (int)0;
      int _8889 = _783;
      for (int _804 = _8888; _804 < _8889; ++_804)
      {
        {
          natconmap_numparameterized -= (((*natconmap_coderowptre)(_ptr__770[_804])) - ((*natconmap_coderowptrb)(_ptr__770[_804])));
          ((*natconmap_coderowptre)(_ptr__770[_804])) = ((*natconmap_coderowptrb)(_ptr__770[_804]));
        }
      }
    }
  }
  else
  {
    {
      bool _805 = true;
      int _806 = (int)0;
      int _807 = (int)0;
      int _8890 = (int)0;
      int _8891 = _783;
      for (int _808 = _8890; _808 < _8891; ++_808)
      {
        {
          int _8892 = _ptr__795[safe_add( _788,_808 )];
          int _8893 = _ptr__795[safe_add( safe_add( _788,_808 ),(int)1 )];
          for (int _809 = _8892; _809 < _8893; ++_809)
          {
            {
              if ((((_ptr__795[safe_add( safe_add( _793,_809 ),(int)1 )] - _ptr__795[safe_add( _793,_809 )]) == (int)1) && ((_ptr__795[safe_add( _792,_ptr__795[safe_add( _793,_809 )] )] == 10) || (_ptr__795[safe_add( _792,_ptr__795[safe_add( _793,_809 )] )] == 2))))
              {
                {
                }
              }
              else
              {
                {
                  ++ _806;
                  _807 += (_ptr__795[safe_add( safe_add( _793,_809 ),(int)1 )] - _ptr__795[safe_add( _793,_809 )]);
                }
              }
            }
          }
        }
      }
      int _810 = natconmap_codenztop;
      int _811 = natconmap_codeatomtop;
      natconmap_codealloc(_806,_807);
      int _812 = _811;
      int _813 = _810;
      int _8894 = (int)0;
      int _8895 = _783;
      for (int _814 = _8894; _814 < _8895; ++_814)
      {
        {
          natconmap_numparameterized -= (((*natconmap_coderowptre)(_ptr__770[_814])) - ((*natconmap_coderowptrb)(_ptr__770[_814])));
          ((*natconmap_coderowptrb)(_ptr__770[_814])) = _813;
          int _8896 = _ptr__795[safe_add( _788,_814 )];
          int _8897 = _ptr__795[safe_add( safe_add( _788,_814 ),(int)1 )];
          for (int _815 = _8896; _815 < _8897; ++_815)
          {
            {
              if ((((_ptr__795[safe_add( safe_add( _793,_815 ),(int)1 )] - _ptr__795[safe_add( _793,_815 )]) == (int)1) && ((_ptr__795[safe_add( _792,_ptr__795[safe_add( _793,_815 )] )] == 10) || (_ptr__795[safe_add( _792,_ptr__795[safe_add( _793,_815 )] )] == 2))))
              {
                {
                }
              }
              else
              {
                {
                  int _8898 = _ptr__795[safe_add( _793,_815 )];
                  int _8899 = _ptr__795[safe_add( safe_add( _793,_815 ),(int)1 )];
                  for (int _816 = _8898; _816 < _8899; ++_816)
                  {
                    {
                      ((*natconmap_code)(_812)) = _ptr__795[safe_add( _792,_816 )];
                      ((*natconmap_cconst)(_812)) = _ptr__797[safe_add( _794,_816 )];
                      ++ _812;
                    }
                  }
                  ((*natconmap_codeptr)(safe_add( _813,(int)1 ))) = _812;
                  ((*natconmap_codenidx)(_813)) = _ptr__796[safe_add( _790,_815 )];
                  _805 = (_ptr__796[safe_add( _790,_815 )] >= (int)0);
                  ++ _813;
                }
              }
            }
          }
          ((*natconmap_coderowptre)(_ptr__770[_814])) = _813;
        }
      }
      natconmap_numparameterized += _806;
      if ((!_805))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Expression contains parameterized SDP non-zero"));
        }
      }
      {}
    }
  }
}
void mosek::fusion::Model :: updateObjective(monty::rc_ptr< ::mosek::fusion::Expression > _817,monty::rc_ptr< ::mosek::fusion::Variable > _818) { mosek::fusion::p_Model::_get_impl(this)->updateObjective(_817,_818); }void mosek::fusion::p_Model::updateObjective(monty::rc_ptr< ::mosek::fusion::Expression > _817,monty::rc_ptr< ::mosek::fusion::Variable > _818){
  if ((_817->getSize() != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid expression size for objective"));
    }
  }
  {}
  if ((NULL != natconmap_objcodenidx.get()))
  {
    {
      throw ::mosek::fusion::UpdateError(std::string ("Cannot update parameterized objective"));
    }
  }
  {}
  int _819 = _818->numInst();
  std::shared_ptr< monty::ndarray< long long,1 > > _820 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_819)));
  _checked_ptr_1<long long> _ptr__820(_820 ? _820->raw() : nullptr,_820 ? _820->size(0) : 0);
  if ((_819 < _818->getSize()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _821 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_819)));
      _checked_ptr_1<long long> _ptr__821(_821 ? _821->raw() : nullptr,_821 ? _821->size(0) : 0);
      _818->inst((int)0,_821,(int)0,_820);
    }
  }
  else
  {
    {
      _818->inst((int)0,_820);
    }
  }
  int _8900 = (int)0;
  int _8901 = _819;
  for (int _822 = _8900; _822 < _8901; ++_822)
  {
    {
      if ((_ptr__820[_822] < (int)0))
      {
        {
          throw ::mosek::fusion::UpdateError(std::string ("Updating semidefinite terms is currently not possible"));
        }
      }
      {}
    }
  }
  bool _823 = true;
  int _8902 = (int)0;
  int _8903 = (_819 - (int)1);
  for (int _824 = _8902; _824 < _8903; ++_824)
  {
    {
      _823 = (_823 && (_ptr__820[_824] < _ptr__820[(_824 - (int)1)]));
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _825 = nullptr;
  _checked_ptr_1<int> _ptr__825(_825 ? _825->raw() : nullptr,_825 ? _825->size(0) : 0);
  if (_823)
  {
    {
      std::vector<int> _8904;
      for (int _826 = (int)0, _8905 = _819; _826 < _8905 ; ++_826)
      {
        _8904.push_back((int)_ptr__820[_826]);
      }
      auto _8906 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8904.size()),_8904.begin(),_8904.end()));
      _825 = _8906;
      _ptr__825.update(_825 ? _825->raw() : nullptr, _825 ? _825->size(0) : 0);
    }
  }
  else
  {
    {
      std::vector<long long> _8907;
      for (int _828 = (-(int)1), _8908 = _819; _828 < _8908 ; ++_828)
      {
        _8907.push_back(_828);
      }
      auto _8909 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8907.size()),_8907.begin(),_8907.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _827 = _8909;
      _checked_ptr_1<long long> _ptr__827(_827 ? _827->raw() : nullptr,_827 ? _827->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_827,_820,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_819));
      std::vector<int> _8910;
      for (int _829 = (int)0, _8911 = _819; _829 < _8911 ; ++_829)
      {
        _8910.push_back((int)_ptr__820[_ptr__827[_829]]);
      }
      auto _8912 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8910.size()),_8910.begin(),_8910.end()));
      _825 = _8912;
      _ptr__825.update(_825 ? _825->raw() : nullptr, _825 ? _825->size(0) : 0);
    }
  }
  int _830 = (int)((_825)->size(0));
  std::shared_ptr< monty::ndarray< double,1 > > _831 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_830)));
  _checked_ptr_1<double> _ptr__831(_831 ? _831->raw() : nullptr,_831 ? _831->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _832 = _825;
  _checked_ptr_1<int> _ptr__832(_832 ? _832->raw() : nullptr,_832 ? _832->size(0) : 0);
  ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_817)).as<::mosek::fusion::Expression>())->eval(ws,rs,xs);
  ws->pop_expr();
  {
  }
  int _833 = mosek::fusion::p_WorkStack::_get_impl(ws)->nd;
  int _834 = mosek::fusion::p_WorkStack::_get_impl(ws)->nelem;
  int _835 = mosek::fusion::p_WorkStack::_get_impl(ws)->nnz;
  bool _836 = mosek::fusion::p_WorkStack::_get_impl(ws)->hassp;
  int _837 = mosek::fusion::p_WorkStack::_get_impl(ws)->ncodeatom;
  int _838 = mosek::fusion::p_WorkStack::_get_impl(ws)->shape_base;
  int _839 = mosek::fusion::p_WorkStack::_get_impl(ws)->ptr_base;
  int _840 = mosek::fusion::p_WorkStack::_get_impl(ws)->sp_base;
  int _841 = mosek::fusion::p_WorkStack::_get_impl(ws)->nidxs_base;
  int _842 = mosek::fusion::p_WorkStack::_get_impl(ws)->cof_base;
  int _843 = mosek::fusion::p_WorkStack::_get_impl(ws)->code_base;
  int _844 = mosek::fusion::p_WorkStack::_get_impl(ws)->codeptr_base;
  int _845 = mosek::fusion::p_WorkStack::_get_impl(ws)->cconst_base;
  {
  }
  if ((_837 > (int)0))
  {
    {
      throw ::mosek::fusion::UpdateError(std::string ("Cannot update parameterized objective"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _846 = mosek::fusion::p_WorkStack::_get_impl(ws)->i32;
  _checked_ptr_1<int> _ptr__846(_846 ? _846->raw() : nullptr,_846 ? _846->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _847 = mosek::fusion::p_WorkStack::_get_impl(ws)->i64;
  _checked_ptr_1<long long> _ptr__847(_847 ? _847->raw() : nullptr,_847 ? _847->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _848 = mosek::fusion::p_WorkStack::_get_impl(ws)->f64;
  _checked_ptr_1<double> _ptr__848(_848 ? _848->raw() : nullptr,_848 ? _848->size(0) : 0);
  int _849 = (int)0;
  int _8913 = (int)0;
  int _8914 = _834;
  for (int _850 = _8913; _850 < _8914; ++_850)
  {
    {
      int _851 = _ptr__846[safe_add( _839,_850 )];
      int _852 = _ptr__846[safe_add( safe_add( _839,_850 ),(int)1 )];
      int _853 = _851;
      int _854 = (int)0;
      while ( ((_854 < (int)((_825)->size(0))) && (_853 < _852)) )
      {
        {
          if ((_ptr__825[_854] < _ptr__847[safe_add( _841,_853 )]))
          {
            {
              ++ _854;
            }
          }
          else if((_ptr__825[_854] > _ptr__847[safe_add( _841,_853 )]))
          {
            {
              ++ _853;
            }
          }
          else
          {
            {
              _ptr__831[safe_add( _849,_854 )] = _ptr__848[safe_add( _842,_853 )];
              ++ _854;
              ++ _853;
            }
          }
        }
      }
      _849 += (int)((_825)->size(0));
    }
  }
  task_putclist(_832,_831);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter_unchecked(const std::string & _855,std::shared_ptr< monty::ndarray< int,1 > > _856,std::shared_ptr< monty::ndarray< long long,1 > > _857){
  _checked_ptr_1<int> _ptr__856(_856 ? _856->raw() : nullptr, _856 ? _856->size(0) : 0);
  _checked_ptr_1<long long> _ptr__857(_857 ? _857->raw() : nullptr, _857 ? _857->size(0) : 0);
  if ((((int)((_855).size()) > (int)0) && par_map->hasItem(_855)))
  {
    {
      throw ::mosek::fusion::NameError(std::string ("Duplicate parameter name"));
    }
  }
  {}
  long long _858 = ::mosek::fusion::p_Set::size(_856);
  int _8915;
  bool _8916 = (NULL != _857.get());
  if (_8916)
  {
    _8915 = (int)((_857)->size(0));
  }
  else
  {
    _8915 = (int)_858;
  }
  int _859 = _8915;
  if ((NULL == param_value.get()))
  {
    {
      param_value = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_859)));
    }
  }
  else
  {
    {
      if ((safe_add( param_num,_859 ) > (int)((param_value)->size(0))))
      {
        {
          std::shared_ptr< monty::ndarray< double,1 > > _860 = param_value;
          _checked_ptr_1<double> _ptr__860(_860 ? _860->raw() : nullptr,_860 ? _860->size(0) : 0);
          int _8917;
          bool _8918 = (safe_mul( (int)2,(int)((_860)->size(0)) ) > safe_add( (int)((_860)->size(0)),_859 ));
          if (_8918)
          {
            _8917 = safe_mul( (int)2,(int)((_860)->size(0)) );
          }
          else
          {
            _8917 = safe_add( (int)((_860)->size(0)),_859 );
          }
          int _861 = _8917;
          param_value = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_861)));
          if ((param_num > (int)0))
          {
            {
              ::mosek::fusion::Utils::Tools::arraycopy(_860,(int)0,param_value,(int)0,param_num);
            }
          }
          {}
        }
      }
      {}
    }
  }
  std::vector<int> _8919;
  for (int _863 = (int)0, _8920 = (int)_859; _863 < _8920 ; ++_863)
  {
    _8919.push_back(safe_add( param_num,_863 ));
  }
  auto _8921 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8919.size()),_8919.begin(),_8919.end()));
  monty::rc_ptr< ::mosek::fusion::ParameterImpl > _862 = ::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(::mosek::fusion::Model::t(_pubthis),_856,_857,_8921);
  param_num += _859;
  if (((int)((_855).size()) > (int)0))
  {
    {
      if (((NULL == parameters.get()) || (numparameter == (int)((parameters)->size(0)))))
      {
        {
          std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _864 = parameters;
          std::vector<monty::rc_ptr< ::mosek::fusion::Parameter >> _8922;
          for (int _865 = (int)0, _8923 = safe_add( safe_mul( numparameter,(int)2 ),(int)64 ); _865 < _8923 ; ++_865)
          {
            _8922.push_back(nullptr);
          }
          auto _8924 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >(monty::shape(_8922.size()),_8922.begin(),_8922.end()));
          parameters = _8924;
          int _8925 = (int)0;
          int _8926 = numparameter;
          for (int _866 = _8925; _866 < _8926; ++_866)
          {
            {
              ((*parameters)(_866)) = ((*_864)(_866));
            }
          }
        }
      }
      {}
      ((*parameters)(numparameter)) = (_862).as<::mosek::fusion::Parameter>();
      par_map->setItem(_855,numparameter);
      numparameter += (int)1;
    }
  }
  {}
  return (_862).as<::mosek::fusion::Parameter>();
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter_(const std::string & _867,std::shared_ptr< monty::ndarray< int,1 > > _868,std::shared_ptr< monty::ndarray< long long,1 > > _869){
  _checked_ptr_1<int> _ptr__868(_868 ? _868->raw() : nullptr, _868 ? _868->size(0) : 0);
  _checked_ptr_1<long long> _ptr__869(_869 ? _869->raw() : nullptr, _869 ? _869->size(0) : 0);
  bool _870 = true;
  int _871 = (int)((_868)->size(0));
  if (((NULL != _869.get()) && ((int)((_869)->size(0)) > (int)0)))
  {
    {
      bool _872 = (_ptr__869[((int)((_869)->size(0)) - (int)1)] < ::mosek::fusion::p_Set::size(_868));
      int _8927 = (int)1;
      int _8928 = (int)((_869)->size(0));
      for (int _873 = _8927; _873 < _8928; ++_873)
      {
        {
          _872 = (_872 && (_ptr__869[(_873 - (int)1)] < _ptr__869[_873]));
        }
      }
      if ((!_872))
      {
        {
          throw ::mosek::fusion::IndexError(std::string ("Unordered sparsity pattern"));
        }
      }
      {}
    }
  }
  {}
  return __mosek_2fusion_2Model__parameter_unchecked(_867,_868,_869);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter_(const std::string & _874,std::shared_ptr< monty::ndarray< int,1 > > _875,std::shared_ptr< monty::ndarray< int,2 > > _876){
  _checked_ptr_1<int> _ptr__875(_875 ? _875->raw() : nullptr, _875 ? _875->size(0) : 0);
  int _877 = (int)((_876)->size(0));
  int _878 = (int)((_876)->size(1));
  if (((int)((_875)->size(0)) != _878))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid sparsity"));
    }
  }
  {}
  if ((NULL == _876.get()))
  {
    {
      return __mosek_2fusion_2Model__parameter_unchecked(_874,_875,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr));
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _879 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_877)));
      _checked_ptr_1<long long> _ptr__879(_879 ? _879->raw() : nullptr,_879 ? _879->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _880 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_878)));
      _checked_ptr_1<long long> _ptr__880(_880 ? _880->raw() : nullptr,_880 ? _880->size(0) : 0);
      _ptr__880[(_878 - (int)1)] = (int)1;
      int _8929 = (int)1;
      int _8930 = _878;
      for (int _881 = _8929; _881 < _8930; ++_881)
      {
        {
          _ptr__880[((_878 - (int)1) - _881)] = safe_mul( _ptr__880[(_878 - _881)],_ptr__875[(_878 - _881)] );
        }
      }
      int _8931 = (int)0;
      int _8932 = _877;
      for (int _882 = _8931; _882 < _8932; ++_882)
      {
        {
          _ptr__879[_882] = (int)0;
          int _8933 = (int)0;
          int _8934 = _878;
          for (int _883 = _8933; _883 < _8934; ++_883)
          {
            {
              _ptr__879[_882] += safe_mul( ((*_876)(_882,_883)),_ptr__880[_883] );
            }
          }
        }
      }
      return __mosek_2fusion_2Model__parameter_(_874,_875,_879);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(const std::string & _884) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_884); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(const std::string &  _884) { return __mosek_2fusion_2Model__parameter(_884); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(const std::string & _884){
  std::shared_ptr< monty::ndarray< long long,1 > > _885 = nullptr;
  _checked_ptr_1<long long> _ptr__885(_885 ? _885->raw() : nullptr,_885 ? _885->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(_884,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),_885);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(const std::string & _886,int _887,int _888,int _889) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_886,_887,_888,_889); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(const std::string &  _886,int _887,int _888,int _889) { return __mosek_2fusion_2Model__parameter(_886,_887,_888,_889); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(const std::string & _886,int _887,int _888,int _889){
  std::shared_ptr< monty::ndarray< long long,1 > > _890 = nullptr;
  _checked_ptr_1<long long> _ptr__890(_890 ? _890->raw() : nullptr,_890 ? _890->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(_886,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_887),(int)(_888),(int)(_889)}),_890);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(const std::string & _891,int _892,int _893) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_891,_892,_893); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(const std::string &  _891,int _892,int _893) { return __mosek_2fusion_2Model__parameter(_891,_892,_893); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(const std::string & _891,int _892,int _893){
  std::shared_ptr< monty::ndarray< long long,1 > > _894 = nullptr;
  _checked_ptr_1<long long> _ptr__894(_894 ? _894->raw() : nullptr,_894 ? _894->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(_891,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_892),(int)(_893)}),_894);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(const std::string & _895,int _896) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_895,_896); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(const std::string &  _895,int _896) { return __mosek_2fusion_2Model__parameter(_895,_896); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(const std::string & _895,int _896){
  std::shared_ptr< monty::ndarray< long long,1 > > _897 = nullptr;
  _checked_ptr_1<long long> _ptr__897(_897 ? _897->raw() : nullptr,_897 ? _897->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(_895,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_896)}),_897);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(const std::string & _898,std::shared_ptr< monty::ndarray< int,1 > > _899) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_898,_899); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(const std::string &  _898,std::shared_ptr< monty::ndarray< int,1 > > _899) { return __mosek_2fusion_2Model__parameter(_898,_899); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(const std::string & _898,std::shared_ptr< monty::ndarray< int,1 > > _899){
  _checked_ptr_1<int> _ptr__899(_899 ? _899->raw() : nullptr, _899 ? _899->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _900 = nullptr;
  _checked_ptr_1<long long> _ptr__900(_900 ? _900->raw() : nullptr,_900 ? _900->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(_898,_899,_900);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(const std::string & _901,std::shared_ptr< monty::ndarray< int,1 > > _902,std::shared_ptr< monty::ndarray< long long,1 > > _903) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_901,_902,_903); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(const std::string &  _901,std::shared_ptr< monty::ndarray< int,1 > > _902,std::shared_ptr< monty::ndarray< long long,1 > > _903) { return __mosek_2fusion_2Model__parameter(_901,_902,_903); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(const std::string & _901,std::shared_ptr< monty::ndarray< int,1 > > _902,std::shared_ptr< monty::ndarray< long long,1 > > _903){
  _checked_ptr_1<int> _ptr__902(_902 ? _902->raw() : nullptr, _902 ? _902->size(0) : 0);
  _checked_ptr_1<long long> _ptr__903(_903 ? _903->raw() : nullptr, _903 ? _903->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(_901,_902,_903);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(const std::string & _904,std::shared_ptr< monty::ndarray< int,1 > > _905,std::shared_ptr< monty::ndarray< int,2 > > _906) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_904,_905,_906); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(const std::string &  _904,std::shared_ptr< monty::ndarray< int,1 > > _905,std::shared_ptr< monty::ndarray< int,2 > > _906) { return __mosek_2fusion_2Model__parameter(_904,_905,_906); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(const std::string & _904,std::shared_ptr< monty::ndarray< int,1 > > _905,std::shared_ptr< monty::ndarray< int,2 > > _906){
  _checked_ptr_1<int> _ptr__905(_905 ? _905->raw() : nullptr, _905 ? _905->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(_904,_905,_906);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter() { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter() { return __mosek_2fusion_2Model__parameter(); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(){
  std::shared_ptr< monty::ndarray< long long,1 > > _907 = nullptr;
  _checked_ptr_1<long long> _ptr__907(_907 ? _907->raw() : nullptr,_907 ? _907->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),_907);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(int _908,int _909,int _910) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_908,_909,_910); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(int _908,int _909,int _910) { return __mosek_2fusion_2Model__parameter(_908,_909,_910); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(int _908,int _909,int _910){
  std::shared_ptr< monty::ndarray< long long,1 > > _911 = nullptr;
  _checked_ptr_1<long long> _ptr__911(_911 ? _911->raw() : nullptr,_911 ? _911->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_908),(int)(_909),(int)(_910)}),_911);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(int _912,int _913) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_912,_913); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(int _912,int _913) { return __mosek_2fusion_2Model__parameter(_912,_913); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(int _912,int _913){
  std::shared_ptr< monty::ndarray< long long,1 > > _914 = nullptr;
  _checked_ptr_1<long long> _ptr__914(_914 ? _914->raw() : nullptr,_914 ? _914->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_912),(int)(_913)}),_914);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(int _915) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_915); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(int _915) { return __mosek_2fusion_2Model__parameter(_915); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(int _915){
  std::shared_ptr< monty::ndarray< long long,1 > > _916 = nullptr;
  _checked_ptr_1<long long> _ptr__916(_916 ? _916->raw() : nullptr,_916 ? _916->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_915)}),_916);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(std::shared_ptr< monty::ndarray< int,1 > > _917) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_917); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(std::shared_ptr< monty::ndarray< int,1 > > _917) { return __mosek_2fusion_2Model__parameter(_917); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(std::shared_ptr< monty::ndarray< int,1 > > _917){
  _checked_ptr_1<int> _ptr__917(_917 ? _917->raw() : nullptr, _917 ? _917->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _918 = nullptr;
  _checked_ptr_1<long long> _ptr__918(_918 ? _918->raw() : nullptr,_918 ? _918->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(std::string (""),_917,_918);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(std::shared_ptr< monty::ndarray< int,1 > > _919,std::shared_ptr< monty::ndarray< long long,1 > > _920) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_919,_920); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(std::shared_ptr< monty::ndarray< int,1 > > _919,std::shared_ptr< monty::ndarray< long long,1 > > _920) { return __mosek_2fusion_2Model__parameter(_919,_920); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(std::shared_ptr< monty::ndarray< int,1 > > _919,std::shared_ptr< monty::ndarray< long long,1 > > _920){
  _checked_ptr_1<int> _ptr__919(_919 ? _919->raw() : nullptr, _919 ? _919->size(0) : 0);
  _checked_ptr_1<long long> _ptr__920(_920 ? _920->raw() : nullptr, _920 ? _920->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(std::string (""),_919,_920);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(std::shared_ptr< monty::ndarray< int,1 > > _921,std::shared_ptr< monty::ndarray< int,2 > > _922) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_921,_922); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(std::shared_ptr< monty::ndarray< int,1 > > _921,std::shared_ptr< monty::ndarray< int,2 > > _922) { return __mosek_2fusion_2Model__parameter(_921,_922); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(std::shared_ptr< monty::ndarray< int,1 > > _921,std::shared_ptr< monty::ndarray< int,2 > > _922){
  _checked_ptr_1<int> _ptr__921(_921 ? _921->raw() : nullptr, _921 ? _921->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(std::string (""),_921,_922);
}
void mosek::fusion::p_Model::objective_(const std::string & _923,mosek::fusion::ObjectiveSense _924,monty::rc_ptr< ::mosek::fusion::Expression > _925){
  task_putobjectivename(_923);
  monty::rc_ptr< ::mosek::fusion::WorkStack > _926 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  monty::rc_ptr< ::mosek::fusion::WorkStack > _927 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  monty::rc_ptr< ::mosek::fusion::ExprDense > _928 = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_925)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>());
  _928->eval(_926,_927,xs);
  _926->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _929 = mosek::fusion::p_WorkStack::_get_impl(_926)->i32;
  _checked_ptr_1<int> _ptr__929(_929 ? _929->raw() : nullptr,_929 ? _929->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _930 = mosek::fusion::p_WorkStack::_get_impl(_926)->i64;
  _checked_ptr_1<long long> _ptr__930(_930 ? _930->raw() : nullptr,_930 ? _930->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _931 = mosek::fusion::p_WorkStack::_get_impl(_926)->f64;
  _checked_ptr_1<double> _ptr__931(_931 ? _931->raw() : nullptr,_931 ? _931->size(0) : 0);
  int _932 = mosek::fusion::p_WorkStack::_get_impl(_926)->nd;
  int _933 = mosek::fusion::p_WorkStack::_get_impl(_926)->nelem;
  int _934 = mosek::fusion::p_WorkStack::_get_impl(_926)->nnz;
  bool _935 = mosek::fusion::p_WorkStack::_get_impl(_926)->hassp;
  int _936 = mosek::fusion::p_WorkStack::_get_impl(_926)->ncodeatom;
  int _937 = mosek::fusion::p_WorkStack::_get_impl(_926)->ptr_base;
  int _938 = mosek::fusion::p_WorkStack::_get_impl(_926)->shape_base;
  int _939 = mosek::fusion::p_WorkStack::_get_impl(_926)->nidxs_base;
  int _940 = mosek::fusion::p_WorkStack::_get_impl(_926)->cof_base;
  int _941 = mosek::fusion::p_WorkStack::_get_impl(_926)->code_base;
  int _942 = mosek::fusion::p_WorkStack::_get_impl(_926)->codeptr_base;
  int _943 = mosek::fusion::p_WorkStack::_get_impl(_926)->cconst_base;
  long long _944 = (long long)1;
  int _8935 = (int)0;
  int _8936 = _932;
  for (int _945 = _8935; _945 < _8936; ++_945)
  {
    {
      _932 *= _ptr__929[safe_add( _938,_945 )];
    }
  }
  if ((_944 != (int)1))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid expression size for objective"));
    }
  }
  {}
  if ((_933 != (int)1))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid expression for objective"));
    }
  }
  {}
  int _946 = (int)0;
  int _947 = (int)0;
  int _8937 = (int)0;
  int _8938 = _934;
  for (int _948 = _8937; _948 < _8938; ++_948)
  {
    {
      if ((_ptr__930[safe_add( _939,_948 )] < (int)0))
      {
        {
          ++ _947;
        }
      }
      else if((_ptr__930[safe_add( _939,_948 )] >= (int)0))
      {
        {
          ++ _946;
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _949 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_946)));
  _checked_ptr_1<int> _ptr__949(_949 ? _949->raw() : nullptr,_949 ? _949->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _950 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_946)));
  _checked_ptr_1<double> _ptr__950(_950 ? _950->raw() : nullptr,_950 ? _950->size(0) : 0);
  {
    int _951 = (int)0;
    int _8939 = (int)0;
    int _8940 = _934;
    for (int _952 = _8939; _952 < _8940; ++_952)
    {
      {
        if ((_ptr__930[safe_add( _939,_952 )] >= (int)0))
        {
          {
            _ptr__949[_951] = (int)_ptr__930[safe_add( _939,_952 )];
            _ptr__950[_951] = _ptr__931[safe_add( _940,_952 )];
            ++ _951;
          }
        }
        {}
      }
    }
  }
  task_putobjective((_924 == ::mosek::fusion::ObjectiveSense::Maximize),_949,_950,0.0);
  if ((_947 > (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _953 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_947)));
      _checked_ptr_1<int> _ptr__953(_953 ? _953->raw() : nullptr,_953 ? _953->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _954 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_947)));
      _checked_ptr_1<int> _ptr__954(_954 ? _954->raw() : nullptr,_954 ? _954->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _955 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_947)));
      _checked_ptr_1<int> _ptr__955(_955 ? _955->raw() : nullptr,_955 ? _955->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _956 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_947)));
      _checked_ptr_1<double> _ptr__956(_956 ? _956->raw() : nullptr,_956 ? _956->size(0) : 0);
      int _8941 = (int)0;
      int _8942 = _947;
      for (int _957 = _8941; _957 < _8942; ++_957)
      {
        {
          long long _958 = (-safe_add( _ptr__930[safe_add( _939,_957 )],(int)1 ));
          _ptr__953[_957] = ((*natbarvar_idx)(_958));
          _ptr__954[_957] = ((*natbarvar_i)(_958));
          _ptr__955[_957] = ((*natbarvar_j)(_958));
          double _8943;
          bool _8944 = (_ptr__954[_957] == _ptr__955[_957]);
          if (_8944)
          {
            _8943 = _ptr__931[safe_add( _940,_957 )];
          }
          else
          {
            _8943 = (0.5 * _ptr__931[safe_add( _940,_957 )]);
          }
          _ptr__956[_957] = _8943;
        }
      }
      task_putbarc(_953,_954,_955,_956);
    }
  }
  {}
  if ((_936 == (int)0))
  {
    {
      int _8945 = (int)0;
      int _8946 = _933;
      for (int _959 = _8945; _959 < _8946; ++_959)
      {
        {
          natconmap_objcodenidx = nullptr;
          natconmap_objcodeptr = nullptr;
          natconmap_objcode = nullptr;
          natconmap_objcconst = nullptr;
        }
      }
    }
  }
  else
  {
    {
      bool _960 = true;
      int _961 = (int)0;
      int _962 = (int)0;
      int _8947 = _ptr__929[_937];
      int _8948 = _ptr__929[safe_add( _937,(int)1 )];
      for (int _963 = _8947; _963 < _8948; ++_963)
      {
        {
          if ((((_ptr__929[safe_add( safe_add( _942,_963 ),(int)1 )] - _ptr__929[safe_add( _942,_963 )]) == (int)1) && ((_ptr__929[safe_add( _941,_ptr__929[safe_add( _942,_963 )] )] == 10) || (_ptr__929[safe_add( _941,_ptr__929[safe_add( _942,_963 )] )] == 2))))
          {
            {
            }
          }
          else
          {
            {
              ++ _962;
              _961 += (_ptr__929[safe_add( safe_add( _942,_963 ),(int)1 )] - _ptr__929[safe_add( _942,_963 )]);
            }
          }
        }
      }
      if ((_962 > (int)0))
      {
        {
          std::shared_ptr< monty::ndarray< long long,1 > > _964 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_962)));
          _checked_ptr_1<long long> _ptr__964(_964 ? _964->raw() : nullptr,_964 ? _964->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _965 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _962,(int)1 ))));
          _checked_ptr_1<int> _ptr__965(_965 ? _965->raw() : nullptr,_965 ? _965->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _966 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_961)));
          _checked_ptr_1<int> _ptr__966(_966 ? _966->raw() : nullptr,_966 ? _966->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _967 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_961)));
          _checked_ptr_1<double> _ptr__967(_967 ? _967->raw() : nullptr,_967 ? _967->size(0) : 0);
          {
            int _968 = (int)0;
            int _969 = (int)0;
            int _8949 = _ptr__929[_937];
            int _8950 = _ptr__929[safe_add( _937,(int)1 )];
            for (int _970 = _8949; _970 < _8950; ++_970)
            {
              {
                if ((((_ptr__929[safe_add( safe_add( _942,_970 ),(int)1 )] - _ptr__929[safe_add( _942,_970 )]) == (int)1) && ((_ptr__929[safe_add( _941,_ptr__929[safe_add( _942,_970 )] )] == 10) || (_ptr__929[safe_add( _941,_ptr__929[safe_add( _942,_970 )] )] == 2))))
                {
                  {
                  }
                }
                else
                {
                  {
                    int _8951 = _ptr__929[safe_add( _942,_970 )];
                    int _8952 = _ptr__929[safe_add( safe_add( _942,_970 ),(int)1 )];
                    for (int _971 = _8951; _971 < _8952; ++_971)
                    {
                      {
                        _ptr__966[_968] = _ptr__929[safe_add( _941,_971 )];
                        _ptr__967[_968] = _ptr__931[safe_add( _943,_971 )];
                        ++ _968;
                      }
                    }
                    _ptr__965[safe_add( _969,(int)1 )] = _968;
                    _ptr__964[_969] = _ptr__930[safe_add( _939,_970 )];
                    _960 = (_ptr__964[_969] >= (int)0);
                    ++ _969;
                  }
                }
              }
            }
          }
          natconmap_objcodenidx = _964;
          natconmap_objcodeptr = _965;
          natconmap_objcode = _966;
          natconmap_objcconst = _967;
        }
      }
      else
      {
        {
          natconmap_objcodenidx = nullptr;
          natconmap_objcodeptr = nullptr;
          natconmap_objcode = nullptr;
          natconmap_objcconst = nullptr;
        }
      }
      if ((!_960))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Expression contains parameterized SDP non-zero"));
        }
      }
      {}
    }
  }
}
void mosek::fusion::Model :: objective(double _972) { mosek::fusion::p_Model::_get_impl(this)->objective(_972); }void mosek::fusion::p_Model::objective(double _972){
  objective_(std::string (""),::mosek::fusion::ObjectiveSense::Minimize,::mosek::fusion::p_Expr::constTerm(_972));
}
void mosek::fusion::Model :: objective(mosek::fusion::ObjectiveSense _973,double _974) { mosek::fusion::p_Model::_get_impl(this)->objective(_973,_974); }void mosek::fusion::p_Model::objective(mosek::fusion::ObjectiveSense _973,double _974){
  objective_(std::string (""),_973,::mosek::fusion::p_Expr::constTerm(_974));
}
void mosek::fusion::Model :: objective(mosek::fusion::ObjectiveSense _975,monty::rc_ptr< ::mosek::fusion::Expression > _976) { mosek::fusion::p_Model::_get_impl(this)->objective(_975,_976); }void mosek::fusion::p_Model::objective(mosek::fusion::ObjectiveSense _975,monty::rc_ptr< ::mosek::fusion::Expression > _976){
  objective_(std::string (""),_975,_976);
}
void mosek::fusion::Model :: objective(const std::string & _977,double _978) { mosek::fusion::p_Model::_get_impl(this)->objective(_977,_978); }void mosek::fusion::p_Model::objective(const std::string & _977,double _978){
  objective_(_977,::mosek::fusion::ObjectiveSense::Minimize,::mosek::fusion::p_Expr::constTerm(_978));
}
void mosek::fusion::Model :: objective(const std::string & _979,mosek::fusion::ObjectiveSense _980,double _981) { mosek::fusion::p_Model::_get_impl(this)->objective(_979,_980,_981); }void mosek::fusion::p_Model::objective(const std::string & _979,mosek::fusion::ObjectiveSense _980,double _981){
  objective_(_979,_980,::mosek::fusion::p_Expr::constTerm(_981));
}
void mosek::fusion::Model :: objective(const std::string & _982,mosek::fusion::ObjectiveSense _983,monty::rc_ptr< ::mosek::fusion::Expression > _984) { mosek::fusion::p_Model::_get_impl(this)->objective(_982,_983,_984); }void mosek::fusion::p_Model::objective(const std::string & _982,mosek::fusion::ObjectiveSense _983,monty::rc_ptr< ::mosek::fusion::Expression > _984){
  objective_(_982,_983,_984);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _985,monty::rc_ptr< ::mosek::fusion::ConeDomain > _986) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_985,_986); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _985,monty::rc_ptr< ::mosek::fusion::ConeDomain > _986) { return __mosek_2fusion_2Model__constraint(_985,_986); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _985,monty::rc_ptr< ::mosek::fusion::ConeDomain > _986){
  return __mosek_2fusion_2Model__constraint_(std::string (""),_985,_986);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _987,monty::rc_ptr< ::mosek::fusion::Expression > _988,monty::rc_ptr< ::mosek::fusion::ConeDomain > _989) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_987,_988,_989); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(const std::string &  _987,monty::rc_ptr< ::mosek::fusion::Expression > _988,monty::rc_ptr< ::mosek::fusion::ConeDomain > _989) { return __mosek_2fusion_2Model__constraint(_987,_988,_989); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _987,monty::rc_ptr< ::mosek::fusion::Expression > _988,monty::rc_ptr< ::mosek::fusion::ConeDomain > _989){
  return __mosek_2fusion_2Model__constraint_(_987,_988,_989);
}
monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _990,monty::rc_ptr< ::mosek::fusion::RangeDomain > _991) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_990,_991); }monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _990,monty::rc_ptr< ::mosek::fusion::RangeDomain > _991) { return __mosek_2fusion_2Model__constraint(_990,_991); }
monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _990,monty::rc_ptr< ::mosek::fusion::RangeDomain > _991){
  return __mosek_2fusion_2Model__constraint_(std::string (""),_990,_991);
}
monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _992,monty::rc_ptr< ::mosek::fusion::Expression > _993,monty::rc_ptr< ::mosek::fusion::RangeDomain > _994) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_992,_993,_994); }monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::Model::constraint(const std::string &  _992,monty::rc_ptr< ::mosek::fusion::Expression > _993,monty::rc_ptr< ::mosek::fusion::RangeDomain > _994) { return __mosek_2fusion_2Model__constraint(_992,_993,_994); }
monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _992,monty::rc_ptr< ::mosek::fusion::Expression > _993,monty::rc_ptr< ::mosek::fusion::RangeDomain > _994){
  return __mosek_2fusion_2Model__constraint_(_992,_993,_994);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _995,monty::rc_ptr< ::mosek::fusion::LinearDomain > _996) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_995,_996); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _995,monty::rc_ptr< ::mosek::fusion::LinearDomain > _996) { return __mosek_2fusion_2Model__constraint(_995,_996); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _995,monty::rc_ptr< ::mosek::fusion::LinearDomain > _996){
  return __mosek_2fusion_2Model__constraint_(std::string (""),_995,_996);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _997,monty::rc_ptr< ::mosek::fusion::Expression > _998,monty::rc_ptr< ::mosek::fusion::LinearDomain > _999) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_997,_998,_999); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(const std::string &  _997,monty::rc_ptr< ::mosek::fusion::Expression > _998,monty::rc_ptr< ::mosek::fusion::LinearDomain > _999) { return __mosek_2fusion_2Model__constraint(_997,_998,_999); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _997,monty::rc_ptr< ::mosek::fusion::Expression > _998,monty::rc_ptr< ::mosek::fusion::LinearDomain > _999){
  return __mosek_2fusion_2Model__constraint_(_997,_998,_999);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1000,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1001) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_1000,_1001); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1000,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1001) { return __mosek_2fusion_2Model__constraint(_1000,_1001); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1000,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1001){
  return __mosek_2fusion_2Model__constraint_(std::string (""),_1000,_1001);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _1002,monty::rc_ptr< ::mosek::fusion::Expression > _1003,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1004) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_1002,_1003,_1004); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(const std::string &  _1002,monty::rc_ptr< ::mosek::fusion::Expression > _1003,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1004) { return __mosek_2fusion_2Model__constraint(_1002,_1003,_1004); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _1002,monty::rc_ptr< ::mosek::fusion::Expression > _1003,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1004){
  return __mosek_2fusion_2Model__constraint_(_1002,_1003,_1004);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1005,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1006) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_1005,_1006); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1005,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1006) { return __mosek_2fusion_2Model__constraint(_1005,_1006); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1005,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1006){
  return __mosek_2fusion_2Model__constraint_(std::string (""),_1005,_1006);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _1007,monty::rc_ptr< ::mosek::fusion::Expression > _1008,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1009) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_1007,_1008,_1009); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(const std::string &  _1007,monty::rc_ptr< ::mosek::fusion::Expression > _1008,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1009) { return __mosek_2fusion_2Model__constraint(_1007,_1008,_1009); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _1007,monty::rc_ptr< ::mosek::fusion::Expression > _1008,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1009){
  return __mosek_2fusion_2Model__constraint_(_1007,_1008,_1009);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1010) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1010); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1010) { return __mosek_2fusion_2Model__variable(_1010); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1010){
  return __mosek_2fusion_2Model__variable_(std::string (""),mosek::fusion::p_LinPSDDomain::_get_impl(_1010)->shape,_1010);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _1011,int _1012,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1013) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1011,_1012,_1013); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _1011,int _1012,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1013) { return __mosek_2fusion_2Model__variable(_1011,_1012,_1013); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _1011,int _1012,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1013){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1012),(int)((safe_mul( _1011,safe_add( _1011,(int)1 ) ) / (int)2))}),_1013);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _1014,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1015) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1014,_1015); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _1014,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1015) { return __mosek_2fusion_2Model__variable(_1014,_1015); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _1014,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1015){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((safe_mul( _1014,safe_add( _1014,(int)1 ) ) / (int)2))}),_1015);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1016,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1017) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1016,_1017); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1016,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1017) { return __mosek_2fusion_2Model__variable(_1016,_1017); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1016,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1017){
  return __mosek_2fusion_2Model__variable_(_1016,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_1017);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1018,int _1019,int _1020,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1021) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1018,_1019,_1020,_1021); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1018,int _1019,int _1020,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1021) { return __mosek_2fusion_2Model__variable(_1018,_1019,_1020,_1021); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1018,int _1019,int _1020,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1021){
  return __mosek_2fusion_2Model__variable_(_1018,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1020),(int)((safe_mul( _1019,safe_add( _1019,(int)1 ) ) / (int)2))}),_1021);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1022,int _1023,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1024) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1022,_1023,_1024); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1022,int _1023,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1024) { return __mosek_2fusion_2Model__variable(_1022,_1023,_1024); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1022,int _1023,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1024){
  return __mosek_2fusion_2Model__variable_(_1022,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((safe_mul( _1023,safe_add( _1023,(int)1 ) ) / (int)2))}),_1024);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1025,std::shared_ptr< monty::ndarray< int,1 > > _1026,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1027) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1025,_1026,_1027); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1025,std::shared_ptr< monty::ndarray< int,1 > > _1026,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1027) { return __mosek_2fusion_2Model__variable(_1025,_1026,_1027); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1025,std::shared_ptr< monty::ndarray< int,1 > > _1026,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1027){
  _checked_ptr_1<int> _ptr__1026(_1026 ? _1026->raw() : nullptr, _1026 ? _1026->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(_1025,_1026,_1027);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::PSDDomain > _1028) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1028); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::PSDDomain > _1028) { return __mosek_2fusion_2Model__variable(_1028); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::PSDDomain > _1028){
  return (__mosek_2fusion_2Model__variable_(std::string (""),mosek::fusion::p_PSDDomain::_get_impl(_1028)->shape,_1028)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _1029,int _1030,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1031) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1029,_1030,_1031); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _1029,int _1030,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1031) { return __mosek_2fusion_2Model__variable(_1029,_1030,_1031); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _1029,int _1030,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1031){
  return (__mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1030),(int)(_1029),(int)(_1029)}),_1031)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _1032,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1033) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1032,_1033); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _1032,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1033) { return __mosek_2fusion_2Model__variable(_1032,_1033); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _1032,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1033){
  return (__mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1032),(int)(_1032)}),_1033)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1034,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1035) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1034,_1035); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1034,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1035) { return __mosek_2fusion_2Model__variable(_1034,_1035); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1034,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1035){
  return (__mosek_2fusion_2Model__variable_(_1034,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_1035)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1036,int _1037,int _1038,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1039) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1036,_1037,_1038,_1039); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1036,int _1037,int _1038,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1039) { return __mosek_2fusion_2Model__variable(_1036,_1037,_1038,_1039); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1036,int _1037,int _1038,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1039){
  return (__mosek_2fusion_2Model__variable_(_1036,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1038),(int)(_1037),(int)(_1037)}),_1039)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1040,int _1041,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1042) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1040,_1041,_1042); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1040,int _1041,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1042) { return __mosek_2fusion_2Model__variable(_1040,_1041,_1042); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1040,int _1041,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1042){
  return (__mosek_2fusion_2Model__variable_(_1040,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1041),(int)(_1041)}),_1042)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1043,std::shared_ptr< monty::ndarray< int,1 > > _1044,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1045) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1043,_1044,_1045); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1043,std::shared_ptr< monty::ndarray< int,1 > > _1044,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1045) { return __mosek_2fusion_2Model__variable(_1043,_1044,_1045); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1043,std::shared_ptr< monty::ndarray< int,1 > > _1044,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1045){
  _checked_ptr_1<int> _ptr__1044(_1044 ? _1044->raw() : nullptr, _1044 ? _1044->size(0) : 0);
  return (__mosek_2fusion_2Model__variable_(_1043,_1044,_1045)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::ConeDomain > _1046) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1046); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::ConeDomain > _1046) { return __mosek_2fusion_2Model__variable(_1046); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::ConeDomain > _1046){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_1046);
}
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::RangeDomain > _1047) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1047); }monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::RangeDomain > _1047) { return __mosek_2fusion_2Model__variable(_1047); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::RangeDomain > _1047){
  return __mosek_2fusion_2Model__ranged_variable(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_1047);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::LinearDomain > _1048) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1048); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::LinearDomain > _1048) { return __mosek_2fusion_2Model__variable(_1048); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::LinearDomain > _1048){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_1048);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _1049,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1050) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1049,_1050); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(std::shared_ptr< monty::ndarray< int,1 > > _1049,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1050) { return __mosek_2fusion_2Model__variable(_1049,_1050); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _1049,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1050){
  _checked_ptr_1<int> _ptr__1049(_1049 ? _1049->raw() : nullptr, _1049 ? _1049->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(std::string (""),_1049,_1050);
}
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _1051,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1052) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1051,_1052); }monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model::variable(std::shared_ptr< monty::ndarray< int,1 > > _1051,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1052) { return __mosek_2fusion_2Model__variable(_1051,_1052); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _1051,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1052){
  _checked_ptr_1<int> _ptr__1051(_1051 ? _1051->raw() : nullptr, _1051 ? _1051->size(0) : 0);
  return __mosek_2fusion_2Model__ranged_variable(std::string (""),_1051,_1052);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _1053,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1054) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1053,_1054); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(std::shared_ptr< monty::ndarray< int,1 > > _1053,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1054) { return __mosek_2fusion_2Model__variable(_1053,_1054); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _1053,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1054){
  _checked_ptr_1<int> _ptr__1053(_1053 ? _1053->raw() : nullptr, _1053 ? _1053->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(std::string (""),_1053,_1054);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _1055) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1055); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(std::shared_ptr< monty::ndarray< int,1 > > _1055) { return __mosek_2fusion_2Model__variable(_1055); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _1055){
  _checked_ptr_1<int> _ptr__1055(_1055 ? _1055->raw() : nullptr, _1055 ? _1055->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(std::string (""),_1055,::mosek::fusion::p_Domain::unbounded());
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _1056,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1057) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1056,_1057); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _1056,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1057) { return __mosek_2fusion_2Model__variable(_1056,_1057); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _1056,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1057){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1056)}),_1057);
}
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _1058,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1059) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1058,_1059); }monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model::variable(int _1058,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1059) { return __mosek_2fusion_2Model__variable(_1058,_1059); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _1058,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1059){
  return __mosek_2fusion_2Model__ranged_variable(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1058)}),_1059);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _1060,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1061) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1060,_1061); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _1060,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1061) { return __mosek_2fusion_2Model__variable(_1060,_1061); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _1060,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1061){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1060)}),_1061);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _1062) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1062); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _1062) { return __mosek_2fusion_2Model__variable(_1062); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _1062){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1062)}),::mosek::fusion::p_Domain::unbounded());
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable() { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable() { return __mosek_2fusion_2Model__variable(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),::mosek::fusion::p_Domain::unbounded());
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1063,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1064) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1063,_1064); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1063,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1064) { return __mosek_2fusion_2Model__variable(_1063,_1064); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1063,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1064){
  return __mosek_2fusion_2Model__variable_(_1063,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_1064);
}
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1065,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1066) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1065,_1066); }monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model::variable(const std::string &  _1065,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1066) { return __mosek_2fusion_2Model__variable(_1065,_1066); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1065,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1066){
  return __mosek_2fusion_2Model__ranged_variable(_1065,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_1066);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1067,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1068) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1067,_1068); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1067,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1068) { return __mosek_2fusion_2Model__variable(_1067,_1068); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1067,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1068){
  return __mosek_2fusion_2Model__variable_(_1067,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_1068);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1069,std::shared_ptr< monty::ndarray< int,1 > > _1070,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1071) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1069,_1070,_1071); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1069,std::shared_ptr< monty::ndarray< int,1 > > _1070,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1071) { return __mosek_2fusion_2Model__variable(_1069,_1070,_1071); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1069,std::shared_ptr< monty::ndarray< int,1 > > _1070,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1071){
  _checked_ptr_1<int> _ptr__1070(_1070 ? _1070->raw() : nullptr, _1070 ? _1070->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(_1069,_1070,_1071);
}
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1072,std::shared_ptr< monty::ndarray< int,1 > > _1073,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1074) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1072,_1073,_1074); }monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model::variable(const std::string &  _1072,std::shared_ptr< monty::ndarray< int,1 > > _1073,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1074) { return __mosek_2fusion_2Model__variable(_1072,_1073,_1074); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1072,std::shared_ptr< monty::ndarray< int,1 > > _1073,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1074){
  _checked_ptr_1<int> _ptr__1073(_1073 ? _1073->raw() : nullptr, _1073 ? _1073->size(0) : 0);
  return __mosek_2fusion_2Model__ranged_variable(_1072,_1073,_1074);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1075,std::shared_ptr< monty::ndarray< int,1 > > _1076,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1077) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1075,_1076,_1077); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1075,std::shared_ptr< monty::ndarray< int,1 > > _1076,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1077) { return __mosek_2fusion_2Model__variable(_1075,_1076,_1077); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1075,std::shared_ptr< monty::ndarray< int,1 > > _1076,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1077){
  _checked_ptr_1<int> _ptr__1076(_1076 ? _1076->raw() : nullptr, _1076 ? _1076->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(_1075,_1076,_1077);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1078,std::shared_ptr< monty::ndarray< int,1 > > _1079) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1078,_1079); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1078,std::shared_ptr< monty::ndarray< int,1 > > _1079) { return __mosek_2fusion_2Model__variable(_1078,_1079); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1078,std::shared_ptr< monty::ndarray< int,1 > > _1079){
  _checked_ptr_1<int> _ptr__1079(_1079 ? _1079->raw() : nullptr, _1079 ? _1079->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(_1078,_1079,::mosek::fusion::p_Domain::unbounded());
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1080,int _1081,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1082) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1080,_1081,_1082); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1080,int _1081,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1082) { return __mosek_2fusion_2Model__variable(_1080,_1081,_1082); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1080,int _1081,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1082){
  return __mosek_2fusion_2Model__variable_(_1080,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1081)}),_1082);
}
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1083,int _1084,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1085) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1083,_1084,_1085); }monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model::variable(const std::string &  _1083,int _1084,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1085) { return __mosek_2fusion_2Model__variable(_1083,_1084,_1085); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1083,int _1084,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1085){
  return __mosek_2fusion_2Model__ranged_variable(_1083,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1084)}),_1085);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1086,int _1087,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1088) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1086,_1087,_1088); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1086,int _1087,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1088) { return __mosek_2fusion_2Model__variable(_1086,_1087,_1088); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1086,int _1087,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1088){
  return __mosek_2fusion_2Model__variable_(_1086,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1087)}),_1088);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1089,int _1090) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1089,_1090); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1089,int _1090) { return __mosek_2fusion_2Model__variable(_1089,_1090); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1089,int _1090){
  return __mosek_2fusion_2Model__variable_(_1089,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1090)}),::mosek::fusion::p_Domain::unbounded());
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1091) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1091); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1091) { return __mosek_2fusion_2Model__variable(_1091); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1091){
  return __mosek_2fusion_2Model__variable_(_1091,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),::mosek::fusion::p_Domain::unbounded());
}
void mosek::fusion::p_Model::removeConstraintBlock(int _1092){
  int _1093 = natconmap->blocksize(_1092);
  std::shared_ptr< monty::ndarray< int,1 > > _1094 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1093)));
  _checked_ptr_1<int> _ptr__1094(_1094 ? _1094->raw() : nullptr,_1094 ? _1094->size(0) : 0);
  natconmap->get(_1092,_1094,(int)0);
  natconmap->free(_1092);
  int _8953 = (int)0;
  int _8954 = _1093;
  for (int _1095 = _8953; _1095 < _8954; ++_1095)
  {
    {
      ((*natconmap_blockid)(_ptr__1094[_1095])) = (-(int)1);
      ((*natconmap_slackidx)(_ptr__1094[_1095])) = (int)0;
      ((*natconmap_idx)(_ptr__1094[_1095])) = (-(int)1);
      if ((((*natconmap_coderowptrb)(_ptr__1094[_1095])) < ((*natconmap_coderowptre)(_ptr__1094[_1095]))))
      {
        {
          natconmap_numparameterized -= (((*natconmap_coderowptre)(_ptr__1094[_1095])) - ((*natconmap_coderowptrb)(_ptr__1094[_1095])));
          ((*natconmap_coderowptrb)(_ptr__1094[_1095])) = ((*natconmap_coderowptre)(_ptr__1094[_1095]));
        }
      }
      {}
    }
  }
  task_con_putboundlist_fr(_1094);
  task_cleararowlist(_1094);
}
void mosek::fusion::p_Model::removeVariableBlock(long long _1096){
  if ((natconmap_numparameterized > (int)0))
  {
    {
      throw ::mosek::fusion::DeletionError(std::string ("Cannot remove variables in parameterized model"));
    }
  }
  {}
  if ((_1096 < (int)0))
  {
    {
      throw ::mosek::fusion::DeletionError(std::string ("PSD variables cannot be removed"));
    }
  }
  else
  {
    {
      int _1097 = (int)_1096;
      int _1098 = natvarmap->blocksize(_1097);
      std::shared_ptr< monty::ndarray< int,1 > > _1099 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1098)));
      _checked_ptr_1<int> _ptr__1099(_1099 ? _1099->raw() : nullptr,_1099 ? _1099->size(0) : 0);
      natvarmap->get(_1097,_1099,(int)0);
      natvarmap->free(_1097);
      if ((((*natvarmap_type)(_1097)) > (int)5))
      {
        {
          int _1100 = (((*natvarmap_type)(_1097)) - (int)6);
          int _1101 = natconemap->blocksize(_1100);
          std::shared_ptr< monty::ndarray< int,1 > > _1102 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1101)));
          _checked_ptr_1<int> _ptr__1102(_1102 ? _1102->raw() : nullptr,_1102 ? _1102->size(0) : 0);
          natconemap->get(_1100,_1102,(int)0);
          natconemap->free(_1100);
          ((*natconemap_dim)(_1100)) = (int)0;
          task_clear_cones(_1102);
        }
      }
      {}
      ((*natvarmap_type)(_1097)) = (int)0;
      int _8955 = (int)0;
      int _8956 = _1098;
      for (int _1103 = _8955; _1103 < _8956; ++_1103)
      {
        {
          ((*natvarmap_blockid)(_1103)) = (-(int)1);
          ((*natvarmap_idx)(_1103)) = (-(int)1);
        }
      }
      task_var_putboundlist_fr(_1099);
      task_clearacollist(_1099);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__ranged_variable(const std::string & _1104,std::shared_ptr< monty::ndarray< int,1 > > _1105,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1106){
  _checked_ptr_1<int> _ptr__1105(_1105 ? _1105->raw() : nullptr, _1105 ? _1105->size(0) : 0);
  if ((((int)((_1104).size()) > (int)0) && hasVariable(_1104)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1104)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _8957;
  bool _8958 = (NULL != _1105.get());
  if (_8958)
  {
    _8957 = _1105;
  }
  else
  {
    _8957 = mosek::fusion::p_RangeDomain::_get_impl(_1106)->shape;
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1107 = _8957;
  _checked_ptr_1<int> _ptr__1107(_1107 ? _1107->raw() : nullptr,_1107 ? _1107->size(0) : 0);
  if (((NULL != mosek::fusion::p_RangeDomain::_get_impl(_1106)->shape.get()) && (!::mosek::fusion::p_Set::match(mosek::fusion::p_RangeDomain::_get_impl(_1106)->shape,_1107))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));
    }
  }
  {}
  if ((NULL == _1107.get()))
  {
    {
      _1107 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
      _ptr__1107.update(_1107 ? _1107->raw() : nullptr, _1107 ? _1107->size(0) : 0);
    }
  }
  {}
  int _1108 = (int)((_1107)->size(0));
  std::shared_ptr< monty::ndarray< int,1 > > _1109 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1108)));
  _checked_ptr_1<int> _ptr__1109(_1109 ? _1109->raw() : nullptr,_1109 ? _1109->size(0) : 0);
  if ((_1108 > (int)0))
  {
    {
      _ptr__1109[(_1108 - (int)1)] = (int)1;
      int _8959 = (int)1;
      int _8960 = _1108;
      for (int _1110 = _8959; _1110 < _8960; ++_1110)
      {
        {
          _ptr__1109[((_1108 - _1110) - (int)1)] = safe_mul( _ptr__1109[(_1108 - _1110)],_ptr__1107[(_1108 - _1110)] );
        }
      }
    }
  }
  {}
  int _1111 = (int)1;
  int _8961 = (int)0;
  int _8962 = (int)((_1107)->size(0));
  for (int _1112 = _8961; _1112 < _8962; ++_1112)
  {
    {
      _1111 *= _ptr__1107[_1112];
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _1113 = nullptr;
  _checked_ptr_1<long long> _ptr__1113(_1113 ? _1113->raw() : nullptr,_1113 ? _1113->size(0) : 0);
  if ((NULL != _1113.get()))
  {
    {
      if (((int)((mosek::fusion::p_RangeDomain::_get_impl(_1106)->sparsity)->size(1)) != _1108))
      {
        {
          throw ::mosek::fusion::SparseFormatError(std::string ("Sparsity pattern is not correct"));
        }
      }
      {}
      _1113 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((mosek::fusion::p_RangeDomain::_get_impl(_1106)->sparsity)->size(0)))));
      _ptr__1113.update(_1113 ? _1113->raw() : nullptr, _1113 ? _1113->size(0) : 0);
      int _8963 = (int)0;
      int _8964 = (int)((mosek::fusion::p_RangeDomain::_get_impl(_1106)->sparsity)->size(0));
      for (int _1114 = _8963; _1114 < _8964; ++_1114)
      {
        {
          int _8965 = (int)0;
          int _8966 = (int)((mosek::fusion::p_RangeDomain::_get_impl(_1106)->sparsity)->size(1));
          for (int _1115 = _8965; _1115 < _8966; ++_1115)
          {
            {
              if (((((*mosek::fusion::p_RangeDomain::_get_impl(_1106)->sparsity)(_1114,_1115)) < (int)0) || (((*mosek::fusion::p_RangeDomain::_get_impl(_1106)->sparsity)(_1114,_1115)) >= _ptr__1107[_1115])))
              {
                {
                  throw ::mosek::fusion::SparseFormatError(std::string ("Sparsity pattern is not correct"));
                }
              }
              {}
            }
          }
          long long _1116 = (int)0;
          int _8967 = (int)0;
          int _8968 = (int)((mosek::fusion::p_RangeDomain::_get_impl(_1106)->sparsity)->size(1));
          for (int _1117 = _8967; _1117 < _8968; ++_1117)
          {
            {
              _1116 += safe_mul( _ptr__1109[_1117],((*mosek::fusion::p_RangeDomain::_get_impl(_1106)->sparsity)(_1114,_1117)) );
            }
          }
          _ptr__1113[_1114] = _1116;
        }
      }
    }
  }
  {}
  int _8969;
  bool _8970 = (NULL != _1113.get());
  if (_8970)
  {
    _8969 = (int)((_1113)->size(0));
  }
  else
  {
    _8969 = _1111;
  }
  int _1118 = _8969;
  std::shared_ptr< monty::ndarray< double,1 > > _1119;
  _checked_ptr_1<double> _ptr__1119(_1119 ? _1119->raw() : nullptr,_1119 ? _1119->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1120;
  _checked_ptr_1<double> _ptr__1120(_1120 ? _1120->raw() : nullptr,_1120 ? _1120->size(0) : 0);
  if (mosek::fusion::p_RangeDomain::_get_impl(_1106)->scalable)
  {
    {
      std::vector<double> _8971;
      for (int _1121 = (int)0, _8972 = _1118; _1121 < _8972 ; ++_1121)
      {
        _8971.push_back(((*mosek::fusion::p_RangeDomain::_get_impl(_1106)->lb)((int)0)));
      }
      auto _8973 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8971.size()),_8971.begin(),_8971.end()));
      _1119 = _8973;
      _ptr__1119.update(_1119 ? _1119->raw() : nullptr, _1119 ? _1119->size(0) : 0);
      std::vector<double> _8974;
      for (int _1122 = (int)0, _8975 = _1118; _1122 < _8975 ; ++_1122)
      {
        _8974.push_back(((*mosek::fusion::p_RangeDomain::_get_impl(_1106)->ub)((int)0)));
      }
      auto _8976 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8974.size()),_8974.begin(),_8974.end()));
      _1120 = _8976;
      _ptr__1120.update(_1120 ? _1120->raw() : nullptr, _1120 ? _1120->size(0) : 0);
    }
  }
  else
  {
    {
      _1119 = mosek::fusion::p_RangeDomain::_get_impl(_1106)->lb;
      _ptr__1119.update(_1119 ? _1119->raw() : nullptr, _1119 ? _1119->size(0) : 0);
      _1120 = mosek::fusion::p_RangeDomain::_get_impl(_1106)->ub;
      _ptr__1120.update(_1120 ? _1120->raw() : nullptr, _1120 ? _1120->size(0) : 0);
    }
  }
  int _1123 = natvarmap_alloc(_1118);
  std::shared_ptr< monty::ndarray< int,1 > > _1124 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(natvarmap->blocksize(_1123))));
  _checked_ptr_1<int> _ptr__1124(_1124 ? _1124->raw() : nullptr,_1124 ? _1124->size(0) : 0);
  natvarmap->get(_1123,_1124,(int)0);
  int _8977 = (int)0;
  int _8978 = _1118;
  for (int _1125 = _8977; _1125 < _8978; ++_1125)
  {
    {
      ((*natvarmap_idx)(_ptr__1124[_1125])) = _1123;
    }
  }
  task_var_putboundlist_ra(_1124,_1119,_1120);
  monty::rc_ptr< ::mosek::fusion::RangedVariable > _1126 = ::mosek::fusion::p_RangedVariable::_new_RangedVariable(::mosek::fusion::Model::t(_pubthis),_1104,(long long)(_1123),_1107,_1113,_1124);
  if (mosek::fusion::p_RangeDomain::_get_impl(_1106)->cardinal_flag)
  {
    {
      task_var_putintlist(_1124);
    }
  }
  {}
  ((*vars)(_1123)) = (_1126).as<::mosek::fusion::ModelVariable>();
  if (((int)((_1104).size()) > (int)0))
  {
    {
      var_map->setItem(_1104,_1123);
    }
  }
  {}
  return _1126;
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable_(const std::string & _1127,std::shared_ptr< monty::ndarray< int,1 > > _1128,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1129){
  _checked_ptr_1<int> _ptr__1128(_1128 ? _1128->raw() : nullptr, _1128 ? _1128->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _8979;
  bool _8980 = (NULL != _1128.get());
  if (_8980)
  {
    _8979 = _1128;
  }
  else
  {
    _8979 = mosek::fusion::p_ConeDomain::_get_impl(_1129)->shape;
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1130 = _8979;
  _checked_ptr_1<int> _ptr__1130(_1130 ? _1130->raw() : nullptr,_1130 ? _1130->size(0) : 0);
  if ((((int)((_1127).size()) > (int)0) && hasVariable(_1127)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1127)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if ((NULL == _1130.get()))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Missing shape"));
    }
  }
  else if(((NULL != mosek::fusion::p_ConeDomain::_get_impl(_1129)->shape.get()) && (!::mosek::fusion::p_Set::match(_1130,mosek::fusion::p_ConeDomain::_get_impl(_1129)->shape))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));
    }
  }
  else if((_1129->getAxis() >= (int)((_1130)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid cone dimension"));
    }
  }
  {}
  int _8981;
  bool _8982 = (NULL != mosek::fusion::p_ConeDomain::_get_impl(_1129)->shape.get());
  if (_8982)
  {
    _8981 = _1129->getAxis();
  }
  else
  {
    _8981 = ((int)((_1130)->size(0)) - (int)1);
  }
  int _1131 = _8981;
  int _1132 = _ptr__1130[_1131];
  int _1133 = (int)((_1130)->size(0));
  std::shared_ptr< monty::ndarray< int,1 > > _1134 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1133)));
  _checked_ptr_1<int> _ptr__1134(_1134 ? _1134->raw() : nullptr,_1134 ? _1134->size(0) : 0);
  _ptr__1134[(_1133 - (int)1)] = (int)1;
  int _8983 = (int)1;
  int _8984 = _1133;
  for (int _1135 = _8983; _1135 < _8984; ++_1135)
  {
    {
      _ptr__1134[((_1133 - _1135) - (int)1)] = safe_mul( _ptr__1134[(_1133 - _1135)],_ptr__1130[(_1133 - _1135)] );
    }
  }
  int _1136 = _ptr__1130[(int)0];
  int _8985 = (int)1;
  int _8986 = (int)((_1130)->size(0));
  for (int _1137 = _8985; _1137 < _8986; ++_1137)
  {
    {
      _1136 *= _ptr__1130[_1137];
    }
  }
  int _1138 = (int)1;
  int _8987 = (int)0;
  int _8988 = _1131;
  for (int _1139 = _8987; _1139 < _8988; ++_1139)
  {
    {
      _1138 *= _ptr__1130[_1139];
    }
  }
  int _1140 = (int)1;
  int _8989 = safe_add( _1131,(int)1 );
  int _8990 = _1133;
  for (int _1141 = _8989; _1141 < _8990; ++_1141)
  {
    {
      _1140 *= _ptr__1130[_1141];
    }
  }
  int _1142 = safe_mul( _1138,_1140 );
  if ((((mosek::fusion::p_ConeDomain::_get_impl(_1129)->key == ::mosek::fusion::QConeKey::InQCone) && (_1132 < (int)2)) || (((mosek::fusion::p_ConeDomain::_get_impl(_1129)->key == ::mosek::fusion::QConeKey::InRotatedQCone) && (_1132 < (int)3)) || (((mosek::fusion::p_ConeDomain::_get_impl(_1129)->key == ::mosek::fusion::QConeKey::InPExpCone) && (_1132 != (int)3)) || (((mosek::fusion::p_ConeDomain::_get_impl(_1129)->key == ::mosek::fusion::QConeKey::InPPowCone) && (_1132 < (int)2)) || (((mosek::fusion::p_ConeDomain::_get_impl(_1129)->key == ::mosek::fusion::QConeKey::InDExpCone) && (_1132 != (int)3)) || ((mosek::fusion::p_ConeDomain::_get_impl(_1129)->key == ::mosek::fusion::QConeKey::InDPowCone) && (_1132 < (int)2))))))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid size for cone"));
    }
  }
  {}
  int _1143 = natvarmap_alloc(_1136);
  int _1144 = natconemap_alloc(_1142);
  ((*natvarmap_type)(_1143)) = safe_add( _1144,(int)6 );
  std::shared_ptr< monty::ndarray< int,1 > > _1145 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(natvarmap->blocksize(_1143))));
  _checked_ptr_1<int> _ptr__1145(_1145 ? _1145->raw() : nullptr,_1145 ? _1145->size(0) : 0);
  natvarmap->get(_1143,_1145,(int)0);
  int _8991 = (int)0;
  int _8992 = _1136;
  for (int _1146 = _8991; _1146 < _8992; ++_1146)
  {
    {
      ((*natvarmap_idx)(_ptr__1145[_1146])) = _1143;
    }
  }
  task_var_putboundlist_fr(_1145);
  if (mosek::fusion::p_ConeDomain::_get_impl(_1129)->int_flag)
  {
    {
      task_var_putintlist(_1145);
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _1147 = _1145;
  _checked_ptr_1<int> _ptr__1147(_1147 ? _1147->raw() : nullptr,_1147 ? _1147->size(0) : 0);
  if ((_1131 < ((int)((_1130)->size(0)) - (int)1)))
  {
    {
      _1147 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_1145)->size(0)))));
      _ptr__1147.update(_1147 ? _1147->raw() : nullptr, _1147 ? _1147->size(0) : 0);
      int _1148 = (int)0;
      int _8993 = (int)0;
      int _8994 = _1138;
      for (int _1149 = _8993; _1149 < _8994; ++_1149)
      {
        {
          int _8995 = (int)0;
          int _8996 = _1140;
          for (int _1150 = _8995; _1150 < _8996; ++_1150)
          {
            {
              int _8997 = (int)0;
              int _8998 = _1132;
              for (int _1151 = _8997; _1151 < _8998; ++_1151)
              {
                {
                  _ptr__1147[_1148] = _ptr__1145[safe_add( safe_mul( safe_add( safe_mul( _1149,_1132 ),_1151 ),_1140 ),_1150 )];
                  ++ _1148;
                }
              }
            }
          }
        }
      }
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _1152 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1142)));
  _checked_ptr_1<int> _ptr__1152(_1152 ? _1152->raw() : nullptr,_1152 ? _1152->size(0) : 0);
  natconemap->get(_1144,_1152,(int)0);
  ((*natconemap_dim)(_1144)) = _1132;
  if ((mosek::fusion::p_ConeDomain::_get_impl(_1129)->key == ::mosek::fusion::QConeKey::InQCone))
  {
    {
      task_put_quadcones(_1152,_1132,_1142,_1147);
    }
  }
  else
  {
    {
      if ((mosek::fusion::p_ConeDomain::_get_impl(_1129)->key == ::mosek::fusion::QConeKey::InRotatedQCone))
      {
        {
          task_put_rquadcones(_1152,_1132,_1142,_1147);
        }
      }
      else
      {
        {
          if ((mosek::fusion::p_ConeDomain::_get_impl(_1129)->key == ::mosek::fusion::QConeKey::InPExpCone))
          {
            {
              task_put_pexpcones(_1152,_1132,_1142,_1147);
            }
          }
          else
          {
            {
              if ((mosek::fusion::p_ConeDomain::_get_impl(_1129)->key == ::mosek::fusion::QConeKey::InPPowCone))
              {
                {
                  std::vector<double> _8999;
                  for (int _1153 = (int)0, _9000 = _1142; _1153 < _9000 ; ++_1153)
                  {
                    _8999.push_back(mosek::fusion::p_ConeDomain::_get_impl(_1129)->alpha);
                  }
                  auto _9001 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8999.size()),_8999.begin(),_8999.end()));
                  task_put_ppowcones(_1152,_1132,_1142,_1147,_9001);
                }
              }
              else
              {
                {
                  if ((mosek::fusion::p_ConeDomain::_get_impl(_1129)->key == ::mosek::fusion::QConeKey::InDExpCone))
                  {
                    {
                      task_put_dexpcones(_1152,_1132,_1142,_1147);
                    }
                  }
                  else
                  {
                    {
                      if ((mosek::fusion::p_ConeDomain::_get_impl(_1129)->key == ::mosek::fusion::QConeKey::InDPowCone))
                      {
                        {
                          std::vector<double> _9002;
                          for (int _1154 = (int)0, _9003 = _1142; _1154 < _9003 ; ++_1154)
                          {
                            _9002.push_back(mosek::fusion::p_ConeDomain::_get_impl(_1129)->alpha);
                          }
                          auto _9004 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9002.size()),_9002.begin(),_9002.end()));
                          task_put_dpowcones(_1152,_1132,_1142,_1147,_9004);
                        }
                      }
                      {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  int _9005 = (int)0;
  int _9006 = (int)((_1152)->size(0));
  for (int _1155 = _9005; _1155 < _9006; ++_1155)
  {
    {
      task_cone_name(_ptr__1152[_1155],::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__1152[_1155])->toString());
    }
  }
  monty::rc_ptr< ::mosek::fusion::ConicVariable > _1156 = ::mosek::fusion::p_ConicVariable::_new_ConicVariable(::mosek::fusion::Model::t(_pubthis),_1127,_1143,_1130,_1145);
  ((*vars)(_1143)) = (_1156).as<::mosek::fusion::ModelVariable>();
  if (((int)((_1127).size()) > (int)0))
  {
    {
      var_map->setItem(_1127,_1143);
    }
  }
  {}
  return (_1156).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable_(const std::string & _1157,std::shared_ptr< monty::ndarray< int,1 > > _1158,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1159){
  _checked_ptr_1<int> _ptr__1158(_1158 ? _1158->raw() : nullptr, _1158 ? _1158->size(0) : 0);
  if ((((int)((_1157).size()) > (int)0) && hasVariable(_1157)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1157)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _9007;
  bool _9008 = (NULL != _1158.get());
  if (_9008)
  {
    _9007 = _1158;
  }
  else
  {
    _9007 = mosek::fusion::p_LinearDomain::_get_impl(_1159)->shape;
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1160 = _9007;
  _checked_ptr_1<int> _ptr__1160(_1160 ? _1160->raw() : nullptr,_1160 ? _1160->size(0) : 0);
  if (((NULL != mosek::fusion::p_LinearDomain::_get_impl(_1159)->shape.get()) && (!::mosek::fusion::p_Set::match(mosek::fusion::p_LinearDomain::_get_impl(_1159)->shape,_1160))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));
    }
  }
  {}
  if ((NULL == _1160.get()))
  {
    {
      _1160 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
      _ptr__1160.update(_1160 ? _1160->raw() : nullptr, _1160 ? _1160->size(0) : 0);
    }
  }
  {}
  int _1161 = (int)((_1160)->size(0));
  std::shared_ptr< monty::ndarray< int,1 > > _1162 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1161)));
  _checked_ptr_1<int> _ptr__1162(_1162 ? _1162->raw() : nullptr,_1162 ? _1162->size(0) : 0);
  if ((_1161 > (int)0))
  {
    {
      _ptr__1162[(_1161 - (int)1)] = (int)1;
      int _9009 = (int)1;
      int _9010 = _1161;
      for (int _1163 = _9009; _1163 < _9010; ++_1163)
      {
        {
          _ptr__1162[((_1161 - _1163) - (int)1)] = safe_mul( _ptr__1162[(_1161 - _1163)],_ptr__1160[(_1161 - _1163)] );
        }
      }
    }
  }
  {}
  int _1164 = (int)1;
  int _9011 = (int)0;
  int _9012 = (int)((_1160)->size(0));
  for (int _1165 = _9011; _1165 < _9012; ++_1165)
  {
    {
      _1164 *= _ptr__1160[_1165];
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _1166 = nullptr;
  _checked_ptr_1<long long> _ptr__1166(_1166 ? _1166->raw() : nullptr,_1166 ? _1166->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1167 = nullptr;
  _checked_ptr_1<int> _ptr__1167(_1167 ? _1167->raw() : nullptr,_1167 ? _1167->size(0) : 0);
  if (mosek::fusion::p_LinearDomain::_get_impl(_1159)->empty)
  {
    {
      _1166 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0)));
      _ptr__1166.update(_1166 ? _1166->raw() : nullptr, _1166 ? _1166->size(0) : 0);
    }
  }
  else if((NULL != mosek::fusion::p_LinearDomain::_get_impl(_1159)->sparsity.get()))
  {
    {
      if (((int)((mosek::fusion::p_LinearDomain::_get_impl(_1159)->sparsity)->size(1)) != _1161))
      {
        {
          throw ::mosek::fusion::SparseFormatError(std::string ("Sparsity pattern is not correct"));
        }
      }
      {}
      int _1168 = (int)((mosek::fusion::p_LinearDomain::_get_impl(_1159)->sparsity)->size(0));
      _1166 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1168)));
      _ptr__1166.update(_1166 ? _1166->raw() : nullptr, _1166 ? _1166->size(0) : 0);
      {
        bool _1169 = false;
        std::shared_ptr< monty::ndarray< int,2 > > _1170 = mosek::fusion::p_LinearDomain::_get_impl(_1159)->sparsity;
        int _9013 = (int)0;
        int _9014 = _1168;
        for (int _1171 = _9013; _1171 < _9014; ++_1171)
        {
          {
            int _9015 = (int)0;
            int _9016 = (int)((_1170)->size(1));
            for (int _1172 = _9015; _1172 < _9016; ++_1172)
            {
              {
                _1169 = (_1169 || ((((*_1170)(_1171,_1172)) < (int)0) || (((*_1170)(_1171,_1172)) >= _ptr__1160[_1172])));
              }
            }
            if ((!_1169))
            {
              {
                long long _1173 = (int)0;
                int _9017 = (int)0;
                int _9018 = (int)((_1170)->size(1));
                for (int _1174 = _9017; _1174 < _9018; ++_1174)
                {
                  {
                    _1173 += safe_mul( _ptr__1162[_1174],((*_1170)(_1171,_1174)) );
                  }
                }
                _ptr__1166[_1171] = _1173;
              }
            }
            {}
          }
        }
        if (_1169)
        {
          {
            throw ::mosek::fusion::SparseFormatError(std::string ("Sparsity pattern is out of bounds"));
          }
        }
        {}
      }
      std::shared_ptr< monty::ndarray< int,2 > > _1175 = mosek::fusion::p_LinearDomain::_get_impl(_1159)->sparsity;
      int _1176 = (int)0;
      int _9019 = (int)0;
      int _9020 = _1161;
      for (int _1177 = _9019; _1177 < _9020; ++_1177)
      {
        {
          if ((_1176 < _ptr__1160[_1177]))
          {
            {
              _1176 = _ptr__1160[_1177];
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _1178 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1168)));
      _checked_ptr_1<int> _ptr__1178(_1178 ? _1178->raw() : nullptr,_1178 ? _1178->size(0) : 0);
      int _9021 = (int)0;
      int _9022 = _1168;
      for (int _1179 = _9021; _1179 < _9022; ++_1179)
      {
        {
          _ptr__1178[_1179] = _1179;
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _1180 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1168)));
      _checked_ptr_1<int> _ptr__1180(_1180 ? _1180->raw() : nullptr,_1180 ? _1180->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _1181 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _1176,(int)1 ))));
      _checked_ptr_1<int> _ptr__1181(_1181 ? _1181->raw() : nullptr,_1181 ? _1181->size(0) : 0);
      int _9023 = (int)0;
      int _9024 = _1161;
      for (int _1182 = _9023; _1182 < _9024; ++_1182)
      {
        {
          {
            int _1183 = ((_1161 - _1182) - (int)1);
            int _9025 = (int)0;
            int _9026 = safe_add( _ptr__1160[_1183],(int)1 );
            for (int _1184 = _9025; _1184 < _9026; ++_1184)
            {
              {
                _ptr__1181[_1184] = (int)0;
              }
            }
            int _9027 = (int)0;
            int _9028 = _1168;
            for (int _1185 = _9027; _1185 < _9028; ++_1185)
            {
              {
                ++ _ptr__1181[safe_add( ((*_1175)(_1185,_1183)),(int)1 )];
              }
            }
            int _9029 = (int)0;
            int _9030 = _ptr__1160[_1183];
            for (int _1186 = _9029; _1186 < _9030; ++_1186)
            {
              {
                _ptr__1181[safe_add( _1186,(int)1 )] += _ptr__1181[_1186];
              }
            }
            int _9031 = (int)0;
            int _9032 = _1168;
            for (int _1187 = _9031; _1187 < _9032; ++_1187)
            {
              {
                int _1188 = _ptr__1178[_1187];
                _ptr__1180[_ptr__1181[((*_1175)(_1188,_1183))]] = _1188;
                ++ _ptr__1181[((*_1175)(_1188,_1183))];
              }
            }
          }
          std::shared_ptr< monty::ndarray< int,1 > > _1189 = _1178;
          _checked_ptr_1<int> _ptr__1189(_1189 ? _1189->raw() : nullptr,_1189 ? _1189->size(0) : 0);
          _1178 = _1180;
          _ptr__1178.update(_1178 ? _1178->raw() : nullptr, _1178 ? _1178->size(0) : 0);
          _1180 = _1189;
          _ptr__1180.update(_1180 ? _1180->raw() : nullptr, _1180 ? _1180->size(0) : 0);
        }
      }
      int _9033 = (int)0;
      int _9034 = _1168;
      for (int _1190 = _9033; _1190 < _9034; ++_1190)
      {
        {
          int _1191 = _ptr__1178[_1190];
          long long _1192 = (int)0;
          int _9035 = (int)0;
          int _9036 = _1161;
          for (int _1193 = _9035; _1193 < _9036; ++_1193)
          {
            {
              _1192 += safe_mul( _ptr__1162[_1193],((*_1175)(_1191,_1193)) );
            }
          }
          _ptr__1166[_1190] = _1192;
        }
      }
    }
  }
  {}
  int _9037;
  bool _9038 = (NULL != _1166.get());
  if (_9038)
  {
    _9037 = (int)((_1166)->size(0));
  }
  else
  {
    _9037 = _1164;
  }
  int _1194 = _9037;
  std::shared_ptr< monty::ndarray< double,1 > > _1195 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1194)));
  _checked_ptr_1<double> _ptr__1195(_1195 ? _1195->raw() : nullptr,_1195 ? _1195->size(0) : 0);
  if ((NULL != mosek::fusion::p_LinearDomain::_get_impl(_1159)->bnd.get()))
  {
    {
      if (((int)((mosek::fusion::p_LinearDomain::_get_impl(_1159)->bnd)->size(0)) == (int)1))
      {
        {
          int _9039 = (int)0;
          int _9040 = _1194;
          for (int _1196 = _9039; _1196 < _9040; ++_1196)
          {
            {
              _ptr__1195[_1196] = ((*mosek::fusion::p_LinearDomain::_get_impl(_1159)->bnd)((int)0));
            }
          }
        }
      }
      else if(((int)((mosek::fusion::p_LinearDomain::_get_impl(_1159)->bnd)->size(0)) == _1194))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinearDomain::_get_impl(_1159)->bnd,(int)0,_1195,(int)0,_1194);
        }
      }
      else
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid right hand side shape in domain"));
        }
      }
    }
  }
  {}
  int _1197 = natvarmap_alloc(_1194);
  std::shared_ptr< monty::ndarray< int,1 > > _1198 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(natvarmap->blocksize(_1197))));
  _checked_ptr_1<int> _ptr__1198(_1198 ? _1198->raw() : nullptr,_1198 ? _1198->size(0) : 0);
  natvarmap->get(_1197,_1198,(int)0);
  int _9041 = (int)0;
  int _9042 = _1194;
  for (int _1199 = _9041; _1199 < _9042; ++_1199)
  {
    {
      ((*natvarmap_idx)(_ptr__1198[_1199])) = _1197;
    }
  }
  if ((mosek::fusion::p_LinearDomain::_get_impl(_1159)->key == ::mosek::fusion::RelationKey::IsFree))
  {
    {
      task_var_putboundlist_fr(_1198);
      ((*natvarmap_type)(_1197)) = (int)1;
    }
  }
  {}
  if ((mosek::fusion::p_LinearDomain::_get_impl(_1159)->key == ::mosek::fusion::RelationKey::LessThan))
  {
    {
      task_var_putboundlist_up(_1198,_1195);
      ((*natvarmap_type)(_1197)) = (int)3;
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_1159)->key == ::mosek::fusion::RelationKey::GreaterThan))
  {
    {
      task_var_putboundlist_lo(_1198,_1195);
      ((*natvarmap_type)(_1197)) = (int)2;
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_1159)->key == ::mosek::fusion::RelationKey::EqualsTo))
  {
    {
      task_var_putboundlist_fx(_1198,_1195);
      ((*natvarmap_type)(_1197)) = (int)5;
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::LinearVariable > _1200 = ::mosek::fusion::p_LinearVariable::_new_LinearVariable(::mosek::fusion::Model::t(_pubthis),_1157,(long long)(_1197),_1160,_1166,_1198);
  if (mosek::fusion::p_LinearDomain::_get_impl(_1159)->cardinal_flag)
  {
    {
      task_var_putintlist(_1198);
    }
  }
  {}
  ((*vars)(_1197)) = (_1200).as<::mosek::fusion::ModelVariable>();
  if (((int)((_1157).size()) > (int)0))
  {
    {
      var_map->setItem(_1157,_1197);
    }
  }
  {}
  return (_1200).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable_(const std::string & _1201,std::shared_ptr< monty::ndarray< int,1 > > _1202,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1203){
  _checked_ptr_1<int> _ptr__1202(_1202 ? _1202->raw() : nullptr, _1202 ? _1202->size(0) : 0);
  if ((((int)((_1201).size()) > (int)0) && hasVariable(_1201)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1201)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _9043;
  bool _9044 = (NULL != _1202.get());
  if (_9044)
  {
    _9043 = _1202;
  }
  else
  {
    _9043 = mosek::fusion::p_LinPSDDomain::_get_impl(_1203)->shape;
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1204 = _9043;
  _checked_ptr_1<int> _ptr__1204(_1204 ? _1204->raw() : nullptr,_1204 ? _1204->size(0) : 0);
  if ((NULL == _1204.get()))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Missing shape for variable"));
    }
  }
  else if(((NULL != mosek::fusion::p_LinPSDDomain::_get_impl(_1203)->shape.get()) && (!::mosek::fusion::p_Set::match(mosek::fusion::p_LinPSDDomain::_get_impl(_1203)->shape,_1204))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));
    }
  }
  {}
  int _1205 = (int)((_1204)->size(0));
  int _9045;
  bool _9046 = (NULL != mosek::fusion::p_LinPSDDomain::_get_impl(_1203)->shape.get());
  if (_9046)
  {
    _9045 = mosek::fusion::p_LinPSDDomain::_get_impl(_1203)->conedim;
  }
  else
  {
    _9045 = (_1205 - (int)1);
  }
  int _1206 = _9045;
  if (((_1206 < (int)0) || (_1206 >= _1205)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid cone direction dimension"));
    }
  }
  {}
  int _1207 = _ptr__1204[_1206];
  int _1208 = (int)((::mosek::fusion::Utils::Tools::sqrt((double)(safe_add( (int)1,safe_mul( (int)8,_1207 ) ))) - (int)1) / (int)2);
  if (((safe_mul( _1208,safe_add( _1208,(int)1 ) ) / (int)2) != _1207))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid size for semidefinite variable"));
    }
  }
  {}
  int _1209 = (int)1;
  int _1210 = _ptr__1204[_1206];
  int _1211 = (int)1;
  int _9047 = (int)0;
  int _9048 = _1206;
  for (int _1212 = _9047; _1212 < _9048; ++_1212)
  {
    {
      _1211 *= _ptr__1204[_1212];
    }
  }
  int _9049 = safe_add( _1206,(int)1 );
  int _9050 = _1205;
  for (int _1213 = _9049; _1213 < _9050; ++_1213)
  {
    {
      _1209 *= _ptr__1204[_1213];
    }
  }
  int _1214 = safe_mul( _1211,_1209 );
  int _1215 = safe_mul( _1214,_1207 );
  int _1216 = natbarvarmap_alloc(_1214,_1208);
  std::shared_ptr< monty::ndarray< int,1 > > _1217 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1214)));
  _checked_ptr_1<int> _ptr__1217(_1217 ? _1217->raw() : nullptr,_1217 ? _1217->size(0) : 0);
  natbarvarmap_get(_1216,_1217);
  std::shared_ptr< monty::ndarray< long long,1 > > _1218 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( _1214,_1210 ))));
  _checked_ptr_1<long long> _ptr__1218(_1218 ? _1218->raw() : nullptr,_1218 ? _1218->size(0) : 0);
  {
    int _1219 = (int)0;
    int _9051 = (int)0;
    int _9052 = _1211;
    for (int _1220 = _9051; _1220 < _9052; ++_1220)
    {
      {
        int _9053 = (int)0;
        int _9054 = _1207;
        for (int _1221 = _9053; _1221 < _9054; ++_1221)
        {
          {
            int _9055 = (int)0;
            int _9056 = _1209;
            for (int _1222 = _9055; _1222 < _9056; ++_1222)
            {
              {
                _ptr__1218[_1219] = safe_add( ((*natbarvar_ptr)(_ptr__1217[safe_add( safe_mul( _1220,_1209 ),_1222 )])),_1221 );
                ++ _1219;
              }
            }
          }
        }
      }
    }
  }
  monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _1223 = ::mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable(::mosek::fusion::Model::t(_pubthis),_1201,_1216,_1204,_1206,_1218);
  ((*barvars)(_1216)) = (_1223).as<::mosek::fusion::ModelVariable>();
  if (((int)((_1201).size()) > (int)0))
  {
    {
      var_map->setItem(_1201,(-safe_add( _1216,(int)1 )));
    }
  }
  {}
  return (_1223).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::SymmetricVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable_(const std::string & _1224,std::shared_ptr< monty::ndarray< int,1 > > _1225,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1226){
  _checked_ptr_1<int> _ptr__1225(_1225 ? _1225->raw() : nullptr, _1225 ? _1225->size(0) : 0);
  if ((((int)((_1224).size()) > (int)0) && hasVariable(_1224)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1224)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _1227 = _1225;
  _checked_ptr_1<int> _ptr__1227(_1227 ? _1227->raw() : nullptr,_1227 ? _1227->size(0) : 0);
  if ((NULL == _1227.get()))
  {
    {
      _1227 = mosek::fusion::p_PSDDomain::_get_impl(_1226)->shape;
      _ptr__1227.update(_1227 ? _1227->raw() : nullptr, _1227 ? _1227->size(0) : 0);
    }
  }
  {}
  if ((NULL == _1227.get()))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Missing shape for variable"));
    }
  }
  {}
  int _1228 = mosek::fusion::p_PSDDomain::_get_impl(_1226)->conedim1;
  int _1229 = mosek::fusion::p_PSDDomain::_get_impl(_1226)->conedim2;
  int _1230 = (int)((_1227)->size(0));
  int _1231 = _ptr__1227[_1228];
  if ((_1228 > _1229))
  {
    {
      int _1232 = _1228;
      _1228 = _1229;
      _1229 = _1232;
    }
  }
  {}
  if (((_1228 == _1229) || ((_1228 < (int)0) || (_1229 >= _1230))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid cone order dimensions for semidefinite variables"));
    }
  }
  {}
  if ((_ptr__1227[_1228] != _ptr__1227[_1229]))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape in cone order dimensions"));
    }
  }
  {}
  int _1233 = (int)1;
  int _9057 = (int)0;
  int _9058 = _1228;
  for (int _1234 = _9057; _1234 < _9058; ++_1234)
  {
    {
      _1233 *= _ptr__1227[_1234];
    }
  }
  int _9059 = safe_add( _1228,(int)1 );
  int _9060 = _1229;
  for (int _1235 = _9059; _1235 < _9060; ++_1235)
  {
    {
      _1233 *= _ptr__1227[_1235];
    }
  }
  int _9061 = safe_add( _1229,(int)1 );
  int _9062 = _1230;
  for (int _1236 = _9061; _1236 < _9062; ++_1236)
  {
    {
      _1233 *= _ptr__1227[_1236];
    }
  }
  int _1237 = (safe_mul( safe_mul( _1233,_1231 ),safe_add( _1231,(int)1 ) ) / (int)2);
  int _1238 = natbarvarmap_alloc(_1233,_1231);
  std::shared_ptr< monty::ndarray< long long,1 > > _1239 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1237)));
  _checked_ptr_1<long long> _ptr__1239(_1239 ? _1239->raw() : nullptr,_1239 ? _1239->size(0) : 0);
  natbarvar_get(_1238,_1239);
  monty::rc_ptr< ::mosek::fusion::PSDVariable > _1240 = ::mosek::fusion::p_PSDVariable::_new_PSDVariable(::mosek::fusion::Model::t(_pubthis),_1224,_1238,_1227,mosek::fusion::p_PSDDomain::_get_impl(_1226)->conedim1,mosek::fusion::p_PSDDomain::_get_impl(_1226)->conedim2,_1239);
  ((*barvars)(_1238)) = (_1240).as<::mosek::fusion::ModelVariable>();
  if (((int)((_1224).size()) > (int)0))
  {
    {
      var_map->setItem(_1224,(-safe_add( _1238,(int)1 )));
    }
  }
  {}
  return (_1240).as<::mosek::fusion::SymmetricVariable>();
}
void mosek::fusion::p_Model::replace_row_code(monty::rc_ptr< ::mosek::fusion::WorkStack > _1241,std::shared_ptr< monty::ndarray< int,1 > > _1242,int _1243,int _1244,int _1245,int _1246,int _1247){
  _checked_ptr_1<int> _ptr__1242(_1242 ? _1242->raw() : nullptr, _1242 ? _1242->size(0) : 0);
  int _1248 = (int)((_1242)->size(0));
  std::shared_ptr< monty::ndarray< int,1 > > _1249 = mosek::fusion::p_WorkStack::_get_impl(_1241)->i32;
  _checked_ptr_1<int> _ptr__1249(_1249 ? _1249->raw() : nullptr,_1249 ? _1249->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1250 = mosek::fusion::p_WorkStack::_get_impl(_1241)->i64;
  _checked_ptr_1<long long> _ptr__1250(_1250 ? _1250->raw() : nullptr,_1250 ? _1250->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1251 = mosek::fusion::p_WorkStack::_get_impl(_1241)->f64;
  _checked_ptr_1<double> _ptr__1251(_1251 ? _1251->raw() : nullptr,_1251 ? _1251->size(0) : 0);
  bool _1252 = true;
  int _1253 = (int)0;
  int _1254 = (int)0;
  int _9063 = (int)0;
  int _9064 = _1248;
  for (int _1255 = _9063; _1255 < _9064; ++_1255)
  {
    {
      int _9065 = _ptr__1249[safe_add( _1243,_1255 )];
      int _9066 = _ptr__1249[safe_add( safe_add( _1243,_1255 ),(int)1 )];
      for (int _1256 = _9065; _1256 < _9066; ++_1256)
      {
        {
          if ((((_ptr__1249[safe_add( safe_add( _1245,_1256 ),(int)1 )] - _ptr__1249[safe_add( _1245,_1256 )]) == (int)1) && ((_ptr__1249[safe_add( _1246,_ptr__1249[safe_add( _1245,_1256 )] )] == 10) || (_ptr__1249[safe_add( _1246,_ptr__1249[safe_add( _1245,_1256 )] )] == 2))))
          {
            {
            }
          }
          else
          {
            {
              ++ _1253;
              _1254 += (_ptr__1249[safe_add( safe_add( _1245,_1256 ),(int)1 )] - _ptr__1249[safe_add( _1245,_1256 )]);
            }
          }
        }
      }
    }
  }
  int _1257 = natconmap_codenztop;
  int _1258 = natconmap_codeatomtop;
  natconmap_codealloc(_1253,_1254);
  int _9067 = (int)0;
  int _9068 = _1248;
  for (int _1259 = _9067; _1259 < _9068; ++_1259)
  {
    {
      ((*natconmap_coderowptrb)(_ptr__1242[_1259])) = _1257;
      int _9069 = _ptr__1249[safe_add( _1243,_1259 )];
      int _9070 = _ptr__1249[safe_add( safe_add( _1243,_1259 ),(int)1 )];
      for (int _1260 = _9069; _1260 < _9070; ++_1260)
      {
        {
          if ((((_ptr__1249[safe_add( safe_add( _1245,_1260 ),(int)1 )] - _ptr__1249[safe_add( _1245,_1260 )]) == (int)1) && ((_ptr__1249[safe_add( _1246,_ptr__1249[safe_add( _1245,_1260 )] )] == 10) || (_ptr__1249[safe_add( _1246,_ptr__1249[safe_add( _1245,_1260 )] )] == 2))))
          {
            {
            }
          }
          else
          {
            {
              int _9071 = _ptr__1249[safe_add( _1245,_1260 )];
              int _9072 = _ptr__1249[safe_add( safe_add( _1245,_1260 ),(int)1 )];
              for (int _1261 = _9071; _1261 < _9072; ++_1261)
              {
                {
                  ((*natconmap_code)(_1258)) = _ptr__1249[safe_add( _1246,_1261 )];
                  ((*natconmap_cconst)(_1258)) = _ptr__1251[safe_add( _1247,_1261 )];
                  ++ _1258;
                }
              }
              ((*natconmap_codeptr)(safe_add( _1257,(int)1 ))) = _1258;
              ((*natconmap_codenidx)(_1257)) = _ptr__1250[safe_add( _1244,_1260 )];
              _1252 = (_ptr__1250[safe_add( _1244,_1260 )] >= (int)0);
              ++ _1257;
            }
          }
        }
      }
      ((*natconmap_coderowptre)(_ptr__1242[_1259])) = _1257;
    }
  }
  natconmap_numparameterized += _1253;
  if ((!_1252))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Expression contains parameterized SDP non-zero"));
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1262,monty::rc_ptr< ::mosek::fusion::Expression > _1263,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1264){
  if ((((int)((_1262).size()) > (int)0) && hasConstraint(_1262)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1262)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if (mosek::fusion::p_RangeDomain::_get_impl(_1264)->cardinal_flag)
  {
    {
      throw ::mosek::fusion::DomainError(std::string ("Integer domain not allowed in a constraint"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::ExprDense > _1265 = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1263)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>());
  _1265->eval(rs,ws,xs);
  rs->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _1266 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int> _ptr__1266(_1266 ? _1266->raw() : nullptr,_1266 ? _1266->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1267 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<long long> _ptr__1267(_1267 ? _1267->raw() : nullptr,_1267 ? _1267->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1268 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1268(_1268 ? _1268->raw() : nullptr,_1268 ? _1268->size(0) : 0);
  int _1269 = mosek::fusion::p_WorkStack::_get_impl(rs)->nd;
  int _1270 = mosek::fusion::p_WorkStack::_get_impl(rs)->shape_base;
  int _1271 = mosek::fusion::p_WorkStack::_get_impl(rs)->nelem;
  int _1272 = mosek::fusion::p_WorkStack::_get_impl(rs)->nnz;
  int _1273 = mosek::fusion::p_WorkStack::_get_impl(rs)->ncodeatom;
  bool _1274 = mosek::fusion::p_WorkStack::_get_impl(rs)->hassp;
  int _1275 = mosek::fusion::p_WorkStack::_get_impl(rs)->ptr_base;
  int _1276 = mosek::fusion::p_WorkStack::_get_impl(rs)->nidxs_base;
  int _1277 = mosek::fusion::p_WorkStack::_get_impl(rs)->cof_base;
  int _1278 = mosek::fusion::p_WorkStack::_get_impl(rs)->codeptr_base;
  int _1279 = mosek::fusion::p_WorkStack::_get_impl(rs)->code_base;
  int _1280 = mosek::fusion::p_WorkStack::_get_impl(rs)->cconst_base;
  if ((NULL != mosek::fusion::p_RangeDomain::_get_impl(_1264)->shape.get()))
  {
    {
      if (((int)((mosek::fusion::p_RangeDomain::_get_impl(_1264)->shape)->size(0)) != _1269))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
        }
      }
      else
      {
        {
          int _9073 = (int)0;
          int _9074 = _1269;
          for (int _1281 = _9073; _1281 < _9074; ++_1281)
          {
            {
              if ((((*mosek::fusion::p_RangeDomain::_get_impl(_1264)->shape)(_1281)) != _ptr__1266[safe_add( _1270,_1281 )]))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
                }
              }
              {}
            }
          }
        }
      }
    }
  }
  {}
  int _1282 = (int)1;
  int _9075 = (int)0;
  int _9076 = _1269;
  for (int _1283 = _9075; _1283 < _9076; ++_1283)
  {
    {
      _1282 *= _ptr__1266[safe_add( _1270,_1283 )];
    }
  }
  int _1284 = natconmap_alloc(_1282);
  std::shared_ptr< monty::ndarray< int,1 > > _1285 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1282)));
  _checked_ptr_1<int> _ptr__1285(_1285 ? _1285->raw() : nullptr,_1285 ? _1285->size(0) : 0);
  natconmap->get(_1284,_1285,(int)0);
  int _9077 = (int)0;
  int _9078 = _1282;
  for (int _1286 = _9077; _1286 < _9078; ++_1286)
  {
    {
      ((*natconmap_idx)(_ptr__1285[_1286])) = _1284;
      ((*natconmap_slackidx)(_ptr__1285[_1286])) = (int)0;
    }
  }
  ((*natconmap_type)(_1284)) = (int)4;
  putarows(_1285,rs,_1271,_1272,_1275,_1276,_1277,std::shared_ptr< monty::ndarray< int,1 > >(nullptr));
  xs->clear();
  std::shared_ptr< monty::ndarray< double,1 > > _1287 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1282)));
  _checked_ptr_1<double> _ptr__1287(_1287 ? _1287->raw() : nullptr,_1287 ? _1287->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1288 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1282)));
  _checked_ptr_1<double> _ptr__1288(_1288 ? _1288->raw() : nullptr,_1288 ? _1288->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1289 = mosek::fusion::p_RangeDomain::_get_impl(_1264)->lb;
  _checked_ptr_1<double> _ptr__1289(_1289 ? _1289->raw() : nullptr,_1289 ? _1289->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1290 = mosek::fusion::p_RangeDomain::_get_impl(_1264)->ub;
  _checked_ptr_1<double> _ptr__1290(_1290 ? _1290->raw() : nullptr,_1290 ? _1290->size(0) : 0);
  bool _1291 = mosek::fusion::p_RangeDomain::_get_impl(_1264)->empty;
  bool _1292 = mosek::fusion::p_RangeDomain::_get_impl(_1264)->scalable;
  std::shared_ptr< monty::ndarray< int,2 > > _1293 = mosek::fusion::p_RangeDomain::_get_impl(_1264)->sparsity;
  {
    if (_1292)
    {
      {
        int _9079 = (int)0;
        int _9080 = _1282;
        for (int _1294 = _9079; _1294 < _9080; ++_1294)
        {
          {
            _ptr__1287[_1294] = _ptr__1289[(int)0];
            _ptr__1288[_1294] = _ptr__1290[(int)0];
          }
        }
      }
    }
    else if(_1291)
    {
      {
      }
    }
    else if((NULL != _1293.get()))
    {
      {
        std::shared_ptr< monty::ndarray< int,1 > > _1295 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1269)));
        _checked_ptr_1<int> _ptr__1295(_1295 ? _1295->raw() : nullptr,_1295 ? _1295->size(0) : 0);
        _ptr__1295[(_1269 - (int)1)] = (int)1;
        int _9081 = (int)1;
        int _9082 = _1269;
        for (int _1296 = _9081; _1296 < _9082; ++_1296)
        {
          {
            _ptr__1295[((_1269 - _1296) - (int)1)] = safe_mul( _ptr__1295[(_1269 - _1296)],_ptr__1266[(safe_add( _1270,_1269 ) - _1296)] );
          }
        }
        int _9083 = (int)0;
        int _9084 = (int)((_1289)->size(0));
        for (int _1297 = _9083; _1297 < _9084; ++_1297)
        {
          {
            int _1298 = (int)0;
            int _9085 = (int)0;
            int _9086 = _1269;
            for (int _1299 = _9085; _1299 < _9086; ++_1299)
            {
              {
                _1298 += safe_mul( _ptr__1295[_1299],((*_1293)(_1297,_1299)) );
              }
            }
            _ptr__1287[_1298] = _ptr__1289[_1297];
            _ptr__1288[_1298] = _ptr__1290[_1297];
          }
        }
      }
    }
    else
    {
      {
        int _9087 = (int)0;
        int _9088 = _1282;
        for (int _1300 = _9087; _1300 < _9088; ++_1300)
        {
          {
            _ptr__1287[_1300] = _ptr__1289[_1300];
            _ptr__1288[_1300] = _ptr__1290[_1300];
          }
        }
      }
    }
  }
  task_con_putboundlist_ra(_1285,_1287,_1288);
  if ((_1273 == (int)0))
  {
    {
      int _9089 = (int)0;
      int _9090 = _1271;
      for (int _1301 = _9089; _1301 < _9090; ++_1301)
      {
        {
          ((*natconmap_coderowptrb)(_ptr__1285[_1301])) = natconmap_codeatomtop;
          ((*natconmap_coderowptre)(_ptr__1285[_1301])) = natconmap_codeatomtop;
        }
      }
    }
  }
  else
  {
    {
      bool _1302 = true;
      int _1303 = (int)0;
      int _1304 = (int)0;
      int _9091 = (int)0;
      int _9092 = _1271;
      for (int _1305 = _9091; _1305 < _9092; ++_1305)
      {
        {
          int _9093 = _ptr__1266[safe_add( _1275,_1305 )];
          int _9094 = _ptr__1266[safe_add( safe_add( _1275,_1305 ),(int)1 )];
          for (int _1306 = _9093; _1306 < _9094; ++_1306)
          {
            {
              if ((((_ptr__1266[safe_add( safe_add( _1278,_1306 ),(int)1 )] - _ptr__1266[safe_add( _1278,_1306 )]) == (int)1) && ((_ptr__1266[safe_add( _1279,_ptr__1266[safe_add( _1278,_1306 )] )] == 10) || (_ptr__1266[safe_add( _1279,_ptr__1266[safe_add( _1278,_1306 )] )] == 2))))
              {
                {
                }
              }
              else
              {
                {
                  ++ _1303;
                  _1304 += (_ptr__1266[safe_add( safe_add( _1278,_1306 ),(int)1 )] - _ptr__1266[safe_add( _1278,_1306 )]);
                }
              }
            }
          }
        }
      }
      int _1307 = natconmap_codenztop;
      int _1308 = natconmap_codeatomtop;
      natconmap_codealloc(_1303,_1304);
      int _1309 = _1308;
      int _1310 = _1307;
      int _9095 = (int)0;
      int _9096 = _1271;
      for (int _1311 = _9095; _1311 < _9096; ++_1311)
      {
        {
          ((*natconmap_coderowptrb)(_ptr__1285[_1311])) = _1310;
          if ((_1303 > (int)0))
          {
            {
              int _9097 = _ptr__1266[safe_add( _1275,_1311 )];
              int _9098 = _ptr__1266[safe_add( safe_add( _1275,_1311 ),(int)1 )];
              for (int _1312 = _9097; _1312 < _9098; ++_1312)
              {
                {
                  if ((((_ptr__1266[safe_add( safe_add( _1278,_1312 ),(int)1 )] - _ptr__1266[safe_add( _1278,_1312 )]) == (int)1) && ((_ptr__1266[safe_add( _1279,_ptr__1266[safe_add( _1278,_1312 )] )] == 10) || (_ptr__1266[safe_add( _1279,_ptr__1266[safe_add( _1278,_1312 )] )] == 2))))
                  {
                    {
                    }
                  }
                  else
                  {
                    {
                      int _9099 = _ptr__1266[safe_add( _1278,_1312 )];
                      int _9100 = _ptr__1266[safe_add( safe_add( _1278,_1312 ),(int)1 )];
                      for (int _1313 = _9099; _1313 < _9100; ++_1313)
                      {
                        {
                          ((*natconmap_code)(_1309)) = _ptr__1266[safe_add( _1279,_1313 )];
                          ((*natconmap_cconst)(_1309)) = _ptr__1268[safe_add( _1280,_1313 )];
                          ++ _1309;
                        }
                      }
                      ((*natconmap_codeptr)(safe_add( _1310,(int)1 ))) = _1309;
                      ((*natconmap_codenidx)(_1310)) = _ptr__1267[safe_add( _1276,_1312 )];
                      _1302 = (_ptr__1267[safe_add( _1276,_1312 )] >= (int)0);
                      ++ _1310;
                    }
                  }
                }
              }
              natconmap_numparameterized += _1303;
            }
          }
          {}
          ((*natconmap_coderowptre)(_ptr__1285[_1311])) = _1310;
        }
      }
      if ((!_1302))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Expression contains parameterized SDP non-zero"));
        }
      }
      {}
    }
  }
  std::vector<int> _9101;
  for (int _1315 = (int)0, _9102 = _1269; _1315 < _9102 ; ++_1315)
  {
    _9101.push_back(_ptr__1266[safe_add( _1270,_1315 )]);
  }
  auto _9103 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9101.size()),_9101.begin(),_9101.end()));
  monty::rc_ptr< ::mosek::fusion::RangedConstraint > _1314 = ::mosek::fusion::p_RangedConstraint::_new_RangedConstraint(::mosek::fusion::Model::t(_pubthis),_1262,_9103,_1285,_1284);
  ((*cons)(_1284)) = (_1314).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1262).size()) > (int)0))
  {
    {
      con_map->setItem(_1262,_1284);
    }
  }
  {}
  return _1314;
}
void mosek::fusion::p_Model::putarows(std::shared_ptr< monty::ndarray< int,1 > > _1316,monty::rc_ptr< ::mosek::fusion::WorkStack > _1317,int _1318,int _1319,int _1320,int _1321,int _1322,std::shared_ptr< monty::ndarray< int,1 > > _1323){
  _checked_ptr_1<int> _ptr__1316(_1316 ? _1316->raw() : nullptr, _1316 ? _1316->size(0) : 0);
  _checked_ptr_1<int> _ptr__1323(_1323 ? _1323->raw() : nullptr, _1323 ? _1323->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1324 = mosek::fusion::p_WorkStack::_get_impl(_1317)->i32;
  _checked_ptr_1<int> _ptr__1324(_1324 ? _1324->raw() : nullptr,_1324 ? _1324->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1325 = mosek::fusion::p_WorkStack::_get_impl(_1317)->i64;
  _checked_ptr_1<long long> _ptr__1325(_1325 ? _1325->raw() : nullptr,_1325 ? _1325->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1326 = mosek::fusion::p_WorkStack::_get_impl(_1317)->f64;
  _checked_ptr_1<double> _ptr__1326(_1326 ? _1326->raw() : nullptr,_1326 ? _1326->size(0) : 0);
  int _1327 = (int)0;
  int _1328 = (int)0;
  int _1329 = (int)0;
  int _9104 = (int)0;
  int _9105 = _1318;
  for (int _1330 = _9104; _1330 < _9105; ++_1330)
  {
    {
      int _1331 = _ptr__1324[safe_add( _1320,_1330 )];
      int _1332 = _ptr__1324[safe_add( safe_add( _1320,_1330 ),(int)1 )];
      int _1333 = _1331;
      while ( ((_1333 < _1332) && (_ptr__1325[safe_add( _1321,_1333 )] < (int)0)) )
      {
        {
          int _1334 = ((*natbarvar_idx)((-safe_add( _ptr__1325[safe_add( _1321,_1333 )],(int)1 ))));
          int _1335 = _1333;
          ++ _1333;
          while ( ((_1333 < _1332) && ((_ptr__1325[safe_add( _1321,_1333 )] < (int)0) && (_1334 == ((*natbarvar_idx)((-safe_add( _ptr__1325[safe_add( _1321,_1333 )],(int)1 ))))))) )
          {
            {
              ++ _1333;
            }
          }
          ++ _1328;
        }
      }
      _1329 += (_1333 - _1331);
      _1327 += (_1332 - _1333);
    }
  }
  _1327 += _1318;
  if ((NULL != _1323.get()))
  {
    {
      _1327 += _1318;
    }
  }
  {}
  int _1336 = (int)((_1316)->size(0));
  std::shared_ptr< monty::ndarray< long long,1 > > _1337 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _1336,(int)1 ))));
  _checked_ptr_1<long long> _ptr__1337(_1337 ? _1337->raw() : nullptr,_1337 ? _1337->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1338 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1327)));
  _checked_ptr_1<int> _ptr__1338(_1338 ? _1338->raw() : nullptr,_1338 ? _1338->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1339 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1327)));
  _checked_ptr_1<double> _ptr__1339(_1339 ? _1339->raw() : nullptr,_1339 ? _1339->size(0) : 0);
  if ((NULL != _1323.get()))
  {
    {
      int _1340 = (int)0;
      int _9106 = (int)0;
      int _9107 = _1318;
      for (int _1341 = _9106; _1341 < _9107; ++_1341)
      {
        {
          int _1342 = (int)0;
          int _9108 = _ptr__1324[safe_add( _1320,_1341 )];
          int _9109 = _ptr__1324[safe_add( safe_add( _1320,_1341 ),(int)1 )];
          for (int _1343 = _9108; _1343 < _9109; ++_1343)
          {
            {
              if ((_ptr__1325[safe_add( _1321,_1343 )] >= (int)0))
              {
                {
                  _ptr__1338[safe_add( _1340,_1342 )] = (int)_ptr__1325[safe_add( _1321,_1343 )];
                  _ptr__1339[safe_add( _1340,_1342 )] = _ptr__1326[safe_add( _1322,_1343 )];
                  ++ _1342;
                }
              }
              {}
            }
          }
          _ptr__1338[safe_add( _1340,_1342 )] = _ptr__1323[_1341];
          _ptr__1339[safe_add( _1340,_1342 )] = (-1.0);
          ++ _1342;
          _ptr__1337[safe_add( _1341,(int)1 )] = safe_add( _ptr__1337[_1341],_1342 );
          _1340 += _1342;
        }
      }
    }
  }
  else
  {
    {
      int _1344 = (int)0;
      int _9110 = (int)0;
      int _9111 = _1318;
      for (int _1345 = _9110; _1345 < _9111; ++_1345)
      {
        {
          int _1346 = (int)0;
          int _9112 = _ptr__1324[safe_add( _1320,_1345 )];
          int _9113 = _ptr__1324[safe_add( safe_add( _1320,_1345 ),(int)1 )];
          for (int _1347 = _9112; _1347 < _9113; ++_1347)
          {
            {
              if ((_ptr__1325[safe_add( _1321,_1347 )] >= (int)0))
              {
                {
                  _ptr__1338[safe_add( _1344,_1346 )] = (int)_ptr__1325[safe_add( _1321,_1347 )];
                  _ptr__1339[safe_add( _1344,_1346 )] = _ptr__1326[safe_add( _1322,_1347 )];
                  ++ _1346;
                }
              }
              {}
            }
          }
          _ptr__1337[safe_add( _1345,(int)1 )] = safe_add( _ptr__1337[_1345],_1346 );
          _1344 += _1346;
        }
      }
    }
  }
  task_putarowlist(_1316,_1337,_1338,_1339);
  if ((_1328 > (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _1348 = _1316;
      _checked_ptr_1<int> _ptr__1348(_1348 ? _1348->raw() : nullptr,_1348 ? _1348->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _1349 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _1336,(int)1 ))));
      _checked_ptr_1<long long> _ptr__1349(_1349 ? _1349->raw() : nullptr,_1349 ? _1349->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _1350 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1328)));
      _checked_ptr_1<int> _ptr__1350(_1350 ? _1350->raw() : nullptr,_1350 ? _1350->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _1351 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1328)));
      _checked_ptr_1<int> _ptr__1351(_1351 ? _1351->raw() : nullptr,_1351 ? _1351->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _1352 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1328)));
      _checked_ptr_1<long long> _ptr__1352(_1352 ? _1352->raw() : nullptr,_1352 ? _1352->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _1353 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1329)));
      _checked_ptr_1<int> _ptr__1353(_1353 ? _1353->raw() : nullptr,_1353 ? _1353->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _1354 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1329)));
      _checked_ptr_1<int> _ptr__1354(_1354 ? _1354->raw() : nullptr,_1354 ? _1354->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _1355 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1329)));
      _checked_ptr_1<double> _ptr__1355(_1355 ? _1355->raw() : nullptr,_1355 ? _1355->size(0) : 0);
      int _1356 = (int)0;
      int _1357 = (int)0;
      int _9114 = (int)0;
      int _9115 = _1336;
      for (int _1358 = _9114; _1358 < _9115; ++_1358)
      {
        {
          int _1359 = _ptr__1324[safe_add( _1320,_1358 )];
          int _1360 = _ptr__1324[safe_add( safe_add( _1320,_1358 ),(int)1 )];
          while ( ((_1359 < _1360) && (_ptr__1325[safe_add( _1321,_1359 )] < (int)0)) )
          {
            {
              int _1361 = _1359;
              int _1362 = ((*natbarvar_idx)((-safe_add( _ptr__1325[safe_add( _1321,_1359 )],(int)1 ))));
              while ( ((_1359 < _1360) && ((_ptr__1325[safe_add( _1321,_1359 )] < (int)0) && (((*natbarvar_idx)((-safe_add( _ptr__1325[safe_add( _1321,_1359 )],(int)1 )))) == _1362))) )
              {
                {
                  _ptr__1353[_1357] = ((*natbarvar_i)((-safe_add( _ptr__1325[safe_add( _1321,_1359 )],(int)1 ))));
                  _ptr__1354[_1357] = ((*natbarvar_j)((-safe_add( _ptr__1325[safe_add( _1321,_1359 )],(int)1 ))));
                  if ((_ptr__1353[_1357] == _ptr__1354[_1357]))
                  {
                    {
                      _ptr__1355[_1357] = _ptr__1326[safe_add( _1322,_1359 )];
                    }
                  }
                  else
                  {
                    {
                      _ptr__1355[_1357] = (0.5 * _ptr__1326[safe_add( _1322,_1359 )]);
                    }
                  }
                  ++ _1357;
                  ++ _1359;
                }
              }
              _ptr__1350[_1356] = _1362;
              _ptr__1351[_1356] = ((*natbarvar_dim)(_1362));
              _ptr__1352[_1356] = (_1359 - _1361);
              ++ _1356;
            }
          }
          _1359 = _1360;
          _ptr__1349[safe_add( _1358,(int)1 )] = _1356;
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1363 = task_appendsymmatlist(_1351,_1352,_1353,_1354,_1355);
      _checked_ptr_1<long long> _ptr__1363(_1363 ? _1363->raw() : nullptr,_1363 ? _1363->size(0) : 0);
      task_putbararowlist(_1348,_1349,_1350,_1363);
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1364,monty::rc_ptr< ::mosek::fusion::Expression > _1365,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1366){
  std::shared_ptr< monty::ndarray< int,1 > > _1367 = _1365->getShape();
  _checked_ptr_1<int> _ptr__1367(_1367 ? _1367->raw() : nullptr,_1367 ? _1367->size(0) : 0);
  if (((NULL != mosek::fusion::p_PSDDomain::_get_impl(_1366)->shape.get()) && (!::mosek::fusion::p_Set::match(_1367,mosek::fusion::p_PSDDomain::_get_impl(_1366)->shape))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
    }
  }
  {}
  bool _1368;
  int _1369;
  int _1370;
  if (mosek::fusion::p_PSDDomain::_get_impl(_1366)->axisIsSet)
  {
    {
      _1368 = (mosek::fusion::p_PSDDomain::_get_impl(_1366)->conedim1 < mosek::fusion::p_PSDDomain::_get_impl(_1366)->conedim2);
      int _9116;
      bool _9117 = _1368;
      if (_9117)
      {
        _9116 = mosek::fusion::p_PSDDomain::_get_impl(_1366)->conedim1;
      }
      else
      {
        _9116 = mosek::fusion::p_PSDDomain::_get_impl(_1366)->conedim2;
      }
      _1370 = _9116;
      int _9118;
      bool _9119 = _1368;
      if (_9119)
      {
        _9118 = mosek::fusion::p_PSDDomain::_get_impl(_1366)->conedim2;
      }
      else
      {
        _9118 = mosek::fusion::p_PSDDomain::_get_impl(_1366)->conedim1;
      }
      _1369 = _9118;
    }
  }
  else
  {
    {
      _1368 = true;
      _1370 = ((int)((_1367)->size(0)) - (int)2);
      _1369 = ((int)((_1367)->size(0)) - (int)1);
    }
  }
  if (((_1369 >= (int)((_1367)->size(0))) || (_ptr__1367[_1370] != _ptr__1367[_1369])))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::Expression > _9120;
  bool _9121 = (mosek::fusion::p_PSDDomain::_get_impl(_1366)->key == ::mosek::fusion::PSDKey::IsSymPSD);
  if (_9121)
  {
    _9120 = ::mosek::fusion::p_ExprSymmetrize::_new_ExprSymmetrize(_1370,_1369,_1365).as<::mosek::fusion::Expression>();
  }
  else
  {
    _9120 = _1365;
  }
  monty::rc_ptr< ::mosek::fusion::ExprOptimizeCode > _1371 = ::mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode((::mosek::fusion::p_ExprCompress::_new_ExprCompress((::mosek::fusion::p_ExprDenseTril::_new_ExprDenseTril(_1370,_1369,_9120)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>());
  _1371->eval(rs,ws,xs);
  std::shared_ptr< monty::ndarray< int,1 > > _1372 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int> _ptr__1372(_1372 ? _1372->raw() : nullptr,_1372 ? _1372->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1373 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<long long> _ptr__1373(_1373 ? _1373->raw() : nullptr,_1373 ? _1373->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1374 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1374(_1374 ? _1374->raw() : nullptr,_1374 ? _1374->size(0) : 0);
  int _1375 = mosek::fusion::p_WorkStack::_get_impl(rs)->nd;
  int _1376 = mosek::fusion::p_WorkStack::_get_impl(rs)->nelem;
  int _1377 = mosek::fusion::p_WorkStack::_get_impl(rs)->nnz;
  bool _1378 = mosek::fusion::p_WorkStack::_get_impl(rs)->hassp;
  int _1379 = mosek::fusion::p_WorkStack::_get_impl(rs)->ncodeatom;
  int _1380 = mosek::fusion::p_WorkStack::_get_impl(rs)->shape_base;
  int _1381 = mosek::fusion::p_WorkStack::_get_impl(rs)->ptr_base;
  int _1382 = mosek::fusion::p_WorkStack::_get_impl(rs)->nidxs_base;
  int _1383 = mosek::fusion::p_WorkStack::_get_impl(rs)->sp_base;
  int _1384 = mosek::fusion::p_WorkStack::_get_impl(rs)->cof_base;
  int _1385 = mosek::fusion::p_WorkStack::_get_impl(rs)->codeptr_base;
  int _1386 = mosek::fusion::p_WorkStack::_get_impl(rs)->code_base;
  int _1387 = mosek::fusion::p_WorkStack::_get_impl(rs)->cconst_base;
  int _1388 = _ptr__1367[_1369];
  int _1389 = (safe_mul( _1388,safe_add( _1388,(int)1 ) ) / (int)2);
  int _9122 = (int)0;
  int _9123 = _1375;
  for (int _1390 = _9122; _1390 < _9123; ++_1390)
  {
    {
      if (((_1390 != _1370) && (_1390 != _1369)))
      {
        {
          _1389 *= _ptr__1367[_1390];
        }
      }
      {}
    }
  }
  int _1391 = natconmap_alloc(_1389);
  std::shared_ptr< monty::ndarray< int,1 > > _1392 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1389)));
  _checked_ptr_1<int> _ptr__1392(_1392 ? _1392->raw() : nullptr,_1392 ? _1392->size(0) : 0);
  natconmap->get(_1391,_1392,(int)0);
  putarows(_1392,rs,_1376,_1377,_1381,_1382,_1384,std::shared_ptr< monty::ndarray< int,1 > >(nullptr));
  xs->clear();
  std::shared_ptr< monty::ndarray< int,1 > > _1393 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((int)1),(int)((int)1),(int)((int)1),(int)((int)1)});
  _checked_ptr_1<int> _ptr__1393(_1393 ? _1393->raw() : nullptr,_1393 ? _1393->size(0) : 0);
  int _9124 = (int)0;
  int _9125 = _1370;
  for (int _1394 = _9124; _1394 < _9125; ++_1394)
  {
    {
      _ptr__1393[(int)0] *= _ptr__1367[_1394];
    }
  }
  _ptr__1393[(int)1] = _ptr__1367[_1370];
  int _9126 = safe_add( _1370,(int)1 );
  int _9127 = _1369;
  for (int _1395 = _9126; _1395 < _9127; ++_1395)
  {
    {
      _ptr__1393[(int)2] *= _ptr__1367[_1395];
    }
  }
  _ptr__1393[(int)3] = _ptr__1367[_1369];
  int _9128 = safe_add( _1369,(int)1 );
  int _9129 = _1375;
  for (int _1396 = _9128; _1396 < _9129; ++_1396)
  {
    {
      _ptr__1393[(int)4] *= _ptr__1367[_1396];
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1397 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)5)));
  _checked_ptr_1<int> _ptr__1397(_1397 ? _1397->raw() : nullptr,_1397 ? _1397->size(0) : 0);
  _ptr__1397[(int)4] = (int)1;
  int _9130 = (int)1;
  int _9131 = (int)5;
  for (int _1398 = _9130; _1398 < _9131; ++_1398)
  {
    {
      _ptr__1397[(((int)5 - _1398) - (int)1)] = safe_mul( _ptr__1397[((int)5 - _1398)],_ptr__1393[((int)5 - _1398)] );
    }
  }
  std::shared_ptr< monty::ndarray< double,1 > > _1399 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1389)));
  _checked_ptr_1<double> _ptr__1399(_1399 ? _1399->raw() : nullptr,_1399 ? _1399->size(0) : 0);
  if ((!_1378))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Unexpected case!"));
    }
  }
  else
  {
    {
      int _9132 = (int)0;
      int _9133 = _1376;
      for (int _1400 = _9132; _1400 < _9133; ++_1400)
      {
        {
          _ptr__1399[_1400] = 0.0;
        }
      }
    }
  }
  task_con_putboundlist_fx(_1392,_1399);
  int _1401 = safe_mul( safe_mul( _ptr__1393[(int)0],_ptr__1393[(int)2] ),_ptr__1393[(int)4] );
  int _1402 = _ptr__1393[(int)1];
  int _1403 = natbarvarmap_alloc(_1401,_1402);
  std::shared_ptr< monty::ndarray< int,1 > > _1404 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1401)));
  _checked_ptr_1<int> _ptr__1404(_1404 ? _1404->raw() : nullptr,_1404 ? _1404->size(0) : 0);
  natbarvarmap_get(_1403,_1404);
  std::vector<int> _9134;
  for (int _1406 = (int)0, _9135 = (safe_mul( _1402,safe_add( _1402,(int)1 ) ) / (int)2); _1406 < _9135 ; ++_1406)
  {
    _9134.push_back(_1402);
  }
  auto _9136 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9134.size()),_9134.begin(),_9134.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _1405 = _9136;
  _checked_ptr_1<int> _ptr__1405(_1405 ? _1405->raw() : nullptr,_1405 ? _1405->size(0) : 0);
  std::vector<long long> _9137;
  for (int _1408 = (int)0, _9138 = (safe_mul( _1402,safe_add( _1402,(int)1 ) ) / (int)2); _1408 < _9138 ; ++_1408)
  {
    _9137.push_back((int)1);
  }
  auto _9139 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9137.size()),_9137.begin(),_9137.end()));
  std::shared_ptr< monty::ndarray< long long,1 > > _1407 = _9139;
  _checked_ptr_1<long long> _ptr__1407(_1407 ? _1407->raw() : nullptr,_1407 ? _1407->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1409 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((safe_mul( _1402,safe_add( _1402,(int)1 ) ) / (int)2))));
  _checked_ptr_1<int> _ptr__1409(_1409 ? _1409->raw() : nullptr,_1409 ? _1409->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1410 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((safe_mul( _1402,safe_add( _1402,(int)1 ) ) / (int)2))));
  _checked_ptr_1<int> _ptr__1410(_1410 ? _1410->raw() : nullptr,_1410 ? _1410->size(0) : 0);
  std::vector<double> _9140;
  for (int _1412 = (int)0, _9141 = (safe_mul( _1402,safe_add( _1402,(int)1 ) ) / (int)2); _1412 < _9141 ; ++_1412)
  {
    _9140.push_back((-0.5));
  }
  auto _9142 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9140.size()),_9140.begin(),_9140.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _1411 = _9142;
  _checked_ptr_1<double> _ptr__1411(_1411 ? _1411->raw() : nullptr,_1411 ? _1411->size(0) : 0);
  int _9143 = (int)1;
  int _9144 = safe_add( _1402,(int)1 );
  for (int _1413 = _9143; _1413 < _9144; ++_1413)
  {
    {
      _ptr__1411[((safe_mul( _1413,safe_add( _1413,(int)1 ) ) / (int)2) - (int)1)] = (-1.0);
    }
  }
  {
    int _1414 = (int)0;
    int _9145 = (int)0;
    int _9146 = _1402;
    for (int _1415 = _9145; _1415 < _9146; ++_1415)
    {
      {
        int _9147 = (int)0;
        int _9148 = safe_add( _1415,(int)1 );
        for (int _1416 = _9147; _1416 < _9148; ++_1416)
        {
          {
            _ptr__1409[_1414] = _1415;
            _ptr__1410[_1414] = _1416;
            ++ _1414;
          }
        }
      }
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _1417 = task_appendsymmatlist(_1405,_1407,_1409,_1410,_1411);
  _checked_ptr_1<long long> _ptr__1417(_1417 ? _1417->raw() : nullptr,_1417 ? _1417->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1418 = _1392;
  _checked_ptr_1<int> _ptr__1418(_1418 ? _1418->raw() : nullptr,_1418 ? _1418->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1419 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1389)));
  _checked_ptr_1<int> _ptr__1419(_1419 ? _1419->raw() : nullptr,_1419 ? _1419->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1420 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1389)));
  _checked_ptr_1<long long> _ptr__1420(_1420 ? _1420->raw() : nullptr,_1420 ? _1420->size(0) : 0);
  {
    int _1421 = (int)0;
    if (_1368)
    {
      {
        int _9149 = (int)0;
        int _9150 = _ptr__1393[(int)0];
        for (int _1422 = _9149; _1422 < _9150; ++_1422)
        {
          {
            int _9151 = (int)0;
            int _9152 = _ptr__1393[(int)1];
            for (int _1423 = _9151; _1423 < _9152; ++_1423)
            {
              {
                int _9153 = (int)0;
                int _9154 = _ptr__1393[(int)2];
                for (int _1424 = _9153; _1424 < _9154; ++_1424)
                {
                  {
                    int _9155 = (int)0;
                    int _9156 = safe_add( _1423,(int)1 );
                    for (int _1425 = _9155; _1425 < _9156; ++_1425)
                    {
                      {
                        int _9157 = (int)0;
                        int _9158 = _ptr__1393[(int)4];
                        for (int _1426 = _9157; _1426 < _9158; ++_1426)
                        {
                          {
                            _ptr__1420[_1421] = _ptr__1417[safe_add( (safe_mul( _1423,safe_add( _1423,(int)1 ) ) / (int)2),_1425 )];
                            _ptr__1419[_1421] = _ptr__1404[safe_add( safe_mul( safe_add( safe_mul( _1422,_ptr__1393[(int)2] ),_1424 ),_ptr__1393[(int)4] ),_1426 )];
                            ((*natconmap_slackidx)(_ptr__1392[_1421])) = ((-safe_add( safe_add( ((*natbarvar_ptr)(_ptr__1419[_1421])),(safe_mul( _1423,safe_add( _1423,(int)1 ) ) / (int)2) ),_1425 )) - (int)1);
                            ++ _1421;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      {
        int _9159 = (int)0;
        int _9160 = _ptr__1393[(int)0];
        for (int _1427 = _9159; _1427 < _9160; ++_1427)
        {
          {
            int _9161 = (int)0;
            int _9162 = _ptr__1393[(int)1];
            for (int _1428 = _9161; _1428 < _9162; ++_1428)
            {
              {
                int _9163 = (int)0;
                int _9164 = _ptr__1393[(int)2];
                for (int _1429 = _9163; _1429 < _9164; ++_1429)
                {
                  {
                    int _9165 = _1428;
                    int _9166 = _ptr__1393[(int)1];
                    for (int _1430 = _9165; _1430 < _9166; ++_1430)
                    {
                      {
                        int _9167 = (int)0;
                        int _9168 = _ptr__1393[(int)4];
                        for (int _1431 = _9167; _1431 < _9168; ++_1431)
                        {
                          {
                            _ptr__1420[_1421] = _ptr__1417[safe_add( (safe_mul( _1430,safe_add( _1430,(int)1 ) ) / (int)2),_1428 )];
                            _ptr__1419[_1421] = _ptr__1404[safe_add( safe_mul( safe_add( safe_mul( _1427,_ptr__1393[(int)2] ),_1429 ),_ptr__1393[(int)4] ),_1431 )];
                            ((*natconmap_slackidx)(_ptr__1392[_1421])) = ((-safe_add( safe_add( ((*natbarvar_ptr)(_ptr__1419[_1421])),(safe_mul( _1430,safe_add( _1430,(int)1 ) ) / (int)2) ),_1428 )) - (int)1);
                            ++ _1421;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  task_putbaraijlist(_1418,_1419,_1420);
  ((*natconmap_type)(_1391)) = (-safe_add( _1403,(int)1 ));
  if ((_1379 == (int)0))
  {
    {
      int _9169 = (int)0;
      int _9170 = _1376;
      for (int _1432 = _9169; _1432 < _9170; ++_1432)
      {
        {
          ((*natconmap_coderowptrb)(_ptr__1392[_1432])) = natconmap_codeatomtop;
          ((*natconmap_coderowptre)(_ptr__1392[_1432])) = natconmap_codeatomtop;
        }
      }
    }
  }
  else
  {
    {
      bool _1433 = true;
      int _1434 = (int)0;
      int _1435 = (int)0;
      int _9171 = (int)0;
      int _9172 = _1376;
      for (int _1436 = _9171; _1436 < _9172; ++_1436)
      {
        {
          int _9173 = _ptr__1372[safe_add( _1381,_1436 )];
          int _9174 = _ptr__1372[safe_add( safe_add( _1381,_1436 ),(int)1 )];
          for (int _1437 = _9173; _1437 < _9174; ++_1437)
          {
            {
              if ((((_ptr__1372[safe_add( safe_add( _1385,_1437 ),(int)1 )] - _ptr__1372[safe_add( _1385,_1437 )]) == (int)1) && ((_ptr__1372[safe_add( _1386,_ptr__1372[safe_add( _1385,_1437 )] )] == 10) || (_ptr__1372[safe_add( _1386,_ptr__1372[safe_add( _1385,_1437 )] )] == 2))))
              {
                {
                }
              }
              else
              {
                {
                  ++ _1434;
                  _1435 += (_ptr__1372[safe_add( safe_add( _1385,_1437 ),(int)1 )] - _ptr__1372[safe_add( _1385,_1437 )]);
                }
              }
            }
          }
        }
      }
      int _1438 = natconmap_codenztop;
      int _1439 = natconmap_codeatomtop;
      natconmap_codealloc(_1434,_1435);
      int _1440 = _1439;
      int _1441 = _1438;
      int _9175 = (int)0;
      int _9176 = _1376;
      for (int _1442 = _9175; _1442 < _9176; ++_1442)
      {
        {
          ((*natconmap_coderowptrb)(_ptr__1392[_1442])) = _1441;
          int _9177 = _ptr__1372[safe_add( _1381,_1442 )];
          int _9178 = _ptr__1372[safe_add( safe_add( _1381,_1442 ),(int)1 )];
          for (int _1443 = _9177; _1443 < _9178; ++_1443)
          {
            {
              if ((((_ptr__1372[safe_add( safe_add( _1385,_1443 ),(int)1 )] - _ptr__1372[safe_add( _1385,_1443 )]) == (int)1) && ((_ptr__1372[safe_add( _1386,_ptr__1372[safe_add( _1385,_1443 )] )] == 10) || (_ptr__1372[safe_add( _1386,_ptr__1372[safe_add( _1385,_1443 )] )] == 2))))
              {
                {
                }
              }
              else
              {
                {
                  int _9179 = _ptr__1372[safe_add( _1385,_1443 )];
                  int _9180 = _ptr__1372[safe_add( safe_add( _1385,_1443 ),(int)1 )];
                  for (int _1444 = _9179; _1444 < _9180; ++_1444)
                  {
                    {
                      ((*natconmap_code)(_1440)) = _ptr__1372[safe_add( _1386,_1444 )];
                      ((*natconmap_cconst)(_1440)) = _ptr__1374[safe_add( _1387,_1444 )];
                      ++ _1440;
                    }
                  }
                  ((*natconmap_codeptr)(safe_add( _1441,(int)1 ))) = _1440;
                  ((*natconmap_codenidx)(_1441)) = _ptr__1373[safe_add( _1382,_1443 )];
                  _1433 = (_ptr__1373[safe_add( _1382,_1443 )] >= (int)0);
                  ++ _1441;
                }
              }
            }
          }
          ((*natconmap_coderowptre)(_ptr__1392[_1442])) = _1441;
        }
      }
      natconmap_numparameterized += _1434;
      if ((!_1433))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Expression contains parameterized SDP non-zero"));
        }
      }
      {}
    }
  }
  std::vector<long long> _9181;
  for (int _1446 = (int)0, _9182 = _1389; _1446 < _9182 ; ++_1446)
  {
    _9181.push_back(((*natconmap_slackidx)(_ptr__1392[_1446])));
  }
  auto _9183 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9181.size()),_9181.begin(),_9181.end()));
  monty::rc_ptr< ::mosek::fusion::PSDConstraint > _1445 = ::mosek::fusion::p_PSDConstraint::_new_PSDConstraint(::mosek::fusion::Model::t(_pubthis),_1364,_1391,_1367,_1370,_1369,_9183,_1392);
  ((*cons)(_1391)) = (_1445).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1364).size()) > (int)0))
  {
    {
      con_map->setItem(_1364,_1391);
    }
  }
  {}
  return (_1445).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1447,monty::rc_ptr< ::mosek::fusion::Expression > _1448,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1449){
  if ((((int)((_1447).size()) > (int)0) && hasConstraint(_1447)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1447)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if ((((int)((_1447).size()) > (int)0) && hasConstraint(_1447)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1447)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::ExprDense > _1450 = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1448)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>());
  _1450->eval(rs,ws,xs);
  std::shared_ptr< monty::ndarray< int,1 > > _1451 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int> _ptr__1451(_1451 ? _1451->raw() : nullptr,_1451 ? _1451->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1452 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<long long> _ptr__1452(_1452 ? _1452->raw() : nullptr,_1452 ? _1452->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1453 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1453(_1453 ? _1453->raw() : nullptr,_1453 ? _1453->size(0) : 0);
  int _1454 = mosek::fusion::p_WorkStack::_get_impl(rs)->nd;
  int _1455 = mosek::fusion::p_WorkStack::_get_impl(rs)->nelem;
  int _1456 = mosek::fusion::p_WorkStack::_get_impl(rs)->nnz;
  bool _1457 = mosek::fusion::p_WorkStack::_get_impl(rs)->hassp;
  int _1458 = mosek::fusion::p_WorkStack::_get_impl(rs)->ncodeatom;
  int _1459 = mosek::fusion::p_WorkStack::_get_impl(rs)->shape_base;
  int _1460 = mosek::fusion::p_WorkStack::_get_impl(rs)->ptr_base;
  int _1461 = mosek::fusion::p_WorkStack::_get_impl(rs)->nidxs_base;
  int _1462 = mosek::fusion::p_WorkStack::_get_impl(rs)->cof_base;
  int _1463 = mosek::fusion::p_WorkStack::_get_impl(rs)->codeptr_base;
  int _1464 = mosek::fusion::p_WorkStack::_get_impl(rs)->code_base;
  int _1465 = mosek::fusion::p_WorkStack::_get_impl(rs)->cconst_base;
  std::vector<int> _9184;
  for (int _1467 = (int)0, _9185 = _1454; _1467 < _9185 ; ++_1467)
  {
    _9184.push_back(_ptr__1451[safe_add( _1459,_1467 )]);
  }
  auto _9186 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9184.size()),_9184.begin(),_9184.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _1466 = _9186;
  _checked_ptr_1<int> _ptr__1466(_1466 ? _1466->raw() : nullptr,_1466 ? _1466->size(0) : 0);
  if (((NULL != mosek::fusion::p_LinPSDDomain::_get_impl(_1449)->shape.get()) && (!::mosek::fusion::p_Set::match(_1466,mosek::fusion::p_LinPSDDomain::_get_impl(_1449)->shape))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
    }
  }
  {}
  int _1468 = (int)1;
  int _9187 = (int)0;
  int _9188 = _1454;
  for (int _1469 = _9187; _1469 < _9188; ++_1469)
  {
    {
      _1468 *= _ptr__1466[_1469];
    }
  }
  int _9189;
  bool _9190 = (NULL != mosek::fusion::p_LinPSDDomain::_get_impl(_1449)->shape.get());
  if (_9190)
  {
    _9189 = mosek::fusion::p_LinPSDDomain::_get_impl(_1449)->conedim;
  }
  else
  {
    _9189 = ((int)((_1466)->size(0)) - (int)1);
  }
  int _1470 = _9189;
  int _1471 = _ptr__1466[_1470];
  int _1472 = (int)((::mosek::fusion::Utils::Tools::sqrt((double)(safe_add( (int)1,safe_mul( (int)8,_1471 ) ))) - (int)1) / (int)2);
  if (((safe_mul( _1472,safe_add( _1472,(int)1 ) ) / (int)2) != _1471))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid size for semidefinite variable"));
    }
  }
  {}
  int _1473 = (int)1;
  int _9191 = (int)0;
  int _9192 = _1470;
  for (int _1474 = _9191; _1474 < _9192; ++_1474)
  {
    {
      _1473 *= _ptr__1466[_1474];
    }
  }
  int _1475 = (int)1;
  int _9193 = safe_add( _1470,(int)1 );
  int _9194 = _1454;
  for (int _1476 = _9193; _1476 < _9194; ++_1476)
  {
    {
      _1475 *= _ptr__1466[_1476];
    }
  }
  int _1477 = safe_mul( _1473,_1475 );
  int _1478 = natconmap_alloc(_1468);
  std::shared_ptr< monty::ndarray< int,1 > > _1479 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1468)));
  _checked_ptr_1<int> _ptr__1479(_1479 ? _1479->raw() : nullptr,_1479 ? _1479->size(0) : 0);
  natconmap->get(_1478,_1479,(int)0);
  putarows(_1479,rs,_1455,_1456,_1460,_1461,_1462,std::shared_ptr< monty::ndarray< int,1 > >(nullptr));
  int _1480 = natbarvarmap_alloc(_1477,_1472);
  std::shared_ptr< monty::ndarray< int,1 > > _1481 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1477)));
  _checked_ptr_1<int> _ptr__1481(_1481 ? _1481->raw() : nullptr,_1481 ? _1481->size(0) : 0);
  natbarvarmap_get(_1480,_1481);
  ((*barvars)(_1480)) = nullptr;
  int _1482 = safe_mul( safe_mul( _1471,_1473 ),_1475 );
  std::vector<int> _9195;
  for (int _1484 = (int)0, _9196 = _1482; _1484 < _9196 ; ++_1484)
  {
    _9195.push_back(_1472);
  }
  auto _9197 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9195.size()),_9195.begin(),_9195.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _1483 = _9197;
  _checked_ptr_1<int> _ptr__1483(_1483 ? _1483->raw() : nullptr,_1483 ? _1483->size(0) : 0);
  std::vector<long long> _9198;
  for (int _1486 = (int)0, _9199 = _1482; _1486 < _9199 ; ++_1486)
  {
    _9198.push_back((int)1);
  }
  auto _9200 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9198.size()),_9198.begin(),_9198.end()));
  std::shared_ptr< monty::ndarray< long long,1 > > _1485 = _9200;
  _checked_ptr_1<long long> _ptr__1485(_1485 ? _1485->raw() : nullptr,_1485 ? _1485->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1487 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1482)));
  _checked_ptr_1<double> _ptr__1487(_1487 ? _1487->raw() : nullptr,_1487 ? _1487->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1488 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1482)));
  _checked_ptr_1<int> _ptr__1488(_1488 ? _1488->raw() : nullptr,_1488 ? _1488->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1489 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1482)));
  _checked_ptr_1<int> _ptr__1489(_1489 ? _1489->raw() : nullptr,_1489 ? _1489->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1490 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1482)));
  _checked_ptr_1<int> _ptr__1490(_1490 ? _1490->raw() : nullptr,_1490 ? _1490->size(0) : 0);
  {
    int _1491 = (int)0;
    int _9201 = (int)0;
    int _9202 = _1473;
    for (int _1492 = _9201; _1492 < _9202; ++_1492)
    {
      {
        int _1493 = (int)0;
        int _9203 = (int)0;
        int _9204 = _1472;
        for (int _1494 = _9203; _1494 < _9204; ++_1494)
        {
          {
            int _9205 = _1494;
            int _9206 = _1472;
            for (int _1495 = _9205; _1495 < _9206; ++_1495)
            {
              {
                int _9207 = (int)0;
                int _9208 = _1475;
                for (int _1496 = _9207; _1496 < _9208; ++_1496)
                {
                  {
                    _ptr__1490[_1491] = _ptr__1481[safe_add( safe_mul( _1492,_1475 ),_1496 )];
                    _ptr__1488[_1491] = _1495;
                    _ptr__1489[_1491] = _1494;
                    double _9209;
                    bool _9210 = (_1495 == _1494);
                    if (_9210)
                    {
                      _9209 = (-1.0);
                    }
                    else
                    {
                      _9209 = (-0.5);
                    }
                    _ptr__1487[_1491] = _9209;
                    ((*natconmap_slackidx)(_ptr__1479[_1491])) = ((-safe_add( ((*natbarvar_ptr)(_ptr__1481[safe_add( safe_mul( _1492,_1475 ),_1496 )])),_1493 )) - (int)1);
                    ++ _1491;
                  }
                }
                ++ _1493;
              }
            }
          }
        }
      }
    }
    ((*natconmap_type)(_1478)) = (-safe_add( _1480,(int)1 ));
    int _9211 = (int)0;
    int _9212 = _1468;
    for (int _1497 = _9211; _1497 < _9212; ++_1497)
    {
      {
        ((*natconmap_blockid)(_ptr__1479[_1497])) = _1478;
        ((*natconmap_idx)(_ptr__1479[_1497])) = _1497;
      }
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _1498 = task_appendsymmatlist(_1483,_1485,_1488,_1489,_1487);
  _checked_ptr_1<long long> _ptr__1498(_1498 ? _1498->raw() : nullptr,_1498 ? _1498->size(0) : 0);
  task_putbaraijlist(_1479,_1490,_1498);
  task_con_putboundlist_fx(_1479,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1468))));
  if ((_1458 == (int)0))
  {
    {
      int _9213 = (int)0;
      int _9214 = _1455;
      for (int _1499 = _9213; _1499 < _9214; ++_1499)
      {
        {
          ((*natconmap_coderowptrb)(_ptr__1479[_1499])) = natconmap_codeatomtop;
          ((*natconmap_coderowptre)(_ptr__1479[_1499])) = natconmap_codeatomtop;
        }
      }
    }
  }
  else
  {
    {
      bool _1500 = true;
      int _1501 = (int)0;
      int _1502 = (int)0;
      int _9215 = (int)0;
      int _9216 = _1455;
      for (int _1503 = _9215; _1503 < _9216; ++_1503)
      {
        {
          int _9217 = _ptr__1451[safe_add( _1460,_1503 )];
          int _9218 = _ptr__1451[safe_add( safe_add( _1460,_1503 ),(int)1 )];
          for (int _1504 = _9217; _1504 < _9218; ++_1504)
          {
            {
              if ((((_ptr__1451[safe_add( safe_add( _1463,_1504 ),(int)1 )] - _ptr__1451[safe_add( _1463,_1504 )]) == (int)1) && ((_ptr__1451[safe_add( _1464,_ptr__1451[safe_add( _1463,_1504 )] )] == 10) || (_ptr__1451[safe_add( _1464,_ptr__1451[safe_add( _1463,_1504 )] )] == 2))))
              {
                {
                }
              }
              else
              {
                {
                  ++ _1501;
                  _1502 += (_ptr__1451[safe_add( safe_add( _1463,_1504 ),(int)1 )] - _ptr__1451[safe_add( _1463,_1504 )]);
                }
              }
            }
          }
        }
      }
      int _1505 = natconmap_codenztop;
      int _1506 = natconmap_codeatomtop;
      natconmap_codealloc(_1501,_1502);
      int _1507 = _1506;
      int _1508 = _1505;
      int _9219 = (int)0;
      int _9220 = _1455;
      for (int _1509 = _9219; _1509 < _9220; ++_1509)
      {
        {
          ((*natconmap_coderowptrb)(_ptr__1479[_1509])) = _1508;
          int _9221 = _ptr__1451[safe_add( _1460,_1509 )];
          int _9222 = _ptr__1451[safe_add( safe_add( _1460,_1509 ),(int)1 )];
          for (int _1510 = _9221; _1510 < _9222; ++_1510)
          {
            {
              if ((((_ptr__1451[safe_add( safe_add( _1463,_1510 ),(int)1 )] - _ptr__1451[safe_add( _1463,_1510 )]) == (int)1) && ((_ptr__1451[safe_add( _1464,_ptr__1451[safe_add( _1463,_1510 )] )] == 10) || (_ptr__1451[safe_add( _1464,_ptr__1451[safe_add( _1463,_1510 )] )] == 2))))
              {
                {
                }
              }
              else
              {
                {
                  int _9223 = _ptr__1451[safe_add( _1463,_1510 )];
                  int _9224 = _ptr__1451[safe_add( safe_add( _1463,_1510 ),(int)1 )];
                  for (int _1511 = _9223; _1511 < _9224; ++_1511)
                  {
                    {
                      ((*natconmap_code)(_1507)) = _ptr__1451[safe_add( _1464,_1511 )];
                      ((*natconmap_cconst)(_1507)) = _ptr__1453[safe_add( _1465,_1511 )];
                      ++ _1507;
                    }
                  }
                  ((*natconmap_codeptr)(safe_add( _1508,(int)1 ))) = _1507;
                  ((*natconmap_codenidx)(_1508)) = _ptr__1452[safe_add( _1461,_1510 )];
                  _1500 = (_ptr__1452[safe_add( _1461,_1510 )] >= (int)0);
                  ++ _1508;
                }
              }
            }
          }
          ((*natconmap_coderowptre)(_ptr__1479[_1509])) = _1508;
        }
      }
      natconmap_numparameterized += _1501;
      if ((!_1500))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Expression contains parameterized SDP non-zero"));
        }
      }
      {}
    }
  }
  std::vector<long long> _9225;
  for (int _1513 = (int)0, _9226 = _1468; _1513 < _9226 ; ++_1513)
  {
    _9225.push_back(((*natconmap_slackidx)(_ptr__1479[_1513])));
  }
  auto _9227 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9225.size()),_9225.begin(),_9225.end()));
  monty::rc_ptr< ::mosek::fusion::LinearPSDConstraint > _1512 = ::mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint(::mosek::fusion::Model::t(_pubthis),_1447,_1478,_1466,_1470,_1479,_9227);
  ((*cons)(_1478)) = (_1512).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1447).size()) > (int)0))
  {
    {
      con_map->setItem(_1447,_1478);
    }
  }
  {}
  return (_1512).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1514,monty::rc_ptr< ::mosek::fusion::Expression > _1515,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1516){
  if ((((int)((_1514).size()) > (int)0) && hasConstraint(_1514)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1514)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if ((((int)((_1514).size()) > (int)0) && hasConstraint(_1514)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1514)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if (mosek::fusion::p_ConeDomain::_get_impl(_1516)->int_flag)
  {
    {
      throw ::mosek::fusion::DomainError(std::string ("Integer domain not allowed in a constraint"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::ExprDense > _1517 = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1515)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>());
  _1517->eval(rs,ws,xs);
  rs->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _1518 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int> _ptr__1518(_1518 ? _1518->raw() : nullptr,_1518 ? _1518->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1519 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<long long> _ptr__1519(_1519 ? _1519->raw() : nullptr,_1519 ? _1519->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1520 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1520(_1520 ? _1520->raw() : nullptr,_1520 ? _1520->size(0) : 0);
  int _1521 = mosek::fusion::p_WorkStack::_get_impl(rs)->nd;
  int _1522 = mosek::fusion::p_WorkStack::_get_impl(rs)->shape_base;
  int _1523 = mosek::fusion::p_WorkStack::_get_impl(rs)->nelem;
  int _1524 = mosek::fusion::p_WorkStack::_get_impl(rs)->nnz;
  int _1525 = mosek::fusion::p_WorkStack::_get_impl(rs)->ncodeatom;
  bool _1526 = mosek::fusion::p_WorkStack::_get_impl(rs)->hassp;
  int _1527 = mosek::fusion::p_WorkStack::_get_impl(rs)->ptr_base;
  int _1528 = mosek::fusion::p_WorkStack::_get_impl(rs)->nidxs_base;
  int _1529 = mosek::fusion::p_WorkStack::_get_impl(rs)->cof_base;
  int _1530 = mosek::fusion::p_WorkStack::_get_impl(rs)->code_base;
  int _1531 = mosek::fusion::p_WorkStack::_get_impl(rs)->codeptr_base;
  int _1532 = mosek::fusion::p_WorkStack::_get_impl(rs)->cconst_base;
  std::vector<int> _9228;
  for (int _1534 = (int)0, _9229 = _1521; _1534 < _9229 ; ++_1534)
  {
    _9228.push_back(_ptr__1518[safe_add( _1522,_1534 )]);
  }
  auto _9230 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9228.size()),_9228.begin(),_9228.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _1533 = _9230;
  _checked_ptr_1<int> _ptr__1533(_1533 ? _1533->raw() : nullptr,_1533 ? _1533->size(0) : 0);
  if (((NULL != mosek::fusion::p_ConeDomain::_get_impl(_1516)->shape.get()) && (!::mosek::fusion::p_Set::match(_1533,mosek::fusion::p_ConeDomain::_get_impl(_1516)->shape))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
    }
  }
  {}
  int _9231;
  bool _9232 = _1516->axisIsSet();
  if (_9232)
  {
    _9231 = _1516->getAxis();
  }
  else
  {
    _9231 = (_1521 - (int)1);
  }
  int _1535 = _9231;
  int _1536 = _ptr__1533[_1535];
  int _1537 = (int)1;
  int _1538 = (int)1;
  int _1539 = (int)1;
  {
    int _9233 = (int)0;
    int _9234 = _1521;
    for (int _1540 = _9233; _1540 < _9234; ++_1540)
    {
      {
        _1539 *= _ptr__1533[_1540];
      }
    }
    int _9235 = (int)0;
    int _9236 = _1535;
    for (int _1541 = _9235; _1541 < _9236; ++_1541)
    {
      {
        _1538 *= _ptr__1533[_1541];
      }
    }
    int _9237 = safe_add( _1535,(int)1 );
    int _9238 = _1521;
    for (int _1542 = _9237; _1542 < _9238; ++_1542)
    {
      {
        _1537 *= _ptr__1533[_1542];
      }
    }
  }
  int _1543 = safe_mul( _1538,_1537 );
  if (((mosek::fusion::p_ConeDomain::_get_impl(_1516)->key == ::mosek::fusion::QConeKey::InQCone) && (_1536 < (int)2)))
  {
    {
      throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1536)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for quadratic cone"))->toString());
    }
  }
  else if(((mosek::fusion::p_ConeDomain::_get_impl(_1516)->key == ::mosek::fusion::QConeKey::InRotatedQCone) && (_1536 < (int)3)))
  {
    {
      throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1536)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for rotated quadratic cone"))->toString());
    }
  }
  else if(((mosek::fusion::p_ConeDomain::_get_impl(_1516)->key == ::mosek::fusion::QConeKey::InPExpCone) && (_1536 != (int)3)))
  {
    {
      throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1536)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for exponential cone"))->toString());
    }
  }
  else if(((mosek::fusion::p_ConeDomain::_get_impl(_1516)->key == ::mosek::fusion::QConeKey::InPPowCone) && (_1536 < (int)2)))
  {
    {
      throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1536)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for power cone"))->toString());
    }
  }
  else if(((mosek::fusion::p_ConeDomain::_get_impl(_1516)->key == ::mosek::fusion::QConeKey::InDExpCone) && (_1536 != (int)3)))
  {
    {
      throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1536)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for dual exponential cone"))->toString());
    }
  }
  else if(((mosek::fusion::p_ConeDomain::_get_impl(_1516)->key == ::mosek::fusion::QConeKey::InDPowCone) && (_1536 < (int)2)))
  {
    {
      throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1536)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for dual power cone"))->toString());
    }
  }
  {}
  int _1544 = natvarmap_alloc(_1539);
  std::shared_ptr< monty::ndarray< int,1 > > _1545 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1539)));
  _checked_ptr_1<int> _ptr__1545(_1545 ? _1545->raw() : nullptr,_1545 ? _1545->size(0) : 0);
  natvarmap->get(_1544,_1545,(int)0);
  int _1546 = natconemap_alloc(_1543);
  int _9239 = (int)0;
  int _9240 = _1539;
  for (int _1547 = _9239; _1547 < _9240; ++_1547)
  {
    {
      ((*natvarmap_idx)(_ptr__1545[_1547])) = _1544;
    }
  }
  task_var_putboundlist_fr(_1545);
  std::shared_ptr< monty::ndarray< int,1 > > _9241;
  bool _9242 = (_1535 < ((int)((_1533)->size(0)) - (int)1));
  if (_9242)
  {
    _9241 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_1545)->size(0)))));
  }
  else
  {
    _9241 = _1545;
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1548 = _9241;
  _checked_ptr_1<int> _ptr__1548(_1548 ? _1548->raw() : nullptr,_1548 ? _1548->size(0) : 0);
  if ((_1535 < ((int)((_1533)->size(0)) - (int)1)))
  {
    {
      int _1549 = (int)0;
      int _9243 = (int)0;
      int _9244 = _1538;
      for (int _1550 = _9243; _1550 < _9244; ++_1550)
      {
        {
          int _9245 = (int)0;
          int _9246 = _1537;
          for (int _1551 = _9245; _1551 < _9246; ++_1551)
          {
            {
              int _9247 = (int)0;
              int _9248 = _1536;
              for (int _1552 = _9247; _1552 < _9248; ++_1552)
              {
                {
                  _ptr__1548[_1549] = _ptr__1545[safe_add( safe_mul( safe_add( safe_mul( _1550,_1536 ),_1552 ),_1537 ),_1551 )];
                  ++ _1549;
                }
              }
            }
          }
        }
      }
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _1553 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1543)));
  _checked_ptr_1<int> _ptr__1553(_1553 ? _1553->raw() : nullptr,_1553 ? _1553->size(0) : 0);
  natconemap->get(_1546,_1553,(int)0);
  ((*natconemap_dim)(_1546)) = _1536;
  if ((mosek::fusion::p_ConeDomain::_get_impl(_1516)->key == ::mosek::fusion::QConeKey::InQCone))
  {
    {
      task_put_quadcones(_1553,_1536,_1543,_1548);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1516)->key == ::mosek::fusion::QConeKey::InRotatedQCone))
  {
    {
      task_put_rquadcones(_1553,_1536,_1543,_1548);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1516)->key == ::mosek::fusion::QConeKey::InPExpCone))
  {
    {
      task_put_pexpcones(_1553,_1536,_1543,_1548);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1516)->key == ::mosek::fusion::QConeKey::InPPowCone))
  {
    {
      std::vector<double> _9249;
      for (int _1554 = (int)0, _9250 = _1543; _1554 < _9250 ; ++_1554)
      {
        _9249.push_back(mosek::fusion::p_ConeDomain::_get_impl(_1516)->alpha);
      }
      auto _9251 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9249.size()),_9249.begin(),_9249.end()));
      task_put_ppowcones(_1553,_1536,_1543,_1548,_9251);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1516)->key == ::mosek::fusion::QConeKey::InDExpCone))
  {
    {
      task_put_dexpcones(_1553,_1536,_1543,_1548);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1516)->key == ::mosek::fusion::QConeKey::InDPowCone))
  {
    {
      std::vector<double> _9252;
      for (int _1555 = (int)0, _9253 = _1543; _1555 < _9253 ; ++_1555)
      {
        _9252.push_back(mosek::fusion::p_ConeDomain::_get_impl(_1516)->alpha);
      }
      auto _9254 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9252.size()),_9252.begin(),_9252.end()));
      task_put_dpowcones(_1553,_1536,_1543,_1548,_9254);
    }
  }
  else
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal error: Invalid cone type"));
    }
  }
  ((*vars)(_1544)) = nullptr;
  int _1556 = natconmap_alloc(_1539);
  std::shared_ptr< monty::ndarray< int,1 > > _1557 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1539)));
  _checked_ptr_1<int> _ptr__1557(_1557 ? _1557->raw() : nullptr,_1557 ? _1557->size(0) : 0);
  natconmap->get(_1556,_1557,(int)0);
  ((*natconmap_type)(_1556)) = safe_add( _1544,(int)6 );
  {
    int _9255 = (int)0;
    int _9256 = _1539;
    for (int _1558 = _9255; _1558 < _9256; ++_1558)
    {
      {
        ((*natconmap_slackidx)(_ptr__1557[_1558])) = safe_add( _ptr__1545[_1558],(int)1 );
      }
    }
    int _9257 = (int)0;
    int _9258 = _1539;
    for (int _1559 = _9257; _1559 < _9258; ++_1559)
    {
      {
        ((*natconmap_blockid)(_ptr__1557[_1559])) = _1556;
      }
    }
    int _9259 = (int)0;
    int _9260 = _1539;
    for (int _1560 = _9259; _1560 < _9260; ++_1560)
    {
      {
        ((*natconmap_idx)(_ptr__1557[_1560])) = _1560;
      }
    }
  }
  std::shared_ptr< monty::ndarray< double,1 > > _1561 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1539)));
  _checked_ptr_1<double> _ptr__1561(_1561 ? _1561->raw() : nullptr,_1561 ? _1561->size(0) : 0);
  task_con_putboundlist_fx(_1557,_1561);
  putarows(_1557,rs,_1523,_1524,_1527,_1528,_1529,_1545);
  if ((_1525 == (int)0))
  {
    {
      int _9261 = (int)0;
      int _9262 = _1523;
      for (int _1562 = _9261; _1562 < _9262; ++_1562)
      {
        {
          ((*natconmap_coderowptrb)(_ptr__1557[_1562])) = natconmap_codeatomtop;
          ((*natconmap_coderowptre)(_ptr__1557[_1562])) = natconmap_codeatomtop;
        }
      }
    }
  }
  else
  {
    {
      bool _1563 = true;
      int _1564 = (int)0;
      int _1565 = (int)0;
      int _9263 = (int)0;
      int _9264 = _1523;
      for (int _1566 = _9263; _1566 < _9264; ++_1566)
      {
        {
          int _9265 = _ptr__1518[safe_add( _1527,_1566 )];
          int _9266 = _ptr__1518[safe_add( safe_add( _1527,_1566 ),(int)1 )];
          for (int _1567 = _9265; _1567 < _9266; ++_1567)
          {
            {
              if ((((_ptr__1518[safe_add( safe_add( _1531,_1567 ),(int)1 )] - _ptr__1518[safe_add( _1531,_1567 )]) == (int)1) && ((_ptr__1518[safe_add( _1530,_ptr__1518[safe_add( _1531,_1567 )] )] == 10) || (_ptr__1518[safe_add( _1530,_ptr__1518[safe_add( _1531,_1567 )] )] == 2))))
              {
                {
                }
              }
              else
              {
                {
                  ++ _1564;
                  _1565 += (_ptr__1518[safe_add( safe_add( _1531,_1567 ),(int)1 )] - _ptr__1518[safe_add( _1531,_1567 )]);
                }
              }
            }
          }
        }
      }
      int _1568 = natconmap_codenztop;
      int _1569 = natconmap_codeatomtop;
      natconmap_codealloc(_1564,_1565);
      int _1570 = _1569;
      int _1571 = _1568;
      int _9267 = (int)0;
      int _9268 = _1523;
      for (int _1572 = _9267; _1572 < _9268; ++_1572)
      {
        {
          ((*natconmap_coderowptrb)(_ptr__1557[_1572])) = _1571;
          int _9269 = _ptr__1518[safe_add( _1527,_1572 )];
          int _9270 = _ptr__1518[safe_add( safe_add( _1527,_1572 ),(int)1 )];
          for (int _1573 = _9269; _1573 < _9270; ++_1573)
          {
            {
              if ((((_ptr__1518[safe_add( safe_add( _1531,_1573 ),(int)1 )] - _ptr__1518[safe_add( _1531,_1573 )]) == (int)1) && ((_ptr__1518[safe_add( _1530,_ptr__1518[safe_add( _1531,_1573 )] )] == 10) || (_ptr__1518[safe_add( _1530,_ptr__1518[safe_add( _1531,_1573 )] )] == 2))))
              {
                {
                }
              }
              else
              {
                {
                  int _9271 = _ptr__1518[safe_add( _1531,_1573 )];
                  int _9272 = _ptr__1518[safe_add( safe_add( _1531,_1573 ),(int)1 )];
                  for (int _1574 = _9271; _1574 < _9272; ++_1574)
                  {
                    {
                      ((*natconmap_code)(_1570)) = _ptr__1518[safe_add( _1530,_1574 )];
                      ((*natconmap_cconst)(_1570)) = _ptr__1520[safe_add( _1532,_1574 )];
                      ++ _1570;
                    }
                  }
                  ((*natconmap_codeptr)(safe_add( _1571,(int)1 ))) = _1570;
                  ((*natconmap_codenidx)(_1571)) = _ptr__1519[safe_add( _1528,_1573 )];
                  _1563 = (_ptr__1519[safe_add( _1528,_1573 )] >= (int)0);
                  ++ _1571;
                }
              }
            }
          }
          ((*natconmap_coderowptre)(_ptr__1557[_1572])) = _1571;
        }
      }
      natconmap_numparameterized += _1564;
      if ((!_1563))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Expression contains parameterized SDP non-zero"));
        }
      }
      {}
    }
  }
  monty::rc_ptr< ::mosek::fusion::ConicConstraint > _1575 = ::mosek::fusion::p_ConicConstraint::_new_ConicConstraint(::mosek::fusion::Model::t(_pubthis),_1514,_1516,_1533,_1556,_1557,_1545);
  ((*cons)(_1556)) = (_1575).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1514).size()) > (int)0))
  {
    {
      con_map->setItem(_1514,_1556);
    }
  }
  {}
  return (_1575).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1576,monty::rc_ptr< ::mosek::fusion::Expression > _1577,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1578){
  if ((((int)((_1576).size()) > (int)0) && hasConstraint(_1576)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1576)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if (mosek::fusion::p_LinearDomain::_get_impl(_1578)->cardinal_flag)
  {
    {
      throw ::mosek::fusion::DomainError(std::string ("Integer domain not allowed in a constraint"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::ExprDense > _1579 = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1577)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>());
  _1579->eval(rs,ws,xs);
  rs->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _1580 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int> _ptr__1580(_1580 ? _1580->raw() : nullptr,_1580 ? _1580->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1581 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<long long> _ptr__1581(_1581 ? _1581->raw() : nullptr,_1581 ? _1581->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1582 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1582(_1582 ? _1582->raw() : nullptr,_1582 ? _1582->size(0) : 0);
  int _1583 = mosek::fusion::p_WorkStack::_get_impl(rs)->nd;
  int _1584 = mosek::fusion::p_WorkStack::_get_impl(rs)->nelem;
  int _1585 = mosek::fusion::p_WorkStack::_get_impl(rs)->nnz;
  bool _1586 = mosek::fusion::p_WorkStack::_get_impl(rs)->hassp;
  int _1587 = mosek::fusion::p_WorkStack::_get_impl(rs)->ncodeatom;
  int _1588 = mosek::fusion::p_WorkStack::_get_impl(rs)->shape_base;
  int _1589 = mosek::fusion::p_WorkStack::_get_impl(rs)->ptr_base;
  int _1590 = mosek::fusion::p_WorkStack::_get_impl(rs)->nidxs_base;
  int _1591 = mosek::fusion::p_WorkStack::_get_impl(rs)->cof_base;
  int _1592 = mosek::fusion::p_WorkStack::_get_impl(rs)->codeptr_base;
  int _1593 = mosek::fusion::p_WorkStack::_get_impl(rs)->code_base;
  int _1594 = mosek::fusion::p_WorkStack::_get_impl(rs)->cconst_base;
  std::vector<int> _9273;
  for (int _1596 = (int)0, _9274 = _1583; _1596 < _9274 ; ++_1596)
  {
    _9273.push_back(_ptr__1580[safe_add( _1588,_1596 )]);
  }
  auto _9275 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9273.size()),_9273.begin(),_9273.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _1595 = _9275;
  _checked_ptr_1<int> _ptr__1595(_1595 ? _1595->raw() : nullptr,_1595 ? _1595->size(0) : 0);
  int _1597 = (int)1;
  int _9276 = (int)0;
  int _9277 = _1583;
  for (int _1598 = _9276; _1598 < _9277; ++_1598)
  {
    {
      _1597 *= _ptr__1595[_1598];
    }
  }
  if (((NULL != mosek::fusion::p_LinearDomain::_get_impl(_1578)->shape.get()) && (!::mosek::fusion::p_Set::match(_1595,mosek::fusion::p_LinearDomain::_get_impl(_1578)->shape))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< double,1 > > _1599;
  _checked_ptr_1<double> _ptr__1599(_1599 ? _1599->raw() : nullptr,_1599 ? _1599->size(0) : 0);
  int _1600 = natconmap_alloc(_1597);
  std::shared_ptr< monty::ndarray< int,1 > > _1601 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1597)));
  _checked_ptr_1<int> _ptr__1601(_1601 ? _1601->raw() : nullptr,_1601 ? _1601->size(0) : 0);
  natconmap->get(_1600,_1601,(int)0);
  putarows(_1601,rs,_1584,_1585,_1589,_1590,_1591,std::shared_ptr< monty::ndarray< int,1 > >(nullptr));
  {
    std::shared_ptr< monty::ndarray< int,2 > > _1602 = mosek::fusion::p_LinearDomain::_get_impl(_1578)->sparsity;
    bool _1603 = mosek::fusion::p_LinearDomain::_get_impl(_1578)->empty;
    std::shared_ptr< monty::ndarray< double,1 > > _1604 = mosek::fusion::p_LinearDomain::_get_impl(_1578)->bnd;
    _checked_ptr_1<double> _ptr__1604(_1604 ? _1604->raw() : nullptr,_1604 ? _1604->size(0) : 0);
    bool _1605 = mosek::fusion::p_LinearDomain::_get_impl(_1578)->scalable;
    {
      if ((NULL == _1604.get()))
      {
        {
          std::vector<double> _9278;
          for (int _1606 = (int)0, _9279 = (int)((_1601)->size(0)); _1606 < _9279 ; ++_1606)
          {
            _9278.push_back(0.0);
          }
          auto _9280 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9278.size()),_9278.begin(),_9278.end()));
          _1599 = _9280;
          _ptr__1599.update(_1599 ? _1599->raw() : nullptr, _1599 ? _1599->size(0) : 0);
        }
      }
      else if(_1605)
      {
        {
          std::vector<double> _9281;
          for (int _1607 = (int)0, _9282 = (int)((_1601)->size(0)); _1607 < _9282 ; ++_1607)
          {
            _9281.push_back(_ptr__1604[(int)0]);
          }
          auto _9283 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9281.size()),_9281.begin(),_9281.end()));
          _1599 = _9283;
          _ptr__1599.update(_1599 ? _1599->raw() : nullptr, _1599 ? _1599->size(0) : 0);
        }
      }
      else if((NULL != _1602.get()))
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _1608 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1583)));
          _checked_ptr_1<int> _ptr__1608(_1608 ? _1608->raw() : nullptr,_1608 ? _1608->size(0) : 0);
          _ptr__1608[(_1583 - (int)1)] = (int)1;
          int _9284 = (int)1;
          int _9285 = _1583;
          for (int _1609 = _9284; _1609 < _9285; ++_1609)
          {
            {
              _ptr__1608[((_1583 - _1609) - (int)1)] = safe_mul( _ptr__1608[(_1583 - _1609)],_ptr__1595[(_1583 - _1609)] );
            }
          }
          _1599 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((_1601)->size(0)))));
          _ptr__1599.update(_1599 ? _1599->raw() : nullptr, _1599 ? _1599->size(0) : 0);
          int _9286 = (int)0;
          int _9287 = (int)((_1602)->size(0));
          for (int _1610 = _9286; _1610 < _9287; ++_1610)
          {
            {
              int _1611 = (int)0;
              int _9288 = (int)0;
              int _9289 = _1583;
              for (int _1612 = _9288; _1612 < _9289; ++_1612)
              {
                {
                  _1611 += safe_mul( _ptr__1608[_1612],((*_1602)(_1610,_1612)) );
                }
              }
              _ptr__1599[_1611] = _ptr__1604[_1610];
            }
          }
        }
      }
      else if(_1603)
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _1613 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1583)));
          _checked_ptr_1<int> _ptr__1613(_1613 ? _1613->raw() : nullptr,_1613 ? _1613->size(0) : 0);
          _ptr__1613[(_1583 - (int)1)] = (int)1;
          int _9290 = (int)1;
          int _9291 = _1583;
          for (int _1614 = _9290; _1614 < _9291; ++_1614)
          {
            {
              _ptr__1613[((_1583 - _1614) - (int)1)] = safe_mul( _ptr__1613[(_1583 - _1614)],_ptr__1595[(_1583 - _1614)] );
            }
          }
          _1599 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((_1601)->size(0)))));
          _ptr__1599.update(_1599 ? _1599->raw() : nullptr, _1599 ? _1599->size(0) : 0);
        }
      }
      else
      {
        {
          std::vector<double> _9292;
          for (int _1615 = (int)0, _9293 = (int)((_1601)->size(0)); _1615 < _9293 ; ++_1615)
          {
            _9292.push_back(_ptr__1604[_1615]);
          }
          auto _9294 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9292.size()),_9292.begin(),_9292.end()));
          _1599 = _9294;
          _ptr__1599.update(_1599 ? _1599->raw() : nullptr, _1599 ? _1599->size(0) : 0);
        }
      }
    }
  }
  int _9295 = (int)0;
  int _9296 = _1597;
  for (int _1616 = _9295; _1616 < _9296; ++_1616)
  {
    {
      ((*natconmap_idx)(_ptr__1601[_1616])) = _1600;
      ((*natconmap_slackidx)(_ptr__1601[_1616])) = (int)0;
    }
  }
  if ((mosek::fusion::p_LinearDomain::_get_impl(_1578)->key == ::mosek::fusion::RelationKey::IsFree))
  {
    {
      ((*natconmap_type)(_1600)) = (int)1;
      task_con_putboundlist_fr(_1601);
    }
  }
  {}
  if ((mosek::fusion::p_LinearDomain::_get_impl(_1578)->key == ::mosek::fusion::RelationKey::LessThan))
  {
    {
      ((*natconmap_type)(_1600)) = (int)3;
      task_con_putboundlist_up(_1601,_1599);
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_1578)->key == ::mosek::fusion::RelationKey::GreaterThan))
  {
    {
      ((*natconmap_type)(_1600)) = (int)2;
      task_con_putboundlist_lo(_1601,_1599);
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_1578)->key == ::mosek::fusion::RelationKey::EqualsTo))
  {
    {
      ((*natconmap_type)(_1600)) = (int)5;
      task_con_putboundlist_fx(_1601,_1599);
    }
  }
  {}
  if ((_1587 == (int)0))
  {
    {
      int _9297 = (int)0;
      int _9298 = _1584;
      for (int _1617 = _9297; _1617 < _9298; ++_1617)
      {
        {
          ((*natconmap_coderowptrb)(_ptr__1601[_1617])) = natconmap_codeatomtop;
          ((*natconmap_coderowptre)(_ptr__1601[_1617])) = natconmap_codeatomtop;
        }
      }
    }
  }
  else
  {
    {
      replace_row_code(rs,_1601,_1589,_1590,_1592,_1593,_1594);
    }
  }
  monty::rc_ptr< ::mosek::fusion::LinearConstraint > _1618 = ::mosek::fusion::p_LinearConstraint::_new_LinearConstraint(::mosek::fusion::Model::t(_pubthis),_1576,_1600,_1595,_1601);
  ((*cons)(_1600)) = (_1618).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1576).size()) > (int)0))
  {
    {
      con_map->setItem(_1576,_1600);
    }
  }
  {}
  return (_1618).as<::mosek::fusion::Constraint>();
}
std::string mosek::fusion::Model::getVersion  ( ) { return mosek::fusion::p_Model::getVersion(); }std::string mosek::fusion::p_Model::getVersion(){
  return ::mosek::fusion::p_BaseModel::env_getversion();
}
bool mosek::fusion::Model :: hasParameter(const std::string & _1619) { return mosek::fusion::p_Model::_get_impl(this)->hasParameter(_1619); }bool mosek::fusion::p_Model::hasParameter(const std::string & _1619){
  return par_map->hasItem(_1619);
}
bool mosek::fusion::Model :: hasConstraint(const std::string & _1620) { return mosek::fusion::p_Model::_get_impl(this)->hasConstraint(_1620); }bool mosek::fusion::p_Model::hasConstraint(const std::string & _1620){
  return con_map->hasItem(_1620);
}
bool mosek::fusion::Model :: hasVariable(const std::string & _1621) { return mosek::fusion::p_Model::_get_impl(this)->hasVariable(_1621); }bool mosek::fusion::p_Model::hasVariable(const std::string & _1621){
  return var_map->hasItem(_1621);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__getParameter(const std::string & _1622) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getParameter(_1622); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::getParameter(const std::string &  _1622) { return __mosek_2fusion_2Model__getParameter(_1622); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__getParameter(const std::string & _1622){
  monty::rc_ptr< ::mosek::fusion::Parameter > _9299;
  bool _9300 = par_map->hasItem(_1622);
  if (_9300)
  {
    _9299 = ((*parameters)(par_map->getItem(_1622)));
  }
  else
  {
    _9299 = nullptr;
  }
  return _9299;
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__getConstraint(int _1623) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getConstraint(_1623); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::getConstraint(int _1623) { return __mosek_2fusion_2Model__getConstraint(_1623); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__getConstraint(int _1623){
  return (((*cons)(_1623))).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__getConstraint(const std::string & _1624) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getConstraint(_1624); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::getConstraint(const std::string &  _1624) { return __mosek_2fusion_2Model__getConstraint(_1624); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__getConstraint(const std::string & _1624){
  monty::rc_ptr< ::mosek::fusion::ModelConstraint > _9301;
  bool _9302 = con_map->hasItem(_1624);
  if (_9302)
  {
    _9301 = ((*cons)(con_map->getItem(_1624)));
  }
  else
  {
    _9301 = nullptr;
  }
  return (_9301).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__getVariable(int _1625) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getVariable(_1625); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::getVariable(int _1625) { return __mosek_2fusion_2Model__getVariable(_1625); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__getVariable(int _1625){
  return (((*vars)(_1625))).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__getVariable(const std::string & _1626) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getVariable(_1626); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::getVariable(const std::string &  _1626) { return __mosek_2fusion_2Model__getVariable(_1626); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__getVariable(const std::string & _1626){
  if (var_map->hasItem(_1626))
  {
    {
      int _1627 = var_map->getItem(_1626);
      if ((_1627 < (int)0))
      {
        {
          return (((*barvars)((-safe_add( _1627,(int)1 ))))).as<::mosek::fusion::Variable>();
        }
      }
      else
      {
        {
          return (((*vars)(_1627))).as<::mosek::fusion::Variable>();
        }
      }
    }
  }
  else
  {
    {
      return nullptr;
    }
  }
}
std::string mosek::fusion::Model :: getName() { return mosek::fusion::p_Model::_get_impl(this)->getName(); }std::string mosek::fusion::p_Model::getName(){
  return model_name;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getParameterValue(std::shared_ptr< monty::ndarray< int,1 > > _1628){
  _checked_ptr_1<int> _ptr__1628(_1628 ? _1628->raw() : nullptr, _1628 ? _1628->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1629 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((_1628)->size(0)))));
  _checked_ptr_1<double> _ptr__1629(_1629 ? _1629->raw() : nullptr,_1629 ? _1629->size(0) : 0);
  int _9303 = (int)0;
  int _9304 = (int)((_1628)->size(0));
  for (int _1630 = _9303; _1630 < _9304; ++_1630)
  {
    {
      _ptr__1629[_1630] = ((*param_value)(_ptr__1628[_1630]));
    }
  }
  return _1629;
}
void mosek::fusion::p_Model::setParameterValue(std::shared_ptr< monty::ndarray< int,1 > > _1631,std::shared_ptr< monty::ndarray< double,1 > > _1632){
  _checked_ptr_1<int> _ptr__1631(_1631 ? _1631->raw() : nullptr, _1631 ? _1631->size(0) : 0);
  _checked_ptr_1<double> _ptr__1632(_1632 ? _1632->raw() : nullptr, _1632 ? _1632->size(0) : 0);
  int _9305 = (int)0;
  int _9306 = (int)((_1631)->size(0));
  for (int _1633 = _9305; _1633 < _9306; ++_1633)
  {
    {
      ((*param_value)(_ptr__1631[_1633])) = _ptr__1632[_1633];
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Model :: __mosek_2fusion_2Model__clone() { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__clone(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Model::clone() { return __mosek_2fusion_2Model__clone(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Model::__mosek_2fusion_2Model__clone(){
  return ::mosek::fusion::p_Model::_new_Model(::mosek::fusion::Model::t(_pubthis));
}
void mosek::fusion::p_Model::destroy(){xs.reset();ws.reset();rs.reset();con_map.reset();cons.reset();natconmap_objcconst.reset();natconmap_objcode.reset();natconmap_objcodeptr.reset();natconmap_objcodenidx.reset();natconmap_cconst.reset();natconmap_code.reset();natconmap_codeptr.reset();natconmap_codenidx.reset();natconmap_coderowptre.reset();natconmap_coderowptrb.reset();param_value.reset();par_map.reset();parameters.reset();natconmap_type.reset();natconmap_idx.reset();natconmap_slackidx.reset();natconmap_blockid.reset();natconmap.reset();initsol_xx_flag.reset();initsol_xx.reset();var_map.reset();barvars.reset();natbarvarmap_ptr.reset();natbarvarmap_num.reset();natbarvar_dim.reset();natbarvar_ptr.reset();natbarvar_j.reset();natbarvar_i.reset();natbarvar_idx.reset();natvarmap_type.reset();natconemap_dim.reset();natconemap.reset();vars.reset();natvarmap_idx.reset();natvarmap_blockid.reset();natvarmap.reset();}void mosek::fusion::Model::destroy() { mosek::fusion::p_Model::_get_impl(this)->destroy(); }mosek::fusion::SliceVariable::SliceVariable(mosek::fusion::p_SliceVariable *_impl) : mosek::fusion::BaseVariable(_impl) { /*std::cout << "SliceVariable()" << this << std::endl; */ }mosek::fusion::SliceVariable::~SliceVariable() {  /* std::cout << "~SliceVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_SliceVariable::p_SliceVariable  (::mosek::fusion::SliceVariable * _pubthis) :     mosek::fusion::p_BaseVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SliceVariable::t mosek::fusion::p_SliceVariable::_new_SliceVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1634,    std::shared_ptr< monty::ndarray< int,1 > > _1635,    std::shared_ptr< monty::ndarray< long long,1 > > _1636,    std::shared_ptr< monty::ndarray< long long,1 > > _1637){ return new mosek::fusion::SliceVariable(_1634,_1635,_1636,_1637); }mosek::fusion::SliceVariable::SliceVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1634,    std::shared_ptr< monty::ndarray< int,1 > > _1635,    std::shared_ptr< monty::ndarray< long long,1 > > _1636,    std::shared_ptr< monty::ndarray< long long,1 > > _1637) :    SliceVariable(new mosek::fusion::p_SliceVariable(this)){ mosek::fusion::p_SliceVariable::_get_impl(this)->_initialize(_1634,_1635,_1636,_1637); }void mosek::fusion::p_SliceVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1634,    std::shared_ptr< monty::ndarray< int,1 > > _1635,    std::shared_ptr< monty::ndarray< long long,1 > > _1636,    std::shared_ptr< monty::ndarray< long long,1 > > _1637){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1635(_1635 ? _1635->raw() : nullptr, _1635 ? _1635->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1636(_1636 ? _1636->raw() : nullptr, _1636 ? _1636->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1637(_1637 ? _1637->raw() : nullptr, _1637 ? _1637->size(0) : 0);
    mosek::fusion::p_BaseVariable::_initialize(_1634,_1635,_1636,_1637);
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->nativeidxs = _1637;
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->sparsity = _1636;
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->shape = _1635;
  }
}mosek::fusion::SliceVariable::t mosek::fusion::p_SliceVariable::_new_SliceVariable  (monty::rc_ptr< ::mosek::fusion::SliceVariable > _1638){ return new mosek::fusion::SliceVariable(_1638); }mosek::fusion::SliceVariable::SliceVariable  (monty::rc_ptr< ::mosek::fusion::SliceVariable > _1638) :    SliceVariable(new mosek::fusion::p_SliceVariable(this)){ mosek::fusion::p_SliceVariable::_get_impl(this)->_initialize(_1638); }void mosek::fusion::p_SliceVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::SliceVariable > _1638){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseVariable::_initialize(_1638,_1638->__mosek_2fusion_2BaseVariable__getModel());
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->nativeidxs = mosek::fusion::p_SliceVariable::_get_impl(_1638)->nativeidxs;
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->sparsity = mosek::fusion::p_SliceVariable::_get_impl(_1638)->sparsity;
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->shape = mosek::fusion::p_SliceVariable::_get_impl(_1638)->shape;
  }
}void mosek::fusion::p_SliceVariable::destroy(){shape.reset();sparsity.reset();nativeidxs.reset();}void mosek::fusion::SliceVariable::destroy() { mosek::fusion::p_SliceVariable::_get_impl(this)->destroy(); }mosek::fusion::SymRangedVariable::SymRangedVariable(mosek::fusion::p_SymRangedVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "SymRangedVariable()" << this << std::endl; */ }mosek::fusion::SymRangedVariable::~SymRangedVariable() {  /* std::cout << "~SymRangedVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_SymRangedVariable::p_SymRangedVariable  (::mosek::fusion::SymRangedVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SymRangedVariable::t mosek::fusion::p_SymRangedVariable::_new_SymRangedVariable  (monty::rc_ptr< ::mosek::fusion::SymRangedVariable > _1639,    monty::rc_ptr< ::mosek::fusion::Model > _1640){ return new mosek::fusion::SymRangedVariable(_1639,_1640); }mosek::fusion::SymRangedVariable::SymRangedVariable  (monty::rc_ptr< ::mosek::fusion::SymRangedVariable > _1639,    monty::rc_ptr< ::mosek::fusion::Model > _1640) :    SymRangedVariable(new mosek::fusion::p_SymRangedVariable(this)){ mosek::fusion::p_SymRangedVariable::_get_impl(this)->_initialize(_1639,_1640); }void mosek::fusion::p_SymRangedVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::SymRangedVariable > _1639,    monty::rc_ptr< ::mosek::fusion::Model > _1640){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1639,_1640);
    names_flushed = mosek::fusion::p_SymRangedVariable::_get_impl(_1639)->names_flushed;
    name = mosek::fusion::p_SymRangedVariable::_get_impl(_1639)->name;
    sparsity = mosek::fusion::p_SymRangedVariable::_get_impl(_1639)->sparsity;
    nativeidxs = mosek::fusion::p_SymRangedVariable::_get_impl(_1639)->nativeidxs;
    dim = mosek::fusion::p_SymRangedVariable::_get_impl(_1639)->dim;
  }
}mosek::fusion::SymRangedVariable::t mosek::fusion::p_SymRangedVariable::_new_SymRangedVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1641,    const std::string &  _1642,    long long _1643,    int _1644,    std::shared_ptr< monty::ndarray< long long,1 > > _1645,    std::shared_ptr< monty::ndarray< int,1 > > _1646){ return new mosek::fusion::SymRangedVariable(_1641,_1642,_1643,_1644,_1645,_1646); }mosek::fusion::SymRangedVariable::SymRangedVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1641,    const std::string &  _1642,    long long _1643,    int _1644,    std::shared_ptr< monty::ndarray< long long,1 > > _1645,    std::shared_ptr< monty::ndarray< int,1 > > _1646) :    SymRangedVariable(new mosek::fusion::p_SymRangedVariable(this)){ mosek::fusion::p_SymRangedVariable::_get_impl(this)->_initialize(_1641,_1642,_1643,_1644,_1645,_1646); }void mosek::fusion::p_SymRangedVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1641,    const std::string &  _1642,    long long _1643,    int _1644,    std::shared_ptr< monty::ndarray< long long,1 > > _1645,    std::shared_ptr< monty::ndarray< int,1 > > _1646){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__1645(_1645 ? _1645->raw() : nullptr, _1645 ? _1645->size(0) : 0);
    _checked_ptr_1<int> _ptr__1646(_1646 ? _1646->raw() : nullptr, _1646 ? _1646->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1641,_1642,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1644),(int)(_1644)}),_1643,::mosek::fusion::p_SymRangedVariable::mirror_sp(_1644,_1645),::mosek::fusion::p_SymRangedVariable::mirror_idxs(_1644,_1645,_1646));
    names_flushed = false;
    mosek::fusion::p_SymRangedVariable::_get_impl(::mosek::fusion::SymRangedVariable::t(_pubthis))->name = _1642;
    mosek::fusion::p_SymRangedVariable::_get_impl(::mosek::fusion::SymRangedVariable::t(_pubthis))->nativeidxs = _1646;
    mosek::fusion::p_SymRangedVariable::_get_impl(::mosek::fusion::SymRangedVariable::t(_pubthis))->sparsity = _1645;
    mosek::fusion::p_SymRangedVariable::_get_impl(::mosek::fusion::SymRangedVariable::t(_pubthis))->dim = _1644;
  }
}void mosek::fusion::p_SymRangedVariable::dual_u(int _1647,std::shared_ptr< monty::ndarray< double,1 > > _1648){
  _checked_ptr_1<double> _ptr__1648(_1648 ? _1648->raw() : nullptr, _1648 ? _1648->size(0) : 0);
  dual_lu(_1647,_1648,false);
}
void mosek::fusion::p_SymRangedVariable::dual_l(int _1649,std::shared_ptr< monty::ndarray< double,1 > > _1650){
  _checked_ptr_1<double> _ptr__1650(_1650 ? _1650->raw() : nullptr, _1650 ? _1650->size(0) : 0);
  dual_lu(_1649,_1650,true);
}
void mosek::fusion::p_SymRangedVariable::flushNames(){
  monty::rc_ptr< ::mosek::fusion::Model > _1651 = _pubthis->__mosek_2fusion_2BaseVariable__getModel();
  if (((!names_flushed) && ((int)((name).size()) > (int)0)))
  {
    {
      if ((NULL == sparsity.get()))
      {
        {
          int _9307 = (int)0;
          int _9308 = (int)((nativeidxs)->size(0));
          for (int _1652 = _9307; _1652 < _9308; ++_1652)
          {
            {
              std::string _9309;
              bool _9310 = ((int)((name).size()) == (int)0);
              if (_9310)
              {
                _9309 = std::string ("");
              }
              else
              {
                _9309 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a((_1652 / dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a((_1652 % dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"))->toString();
              }
              mosek::fusion::p_Model::_get_impl(_1651.get())->varname(((*nativeidxs)(_1652)),_9309);
            }
          }
        }
      }
      else
      {
        {
          int _9311 = (int)0;
          int _9312 = (int)((sparsity)->size(0));
          for (int _1653 = _9311; _1653 < _9312; ++_1653)
          {
            {
              mosek::fusion::p_Model::_get_impl(_1651.get())->varname(((*nativeidxs)(_1653)),::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a((((*sparsity)(_1653)) / dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a((((*sparsity)(_1653)) % dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"))->toString());
            }
          }
        }
      }
      names_flushed = true;
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_SymRangedVariable::__mosek_2fusion_2SymRangedVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1654){
  return (::mosek::fusion::p_SymRangedVariable::_new_SymRangedVariable(::mosek::fusion::SymRangedVariable::t(_pubthis),_1654)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_SymRangedVariable::mirror_idxs(int _1655,std::shared_ptr< monty::ndarray< long long,1 > > _1656,std::shared_ptr< monty::ndarray< int,1 > > _1657){
  _checked_ptr_1<long long> _ptr__1656(_1656 ? _1656->raw() : nullptr, _1656 ? _1656->size(0) : 0);
  _checked_ptr_1<int> _ptr__1657(_1657 ? _1657->raw() : nullptr, _1657 ? _1657->size(0) : 0);
  if ((NULL == _1656.get()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _1658 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( _1655,_1655 ))));
      _checked_ptr_1<long long> _ptr__1658(_1658 ? _1658->raw() : nullptr,_1658 ? _1658->size(0) : 0);
      int _1659 = (int)0;
      {
        int _9313 = (int)0;
        int _9314 = _1655;
        for (int _1660 = _9313; _1660 < _9314; ++_1660)
        {
          {
            _ptr__1658[safe_add( safe_mul( _1660,_1655 ),_1660 )] = safe_add( _ptr__1657[_1659],(int)1 );
            ++ _1659;
            int _9315 = safe_add( _1660,(int)1 );
            int _9316 = _1655;
            for (int _1661 = _9315; _1661 < _9316; ++_1661)
            {
              {
                _ptr__1658[safe_add( safe_mul( _1660,_1655 ),_1661 )] = safe_add( _ptr__1657[_1659],(int)1 );
                _ptr__1658[safe_add( safe_mul( _1661,_1655 ),_1660 )] = safe_add( _ptr__1657[_1659],(int)1 );
                ++ _1659;
              }
            }
          }
        }
      }
      return _1658;
    }
  }
  else
  {
    {
      int _1662 = (int)0;
      {
        int _9317 = (int)0;
        int _9318 = (int)((_1656)->size(0));
        for (int _1663 = _9317; _1663 < _9318; ++_1663)
        {
          {
            int _9319;
            bool _9320 = ((_ptr__1656[_1663] % safe_add( _1655,(int)1 )) == (int)0);
            if (_9320)
            {
              _9319 = (int)1;
            }
            else
            {
              _9319 = (int)2;
            }
            _1662 += _9319;
          }
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1664 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1662)));
      _checked_ptr_1<long long> _ptr__1664(_1664 ? _1664->raw() : nullptr,_1664 ? _1664->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _1665 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1662)));
      _checked_ptr_1<long long> _ptr__1665(_1665 ? _1665->raw() : nullptr,_1665 ? _1665->size(0) : 0);
      {
        int _1666 = (int)0;
        int _9321 = (int)0;
        int _9322 = (int)((_1656)->size(0));
        for (int _1667 = _9321; _1667 < _9322; ++_1667)
        {
          {
            long long _1668 = (_ptr__1656[_1667] / _1655);
            long long _1669 = (_ptr__1656[_1667] % _1655);
            _ptr__1664[_1666] = _ptr__1656[_1667];
            _ptr__1665[_1666] = safe_add( _ptr__1657[_1667],(int)1 );
            ++ _1666;
            if ((_1668 != _1669))
            {
              {
                _ptr__1664[_1666] = safe_add( safe_mul( _1669,_1655 ),_1668 );
                _ptr__1665[_1666] = safe_add( _ptr__1657[_1667],(int)1 );
                ++ _1666;
              }
            }
            {}
          }
        }
      }
      std::vector<long long> _9323;
      for (int _1671 = (int)0, _9324 = _1662; _1671 < _9324 ; ++_1671)
      {
        _9323.push_back(_1671);
      }
      auto _9325 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9323.size()),_9323.begin(),_9323.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _1670 = _9325;
      _checked_ptr_1<long long> _ptr__1670(_1670 ? _1670->raw() : nullptr,_1670 ? _1670->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_1670,_1664,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_1662));
      std::vector<long long> _9326;
      for (int _1672 = (int)0, _9327 = _1662; _1672 < _9327 ; ++_1672)
      {
        _9326.push_back(_ptr__1665[_ptr__1670[_1672]]);
      }
      auto _9328 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9326.size()),_9326.begin(),_9326.end()));
      return _9328;
    }
  }
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_SymRangedVariable::mirror_sp(int _1673,std::shared_ptr< monty::ndarray< long long,1 > > _1674){
  _checked_ptr_1<long long> _ptr__1674(_1674 ? _1674->raw() : nullptr, _1674 ? _1674->size(0) : 0);
  if ((NULL == _1674.get()))
  {
    {
      return nullptr;
    }
  }
  else
  {
    {
      int _1675 = (int)0;
      {
        int _9329 = (int)0;
        int _9330 = (int)((_1674)->size(0));
        for (int _1676 = _9329; _1676 < _9330; ++_1676)
        {
          {
            int _9331;
            bool _9332 = ((_ptr__1674[_1676] % safe_add( _1673,(int)1 )) == (int)0);
            if (_9332)
            {
              _9331 = (int)1;
            }
            else
            {
              _9331 = (int)2;
            }
            _1675 += _9331;
          }
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1677 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1675)));
      _checked_ptr_1<long long> _ptr__1677(_1677 ? _1677->raw() : nullptr,_1677 ? _1677->size(0) : 0);
      {
        int _1678 = (int)0;
        int _9333 = (int)0;
        int _9334 = (int)((_1674)->size(0));
        for (int _1679 = _9333; _1679 < _9334; ++_1679)
        {
          {
            long long _1680 = (_ptr__1674[_1679] / _1673);
            long long _1681 = (_ptr__1674[_1679] % _1673);
            _ptr__1677[_1678] = _ptr__1674[_1679];
            ++ _1678;
            if ((_1680 != _1681))
            {
              {
                _ptr__1677[_1678] = safe_add( safe_mul( _1681,_1673 ),_1680 );
                ++ _1678;
              }
            }
            {}
          }
        }
      }
      std::vector<long long> _9335;
      for (int _1683 = (int)0, _9336 = _1675; _1683 < _9336 ; ++_1683)
      {
        _9335.push_back(_1683);
      }
      auto _9337 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9335.size()),_9335.begin(),_9335.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _1682 = _9337;
      _checked_ptr_1<long long> _ptr__1682(_1682 ? _1682->raw() : nullptr,_1682 ? _1682->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_1682,_1677,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_1675));
      std::vector<long long> _9338;
      for (int _1684 = (int)0, _9339 = _1675; _1684 < _9339 ; ++_1684)
      {
        _9338.push_back(_ptr__1677[_ptr__1682[_1684]]);
      }
      auto _9340 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9338.size()),_9338.begin(),_9338.end()));
      return _9340;
    }
  }
}
void mosek::fusion::p_SymRangedVariable::destroy(){sparsity.reset();nativeidxs.reset();}void mosek::fusion::SymRangedVariable::destroy() { mosek::fusion::p_SymRangedVariable::_get_impl(this)->destroy(); }mosek::fusion::BoundInterfaceVariable::BoundInterfaceVariable(mosek::fusion::p_BoundInterfaceVariable *_impl) : mosek::fusion::SliceVariable(_impl) { /*std::cout << "BoundInterfaceVariable()" << this << std::endl; */ }mosek::fusion::BoundInterfaceVariable::~BoundInterfaceVariable() {  /* std::cout << "~BoundInterfaceVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_BoundInterfaceVariable::p_BoundInterfaceVariable  (::mosek::fusion::BoundInterfaceVariable * _pubthis) :     mosek::fusion::p_SliceVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::BoundInterfaceVariable::t mosek::fusion::p_BoundInterfaceVariable::_new_BoundInterfaceVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1685,    std::shared_ptr< monty::ndarray< int,1 > > _1686,    std::shared_ptr< monty::ndarray< long long,1 > > _1687,    std::shared_ptr< monty::ndarray< long long,1 > > _1688,    bool _1689){ return new mosek::fusion::BoundInterfaceVariable(_1685,_1686,_1687,_1688,_1689); }mosek::fusion::BoundInterfaceVariable::BoundInterfaceVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1685,    std::shared_ptr< monty::ndarray< int,1 > > _1686,    std::shared_ptr< monty::ndarray< long long,1 > > _1687,    std::shared_ptr< monty::ndarray< long long,1 > > _1688,    bool _1689) :    BoundInterfaceVariable(new mosek::fusion::p_BoundInterfaceVariable(this)){ mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->_initialize(_1685,_1686,_1687,_1688,_1689); }void mosek::fusion::p_BoundInterfaceVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1685,    std::shared_ptr< monty::ndarray< int,1 > > _1686,    std::shared_ptr< monty::ndarray< long long,1 > > _1687,    std::shared_ptr< monty::ndarray< long long,1 > > _1688,    bool _1689){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1686(_1686 ? _1686->raw() : nullptr, _1686 ? _1686->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1687(_1687 ? _1687->raw() : nullptr, _1687 ? _1687->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1688(_1688 ? _1688->raw() : nullptr, _1688 ? _1688->size(0) : 0);
    mosek::fusion::p_SliceVariable::_initialize(_1685,_1686,_1687,_1688);
    mosek::fusion::p_BoundInterfaceVariable::_get_impl(::mosek::fusion::BoundInterfaceVariable::t(_pubthis))->islower = _1689;
  }
}mosek::fusion::BoundInterfaceVariable::t mosek::fusion::p_BoundInterfaceVariable::_new_BoundInterfaceVariable  (monty::rc_ptr< ::mosek::fusion::SliceVariable > _1690,    bool _1691){ return new mosek::fusion::BoundInterfaceVariable(_1690,_1691); }mosek::fusion::BoundInterfaceVariable::BoundInterfaceVariable  (monty::rc_ptr< ::mosek::fusion::SliceVariable > _1690,    bool _1691) :    BoundInterfaceVariable(new mosek::fusion::p_BoundInterfaceVariable(this)){ mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->_initialize(_1690,_1691); }void mosek::fusion::p_BoundInterfaceVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::SliceVariable > _1690,    bool _1691){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_SliceVariable::_initialize(_1690);
    mosek::fusion::p_BoundInterfaceVariable::_get_impl(::mosek::fusion::BoundInterfaceVariable::t(_pubthis))->islower = _1691;
  }
}std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::BoundInterfaceVariable :: dual() { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->dual(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_BoundInterfaceVariable::dual(){
  std::shared_ptr< monty::ndarray< double,1 > > _1692 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_pubthis->getSize())));
  _checked_ptr_1<double> _ptr__1692(_1692 ? _1692->raw() : nullptr,_1692 ? _1692->size(0) : 0);
  dual_lu((int)0,_1692,islower);
  return _1692;
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__transpose() { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__transpose(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::transpose() { return __mosek_2fusion_2BoundInterfaceVariable__transpose(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__transpose() { return __mosek_2fusion_2BoundInterfaceVariable__transpose(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__transpose(){
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__transpose())).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1693,std::shared_ptr< monty::ndarray< int,1 > > _1694,std::shared_ptr< monty::ndarray< int,1 > > _1695) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__pick(_1693,_1694,_1695); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _1693,std::shared_ptr< monty::ndarray< int,1 > > _1694,std::shared_ptr< monty::ndarray< int,1 > > _1695) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_1693,_1694,_1695); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1693,std::shared_ptr< monty::ndarray< int,1 > > _1694,std::shared_ptr< monty::ndarray< int,1 > > _1695) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_1693,_1694,_1695); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1693,std::shared_ptr< monty::ndarray< int,1 > > _1694,std::shared_ptr< monty::ndarray< int,1 > > _1695){
  _checked_ptr_1<int> _ptr__1693(_1693 ? _1693->raw() : nullptr, _1693 ? _1693->size(0) : 0);
  _checked_ptr_1<int> _ptr__1694(_1694 ? _1694->raw() : nullptr, _1694 ? _1694->size(0) : 0);
  _checked_ptr_1<int> _ptr__1695(_1695 ? _1695->raw() : nullptr, _1695 ? _1695->size(0) : 0);
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(_1693,_1694,_1695))).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1696,std::shared_ptr< monty::ndarray< int,1 > > _1697) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__pick(_1696,_1697); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _1696,std::shared_ptr< monty::ndarray< int,1 > > _1697) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_1696,_1697); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1696,std::shared_ptr< monty::ndarray< int,1 > > _1697) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_1696,_1697); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1696,std::shared_ptr< monty::ndarray< int,1 > > _1697){
  _checked_ptr_1<int> _ptr__1696(_1696 ? _1696->raw() : nullptr, _1696 ? _1696->size(0) : 0);
  _checked_ptr_1<int> _ptr__1697(_1697 ? _1697->raw() : nullptr, _1697 ? _1697->size(0) : 0);
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(_1696,_1697))).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int,2 > > _1698) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__pick(_1698); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::pick(std::shared_ptr< monty::ndarray< int,2 > > _1698) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_1698); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,2 > > _1698) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_1698); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int,2 > > _1698){
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(_1698))).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1699) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__pick(_1699); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _1699) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_1699); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1699) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_1699); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1699){
  _checked_ptr_1<int> _ptr__1699(_1699 ? _1699->raw() : nullptr, _1699 ? _1699->size(0) : 0);
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(_1699))).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__antidiag(int _1700) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__antidiag(_1700); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::antidiag(int _1700) { return __mosek_2fusion_2BoundInterfaceVariable__antidiag(_1700); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__antidiag(int _1700) { return __mosek_2fusion_2BoundInterfaceVariable__antidiag(_1700); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__antidiag(int _1700){
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__antidiag(_1700))).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__antidiag() { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__antidiag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::antidiag() { return __mosek_2fusion_2BoundInterfaceVariable__antidiag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__antidiag() { return __mosek_2fusion_2BoundInterfaceVariable__antidiag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__antidiag(){
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__antidiag())).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__diag(int _1701) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__diag(_1701); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::diag(int _1701) { return __mosek_2fusion_2BoundInterfaceVariable__diag(_1701); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__diag(int _1701) { return __mosek_2fusion_2BoundInterfaceVariable__diag(_1701); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__diag(int _1701){
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__diag(_1701))).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__diag() { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__diag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::diag() { return __mosek_2fusion_2BoundInterfaceVariable__diag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__diag() { return __mosek_2fusion_2BoundInterfaceVariable__diag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__diag(){
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__diag())).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1702,std::shared_ptr< monty::ndarray< int,1 > > _1703) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__slice(_1702,_1703); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::slice(std::shared_ptr< monty::ndarray< int,1 > > _1702,std::shared_ptr< monty::ndarray< int,1 > > _1703) { return __mosek_2fusion_2BoundInterfaceVariable__slice(_1702,_1703); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1702,std::shared_ptr< monty::ndarray< int,1 > > _1703) { return __mosek_2fusion_2BoundInterfaceVariable__slice(_1702,_1703); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1702,std::shared_ptr< monty::ndarray< int,1 > > _1703){
  _checked_ptr_1<int> _ptr__1702(_1702 ? _1702->raw() : nullptr, _1702 ? _1702->size(0) : 0);
  _checked_ptr_1<int> _ptr__1703(_1703 ? _1703->raw() : nullptr, _1703 ? _1703->size(0) : 0);
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__slice(_1702,_1703))).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__slice(int _1704,int _1705) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__slice(_1704,_1705); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::slice(int _1704,int _1705) { return __mosek_2fusion_2BoundInterfaceVariable__slice(_1704,_1705); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__slice(int _1704,int _1705) { return __mosek_2fusion_2BoundInterfaceVariable__slice(_1704,_1705); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__slice(int _1704,int _1705){
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__slice(_1704,_1705))).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::BoundInterfaceVariable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__from_(monty::rc_ptr< ::mosek::fusion::Variable > _1706){
  std::shared_ptr< monty::ndarray< int,1 > > _1707 = _pubthis->getShape();
  _checked_ptr_1<int> _ptr__1707(_1707 ? _1707->raw() : nullptr,_1707 ? _1707->size(0) : 0);
  int _1708 = _1706->numInst();
  std::shared_ptr< monty::ndarray< long long,1 > > _1709 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1708)));
  _checked_ptr_1<long long> _ptr__1709(_1709 ? _1709->raw() : nullptr,_1709 ? _1709->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1710 = nullptr;
  _checked_ptr_1<long long> _ptr__1710(_1710 ? _1710->raw() : nullptr,_1710 ? _1710->size(0) : 0);
  if ((_1706->getSize() == _1708))
  {
    {
      _1706->inst((int)0,_1709);
    }
  }
  else
  {
    {
      _1710 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1708)));
      _ptr__1710.update(_1710 ? _1710->raw() : nullptr, _1710 ? _1710->size(0) : 0);
      _1706->inst((int)0,_1710,(int)0,_1709);
    }
  }
  return ::mosek::fusion::p_BoundInterfaceVariable::_new_BoundInterfaceVariable(_1706->__mosek_2fusion_2Variable__getModel(),_1707,_1710,_1709,islower);
}
void mosek::fusion::p_BoundInterfaceVariable::destroy(){}void mosek::fusion::BoundInterfaceVariable::destroy() { mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->destroy(); }mosek::fusion::RangedVariable::RangedVariable(mosek::fusion::p_RangedVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "RangedVariable()" << this << std::endl; */ }mosek::fusion::RangedVariable::~RangedVariable() {  /* std::cout << "~RangedVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_RangedVariable::p_RangedVariable  (::mosek::fusion::RangedVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::RangedVariable::t mosek::fusion::p_RangedVariable::_new_RangedVariable  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _1711,    monty::rc_ptr< ::mosek::fusion::Model > _1712){ return new mosek::fusion::RangedVariable(_1711,_1712); }mosek::fusion::RangedVariable::RangedVariable  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _1711,    monty::rc_ptr< ::mosek::fusion::Model > _1712) :    RangedVariable(new mosek::fusion::p_RangedVariable(this)){ mosek::fusion::p_RangedVariable::_get_impl(this)->_initialize(_1711,_1712); }void mosek::fusion::p_RangedVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _1711,    monty::rc_ptr< ::mosek::fusion::Model > _1712){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1711,_1712);
    name = mosek::fusion::p_RangedVariable::_get_impl(_1711)->name;
    nativeidxs = mosek::fusion::p_RangedVariable::_get_impl(_1711)->nativeidxs;
    sparsity = mosek::fusion::p_RangedVariable::_get_impl(_1711)->sparsity;
    names_flushed = mosek::fusion::p_RangedVariable::_get_impl(_1711)->names_flushed;
    shape = mosek::fusion::p_RangedVariable::_get_impl(_1711)->shape;
  }
}mosek::fusion::RangedVariable::t mosek::fusion::p_RangedVariable::_new_RangedVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1713,    const std::string &  _1714,    long long _1715,    std::shared_ptr< monty::ndarray< int,1 > > _1716,    std::shared_ptr< monty::ndarray< long long,1 > > _1717,    std::shared_ptr< monty::ndarray< int,1 > > _1718){ return new mosek::fusion::RangedVariable(_1713,_1714,_1715,_1716,_1717,_1718); }mosek::fusion::RangedVariable::RangedVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1713,    const std::string &  _1714,    long long _1715,    std::shared_ptr< monty::ndarray< int,1 > > _1716,    std::shared_ptr< monty::ndarray< long long,1 > > _1717,    std::shared_ptr< monty::ndarray< int,1 > > _1718) :    RangedVariable(new mosek::fusion::p_RangedVariable(this)){ mosek::fusion::p_RangedVariable::_get_impl(this)->_initialize(_1713,_1714,_1715,_1716,_1717,_1718); }void mosek::fusion::p_RangedVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1713,    const std::string &  _1714,    long long _1715,    std::shared_ptr< monty::ndarray< int,1 > > _1716,    std::shared_ptr< monty::ndarray< long long,1 > > _1717,    std::shared_ptr< monty::ndarray< int,1 > > _1718){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1716(_1716 ? _1716->raw() : nullptr, _1716 ? _1716->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1717(_1717 ? _1717->raw() : nullptr, _1717 ? _1717->size(0) : 0);
    _checked_ptr_1<int> _ptr__1718(_1718 ? _1718->raw() : nullptr, _1718 ? _1718->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1713,_1714,_1716,_1715,_1717,::mosek::fusion::p_RangedVariable::globalNativeIndexes(_1718));
    mosek::fusion::p_RangedVariable::_get_impl(::mosek::fusion::RangedVariable::t(_pubthis))->nativeidxs = _1718;
    mosek::fusion::p_RangedVariable::_get_impl(::mosek::fusion::RangedVariable::t(_pubthis))->sparsity = _1717;
    mosek::fusion::p_RangedVariable::_get_impl(::mosek::fusion::RangedVariable::t(_pubthis))->name = _1714;
    mosek::fusion::p_RangedVariable::_get_impl(::mosek::fusion::RangedVariable::t(_pubthis))->shape = _1716;
    names_flushed = false;
  }
}monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::RangedVariable :: __mosek_2fusion_2RangedVariable__elementDesc(long long _1719,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1720) { return mosek::fusion::p_RangedVariable::_get_impl(this)->__mosek_2fusion_2RangedVariable__elementDesc(_1719,_1720); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::RangedVariable::elementDesc(long long _1719,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1720) { return __mosek_2fusion_2RangedVariable__elementDesc(_1719,_1720); }
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_RangedVariable::__mosek_2fusion_2RangedVariable__elementDesc(long long _1719,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1720){
  _pubthis->elementName(_1719,_1720);
  _1720->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" : in range"));
  return _1720;
}
void mosek::fusion::p_RangedVariable::flushNames(){
  monty::rc_ptr< ::mosek::fusion::Model > _1721 = _pubthis->__mosek_2fusion_2BaseVariable__getModel();
  if (((!names_flushed) && ((int)((name).size()) > (int)0)))
  {
    {
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1722 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      _1722->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
      if ((_pubthis->getND() > (int)0))
      {
        {
          _1722->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
          int _9341 = (int)1;
          int _9342 = _pubthis->getND();
          for (int _1723 = _9341; _1723 < _9342; ++_1723)
          {
            {
              _1722->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1723);
            }
          }
        }
      }
      {}
      _1722->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
      mosek::fusion::p_Model::_get_impl(_1721.get())->varnames(nativeidxs,_1722->toString(),_pubthis->getShape(),sparsity);
      names_flushed = true;
    }
  }
  {}
}
void mosek::fusion::p_RangedVariable::dual_u(int _1724,std::shared_ptr< monty::ndarray< double,1 > > _1725){
  _checked_ptr_1<double> _ptr__1725(_1725 ? _1725->raw() : nullptr, _1725 ? _1725->size(0) : 0);
  dual_lu(_1724,_1725,false);
}
void mosek::fusion::p_RangedVariable::dual_l(int _1726,std::shared_ptr< monty::ndarray< double,1 > > _1727){
  _checked_ptr_1<double> _ptr__1727(_1727 ? _1727->raw() : nullptr, _1727 ? _1727->size(0) : 0);
  dual_lu(_1726,_1727,true);
}
monty::rc_ptr< ::mosek::fusion::BoundInterfaceVariable > mosek::fusion::RangedVariable :: __mosek_2fusion_2RangedVariable__upperBoundVar() { return mosek::fusion::p_RangedVariable::_get_impl(this)->__mosek_2fusion_2RangedVariable__upperBoundVar(); }monty::rc_ptr< ::mosek::fusion::BoundInterfaceVariable > mosek::fusion::RangedVariable::upperBoundVar() { return __mosek_2fusion_2RangedVariable__upperBoundVar(); }
monty::rc_ptr< ::mosek::fusion::BoundInterfaceVariable > mosek::fusion::p_RangedVariable::__mosek_2fusion_2RangedVariable__upperBoundVar(){
  std::vector<long long> _9343;
  for (int _1728 = (int)0, _9344 = (int)((nativeidxs)->size(0)); _1728 < _9344 ; ++_1728)
  {
    _9343.push_back(((*nativeidxs)(_1728)));
  }
  auto _9345 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9343.size()),_9343.begin(),_9343.end()));
  return ::mosek::fusion::p_BoundInterfaceVariable::_new_BoundInterfaceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),shape,sparsity,_9345,false);
}
monty::rc_ptr< ::mosek::fusion::BoundInterfaceVariable > mosek::fusion::RangedVariable :: __mosek_2fusion_2RangedVariable__lowerBoundVar() { return mosek::fusion::p_RangedVariable::_get_impl(this)->__mosek_2fusion_2RangedVariable__lowerBoundVar(); }monty::rc_ptr< ::mosek::fusion::BoundInterfaceVariable > mosek::fusion::RangedVariable::lowerBoundVar() { return __mosek_2fusion_2RangedVariable__lowerBoundVar(); }
monty::rc_ptr< ::mosek::fusion::BoundInterfaceVariable > mosek::fusion::p_RangedVariable::__mosek_2fusion_2RangedVariable__lowerBoundVar(){
  std::vector<long long> _9346;
  for (int _1729 = (int)0, _9347 = (int)((nativeidxs)->size(0)); _1729 < _9347 ; ++_1729)
  {
    _9346.push_back(((*nativeidxs)(_1729)));
  }
  auto _9348 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9346.size()),_9346.begin(),_9346.end()));
  return ::mosek::fusion::p_BoundInterfaceVariable::_new_BoundInterfaceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),shape,sparsity,_9348,true);
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_RangedVariable::__mosek_2fusion_2RangedVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1730){
  return (::mosek::fusion::p_RangedVariable::_new_RangedVariable(::mosek::fusion::RangedVariable::t(_pubthis),_1730)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_RangedVariable::globalNativeIndexes(std::shared_ptr< monty::ndarray< int,1 > > _1731){
  _checked_ptr_1<int> _ptr__1731(_1731 ? _1731->raw() : nullptr, _1731 ? _1731->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1732 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1731)->size(0)))));
  _checked_ptr_1<long long> _ptr__1732(_1732 ? _1732->raw() : nullptr,_1732 ? _1732->size(0) : 0);
  int _9349 = (int)0;
  int _9350 = (int)((_1731)->size(0));
  for (int _1733 = _9349; _1733 < _9350; ++_1733)
  {
    {
      _ptr__1732[_1733] = _ptr__1731[_1733];
    }
  }
  return _1732;
}
void mosek::fusion::p_RangedVariable::destroy(){shape.reset();nativeidxs.reset();sparsity.reset();}void mosek::fusion::RangedVariable::destroy() { mosek::fusion::p_RangedVariable::_get_impl(this)->destroy(); }mosek::fusion::LinearPSDVariable::LinearPSDVariable(mosek::fusion::p_LinearPSDVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "LinearPSDVariable()" << this << std::endl; */ }mosek::fusion::LinearPSDVariable::~LinearPSDVariable() {  /* std::cout << "~LinearPSDVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_LinearPSDVariable::p_LinearPSDVariable  (::mosek::fusion::LinearPSDVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::LinearPSDVariable::t mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable  (monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _1734,    monty::rc_ptr< ::mosek::fusion::Model > _1735){ return new mosek::fusion::LinearPSDVariable(_1734,_1735); }mosek::fusion::LinearPSDVariable::LinearPSDVariable  (monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _1734,    monty::rc_ptr< ::mosek::fusion::Model > _1735) :    LinearPSDVariable(new mosek::fusion::p_LinearPSDVariable(this)){ mosek::fusion::p_LinearPSDVariable::_get_impl(this)->_initialize(_1734,_1735); }void mosek::fusion::p_LinearPSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _1734,    monty::rc_ptr< ::mosek::fusion::Model > _1735){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1734,_1735);
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->conedim = mosek::fusion::p_LinearPSDVariable::_get_impl(_1734)->conedim;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->varid = mosek::fusion::p_LinearPSDVariable::_get_impl(_1734)->varid;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->name = mosek::fusion::p_LinearPSDVariable::_get_impl(_1734)->name;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->shape = mosek::fusion::p_LinearPSDVariable::_get_impl(_1734)->shape;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->nativeidxs = mosek::fusion::p_LinearPSDVariable::_get_impl(_1734)->nativeidxs;
  }
}mosek::fusion::LinearPSDVariable::t mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1736,    const std::string &  _1737,    int _1738,    std::shared_ptr< monty::ndarray< int,1 > > _1739,    int _1740,    std::shared_ptr< monty::ndarray< long long,1 > > _1741){ return new mosek::fusion::LinearPSDVariable(_1736,_1737,_1738,_1739,_1740,_1741); }mosek::fusion::LinearPSDVariable::LinearPSDVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1736,    const std::string &  _1737,    int _1738,    std::shared_ptr< monty::ndarray< int,1 > > _1739,    int _1740,    std::shared_ptr< monty::ndarray< long long,1 > > _1741) :    LinearPSDVariable(new mosek::fusion::p_LinearPSDVariable(this)){ mosek::fusion::p_LinearPSDVariable::_get_impl(this)->_initialize(_1736,_1737,_1738,_1739,_1740,_1741); }void mosek::fusion::p_LinearPSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1736,    const std::string &  _1737,    int _1738,    std::shared_ptr< monty::ndarray< int,1 > > _1739,    int _1740,    std::shared_ptr< monty::ndarray< long long,1 > > _1741){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1739(_1739 ? _1739->raw() : nullptr, _1739 ? _1739->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1741(_1741 ? _1741->raw() : nullptr, _1741 ? _1741->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1736,_1737,_1739,_1738,nullptr,::mosek::fusion::p_LinearPSDVariable::globalNativeIndexes(_1741));
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->name = _1737;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->conedim = _1740;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->varid = _1738;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->shape = _1739;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->nativeidxs = _1741;
  }
}void mosek::fusion::p_LinearPSDVariable::flushNames(){
}
std::string mosek::fusion::LinearPSDVariable :: toString() { return mosek::fusion::p_LinearPSDVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_LinearPSDVariable::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1742 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _1742->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PSDVariable("));
  if (((int)((name).size()) > (int)0))
  {
    {
      _1742->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("',"));
    }
  }
  {}
  _1742->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
  int _9351 = (int)1;
  int _9352 = (int)((shape)->size(0));
  for (int _1743 = _9351; _1743 < _9352; ++_1743)
  {
    {
      _1742->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_1743)));
    }
  }
  _1742->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _1742->toString();
}
void mosek::fusion::LinearPSDVariable :: make_continuous(std::shared_ptr< monty::ndarray< long long,1 > > _1744) { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->make_continuous(_1744); }void mosek::fusion::p_LinearPSDVariable::make_continuous(std::shared_ptr< monty::ndarray< long long,1 > > _1744){
  _checked_ptr_1<long long> _ptr__1744(_1744 ? _1744->raw() : nullptr, _1744 ? _1744->size(0) : 0);
}
void mosek::fusion::LinearPSDVariable :: make_integer(std::shared_ptr< monty::ndarray< long long,1 > > _1745) { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->make_integer(_1745); }void mosek::fusion::p_LinearPSDVariable::make_integer(std::shared_ptr< monty::ndarray< long long,1 > > _1745){
  _checked_ptr_1<long long> _ptr__1745(_1745 ? _1745->raw() : nullptr, _1745 ? _1745->size(0) : 0);
  throw ::mosek::fusion::UnimplementedError(std::string ("Cannot make PSDVariable elements integer"));
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_LinearPSDVariable::__mosek_2fusion_2LinearPSDVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1746){
  return (::mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable(::mosek::fusion::LinearPSDVariable::t(_pubthis),_1746)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_LinearPSDVariable::globalNativeIndexes(std::shared_ptr< monty::ndarray< long long,1 > > _1747){
  _checked_ptr_1<long long> _ptr__1747(_1747 ? _1747->raw() : nullptr, _1747 ? _1747->size(0) : 0);
  std::vector<long long> _9353;
  for (int _1748 = (int)0, _9354 = (int)((_1747)->size(0)); _1748 < _9354 ; ++_1748)
  {
    _9353.push_back((-safe_add( _ptr__1747[_1748],(int)1 )));
  }
  auto _9355 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9353.size()),_9353.begin(),_9353.end()));
  return _9355;
}
void mosek::fusion::p_LinearPSDVariable::destroy(){shape.reset();nativeidxs.reset();}void mosek::fusion::LinearPSDVariable::destroy() { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->destroy(); }mosek::fusion::PSDVariable::PSDVariable(mosek::fusion::p_PSDVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "PSDVariable()" << this << std::endl; */ }mosek::fusion::PSDVariable::~PSDVariable() {  /* std::cout << "~PSDVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_PSDVariable::p_PSDVariable  (::mosek::fusion::PSDVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::PSDVariable::t mosek::fusion::p_PSDVariable::_new_PSDVariable  (monty::rc_ptr< ::mosek::fusion::PSDVariable > _1749,    monty::rc_ptr< ::mosek::fusion::Model > _1750){ return new mosek::fusion::PSDVariable(_1749,_1750); }mosek::fusion::PSDVariable::PSDVariable  (monty::rc_ptr< ::mosek::fusion::PSDVariable > _1749,    monty::rc_ptr< ::mosek::fusion::Model > _1750) :    PSDVariable(new mosek::fusion::p_PSDVariable(this)){ mosek::fusion::p_PSDVariable::_get_impl(this)->_initialize(_1749,_1750); }void mosek::fusion::p_PSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::PSDVariable > _1749,    monty::rc_ptr< ::mosek::fusion::Model > _1750){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1749,_1750);
    varid = mosek::fusion::p_PSDVariable::_get_impl(_1749)->varid;
    nativeidxs = mosek::fusion::p_PSDVariable::_get_impl(_1749)->nativeidxs;
    name = mosek::fusion::p_PSDVariable::_get_impl(_1749)->name;
    shape = mosek::fusion::p_PSDVariable::_get_impl(_1749)->shape;
    conedim1 = mosek::fusion::p_PSDVariable::_get_impl(_1749)->conedim1;
    conedim2 = mosek::fusion::p_PSDVariable::_get_impl(_1749)->conedim2;
  }
}mosek::fusion::PSDVariable::t mosek::fusion::p_PSDVariable::_new_PSDVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1751,    const std::string &  _1752,    int _1753,    std::shared_ptr< monty::ndarray< int,1 > > _1754,    int _1755,    int _1756,    std::shared_ptr< monty::ndarray< long long,1 > > _1757){ return new mosek::fusion::PSDVariable(_1751,_1752,_1753,_1754,_1755,_1756,_1757); }mosek::fusion::PSDVariable::PSDVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1751,    const std::string &  _1752,    int _1753,    std::shared_ptr< monty::ndarray< int,1 > > _1754,    int _1755,    int _1756,    std::shared_ptr< monty::ndarray< long long,1 > > _1757) :    PSDVariable(new mosek::fusion::p_PSDVariable(this)){ mosek::fusion::p_PSDVariable::_get_impl(this)->_initialize(_1751,_1752,_1753,_1754,_1755,_1756,_1757); }void mosek::fusion::p_PSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1751,    const std::string &  _1752,    int _1753,    std::shared_ptr< monty::ndarray< int,1 > > _1754,    int _1755,    int _1756,    std::shared_ptr< monty::ndarray< long long,1 > > _1757){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1754(_1754 ? _1754->raw() : nullptr, _1754 ? _1754->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1757(_1757 ? _1757->raw() : nullptr, _1757 ? _1757->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1751,_1752,_1754,_1753,nullptr,::mosek::fusion::p_PSDVariable::fullnativeidxs(_1754,_1755,_1756,_1757));
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->varid = _1753;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->nativeidxs = _1757;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->name = _1752;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->shape = _1754;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->conedim1 = _1755;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->conedim2 = _1756;
  }
}void mosek::fusion::p_PSDVariable::flushNames(){
}
std::string mosek::fusion::PSDVariable :: toString() { return mosek::fusion::p_PSDVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_PSDVariable::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1758 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _1758->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PSDVariable("));
  if (((int)((name).size()) > (int)0))
  {
    {
      _1758->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("',"));
    }
  }
  {}
  _1758->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
  int _9356 = (int)1;
  int _9357 = (int)((shape)->size(0));
  for (int _1759 = _9356; _1759 < _9357; ++_1759)
  {
    {
      _1758->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_1759)));
    }
  }
  _1758->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _1758->toString();
}
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::PSDVariable :: __mosek_2fusion_2PSDVariable__elementDesc(long long _1760,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1761) { return mosek::fusion::p_PSDVariable::_get_impl(this)->__mosek_2fusion_2PSDVariable__elementDesc(_1760,_1761); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::PSDVariable::elementDesc(long long _1760,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1761) { return __mosek_2fusion_2PSDVariable__elementDesc(_1760,_1761); }
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_PSDVariable::__mosek_2fusion_2PSDVariable__elementDesc(long long _1760,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1761){
  _pubthis->elementName(_1760,_1761);
  _1761->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" : element in positive semidefinite cone"));
  return _1761;
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_PSDVariable::__mosek_2fusion_2PSDVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1762){
  return (::mosek::fusion::p_PSDVariable::_new_PSDVariable(::mosek::fusion::PSDVariable::t(_pubthis),_1762)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_PSDVariable::fullnativeidxs(std::shared_ptr< monty::ndarray< int,1 > > _1763,int _1764,int _1765,std::shared_ptr< monty::ndarray< long long,1 > > _1766){
  _checked_ptr_1<int> _ptr__1763(_1763 ? _1763->raw() : nullptr, _1763 ? _1763->size(0) : 0);
  _checked_ptr_1<long long> _ptr__1766(_1766 ? _1766->raw() : nullptr, _1766 ? _1766->size(0) : 0);
  int _1767 = (int)((_1763)->size(0));
  bool _1768 = (_1764 < _1765);
  int _9358;
  bool _9359 = _1768;
  if (_9359)
  {
    _9358 = _1764;
  }
  else
  {
    _9358 = _1765;
  }
  int _1769 = _9358;
  int _9360;
  bool _9361 = (!_1768);
  if (_9361)
  {
    _9360 = _1764;
  }
  else
  {
    _9360 = _1765;
  }
  int _1770 = _9360;
  int _1771 = (int)1;
  int _9362 = (int)0;
  int _9363 = _1769;
  for (int _1772 = _9362; _1772 < _9363; ++_1772)
  {
    {
      _1771 *= _ptr__1763[_1772];
    }
  }
  int _1773 = _ptr__1763[_1769];
  int _1774 = (int)1;
  int _9364 = safe_add( _1769,(int)1 );
  int _9365 = _1770;
  for (int _1775 = _9364; _1775 < _9365; ++_1775)
  {
    {
      _1774 *= _ptr__1763[_1775];
    }
  }
  int _1776 = _ptr__1763[_1770];
  int _1777 = (int)1;
  int _9366 = safe_add( _1770,(int)1 );
  int _9367 = _1767;
  for (int _1778 = _9366; _1778 < _9367; ++_1778)
  {
    {
      _1777 *= _ptr__1763[_1778];
    }
  }
  int _1779 = safe_mul( safe_mul( safe_mul( safe_mul( _1771,_1773 ),_1774 ),_1776 ),_1777 );
  std::shared_ptr< monty::ndarray< long long,1 > > _1780 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1779)));
  _checked_ptr_1<long long> _ptr__1780(_1780 ? _1780->raw() : nullptr,_1780 ? _1780->size(0) : 0);
  int _1781 = _1777;
  int _1782 = safe_mul( _1781,_1776 );
  int _1783 = safe_mul( _1782,_1774 );
  int _1784 = safe_mul( _1783,_1783 );
  {
    int _1785 = (int)0;
    int _9368 = (int)0;
    int _9369 = _1771;
    for (int _1786 = _9368; _1786 < _9369; ++_1786)
    {
      {
        int _9370 = (int)0;
        int _9371 = _1776;
        for (int _1787 = _9370; _1787 < _9371; ++_1787)
        {
          {
            int _9372 = (int)0;
            int _9373 = _1774;
            for (int _1788 = _9372; _1788 < _9373; ++_1788)
            {
              {
                int _9374 = _1787;
                int _9375 = _1773;
                for (int _1789 = _9374; _1789 < _9375; ++_1789)
                {
                  {
                    int _9376 = (int)0;
                    int _9377 = _1777;
                    for (int _1790 = _9376; _1790 < _9377; ++_1790)
                    {
                      {
                        _ptr__1780[safe_add( safe_add( safe_add( safe_add( safe_mul( _1786,_1784 ),safe_mul( _1789,_1783 ) ),safe_mul( _1788,_1782 ) ),safe_mul( _1787,_1781 ) ),_1790 )] = (-safe_add( _ptr__1766[_1785],(int)1 ));
                        _ptr__1780[safe_add( safe_add( safe_add( safe_add( safe_mul( _1786,_1784 ),safe_mul( _1787,_1783 ) ),safe_mul( _1788,_1782 ) ),safe_mul( _1789,_1781 ) ),_1790 )] = (-safe_add( _ptr__1766[_1785],(int)1 ));
                        ++ _1785;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return _1780;
}
void mosek::fusion::p_PSDVariable::destroy(){shape.reset();nativeidxs.reset();}void mosek::fusion::PSDVariable::destroy() { mosek::fusion::p_PSDVariable::_get_impl(this)->destroy(); }mosek::fusion::SymLinearVariable::SymLinearVariable(mosek::fusion::p_SymLinearVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "SymLinearVariable()" << this << std::endl; */ }mosek::fusion::SymLinearVariable::~SymLinearVariable() {  /* std::cout << "~SymLinearVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_SymLinearVariable::p_SymLinearVariable  (::mosek::fusion::SymLinearVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SymLinearVariable::t mosek::fusion::p_SymLinearVariable::_new_SymLinearVariable  (monty::rc_ptr< ::mosek::fusion::SymLinearVariable > _1791,    monty::rc_ptr< ::mosek::fusion::Model > _1792){ return new mosek::fusion::SymLinearVariable(_1791,_1792); }mosek::fusion::SymLinearVariable::SymLinearVariable  (monty::rc_ptr< ::mosek::fusion::SymLinearVariable > _1791,    monty::rc_ptr< ::mosek::fusion::Model > _1792) :    SymLinearVariable(new mosek::fusion::p_SymLinearVariable(this)){ mosek::fusion::p_SymLinearVariable::_get_impl(this)->_initialize(_1791,_1792); }void mosek::fusion::p_SymLinearVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::SymLinearVariable > _1791,    monty::rc_ptr< ::mosek::fusion::Model > _1792){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1791,_1792);
    names_flushed = mosek::fusion::p_SymLinearVariable::_get_impl(_1791)->names_flushed;
    name = mosek::fusion::p_SymLinearVariable::_get_impl(_1791)->name;
    sparsity = mosek::fusion::p_SymLinearVariable::_get_impl(_1791)->sparsity;
    nativeidxs = mosek::fusion::p_SymLinearVariable::_get_impl(_1791)->nativeidxs;
    dim = mosek::fusion::p_SymLinearVariable::_get_impl(_1791)->dim;
  }
}mosek::fusion::SymLinearVariable::t mosek::fusion::p_SymLinearVariable::_new_SymLinearVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1793,    const std::string &  _1794,    long long _1795,    int _1796,    std::shared_ptr< monty::ndarray< long long,1 > > _1797,    std::shared_ptr< monty::ndarray< int,1 > > _1798){ return new mosek::fusion::SymLinearVariable(_1793,_1794,_1795,_1796,_1797,_1798); }mosek::fusion::SymLinearVariable::SymLinearVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1793,    const std::string &  _1794,    long long _1795,    int _1796,    std::shared_ptr< monty::ndarray< long long,1 > > _1797,    std::shared_ptr< monty::ndarray< int,1 > > _1798) :    SymLinearVariable(new mosek::fusion::p_SymLinearVariable(this)){ mosek::fusion::p_SymLinearVariable::_get_impl(this)->_initialize(_1793,_1794,_1795,_1796,_1797,_1798); }void mosek::fusion::p_SymLinearVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1793,    const std::string &  _1794,    long long _1795,    int _1796,    std::shared_ptr< monty::ndarray< long long,1 > > _1797,    std::shared_ptr< monty::ndarray< int,1 > > _1798){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__1797(_1797 ? _1797->raw() : nullptr, _1797 ? _1797->size(0) : 0);
    _checked_ptr_1<int> _ptr__1798(_1798 ? _1798->raw() : nullptr, _1798 ? _1798->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1793,_1794,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1796),(int)(_1796)}),_1795,::mosek::fusion::p_SymLinearVariable::mirror_sp(_1796,_1797),::mosek::fusion::p_SymLinearVariable::mirror_idxs(_1796,_1797,_1798));
    names_flushed = false;
    mosek::fusion::p_SymLinearVariable::_get_impl(::mosek::fusion::SymLinearVariable::t(_pubthis))->name = _1794;
    mosek::fusion::p_SymLinearVariable::_get_impl(::mosek::fusion::SymLinearVariable::t(_pubthis))->nativeidxs = _1798;
    mosek::fusion::p_SymLinearVariable::_get_impl(::mosek::fusion::SymLinearVariable::t(_pubthis))->sparsity = _1797;
    mosek::fusion::p_SymLinearVariable::_get_impl(::mosek::fusion::SymLinearVariable::t(_pubthis))->dim = _1796;
  }
}void mosek::fusion::p_SymLinearVariable::flushNames(){
  monty::rc_ptr< ::mosek::fusion::Model > _1799 = _pubthis->__mosek_2fusion_2BaseVariable__getModel();
  if (((!names_flushed) && ((int)((name).size()) > (int)0)))
  {
    {
      if ((NULL == sparsity.get()))
      {
        {
          int _9378 = (int)0;
          int _9379 = (int)((nativeidxs)->size(0));
          for (int _1800 = _9378; _1800 < _9379; ++_1800)
          {
            {
              std::string _9380;
              bool _9381 = ((int)((name).size()) == (int)0);
              if (_9381)
              {
                _9380 = std::string ("");
              }
              else
              {
                _9380 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a((_1800 / dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a((_1800 % dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"))->toString();
              }
              mosek::fusion::p_Model::_get_impl(_1799.get())->varname(((*nativeidxs)(_1800)),_9380);
            }
          }
        }
      }
      else
      {
        {
          int _9382 = (int)0;
          int _9383 = (int)((sparsity)->size(0));
          for (int _1801 = _9382; _1801 < _9383; ++_1801)
          {
            {
              mosek::fusion::p_Model::_get_impl(_1799.get())->varname(((*nativeidxs)(_1801)),::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a((((*sparsity)(_1801)) / dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a((((*sparsity)(_1801)) % dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"))->toString());
            }
          }
        }
      }
      names_flushed = true;
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_SymLinearVariable::__mosek_2fusion_2SymLinearVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1802){
  return (::mosek::fusion::p_SymLinearVariable::_new_SymLinearVariable(::mosek::fusion::SymLinearVariable::t(_pubthis),_1802)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_SymLinearVariable::mirror_idxs(int _1803,std::shared_ptr< monty::ndarray< long long,1 > > _1804,std::shared_ptr< monty::ndarray< int,1 > > _1805){
  _checked_ptr_1<long long> _ptr__1804(_1804 ? _1804->raw() : nullptr, _1804 ? _1804->size(0) : 0);
  _checked_ptr_1<int> _ptr__1805(_1805 ? _1805->raw() : nullptr, _1805 ? _1805->size(0) : 0);
  if ((NULL == _1804.get()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _1806 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( _1803,_1803 ))));
      _checked_ptr_1<long long> _ptr__1806(_1806 ? _1806->raw() : nullptr,_1806 ? _1806->size(0) : 0);
      int _1807 = (int)0;
      {
        int _9384 = (int)0;
        int _9385 = _1803;
        for (int _1808 = _9384; _1808 < _9385; ++_1808)
        {
          {
            _ptr__1806[safe_add( safe_mul( _1808,_1803 ),_1808 )] = safe_add( _ptr__1805[_1807],(int)1 );
            ++ _1807;
            int _9386 = safe_add( _1808,(int)1 );
            int _9387 = _1803;
            for (int _1809 = _9386; _1809 < _9387; ++_1809)
            {
              {
                _ptr__1806[safe_add( safe_mul( _1808,_1803 ),_1809 )] = safe_add( _ptr__1805[_1807],(int)1 );
                _ptr__1806[safe_add( safe_mul( _1809,_1803 ),_1808 )] = safe_add( _ptr__1805[_1807],(int)1 );
                ++ _1807;
              }
            }
          }
        }
      }
      return _1806;
    }
  }
  else
  {
    {
      int _1810 = (int)0;
      {
        int _9388 = (int)0;
        int _9389 = (int)((_1804)->size(0));
        for (int _1811 = _9388; _1811 < _9389; ++_1811)
        {
          {
            int _9390;
            bool _9391 = ((_ptr__1804[_1811] % safe_add( _1803,(int)1 )) == (int)0);
            if (_9391)
            {
              _9390 = (int)1;
            }
            else
            {
              _9390 = (int)2;
            }
            _1810 += _9390;
          }
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1812 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1810)));
      _checked_ptr_1<long long> _ptr__1812(_1812 ? _1812->raw() : nullptr,_1812 ? _1812->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _1813 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1810)));
      _checked_ptr_1<long long> _ptr__1813(_1813 ? _1813->raw() : nullptr,_1813 ? _1813->size(0) : 0);
      {
        int _1814 = (int)0;
        int _9392 = (int)0;
        int _9393 = (int)((_1804)->size(0));
        for (int _1815 = _9392; _1815 < _9393; ++_1815)
        {
          {
            long long _1816 = (_ptr__1804[_1815] / _1803);
            long long _1817 = (_ptr__1804[_1815] % _1803);
            _ptr__1812[_1814] = _ptr__1804[_1815];
            _ptr__1813[_1814] = safe_add( _ptr__1805[_1815],(int)1 );
            ++ _1814;
            if ((_1816 != _1817))
            {
              {
                _ptr__1812[_1814] = safe_add( safe_mul( _1817,_1803 ),_1816 );
                _ptr__1813[_1814] = safe_add( _ptr__1805[_1815],(int)1 );
                ++ _1814;
              }
            }
            {}
          }
        }
      }
      std::vector<long long> _9394;
      for (int _1819 = (int)0, _9395 = _1810; _1819 < _9395 ; ++_1819)
      {
        _9394.push_back(_1819);
      }
      auto _9396 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9394.size()),_9394.begin(),_9394.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _1818 = _9396;
      _checked_ptr_1<long long> _ptr__1818(_1818 ? _1818->raw() : nullptr,_1818 ? _1818->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_1818,_1812,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_1810));
      std::vector<long long> _9397;
      for (int _1820 = (int)0, _9398 = _1810; _1820 < _9398 ; ++_1820)
      {
        _9397.push_back(_ptr__1813[_ptr__1818[_1820]]);
      }
      auto _9399 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9397.size()),_9397.begin(),_9397.end()));
      return _9399;
    }
  }
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_SymLinearVariable::mirror_sp(int _1821,std::shared_ptr< monty::ndarray< long long,1 > > _1822){
  _checked_ptr_1<long long> _ptr__1822(_1822 ? _1822->raw() : nullptr, _1822 ? _1822->size(0) : 0);
  if ((NULL == _1822.get()))
  {
    {
      return nullptr;
    }
  }
  else
  {
    {
      int _1823 = (int)0;
      {
        int _9400 = (int)0;
        int _9401 = (int)((_1822)->size(0));
        for (int _1824 = _9400; _1824 < _9401; ++_1824)
        {
          {
            int _9402;
            bool _9403 = ((_ptr__1822[_1824] % safe_add( _1821,(int)1 )) == (int)0);
            if (_9403)
            {
              _9402 = (int)1;
            }
            else
            {
              _9402 = (int)2;
            }
            _1823 += _9402;
          }
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1825 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1823)));
      _checked_ptr_1<long long> _ptr__1825(_1825 ? _1825->raw() : nullptr,_1825 ? _1825->size(0) : 0);
      {
        int _1826 = (int)0;
        int _9404 = (int)0;
        int _9405 = (int)((_1822)->size(0));
        for (int _1827 = _9404; _1827 < _9405; ++_1827)
        {
          {
            long long _1828 = (_ptr__1822[_1827] / _1821);
            long long _1829 = (_ptr__1822[_1827] % _1821);
            _ptr__1825[_1826] = _ptr__1822[_1827];
            ++ _1826;
            if ((_1828 != _1829))
            {
              {
                _ptr__1825[_1826] = safe_add( safe_mul( _1829,_1821 ),_1828 );
                ++ _1826;
              }
            }
            {}
          }
        }
      }
      std::vector<long long> _9406;
      for (int _1831 = (int)0, _9407 = _1823; _1831 < _9407 ; ++_1831)
      {
        _9406.push_back(_1831);
      }
      auto _9408 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9406.size()),_9406.begin(),_9406.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _1830 = _9408;
      _checked_ptr_1<long long> _ptr__1830(_1830 ? _1830->raw() : nullptr,_1830 ? _1830->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_1830,_1825,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_1823));
      std::vector<long long> _9409;
      for (int _1832 = (int)0, _9410 = _1823; _1832 < _9410 ; ++_1832)
      {
        _9409.push_back(_ptr__1825[_ptr__1830[_1832]]);
      }
      auto _9411 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9409.size()),_9409.begin(),_9409.end()));
      return _9411;
    }
  }
}
void mosek::fusion::p_SymLinearVariable::destroy(){sparsity.reset();nativeidxs.reset();}void mosek::fusion::SymLinearVariable::destroy() { mosek::fusion::p_SymLinearVariable::_get_impl(this)->destroy(); }mosek::fusion::LinearVariable::LinearVariable(mosek::fusion::p_LinearVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "LinearVariable()" << this << std::endl; */ }mosek::fusion::LinearVariable::~LinearVariable() {  /* std::cout << "~LinearVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_LinearVariable::p_LinearVariable  (::mosek::fusion::LinearVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::LinearVariable::t mosek::fusion::p_LinearVariable::_new_LinearVariable  (monty::rc_ptr< ::mosek::fusion::LinearVariable > _1833,    monty::rc_ptr< ::mosek::fusion::Model > _1834){ return new mosek::fusion::LinearVariable(_1833,_1834); }mosek::fusion::LinearVariable::LinearVariable  (monty::rc_ptr< ::mosek::fusion::LinearVariable > _1833,    monty::rc_ptr< ::mosek::fusion::Model > _1834) :    LinearVariable(new mosek::fusion::p_LinearVariable(this)){ mosek::fusion::p_LinearVariable::_get_impl(this)->_initialize(_1833,_1834); }void mosek::fusion::p_LinearVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearVariable > _1833,    monty::rc_ptr< ::mosek::fusion::Model > _1834){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1833,_1834);
    names_flushed = mosek::fusion::p_LinearVariable::_get_impl(_1833)->names_flushed;
    nativeidxs = mosek::fusion::p_LinearVariable::_get_impl(_1833)->nativeidxs;
    sparsity = mosek::fusion::p_LinearVariable::_get_impl(_1833)->sparsity;
    shape = mosek::fusion::p_LinearVariable::_get_impl(_1833)->shape;
    name = mosek::fusion::p_LinearVariable::_get_impl(_1833)->name;
  }
}mosek::fusion::LinearVariable::t mosek::fusion::p_LinearVariable::_new_LinearVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1835,    const std::string &  _1836,    long long _1837,    std::shared_ptr< monty::ndarray< int,1 > > _1838,    std::shared_ptr< monty::ndarray< long long,1 > > _1839,    std::shared_ptr< monty::ndarray< int,1 > > _1840){ return new mosek::fusion::LinearVariable(_1835,_1836,_1837,_1838,_1839,_1840); }mosek::fusion::LinearVariable::LinearVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1835,    const std::string &  _1836,    long long _1837,    std::shared_ptr< monty::ndarray< int,1 > > _1838,    std::shared_ptr< monty::ndarray< long long,1 > > _1839,    std::shared_ptr< monty::ndarray< int,1 > > _1840) :    LinearVariable(new mosek::fusion::p_LinearVariable(this)){ mosek::fusion::p_LinearVariable::_get_impl(this)->_initialize(_1835,_1836,_1837,_1838,_1839,_1840); }void mosek::fusion::p_LinearVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1835,    const std::string &  _1836,    long long _1837,    std::shared_ptr< monty::ndarray< int,1 > > _1838,    std::shared_ptr< monty::ndarray< long long,1 > > _1839,    std::shared_ptr< monty::ndarray< int,1 > > _1840){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1838(_1838 ? _1838->raw() : nullptr, _1838 ? _1838->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1839(_1839 ? _1839->raw() : nullptr, _1839 ? _1839->size(0) : 0);
    _checked_ptr_1<int> _ptr__1840(_1840 ? _1840->raw() : nullptr, _1840 ? _1840->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1835,_1836,_1838,_1837,_1839,::mosek::fusion::p_LinearVariable::globalNativeIndexes(_1840));
    names_flushed = false;
    mosek::fusion::p_LinearVariable::_get_impl(::mosek::fusion::LinearVariable::t(_pubthis))->name = _1836;
    mosek::fusion::p_LinearVariable::_get_impl(::mosek::fusion::LinearVariable::t(_pubthis))->nativeidxs = _1840;
    mosek::fusion::p_LinearVariable::_get_impl(::mosek::fusion::LinearVariable::t(_pubthis))->sparsity = _1839;
    mosek::fusion::p_LinearVariable::_get_impl(::mosek::fusion::LinearVariable::t(_pubthis))->shape = _1838;
  }
}std::string mosek::fusion::LinearVariable :: toString() { return mosek::fusion::p_LinearVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_LinearVariable::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1841 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _1841->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("LinearVariable(("));
  if (((int)((shape)->size(0)) > (int)0))
  {
    {
      _1841->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
      int _9412 = (int)1;
      int _9413 = (int)((shape)->size(0));
      for (int _1842 = _9412; _1842 < _9413; ++_1842)
      {
        {
          _1841->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_1842)));
        }
      }
    }
  }
  {}
  _1841->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  if ((NULL != sparsity.get()))
  {
    {
      _1841->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",sparse"));
    }
  }
  {}
  _1841->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _1841->toString();
}
void mosek::fusion::p_LinearVariable::flushNames(){
  monty::rc_ptr< ::mosek::fusion::Model > _1843 = _pubthis->__mosek_2fusion_2BaseVariable__getModel();
  if ((_pubthis->getSize() == (int)0))
  {
    {
      names_flushed = true;
    }
  }
  else
  {
    {
      if (((int)((name).size()) == (int)0))
      {
        {
          names_flushed = true;
        }
      }
      {}
    }
  }
  if ((!names_flushed))
  {
    {
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1844 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      _1844->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
      if ((_pubthis->getND() > (int)0))
      {
        {
          _1844->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
          int _9414 = (int)1;
          int _9415 = _pubthis->getND();
          for (int _1845 = _9414; _1845 < _9415; ++_1845)
          {
            {
              _1844->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1845);
            }
          }
        }
      }
      {}
      _1844->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
      std::shared_ptr< monty::ndarray< int,1 > > _9416;
      bool _9417 = (_pubthis->getND() > (int)0);
      if (_9417)
      {
        _9416 = _pubthis->getShape();
      }
      else
      {
        _9416 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1)});
      }
      mosek::fusion::p_Model::_get_impl(_1843.get())->varnames(nativeidxs,_1844->toString(),_9416,sparsity);
      names_flushed = true;
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_LinearVariable::__mosek_2fusion_2LinearVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1846){
  return (::mosek::fusion::p_LinearVariable::_new_LinearVariable(::mosek::fusion::LinearVariable::t(_pubthis),_1846)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_LinearVariable::globalNativeIndexes(std::shared_ptr< monty::ndarray< int,1 > > _1847){
  _checked_ptr_1<int> _ptr__1847(_1847 ? _1847->raw() : nullptr, _1847 ? _1847->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1848 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1847)->size(0)))));
  _checked_ptr_1<long long> _ptr__1848(_1848 ? _1848->raw() : nullptr,_1848 ? _1848->size(0) : 0);
  int _9418 = (int)0;
  int _9419 = (int)((_1847)->size(0));
  for (int _1849 = _9418; _1849 < _9419; ++_1849)
  {
    {
      _ptr__1848[_1849] = _ptr__1847[_1849];
    }
  }
  return _1848;
}
void mosek::fusion::p_LinearVariable::destroy(){shape.reset();sparsity.reset();nativeidxs.reset();}void mosek::fusion::LinearVariable::destroy() { mosek::fusion::p_LinearVariable::_get_impl(this)->destroy(); }mosek::fusion::ConicVariable::ConicVariable(mosek::fusion::p_ConicVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "ConicVariable()" << this << std::endl; */ }mosek::fusion::ConicVariable::~ConicVariable() {  /* std::cout << "~ConicVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_ConicVariable::p_ConicVariable  (::mosek::fusion::ConicVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ConicVariable::t mosek::fusion::p_ConicVariable::_new_ConicVariable  (monty::rc_ptr< ::mosek::fusion::ConicVariable > _1850,    monty::rc_ptr< ::mosek::fusion::Model > _1851){ return new mosek::fusion::ConicVariable(_1850,_1851); }mosek::fusion::ConicVariable::ConicVariable  (monty::rc_ptr< ::mosek::fusion::ConicVariable > _1850,    monty::rc_ptr< ::mosek::fusion::Model > _1851) :    ConicVariable(new mosek::fusion::p_ConicVariable(this)){ mosek::fusion::p_ConicVariable::_get_impl(this)->_initialize(_1850,_1851); }void mosek::fusion::p_ConicVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::ConicVariable > _1850,    monty::rc_ptr< ::mosek::fusion::Model > _1851){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1850,_1851);
    names_flushed = mosek::fusion::p_ConicVariable::_get_impl(_1850)->names_flushed;
    shape = mosek::fusion::p_ConicVariable::_get_impl(_1850)->shape;
    nativeidxs = mosek::fusion::p_ConicVariable::_get_impl(_1850)->nativeidxs;
    shape = mosek::fusion::p_ConicVariable::_get_impl(_1850)->shape;
    varid = mosek::fusion::p_ConicVariable::_get_impl(_1850)->varid;
    name = mosek::fusion::p_ConicVariable::_get_impl(_1850)->name;
  }
}mosek::fusion::ConicVariable::t mosek::fusion::p_ConicVariable::_new_ConicVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1852,    const std::string &  _1853,    int _1854,    std::shared_ptr< monty::ndarray< int,1 > > _1855,    std::shared_ptr< monty::ndarray< int,1 > > _1856){ return new mosek::fusion::ConicVariable(_1852,_1853,_1854,_1855,_1856); }mosek::fusion::ConicVariable::ConicVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1852,    const std::string &  _1853,    int _1854,    std::shared_ptr< monty::ndarray< int,1 > > _1855,    std::shared_ptr< monty::ndarray< int,1 > > _1856) :    ConicVariable(new mosek::fusion::p_ConicVariable(this)){ mosek::fusion::p_ConicVariable::_get_impl(this)->_initialize(_1852,_1853,_1854,_1855,_1856); }void mosek::fusion::p_ConicVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1852,    const std::string &  _1853,    int _1854,    std::shared_ptr< monty::ndarray< int,1 > > _1855,    std::shared_ptr< monty::ndarray< int,1 > > _1856){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1855(_1855 ? _1855->raw() : nullptr, _1855 ? _1855->size(0) : 0);
    _checked_ptr_1<int> _ptr__1856(_1856 ? _1856->raw() : nullptr, _1856 ? _1856->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1852,_1853,_1855,_1854,nullptr,::mosek::fusion::p_ConicVariable::globalNativeIndexes(_1856));
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->name = _1853;
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->names_flushed = false;
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->varid = _1854;
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->shape = _1855;
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->nativeidxs = _1856;
  }
}std::string mosek::fusion::ConicVariable :: toString() { return mosek::fusion::p_ConicVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_ConicVariable::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1857 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _1857->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ConicVariable( "));
  if (((int)((name).size()) > (int)0))
  {
    {
      _1857->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("',"));
    }
  }
  {}
  _1857->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("("));
  _1857->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
  int _9420 = (int)1;
  int _9421 = (int)((shape)->size(0));
  for (int _1858 = _9420; _1858 < _9421; ++_1858)
  {
    {
      _1857->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_1858)));
    }
  }
  _1857->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") )"));
  return _1857->toString();
}
void mosek::fusion::p_ConicVariable::flushNames(){
  monty::rc_ptr< ::mosek::fusion::Model > _1859 = _pubthis->__mosek_2fusion_2BaseVariable__getModel();
  if ((_pubthis->getSize() == (int)0))
  {
    {
      names_flushed = true;
    }
  }
  else
  {
    {
      if (((int)((name).size()) == (int)0))
      {
        {
          names_flushed = true;
        }
      }
      {}
    }
  }
  if ((!names_flushed))
  {
    {
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1860 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      _1860->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
      _1860->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
      int _9422 = (int)1;
      int _9423 = _pubthis->getND();
      for (int _1861 = _9422; _1861 < _9423; ++_1861)
      {
        {
          _1860->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1861);
        }
      }
      _1860->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
      std::shared_ptr< monty::ndarray< int,1 > > _9424;
      bool _9425 = (_pubthis->getND() > (int)0);
      if (_9425)
      {
        _9424 = _pubthis->getShape();
      }
      else
      {
        _9424 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0)});
      }
      mosek::fusion::p_Model::_get_impl(_1859.get())->varnames(nativeidxs,_1860->toString(),_9424,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr));
      names_flushed = true;
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_ConicVariable::__mosek_2fusion_2ConicVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1862){
  return (::mosek::fusion::p_ConicVariable::_new_ConicVariable(::mosek::fusion::ConicVariable::t(_pubthis),_1862)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_ConicVariable::globalNativeIndexes(std::shared_ptr< monty::ndarray< int,1 > > _1863){
  _checked_ptr_1<int> _ptr__1863(_1863 ? _1863->raw() : nullptr, _1863 ? _1863->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1864 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1863)->size(0)))));
  _checked_ptr_1<long long> _ptr__1864(_1864 ? _1864->raw() : nullptr,_1864 ? _1864->size(0) : 0);
  int _9426 = (int)0;
  int _9427 = (int)((_1863)->size(0));
  for (int _1865 = _9426; _1865 < _9427; ++_1865)
  {
    {
      _ptr__1864[_1865] = _ptr__1863[_1865];
    }
  }
  return _1864;
}
void mosek::fusion::p_ConicVariable::destroy(){nativeidxs.reset();shape.reset();}void mosek::fusion::ConicVariable::destroy() { mosek::fusion::p_ConicVariable::_get_impl(this)->destroy(); }mosek::fusion::ModelVariable::ModelVariable(mosek::fusion::p_ModelVariable *_impl) : mosek::fusion::BaseVariable(_impl) { /*std::cout << "ModelVariable()" << this << std::endl; */ }mosek::fusion::ModelVariable::~ModelVariable() {  /* std::cout << "~ModelVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_ModelVariable::p_ModelVariable  (::mosek::fusion::ModelVariable * _pubthis) :     mosek::fusion::p_BaseVariable(_pubthis),    _pubthis(_pubthis){}void mosek::fusion::p_ModelVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::ModelVariable > _1866,    monty::rc_ptr< ::mosek::fusion::Model > _1867){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseVariable::_initialize(_1866,_1867);
    name = mosek::fusion::p_ModelVariable::_get_impl(_1866)->name;
    varid = mosek::fusion::p_ModelVariable::_get_impl(_1866)->varid;
    nativeidxs = mosek::fusion::p_ModelVariable::_get_impl(_1866)->nativeidxs;
    shape = mosek::fusion::p_ModelVariable::_get_impl(_1866)->shape;
    sparsity = mosek::fusion::p_ModelVariable::_get_impl(_1866)->sparsity;
  }
}void mosek::fusion::p_ModelVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1868,    const std::string &  _1869,    std::shared_ptr< monty::ndarray< int,1 > > _1870,    long long _1871,    std::shared_ptr< monty::ndarray< long long,1 > > _1872,    std::shared_ptr< monty::ndarray< long long,1 > > _1873){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1870(_1870 ? _1870->raw() : nullptr, _1870 ? _1870->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1872(_1872 ? _1872->raw() : nullptr, _1872 ? _1872->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1873(_1873 ? _1873->raw() : nullptr, _1873 ? _1873->size(0) : 0);
    mosek::fusion::p_BaseVariable::_initialize(_1868,_1870,_1872,_1873);
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->name = _1869;
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->varid = _1871;
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->shape = _1870;
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->sparsity = _1872;
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->nativeidxs = _1873;
  }
}void mosek::fusion::ModelVariable :: elementName(long long _1874,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1875) { mosek::fusion::p_ModelVariable::_get_impl(this)->elementName(_1874,_1875); }void mosek::fusion::p_ModelVariable::elementName(long long _1874,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1875){
  std::string _9428;
  bool _9429 = ((int)((name).size()) == (int)0);
  if (_9429)
  {
    _9428 = std::string ("_");
  }
  else
  {
    _9428 = name;
  }
  _1875->__mosek_2fusion_2Utils_2StringBuffer__a(_9428)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a(::mosek::fusion::p_Set::indexToString(shape,_1874))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
}
void mosek::fusion::ModelVariable :: remove() { mosek::fusion::p_ModelVariable::_get_impl(this)->remove(); }void mosek::fusion::p_ModelVariable::remove(){
  mosek::fusion::p_Model::_get_impl(_pubthis->__mosek_2fusion_2BaseVariable__getModel().get())->removeVariableBlock(varid);
}
void mosek::fusion::p_ModelVariable::destroy(){sparsity.reset();shape.reset();nativeidxs.reset();}void mosek::fusion::ModelVariable::destroy() { mosek::fusion::p_ModelVariable::_get_impl(this)->destroy(); }mosek::fusion::NilVariable::NilVariable(mosek::fusion::p_NilVariable *_impl) : mosek::fusion::BaseVariable(_impl) { /*std::cout << "NilVariable()" << this << std::endl; */ }mosek::fusion::NilVariable::~NilVariable() {  /* std::cout << "~NilVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_NilVariable::p_NilVariable  (::mosek::fusion::NilVariable * _pubthis) :     mosek::fusion::p_BaseVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::NilVariable::t mosek::fusion::p_NilVariable::_new_NilVariable  (std::shared_ptr< monty::ndarray< int,1 > > _1877){ return new mosek::fusion::NilVariable(_1877); }mosek::fusion::NilVariable::NilVariable  (std::shared_ptr< monty::ndarray< int,1 > > _1877) :    NilVariable(new mosek::fusion::p_NilVariable(this)){ mosek::fusion::p_NilVariable::_get_impl(this)->_initialize(_1877); }void mosek::fusion::p_NilVariable::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _1877){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1877(_1877 ? _1877->raw() : nullptr, _1877 ? _1877->size(0) : 0);
    mosek::fusion::p_BaseVariable::_initialize(nullptr,::mosek::fusion::Utils::Tools::arraycopy(_1877),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))));
    std::vector<int> _9430;
    for (int _1878 = (int)0, _9431 = (int)((_1877)->size(0)); _1878 < _9431 ; ++_1878)
    {
      _9430.push_back(_ptr__1877[_1878]);
    }
    auto _9432 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9430.size()),_9430.begin(),_9430.end()));
    mosek::fusion::p_NilVariable::_get_impl(::mosek::fusion::NilVariable::t(_pubthis))->shape = _9432;
  }
}mosek::fusion::NilVariable::t mosek::fusion::p_NilVariable::_new_NilVariable  (){ return new mosek::fusion::NilVariable(); }mosek::fusion::NilVariable::NilVariable  () :    NilVariable(new mosek::fusion::p_NilVariable(this)){ mosek::fusion::p_NilVariable::_get_impl(this)->_initialize(); }void mosek::fusion::p_NilVariable::_initialize  (){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_NilVariable::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))));
  }
}void mosek::fusion::p_NilVariable::flushNames(){
}
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__elementDesc(long long _1879,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1880) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__elementDesc(_1879,_1880); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::NilVariable::elementDesc(long long _1879,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1880) { return __mosek_2fusion_2NilVariable__elementDesc(_1879,_1880); }
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__elementDesc(long long _1879,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1880){
  return _1880;
}
void mosek::fusion::NilVariable :: elementName(long long _1881,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1882) { mosek::fusion::p_NilVariable::_get_impl(this)->elementName(_1881,_1882); }void mosek::fusion::p_NilVariable::elementName(long long _1881,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1882){
}
int mosek::fusion::NilVariable :: numInst() { return mosek::fusion::p_NilVariable::_get_impl(this)->numInst(); }int mosek::fusion::p_NilVariable::numInst(){
  return (int)0;
}
int mosek::fusion::NilVariable :: inst(int _1883,std::shared_ptr< monty::ndarray< long long,1 > > _1884,std::shared_ptr< monty::ndarray< long long,1 > > _1885) { return mosek::fusion::p_NilVariable::_get_impl(this)->inst(_1883,_1884,_1885); }int mosek::fusion::p_NilVariable::inst(int _1883,std::shared_ptr< monty::ndarray< long long,1 > > _1884,std::shared_ptr< monty::ndarray< long long,1 > > _1885){
  _checked_ptr_1<long long> _ptr__1884(_1884 ? _1884->raw() : nullptr, _1884 ? _1884->size(0) : 0);
  _checked_ptr_1<long long> _ptr__1885(_1885 ? _1885->raw() : nullptr, _1885 ? _1885->size(0) : 0);
  return (int)0;
}
void mosek::fusion::NilVariable :: inst(int _1886,std::shared_ptr< monty::ndarray< long long,1 > > _1887) { mosek::fusion::p_NilVariable::_get_impl(this)->inst(_1886,_1887); }void mosek::fusion::p_NilVariable::inst(int _1886,std::shared_ptr< monty::ndarray< long long,1 > > _1887){
  _checked_ptr_1<long long> _ptr__1887(_1887 ? _1887->raw() : nullptr, _1887 ? _1887->size(0) : 0);
}
void mosek::fusion::NilVariable :: set_values(std::shared_ptr< monty::ndarray< double,1 > > _1888,bool _1889) { mosek::fusion::p_NilVariable::_get_impl(this)->set_values(_1888,_1889); }void mosek::fusion::p_NilVariable::set_values(std::shared_ptr< monty::ndarray< double,1 > > _1888,bool _1889){
  _checked_ptr_1<double> _ptr__1888(_1888 ? _1888->raw() : nullptr, _1888 ? _1888->size(0) : 0);
}
void mosek::fusion::NilVariable :: values(int _1890,std::shared_ptr< monty::ndarray< double,1 > > _1891,bool _1892) { mosek::fusion::p_NilVariable::_get_impl(this)->values(_1890,_1891,_1892); }void mosek::fusion::p_NilVariable::values(int _1890,std::shared_ptr< monty::ndarray< double,1 > > _1891,bool _1892){
  _checked_ptr_1<double> _ptr__1891(_1891 ? _1891->raw() : nullptr, _1891 ? _1891->size(0) : 0);
}
void mosek::fusion::NilVariable :: make_continuous() { mosek::fusion::p_NilVariable::_get_impl(this)->make_continuous(); }void mosek::fusion::p_NilVariable::make_continuous(){
}
void mosek::fusion::NilVariable :: make_integer() { mosek::fusion::p_NilVariable::_get_impl(this)->make_integer(); }void mosek::fusion::p_NilVariable::make_integer(){
}
std::string mosek::fusion::NilVariable :: toString() { return mosek::fusion::p_NilVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_NilVariable::toString(){
  return std::string ("NilVariable");
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__index(std::shared_ptr< monty::ndarray< int,1 > > _1893) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__index(_1893); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::index(std::shared_ptr< monty::ndarray< int,1 > > _1893) { return __mosek_2fusion_2NilVariable__index(_1893); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int,1 > > _1893) { return __mosek_2fusion_2NilVariable__index(_1893); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2Variable__index(std::shared_ptr< monty::ndarray< int,1 > > _1893) { return __mosek_2fusion_2NilVariable__index(_1893); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__index(std::shared_ptr< monty::ndarray< int,1 > > _1893){
  _checked_ptr_1<int> _ptr__1893(_1893 ? _1893->raw() : nullptr, _1893 ? _1893->size(0) : 0);
  std::vector<int> _9433;
  for (int _1894 = (int)0, _9434 = (int)((shape)->size(0)); _1894 < _9434 ; ++_1894)
  {
    _9433.push_back((int)1);
  }
  auto _9435 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9433.size()),_9433.begin(),_9433.end()));
  return (::mosek::fusion::p_NilVariable::_new_NilVariable(_9435)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__index(int _1895) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__index(_1895); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::index(int _1895) { return __mosek_2fusion_2NilVariable__index(_1895); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2BaseVariable__index(int _1895) { return __mosek_2fusion_2NilVariable__index(_1895); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2Variable__index(int _1895) { return __mosek_2fusion_2NilVariable__index(_1895); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__index(int _1895){
  std::vector<int> _9436;
  for (int _1896 = (int)0, _9437 = (int)((shape)->size(0)); _1896 < _9437 ; ++_1896)
  {
    _9436.push_back((int)1);
  }
  auto _9438 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9436.size()),_9436.begin(),_9436.end()));
  return (::mosek::fusion::p_NilVariable::_new_NilVariable(_9438)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1897,std::shared_ptr< monty::ndarray< int,1 > > _1898) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__slice(_1897,_1898); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::slice(std::shared_ptr< monty::ndarray< int,1 > > _1897,std::shared_ptr< monty::ndarray< int,1 > > _1898) { return __mosek_2fusion_2NilVariable__slice(_1897,_1898); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2BaseVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1897,std::shared_ptr< monty::ndarray< int,1 > > _1898) { return __mosek_2fusion_2NilVariable__slice(_1897,_1898); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2Variable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1897,std::shared_ptr< monty::ndarray< int,1 > > _1898) { return __mosek_2fusion_2NilVariable__slice(_1897,_1898); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1897,std::shared_ptr< monty::ndarray< int,1 > > _1898){
  _checked_ptr_1<int> _ptr__1897(_1897 ? _1897->raw() : nullptr, _1897 ? _1897->size(0) : 0);
  _checked_ptr_1<int> _ptr__1898(_1898 ? _1898->raw() : nullptr, _1898 ? _1898->size(0) : 0);
  if ((((int)((shape)->size(0)) != (int)((_1897)->size(0))) || ((int)((shape)->size(0)) != (int)((_1898)->size(0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching slice shape"));
    }
  }
  {}
  int _9439 = (int)0;
  int _9440 = (int)((_1897)->size(0));
  for (int _1899 = _9439; _1899 < _9440; ++_1899)
  {
    {
      if (((_ptr__1898[_1899] > _ptr__1897[_1899]) || ((_ptr__1897[_1899] < (int)0) || (_ptr__1898[_1899] >= ((*shape)(_1899))))))
      {
        {
          throw ::mosek::fusion::SliceError(std::string ("Slice is out of bounds"));
        }
      }
      {}
    }
  }
  std::vector<int> _9441;
  for (int _1900 = (int)0, _9442 = (int)((shape)->size(0)); _1900 < _9442 ; ++_1900)
  {
    _9441.push_back((_ptr__1898[_1900] - _ptr__1897[_1900]));
  }
  auto _9443 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9441.size()),_9441.begin(),_9441.end()));
  return (::mosek::fusion::p_NilVariable::_new_NilVariable(_9443)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__slice(int _1901,int _1902) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__slice(_1901,_1902); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::slice(int _1901,int _1902) { return __mosek_2fusion_2NilVariable__slice(_1901,_1902); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2BaseVariable__slice(int _1901,int _1902) { return __mosek_2fusion_2NilVariable__slice(_1901,_1902); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2Variable__slice(int _1901,int _1902) { return __mosek_2fusion_2NilVariable__slice(_1901,_1902); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__slice(int _1901,int _1902){
  if (((_1902 > _1901) || ((_1901 < (int)0) || (_1902 > ((*shape)((int)0))))))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("Slice is out of bounds"));
    }
  }
  else if(((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching slice shape"));
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_NilVariable::_new_NilVariable(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((_1902 - _1901))}))).as<::mosek::fusion::Variable>();
    }
  }
}
void mosek::fusion::p_NilVariable::destroy(){shape.reset();}void mosek::fusion::NilVariable::destroy() { mosek::fusion::p_NilVariable::_get_impl(this)->destroy(); }mosek::fusion::BaseVariable::BaseVariable(mosek::fusion::p_BaseVariable *_impl) : _impl(_impl) { /*std::cout << "BaseVariable() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::BaseVariable::~BaseVariable() { delete _impl; _impl = nullptr; }mosek::fusion::p_BaseVariable::p_BaseVariable  (::mosek::fusion::BaseVariable * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::p_BaseVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::BaseVariable > _1903,    monty::rc_ptr< ::mosek::fusion::Model > _1904){monty::rc_reserve __reserve_this(_pubthis);   {
    model = _1904;
    shape = mosek::fusion::p_BaseVariable::_get_impl(_1903)->shape;
    sparsity = mosek::fusion::p_BaseVariable::_get_impl(_1903)->sparsity;
    nativeidxs = mosek::fusion::p_BaseVariable::_get_impl(_1903)->nativeidxs;
  }
}void mosek::fusion::p_BaseVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1905,    std::shared_ptr< monty::ndarray< int,1 > > _1906,    std::shared_ptr< monty::ndarray< long long,1 > > _1907,    std::shared_ptr< monty::ndarray< long long,1 > > _1908){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1906(_1906 ? _1906->raw() : nullptr, _1906 ? _1906->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1907(_1907 ? _1907->raw() : nullptr, _1907 ? _1907->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1908(_1908 ? _1908->raw() : nullptr, _1908 ? _1908->size(0) : 0);
    model = _1905;
    mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->shape = _1906;
    mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->sparsity = _1907;
    mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->nativeidxs = _1908;
  }
}std::string mosek::fusion::BaseVariable :: toString() { return mosek::fusion::p_BaseVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_BaseVariable::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1909 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _1909->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Variable(("));
  if (((int)((shape)->size(0)) > (int)0))
  {
    {
      _1909->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
      int _9444 = (int)1;
      int _9445 = (int)((shape)->size(0));
      for (int _1910 = _9444; _1910 < _9445; ++_1910)
      {
        {
          _1909->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_1910)));
        }
      }
    }
  }
  {}
  _1909->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("))"));
  return _1909->toString();
}
void mosek::fusion::BaseVariable :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _1911,monty::rc_ptr< ::mosek::fusion::WorkStack > _1912,monty::rc_ptr< ::mosek::fusion::WorkStack > _1913) { mosek::fusion::p_BaseVariable::_get_impl(this)->eval(_1911,_1912,_1913); }void mosek::fusion::p_BaseVariable::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _1911,monty::rc_ptr< ::mosek::fusion::WorkStack > _1912,monty::rc_ptr< ::mosek::fusion::WorkStack > _1913){
  int _1914 = (int)((nativeidxs)->size(0));
  int _1915 = _1914;
  int _1916 = (int)((shape)->size(0));
  bool _1917 = (NULL != sparsity.get());
  _1911->alloc_expr(_1916,_1915,_1914,_1917);
  int _1918 = mosek::fusion::p_WorkStack::_get_impl(_1911)->ptr_base;
  int _1919 = mosek::fusion::p_WorkStack::_get_impl(_1911)->nidxs_base;
  int _1920 = mosek::fusion::p_WorkStack::_get_impl(_1911)->sp_base;
  int _1921 = mosek::fusion::p_WorkStack::_get_impl(_1911)->cof_base;
  int _1922 = mosek::fusion::p_WorkStack::_get_impl(_1911)->shape_base;
  std::shared_ptr< monty::ndarray< int,1 > > _1923 = mosek::fusion::p_WorkStack::_get_impl(_1911)->i32;
  _checked_ptr_1<int> _ptr__1923(_1923 ? _1923->raw() : nullptr,_1923 ? _1923->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1924 = mosek::fusion::p_WorkStack::_get_impl(_1911)->i64;
  _checked_ptr_1<long long> _ptr__1924(_1924 ? _1924->raw() : nullptr,_1924 ? _1924->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1925 = mosek::fusion::p_WorkStack::_get_impl(_1911)->f64;
  _checked_ptr_1<double> _ptr__1925(_1925 ? _1925->raw() : nullptr,_1925 ? _1925->size(0) : 0);
  int _9446 = (int)0;
  int _9447 = _1916;
  for (int _1926 = _9446; _1926 < _9447; ++_1926)
  {
    {
      _ptr__1923[safe_add( _1922,_1926 )] = ((*shape)(_1926));
    }
  }
  {
    int _9448 = (int)0;
    int _9449 = safe_add( _1914,(int)1 );
    for (int _1927 = _9448; _1927 < _9449; ++_1927)
    {
      {
        _ptr__1923[safe_add( _1918,_1927 )] = _1927;
      }
    }
    int _9450 = (int)0;
    int _9451 = _1914;
    for (int _1928 = _9450; _1928 < _9451; ++_1928)
    {
      {
        _ptr__1924[safe_add( _1919,_1928 )] = ((*nativeidxs)(_1928));
      }
    }
    if (_1917)
    {
      {
        int _9452 = (int)0;
        int _9453 = _1914;
        for (int _1929 = _9452; _1929 < _9453; ++_1929)
        {
          {
            _ptr__1924[safe_add( _1920,_1929 )] = ((*sparsity)(_1929));
          }
        }
      }
    }
    {}
    int _9454 = (int)0;
    int _9455 = _1914;
    for (int _1930 = _9454; _1930 < _9455; ++_1930)
    {
      {
        _ptr__1925[safe_add( _1921,_1930 )] = 1.0;
      }
    }
  }
}
void mosek::fusion::BaseVariable :: remove() { mosek::fusion::p_BaseVariable::_get_impl(this)->remove(); }void mosek::fusion::p_BaseVariable::remove(){
  throw ::mosek::fusion::DeletionError(std::string ("Only original variables can be removed"));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__fromTril(int _1931,int _1932) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__fromTril(_1931,_1932); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::fromTril(int _1931,int _1932) { return __mosek_2fusion_2BaseVariable__fromTril(_1931,_1932); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__fromTril(int _1931,int _1932){
  if (((_1931 < (int)0) || (_1931 >= (int)((shape)->size(0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid dimension"));
    }
  }
  else if((((*shape)(_1931)) != (safe_mul( _1932,safe_add( _1932,(int)1 ) ) / (int)2)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid shape for operation"));
    }
  }
  {}
  int _1933 = (int)1;
  int _9456 = (int)0;
  int _9457 = _1931;
  for (int _1934 = _9456; _1934 < _9457; ++_1934)
  {
    {
      _1933 *= ((*shape)(_1934));
    }
  }
  int _1935 = ((*shape)(_1931));
  int _1936 = (int)1;
  int _9458 = safe_add( _1931,(int)1 );
  int _9459 = (int)((shape)->size(0));
  for (int _1937 = _9458; _1937 < _9459; ++_1937)
  {
    {
      _1936 *= ((*shape)(_1937));
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1938 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( (int)((shape)->size(0)),(int)1 ))));
  _checked_ptr_1<int> _ptr__1938(_1938 ? _1938->raw() : nullptr,_1938 ? _1938->size(0) : 0);
  int _9460 = (int)0;
  int _9461 = _1931;
  for (int _1939 = _9460; _1939 < _9461; ++_1939)
  {
    {
      _ptr__1938[_1939] = ((*shape)(_1939));
    }
  }
  _ptr__1938[_1931] = _1932;
  _ptr__1938[safe_add( _1931,(int)1 )] = _1932;
  int _9462 = safe_add( _1931,(int)1 );
  int _9463 = (int)((shape)->size(0));
  for (int _1940 = _9462; _1940 < _9463; ++_1940)
  {
    {
      _ptr__1938[safe_add( _1940,(int)1 )] = ((*shape)(_1940));
    }
  }
  if ((NULL == sparsity.get()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _1941 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( safe_mul( safe_mul( _1933,_1932 ),_1932 ),_1936 ))));
      _checked_ptr_1<long long> _ptr__1941(_1941 ? _1941->raw() : nullptr,_1941 ? _1941->size(0) : 0);
      int _1942 = (int)0;
      int _9464 = (int)0;
      int _9465 = _1933;
      for (int _1943 = _9464; _1943 < _9465; ++_1943)
      {
        {
          int _9466 = (int)0;
          int _9467 = _1932;
          for (int _1944 = _9466; _1944 < _9467; ++_1944)
          {
            {
              int _9468 = (int)0;
              int _9469 = _1932;
              for (int _1945 = _9468; _1945 < _9469; ++_1945)
              {
                {
                  int _9470 = (int)0;
                  int _9471 = _1936;
                  for (int _1946 = _9470; _1946 < _9471; ++_1946)
                  {
                    {
                      if ((_1944 >= _1945))
                      {
                        {
                          _ptr__1941[_1942] = ((*nativeidxs)(safe_add( safe_add( safe_mul( safe_mul( _1943,_1935 ),_1936 ),safe_mul( safe_add( (safe_mul( _1944,safe_add( _1944,(int)1 ) ) / (int)2),_1945 ),_1936 ) ),_1946 )));
                        }
                      }
                      else
                      {
                        {
                          _ptr__1941[_1942] = ((*nativeidxs)(safe_add( safe_add( safe_mul( safe_mul( _1943,_1935 ),_1936 ),safe_mul( safe_add( (safe_mul( _1945,safe_add( _1945,(int)1 ) ) / (int)2),_1944 ),_1936 ) ),_1946 )));
                        }
                      }
                      ++ _1942;
                    }
                  }
                }
              }
            }
          }
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_1938,nullptr,_1941)).as<::mosek::fusion::Variable>();
    }
  }
  else
  {
    {
      int _1947 = (int)0;
      int _9472 = (int)0;
      int _9473 = (int)((sparsity)->size(0));
      for (int _1948 = _9472; _1948 < _9473; ++_1948)
      {
        {
          long long _1949 = ((((*sparsity)(_1948)) / _1936) % _1935);
          int _1950 = (int)(((-(int)1) + ::mosek::fusion::Utils::Tools::sqrt((double)(safe_mul( safe_add( (int)1,safe_mul( (int)2,_1949 ) ),safe_add( (int)1,safe_mul( (int)2,_1949 ) ) )))) / (int)4);
          long long _1951 = (((*sparsity)(_1948)) - (safe_mul( _1950,safe_add( _1950,(int)1 ) ) / (int)2));
          if ((_1950 == _1951))
          {
            {
              _1947 += (int)1;
            }
          }
          else
          {
            {
              _1947 += (int)2;
            }
          }
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1952 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1947)));
      _checked_ptr_1<long long> _ptr__1952(_1952 ? _1952->raw() : nullptr,_1952 ? _1952->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _1953 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1947)));
      _checked_ptr_1<long long> _ptr__1953(_1953 ? _1953->raw() : nullptr,_1953 ? _1953->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _1954 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1947)));
      _checked_ptr_1<long long> _ptr__1954(_1954 ? _1954->raw() : nullptr,_1954 ? _1954->size(0) : 0);
      int _9474 = (int)0;
      int _9475 = _1947;
      for (int _1955 = _9474; _1955 < _9475; ++_1955)
      {
        {
          _ptr__1954[_1955] = _1955;
        }
      }
      int _1956 = (int)0;
      int _9476 = (int)0;
      int _9477 = (int)((sparsity)->size(0));
      for (int _1957 = _9476; _1957 < _9477; ++_1957)
      {
        {
          long long _1958 = (((*sparsity)(_1957)) / safe_mul( _1935,_1936 ));
          long long _1959 = ((((*sparsity)(_1957)) / _1936) % _1935);
          long long _1960 = (((*sparsity)(_1957)) % _1936);
          int _1961 = (int)(((-(int)1) + ::mosek::fusion::Utils::Tools::sqrt((double)(safe_mul( safe_add( (int)1,safe_mul( (int)2,_1959 ) ),safe_add( (int)1,safe_mul( (int)2,_1959 ) ) )))) / (int)4);
          long long _1962 = (((*sparsity)(_1957)) - (safe_mul( _1961,safe_add( _1961,(int)1 ) ) / (int)2));
          if ((_1961 == _1962))
          {
            {
              _ptr__1952[_1956] = ((*nativeidxs)(_1957));
              _ptr__1953[_1956] = safe_add( safe_add( safe_mul( safe_mul( safe_mul( _1958,_1932 ),_1932 ),_1936 ),safe_mul( safe_add( safe_mul( _1961,_1932 ),_1962 ),_1936 ) ),_1960 );
              _1956 += (int)1;
            }
          }
          else
          {
            {
              _ptr__1952[_1956] = ((*nativeidxs)(_1957));
              _ptr__1952[safe_add( _1956,(int)1 )] = ((*nativeidxs)(_1957));
              _ptr__1953[_1956] = safe_add( safe_add( safe_mul( safe_mul( safe_mul( _1958,_1932 ),_1932 ),_1936 ),safe_mul( safe_add( safe_mul( _1961,_1932 ),_1962 ),_1936 ) ),_1960 );
              _ptr__1953[safe_add( _1956,(int)1 )] = safe_add( safe_add( safe_mul( safe_mul( safe_mul( _1958,_1932 ),_1932 ),_1936 ),safe_mul( safe_add( safe_mul( _1962,_1932 ),_1961 ),_1936 ) ),_1960 );
              _1956 += (int)2;
            }
          }
        }
      }
      ::mosek::fusion::p_CommonTools::argQsort(_1954,_1952,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_1947));
      std::vector<long long> _9478;
      for (int _1963 = (int)0, _9479 = _1947; _1963 < _9479 ; ++_1963)
      {
        _9478.push_back(_ptr__1953[_ptr__1954[_1963]]);
      }
      auto _9480 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9478.size()),_9478.begin(),_9478.end()));
      std::vector<long long> _9481;
      for (int _1964 = (int)0, _9482 = _1947; _1964 < _9482 ; ++_1964)
      {
        _9481.push_back(_ptr__1952[_ptr__1954[_1964]]);
      }
      auto _9483 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9481.size()),_9481.begin(),_9481.end()));
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_1938,_9480,_9483)).as<::mosek::fusion::Variable>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__fromTril(int _1965) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__fromTril(_1965); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::fromTril(int _1965) { return __mosek_2fusion_2BaseVariable__fromTril(_1965); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__fromTril(int _1965) { return __mosek_2fusion_2BaseVariable__fromTril(_1965); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__fromTril(int _1965){
  return _pubthis->__mosek_2fusion_2BaseVariable__fromTril((int)0,_1965);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__tril(int _1966,int _1967) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__tril(_1966,_1967); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::tril(int _1966,int _1967) { return __mosek_2fusion_2BaseVariable__tril(_1966,_1967); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__tril(int _1966,int _1967){
  if (((_1966 < (int)0) || ((_1966 >= _1967) || (_1967 >= (int)((shape)->size(0))))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid dimension specification"));
    }
  }
  else
  {
    {
      if ((((*shape)(_1966)) != ((*shape)(_1967))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Operation only valid for square variables"));
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1968 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(((int)((shape)->size(0)) - (int)1))));
  _checked_ptr_1<int> _ptr__1968(_1968 ? _1968->raw() : nullptr,_1968 ? _1968->size(0) : 0);
  int _9484 = (int)0;
  int _9485 = _1966;
  for (int _1969 = _9484; _1969 < _9485; ++_1969)
  {
    {
      _ptr__1968[_1969] = ((*shape)(_1969));
    }
  }
  _ptr__1968[_1966] = (safe_mul( ((*shape)(_1966)),safe_add( ((*shape)(_1966)),(int)1 ) ) / (int)2);
  int _9486 = safe_add( _1966,(int)1 );
  int _9487 = _1967;
  for (int _1970 = _9486; _1970 < _9487; ++_1970)
  {
    {
      _ptr__1968[_1970] = ((*shape)(_1970));
    }
  }
  int _9488 = safe_add( _1967,(int)1 );
  int _9489 = (int)((shape)->size(0));
  for (int _1971 = _9488; _1971 < _9489; ++_1971)
  {
    {
      _ptr__1968[(_1971 - (int)1)] = ((*shape)(_1971));
    }
  }
  if ((NULL == sparsity.get()))
  {
    {
      int _1972 = (int)1;
      int _9490 = (int)0;
      int _9491 = _1966;
      for (int _1973 = _9490; _1973 < _9491; ++_1973)
      {
        {
          _1972 *= ((*shape)(_1973));
        }
      }
      int _1974 = ((*shape)(_1966));
      int _1975 = (int)1;
      int _9492 = safe_add( _1966,(int)1 );
      int _9493 = _1967;
      for (int _1976 = _9492; _1976 < _9493; ++_1976)
      {
        {
          _1975 *= ((*shape)(_1976));
        }
      }
      int _1977 = ((*shape)(_1967));
      int _1978 = (int)1;
      int _9494 = safe_add( _1967,(int)1 );
      int _9495 = (int)((shape)->size(0));
      for (int _1979 = _9494; _1979 < _9495; ++_1979)
      {
        {
          _1978 *= ((*shape)(_1979));
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1980 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((safe_mul( safe_mul( safe_mul( safe_mul( _1972,_1975 ),_1978 ),_1974 ),safe_add( _1974,(int)1 ) ) / (int)2))));
      _checked_ptr_1<long long> _ptr__1980(_1980 ? _1980->raw() : nullptr,_1980 ? _1980->size(0) : 0);
      int _1981 = (int)0;
      int _9496 = (int)0;
      int _9497 = _1972;
      for (int _1982 = _9496; _1982 < _9497; ++_1982)
      {
        {
          int _9498 = (int)0;
          int _9499 = _1974;
          for (int _1983 = _9498; _1983 < _9499; ++_1983)
          {
            {
              int _9500 = (int)0;
              int _9501 = safe_add( _1983,(int)1 );
              for (int _1984 = _9500; _1984 < _9501; ++_1984)
              {
                {
                  int _9502 = (int)0;
                  int _9503 = _1975;
                  for (int _1985 = _9502; _1985 < _9503; ++_1985)
                  {
                    {
                      int _9504 = (int)0;
                      int _9505 = _1978;
                      for (int _1986 = _9504; _1986 < _9505; ++_1986)
                      {
                        {
                          _ptr__1980[_1981] = ((*nativeidxs)(safe_add( _1986,safe_mul( _1978,safe_add( _1984,safe_mul( _1977,safe_add( _1985,safe_mul( _1975,safe_add( _1983,safe_mul( _1974,_1982 ) ) ) ) ) ) ) )));
                          _1981 += (int)1;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_1968,nullptr,_1980)).as<::mosek::fusion::Variable>();
    }
  }
  else
  {
    {
      int _1987 = (int)1;
      int _9506 = (int)0;
      int _9507 = _1966;
      for (int _1988 = _9506; _1988 < _9507; ++_1988)
      {
        {
          _1987 *= ((*shape)(_1988));
        }
      }
      int _1989 = ((*shape)(_1966));
      int _1990 = (int)1;
      int _9508 = safe_add( _1966,(int)1 );
      int _9509 = _1967;
      for (int _1991 = _9508; _1991 < _9509; ++_1991)
      {
        {
          _1990 *= ((*shape)(_1991));
        }
      }
      int _1992 = ((*shape)(_1967));
      int _1993 = (int)1;
      int _9510 = safe_add( _1967,(int)1 );
      int _9511 = (int)((shape)->size(0));
      for (int _1994 = _9510; _1994 < _9511; ++_1994)
      {
        {
          _1993 *= ((*shape)(_1994));
        }
      }
      int _1995 = (int)1;
      int _1996 = _1993;
      int _1997 = safe_mul( _1996,_1992 );
      int _1998 = safe_mul( _1997,_1990 );
      int _1999 = safe_mul( _1998,_1989 );
      int _2000 = (int)0;
      int _9512 = (int)0;
      int _9513 = (int)((sparsity)->size(0));
      for (int _2001 = _9512; _2001 < _9513; ++_2001)
      {
        {
          if ((((((*sparsity)(_2001)) / _1998) % _1989) >= ((((*sparsity)(_2001)) / _1996) % _1992)))
          {
            {
              ++ _2000;
            }
          }
          {}
        }
      }
      int _2002 = (int)1;
      int _2003 = _1993;
      int _2004 = safe_mul( _2003,_1990 );
      int _2005 = (safe_mul( safe_mul( _2004,_1989 ),safe_add( _1989,(int)1 ) ) / (int)2);
      std::shared_ptr< monty::ndarray< long long,1 > > _2006 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2000)));
      _checked_ptr_1<long long> _ptr__2006(_2006 ? _2006->raw() : nullptr,_2006 ? _2006->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _2007 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2000)));
      _checked_ptr_1<long long> _ptr__2007(_2007 ? _2007->raw() : nullptr,_2007 ? _2007->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _2008 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2000)));
      _checked_ptr_1<long long> _ptr__2008(_2008 ? _2008->raw() : nullptr,_2008 ? _2008->size(0) : 0);
      int _2009 = (int)0;
      {
        int _9514 = (int)0;
        int _9515 = (int)((sparsity)->size(0));
        for (int _2010 = _9514; _2010 < _9515; ++_2010)
        {
          {
            if ((((((*sparsity)(_2010)) / _1998) % _1989) >= ((((*sparsity)(_2010)) / _1996) % _1992)))
            {
              {
                long long _2011 = (((*sparsity)(_2010)) / _1999);
                long long _2012 = ((((*sparsity)(_2010)) / _1998) % _1989);
                long long _2013 = ((((*sparsity)(_2010)) / _1997) % _1990);
                long long _2014 = ((((*sparsity)(_2010)) / _1996) % _1992);
                long long _2015 = ((((*sparsity)(_2010)) / _1995) % _1993);
                _ptr__2007[_2009] = ((*nativeidxs)(_2010));
                _ptr__2008[_2009] = safe_add( safe_add( safe_add( safe_mul( _2005,_2011 ),safe_mul( _2004,safe_add( (safe_mul( _2012,safe_add( _2012,(int)1 ) ) / (int)2),_2014 ) ) ),safe_mul( _2003,_2013 ) ),safe_mul( _2002,_2015 ) );
                ++ _2009;
              }
            }
            {}
          }
        }
        int _9516 = (int)0;
        int _9517 = _2000;
        for (int _2016 = _9516; _2016 < _9517; ++_2016)
        {
          {
            _ptr__2006[_2016] = _2016;
          }
        }
      }
      ::mosek::fusion::p_CommonTools::argQsort(_2006,_2007,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_2000));
      std::shared_ptr< monty::ndarray< long long,1 > > _2017 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2000)));
      _checked_ptr_1<long long> _ptr__2017(_2017 ? _2017->raw() : nullptr,_2017 ? _2017->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _2018 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2000)));
      _checked_ptr_1<long long> _ptr__2018(_2018 ? _2018->raw() : nullptr,_2018 ? _2018->size(0) : 0);
      int _9518 = (int)0;
      int _9519 = _2000;
      for (int _2019 = _9518; _2019 < _9519; ++_2019)
      {
        {
          _ptr__2017[_2019] = _ptr__2007[_ptr__2006[_2019]];
        }
      }
      int _9520 = (int)0;
      int _9521 = _2000;
      for (int _2020 = _9520; _2020 < _9521; ++_2020)
      {
        {
          _ptr__2018[_2020] = _ptr__2008[_ptr__2006[_2020]];
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_1968,_2018,_2017)).as<::mosek::fusion::Variable>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__tril() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__tril(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::tril() { return __mosek_2fusion_2BaseVariable__tril(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__tril() { return __mosek_2fusion_2BaseVariable__tril(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__tril(){
  return _pubthis->__mosek_2fusion_2BaseVariable__tril((int)0,(int)1);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__reshape(int _2021,int _2022,int _2023) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__reshape(_2021,_2022,_2023); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::reshape(int _2021,int _2022,int _2023) { return __mosek_2fusion_2BaseVariable__reshape(_2021,_2022,_2023); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__reshape(int _2021,int _2022,int _2023) { return __mosek_2fusion_2BaseVariable__reshape(_2021,_2022,_2023); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__reshape(int _2021,int _2022,int _2023){
  return _pubthis->__mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2021),(int)(_2022),(int)(_2023)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__reshape(int _2024,int _2025) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__reshape(_2024,_2025); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::reshape(int _2024,int _2025) { return __mosek_2fusion_2BaseVariable__reshape(_2024,_2025); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__reshape(int _2024,int _2025) { return __mosek_2fusion_2BaseVariable__reshape(_2024,_2025); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__reshape(int _2024,int _2025){
  return _pubthis->__mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2024),(int)(_2025)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__reshape(int _2026) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__reshape(_2026); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::reshape(int _2026) { return __mosek_2fusion_2BaseVariable__reshape(_2026); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__reshape(int _2026) { return __mosek_2fusion_2BaseVariable__reshape(_2026); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__reshape(int _2026){
  return _pubthis->__mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2026)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int,1 > > _2027) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__reshape(_2027); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::reshape(std::shared_ptr< monty::ndarray< int,1 > > _2027) { return __mosek_2fusion_2BaseVariable__reshape(_2027); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__reshape(std::shared_ptr< monty::ndarray< int,1 > > _2027) { return __mosek_2fusion_2BaseVariable__reshape(_2027); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int,1 > > _2027){
  _checked_ptr_1<int> _ptr__2027(_2027 ? _2027->raw() : nullptr, _2027 ? _2027->size(0) : 0);
  long long _2028 = (int)1;
  int _9522 = (int)0;
  int _9523 = (int)((_2027)->size(0));
  for (int _2029 = _9522; _2029 < _9523; ++_2029)
  {
    {
      if ((_ptr__2027[_2029] < (int)0))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid shape"));
        }
      }
      {}
      _2028 *= _ptr__2027[_2029];
    }
  }
  if ((_2028 != _pubthis->getSize()))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Shape size does not match variable size"));
    }
  }
  {}
  std::vector<int> _9524;
  for (int _2030 = (int)0, _9525 = (int)((_2027)->size(0)); _2030 < _9525 ; ++_2030)
  {
    _9524.push_back(_ptr__2027[_2030]);
  }
  auto _9526 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9524.size()),_9524.begin(),_9524.end()));
  return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_9526,sparsity,nativeidxs)).as<::mosek::fusion::Variable>();
}
void mosek::fusion::BaseVariable :: setLevel(std::shared_ptr< monty::ndarray< double,1 > > _2031) { mosek::fusion::p_BaseVariable::_get_impl(this)->setLevel(_2031); }void mosek::fusion::p_BaseVariable::setLevel(std::shared_ptr< monty::ndarray< double,1 > > _2031){
  _checked_ptr_1<double> _ptr__2031(_2031 ? _2031->raw() : nullptr, _2031 ? _2031->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      if (((int)((_2031)->size(0)) != (int)((nativeidxs)->size(0))))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Invalid length of solution values vector"));
        }
      }
      {}
      model->setVariableValues(true,nativeidxs,_2031);
    }
  }
  else
  {
    {
      if (((int)((_2031)->size(0)) != _pubthis->getSize()))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Invalid length of solution values vector"));
        }
      }
      {}
      std::vector<double> _9527;
      for (int _2033 = (int)0, _9528 = (int)((nativeidxs)->size(0)); _2033 < _9528 ; ++_2033)
      {
        _9527.push_back(_ptr__2031[((*sparsity)(_2033))]);
      }
      auto _9529 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9527.size()),_9527.begin(),_9527.end()));
      std::shared_ptr< monty::ndarray< double,1 > > _2032 = _9529;
      _checked_ptr_1<double> _ptr__2032(_2032 ? _2032->raw() : nullptr,_2032 ? _2032->size(0) : 0);
      model->setVariableValues(true,nativeidxs,_2032);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__getModel() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__getModel(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::BaseVariable::getModel() { return __mosek_2fusion_2BaseVariable__getModel(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__getModel() { return __mosek_2fusion_2BaseVariable__getModel(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__getModel(){
  return model;
}
int mosek::fusion::BaseVariable :: getND() { return mosek::fusion::p_BaseVariable::_get_impl(this)->getND(); }int mosek::fusion::p_BaseVariable::getND(){
  return (int)((shape)->size(0));
}
int mosek::fusion::BaseVariable :: getDim(int _2034) { return mosek::fusion::p_BaseVariable::_get_impl(this)->getDim(_2034); }int mosek::fusion::p_BaseVariable::getDim(int _2034){
  return ((*shape)(_2034));
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::BaseVariable :: getShape() { return mosek::fusion::p_BaseVariable::_get_impl(this)->getShape(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_BaseVariable::getShape(){
  return ::mosek::fusion::Utils::Tools::arraycopy(shape);
}
long long mosek::fusion::BaseVariable :: getSize() { return mosek::fusion::p_BaseVariable::_get_impl(this)->getSize(); }long long mosek::fusion::p_BaseVariable::getSize(){
  long long _2035 = (long long)1;
  int _9530 = (int)0;
  int _9531 = (int)((shape)->size(0));
  for (int _2036 = _9530; _2036 < _9531; ++_2036)
  {
    {
      _2035 *= ((*shape)(_2036));
    }
  }
  return _2035;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::BaseVariable :: dual() { return mosek::fusion::p_BaseVariable::_get_impl(this)->dual(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_BaseVariable::dual(){
  std::shared_ptr< monty::ndarray< double,1 > > _2037 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((nativeidxs)->size(0)))));
  _checked_ptr_1<double> _ptr__2037(_2037 ? _2037->raw() : nullptr,_2037 ? _2037->size(0) : 0);
  model->getVariableValues(false,nativeidxs,_2037,(int)0);
  if ((NULL != sparsity.get()))
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _2038 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_pubthis->getSize())));
      _checked_ptr_1<double> _ptr__2038(_2038 ? _2038->raw() : nullptr,_2038 ? _2038->size(0) : 0);
      int _9532 = (int)0;
      int _9533 = (int)((nativeidxs)->size(0));
      for (int _2039 = _9532; _2039 < _9533; ++_2039)
      {
        {
          _ptr__2038[((*sparsity)(_2039))] = _ptr__2037[_2039];
        }
      }
      _2037 = _2038;
      _ptr__2037.update(_2037 ? _2037->raw() : nullptr, _2037 ? _2037->size(0) : 0);
    }
  }
  {}
  return _2037;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::BaseVariable :: level() { return mosek::fusion::p_BaseVariable::_get_impl(this)->level(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_BaseVariable::level(){
  std::shared_ptr< monty::ndarray< double,1 > > _2040 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((nativeidxs)->size(0)))));
  _checked_ptr_1<double> _ptr__2040(_2040 ? _2040->raw() : nullptr,_2040 ? _2040->size(0) : 0);
  model->getVariableValues(true,nativeidxs,_2040,(int)0);
  if ((NULL != sparsity.get()))
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _2041 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_pubthis->getSize())));
      _checked_ptr_1<double> _ptr__2041(_2041 ? _2041->raw() : nullptr,_2041 ? _2041->size(0) : 0);
      int _9534 = (int)0;
      int _9535 = (int)((nativeidxs)->size(0));
      for (int _2042 = _9534; _2042 < _9535; ++_2042)
      {
        {
          _ptr__2041[((*sparsity)(_2042))] = _ptr__2040[_2042];
        }
      }
      _2040 = _2041;
      _ptr__2040.update(_2040 ? _2040->raw() : nullptr, _2040 ? _2040->size(0) : 0);
    }
  }
  {}
  return _2040;
}
void mosek::fusion::BaseVariable :: makeContinuous() { mosek::fusion::p_BaseVariable::_get_impl(this)->makeContinuous(); }void mosek::fusion::p_BaseVariable::makeContinuous(){
  _pubthis->make_continuous();
}
void mosek::fusion::BaseVariable :: makeInteger() { mosek::fusion::p_BaseVariable::_get_impl(this)->makeInteger(); }void mosek::fusion::p_BaseVariable::makeInteger(){
  _pubthis->make_integer();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__transpose() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__transpose(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::transpose() { return __mosek_2fusion_2BaseVariable__transpose(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__transpose() { return __mosek_2fusion_2BaseVariable__transpose(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__transpose(){
  if (((int)((shape)->size(0)) == (int)1))
  {
    {
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(((*shape)((int)0)))}),sparsity,nativeidxs)).as<::mosek::fusion::Variable>();
    }
  }
  else if(((int)((shape)->size(0)) > (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid shape for operation"));
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _2043 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((nativeidxs)->size(0)))));
      _checked_ptr_1<long long> _ptr__2043(_2043 ? _2043->raw() : nullptr,_2043 ? _2043->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _9536;
      bool _9537 = (NULL == sparsity.get());
      if (_9537)
      {
        _9536 = nullptr;
      }
      else
      {
        _9536 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((nativeidxs)->size(0)))));
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _2044 = _9536;
      _checked_ptr_1<long long> _ptr__2044(_2044 ? _2044->raw() : nullptr,_2044 ? _2044->size(0) : 0);
      if ((NULL == sparsity.get()))
      {
        {
          int _2045 = (int)0;
          int _9538 = (int)0;
          int _9539 = ((*shape)((int)1));
          for (int _2046 = _9538; _2046 < _9539; ++_2046)
          {
            {
              int _9540 = (int)0;
              int _9541 = ((*shape)((int)0));
              for (int _2047 = _9540; _2047 < _9541; ++_2047)
              {
                {
                  _ptr__2043[_2045] = ((*nativeidxs)(safe_add( safe_mul( _2047,((*shape)((int)1)) ),_2046 )));
                  ++ _2045;
                }
              }
            }
          }
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _2048 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( ((*shape)((int)1)),(int)1 ))));
          _checked_ptr_1<int> _ptr__2048(_2048 ? _2048->raw() : nullptr,_2048 ? _2048->size(0) : 0);
          int _2049 = ((*shape)((int)0));
          int _2050 = ((*shape)((int)1));
          int _9542 = (int)0;
          int _9543 = (int)((sparsity)->size(0));
          for (int _2051 = _9542; _2051 < _9543; ++_2051)
          {
            {
              ++ _ptr__2048[safe_add( (((*sparsity)(_2051)) % _2050),(int)1 )];
            }
          }
          int _9544 = (int)0;
          int _9545 = _2050;
          for (int _2052 = _9544; _2052 < _9545; ++_2052)
          {
            {
              _ptr__2048[safe_add( _2052,(int)1 )] += _ptr__2048[_2052];
            }
          }
          int _9546 = (int)0;
          int _9547 = (int)((sparsity)->size(0));
          for (int _2053 = _9546; _2053 < _9547; ++_2053)
          {
            {
              long long _2054 = (((*sparsity)(_2053)) % _2050);
              _ptr__2043[_ptr__2048[_2054]] = ((*nativeidxs)(_2053));
              _ptr__2044[_ptr__2048[_2054]] = safe_add( (((*sparsity)(_2053)) / _2050),safe_mul( (((*sparsity)(_2053)) % _2050),_2049 ) );
              ++ _ptr__2048[_2054];
            }
          }
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(((*shape)((int)1))),(int)(((*shape)((int)0)))}),_2044,_2043)).as<::mosek::fusion::Variable>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__index(int _2055,int _2056,int _2057) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__index(_2055,_2056,_2057); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index(int _2055,int _2056,int _2057) { return __mosek_2fusion_2BaseVariable__index(_2055,_2056,_2057); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__index(int _2055,int _2056,int _2057) { return __mosek_2fusion_2BaseVariable__index(_2055,_2056,_2057); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__index(int _2055,int _2056,int _2057){
  return _pubthis->__mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2055),(int)(_2056),(int)(_2057)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__index(int _2058,int _2059) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__index(_2058,_2059); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index(int _2058,int _2059) { return __mosek_2fusion_2BaseVariable__index(_2058,_2059); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__index(int _2058,int _2059) { return __mosek_2fusion_2BaseVariable__index(_2058,_2059); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__index(int _2058,int _2059){
  return _pubthis->__mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2058),(int)(_2059)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int,1 > > _2060) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__index(_2060); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index(std::shared_ptr< monty::ndarray< int,1 > > _2060) { return __mosek_2fusion_2BaseVariable__index(_2060); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__index(std::shared_ptr< monty::ndarray< int,1 > > _2060) { return __mosek_2fusion_2BaseVariable__index(_2060); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int,1 > > _2060){
  _checked_ptr_1<int> _ptr__2060(_2060 ? _2060->raw() : nullptr, _2060 ? _2060->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,2 > > _2061 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)1,(int)((_2060)->size(0)))));
  int _9548 = (int)0;
  int _9549 = (int)((_2060)->size(0));
  for (int _2062 = _9548; _2062 < _9549; ++_2062)
  {
    {
      ((*_2061)((int)0,_2062)) = _ptr__2060[_2062];
    }
  }
  return _pubthis->__mosek_2fusion_2BaseVariable__pick(_2061)->__mosek_2fusion_2Variable__reshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__index(int _2063) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__index(_2063); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index(int _2063) { return __mosek_2fusion_2BaseVariable__index(_2063); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__index(int _2063) { return __mosek_2fusion_2BaseVariable__index(_2063); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__index(int _2063){
  return _pubthis->__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2063)}))->__mosek_2fusion_2Variable__reshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _2064,std::shared_ptr< monty::ndarray< int,1 > > _2065,std::shared_ptr< monty::ndarray< int,1 > > _2066) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__pick(_2064,_2065,_2066); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2064,std::shared_ptr< monty::ndarray< int,1 > > _2065,std::shared_ptr< monty::ndarray< int,1 > > _2066) { return __mosek_2fusion_2BaseVariable__pick(_2064,_2065,_2066); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__pick(std::shared_ptr< monty::ndarray< int,1 > > _2064,std::shared_ptr< monty::ndarray< int,1 > > _2065,std::shared_ptr< monty::ndarray< int,1 > > _2066) { return __mosek_2fusion_2BaseVariable__pick(_2064,_2065,_2066); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _2064,std::shared_ptr< monty::ndarray< int,1 > > _2065,std::shared_ptr< monty::ndarray< int,1 > > _2066){
  _checked_ptr_1<int> _ptr__2064(_2064 ? _2064->raw() : nullptr, _2064 ? _2064->size(0) : 0);
  _checked_ptr_1<int> _ptr__2065(_2065 ? _2065->raw() : nullptr, _2065 ? _2065->size(0) : 0);
  _checked_ptr_1<int> _ptr__2066(_2066 ? _2066->raw() : nullptr, _2066 ? _2066->size(0) : 0);
  if (((int)((shape)->size(0)) != (int)3))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  if ((((int)((_2064)->size(0)) != (int)((_2065)->size(0))) || ((int)((_2064)->size(0)) != (int)((_2066)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching argument lengths"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,2 > > _2067 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2064)->size(0)),(int)3)));
  int _9550 = (int)0;
  int _9551 = (int)((_2064)->size(0));
  for (int _2068 = _9550; _2068 < _9551; ++_2068)
  {
    {
      ((*_2067)(_2068,(int)0)) = _ptr__2064[_2068];
      ((*_2067)(_2068,(int)1)) = _ptr__2065[_2068];
      ((*_2067)(_2068,(int)2)) = _ptr__2066[_2068];
    }
  }
  return _pubthis->__mosek_2fusion_2BaseVariable__pick(_2067);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _2069,std::shared_ptr< monty::ndarray< int,1 > > _2070) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__pick(_2069,_2070); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2069,std::shared_ptr< monty::ndarray< int,1 > > _2070) { return __mosek_2fusion_2BaseVariable__pick(_2069,_2070); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__pick(std::shared_ptr< monty::ndarray< int,1 > > _2069,std::shared_ptr< monty::ndarray< int,1 > > _2070) { return __mosek_2fusion_2BaseVariable__pick(_2069,_2070); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _2069,std::shared_ptr< monty::ndarray< int,1 > > _2070){
  _checked_ptr_1<int> _ptr__2069(_2069 ? _2069->raw() : nullptr, _2069 ? _2069->size(0) : 0);
  _checked_ptr_1<int> _ptr__2070(_2070 ? _2070->raw() : nullptr, _2070 ? _2070->size(0) : 0);
  if ((((int)((shape)->size(0)) != (int)2) || ((int)((_2069)->size(0)) != (int)((_2070)->size(0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,2 > > _2071 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2069)->size(0)),(int)2)));
  int _9552 = (int)0;
  int _9553 = (int)((_2069)->size(0));
  for (int _2072 = _9552; _2072 < _9553; ++_2072)
  {
    {
      ((*_2071)(_2072,(int)0)) = _ptr__2069[_2072];
      ((*_2071)(_2072,(int)1)) = _ptr__2070[_2072];
    }
  }
  return _pubthis->__mosek_2fusion_2BaseVariable__pick(_2071);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,2 > > _2073) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__pick(_2073); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick(std::shared_ptr< monty::ndarray< int,2 > > _2073) { return __mosek_2fusion_2BaseVariable__pick(_2073); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__pick(std::shared_ptr< monty::ndarray< int,2 > > _2073) { return __mosek_2fusion_2BaseVariable__pick(_2073); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,2 > > _2073){
  if (((int)((shape)->size(0)) != (int)((_2073)->size(1))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  bool _2074 = false;
  int _9554 = (int)0;
  int _9555 = (int)((_2073)->size(0));
  for (int _2075 = _9554; _2075 < _9555; ++_2075)
  {
    {
      int _9556 = (int)0;
      int _9557 = (int)((_2073)->size(1));
      for (int _2076 = _9556; _2076 < _9557; ++_2076)
      {
        {
          if (((((*_2073)(_2075,_2076)) < (int)0) || (((*_2073)(_2075,_2076)) >= ((*shape)(_2076)))))
          {
            {
              _2074 = true;
            }
          }
          {}
        }
      }
    }
  }
  if (_2074)
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  int _2077 = (int)((shape)->size(0));
  std::shared_ptr< monty::ndarray< long long,1 > > _2078 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2077)));
  _checked_ptr_1<long long> _ptr__2078(_2078 ? _2078->raw() : nullptr,_2078 ? _2078->size(0) : 0);
  _ptr__2078[(_2077 - (int)1)] = (int)1;
  int _9558 = (int)1;
  int _9559 = _2077;
  for (int _2079 = _9558; _2079 < _9559; ++_2079)
  {
    {
      _ptr__2078[((_2077 - _2079) - (int)1)] = safe_mul( _ptr__2078[(_2077 - _2079)],((*shape)((_2077 - _2079))) );
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _2080 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2073)->size(0)))});
  _checked_ptr_1<int> _ptr__2080(_2080 ? _2080->raw() : nullptr,_2080 ? _2080->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2081;
  _checked_ptr_1<long long> _ptr__2081(_2081 ? _2081->raw() : nullptr,_2081 ? _2081->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2082 = nullptr;
  _checked_ptr_1<long long> _ptr__2082(_2082 ? _2082->raw() : nullptr,_2082 ? _2082->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      _2081 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_2073)->size(0)))));
      _ptr__2081.update(_2081 ? _2081->raw() : nullptr, _2081 ? _2081->size(0) : 0);
      {
        int _9560 = (int)0;
        int _9561 = (int)((_2073)->size(0));
        for (int _2083 = _9560; _2083 < _9561; ++_2083)
        {
          {
            long long _2084 = (long long)0;
            int _9562 = (int)0;
            int _9563 = _2077;
            for (int _2085 = _9562; _2085 < _9563; ++_2085)
            {
              {
                _2084 += safe_mul( _ptr__2078[_2085],((*_2073)(_2083,_2085)) );
              }
            }
            _ptr__2081[_2083] = ((*nativeidxs)(_2084));
          }
        }
      }
    }
  }
  else
  {
    {
      int _2086 = (int)0;
      int _9564 = (int)0;
      int _9565 = (int)((_2073)->size(0));
      for (int _2087 = _9564; _2087 < _9565; ++_2087)
      {
        {
          long long _2088 = (long long)0;
          int _9566 = (int)0;
          int _9567 = _2077;
          for (int _2089 = _9566; _2089 < _9567; ++_2089)
          {
            {
              _2088 += safe_mul( _ptr__2078[_2089],((*_2073)(_2087,_2089)) );
            }
          }
          if ((::mosek::fusion::p_CommonTools::binarySearch(sparsity,_2088) >= (int)0))
          {
            {
              ++ _2086;
            }
          }
          {}
        }
      }
      _2081 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2086)));
      _ptr__2081.update(_2081 ? _2081->raw() : nullptr, _2081 ? _2081->size(0) : 0);
      _2082 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2086)));
      _ptr__2082.update(_2082 ? _2082->raw() : nullptr, _2082 ? _2082->size(0) : 0);
      {
        int _2090 = (int)0;
        int _9568 = (int)0;
        int _9569 = (int)((_2073)->size(0));
        for (int _2091 = _9568; _2091 < _9569; ++_2091)
        {
          {
            long long _2092 = (long long)0;
            int _9570 = (int)0;
            int _9571 = _2077;
            for (int _2093 = _9570; _2093 < _9571; ++_2093)
            {
              {
                _2092 += safe_mul( _ptr__2078[_2093],((*_2073)(_2091,_2093)) );
              }
            }
            int _2094 = ::mosek::fusion::p_CommonTools::binarySearch(sparsity,_2092);
            if ((_2094 >= (int)0))
            {
              {
                _ptr__2081[_2090] = ((*nativeidxs)(_2094));
                _ptr__2082[_2090] = _2091;
                ++ _2090;
              }
            }
            {}
          }
        }
      }
      if ((_2086 == (int)((_2073)->size(0))))
      {
        {
          _2082 = nullptr;
          _ptr__2082.update(_2082 ? _2082->raw() : nullptr, _2082 ? _2082->size(0) : 0);
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_2080,_2082,_2081)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _2095) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__pick(_2095); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2095) { return __mosek_2fusion_2BaseVariable__pick(_2095); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__pick(std::shared_ptr< monty::ndarray< int,1 > > _2095) { return __mosek_2fusion_2BaseVariable__pick(_2095); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _2095){
  _checked_ptr_1<int> _ptr__2095(_2095 ? _2095->raw() : nullptr, _2095 ? _2095->size(0) : 0);
  if (((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  bool _2096 = false;
  int _9572 = (int)0;
  int _9573 = (int)((_2095)->size(0));
  for (int _2097 = _9572; _2097 < _9573; ++_2097)
  {
    {
      if (((_ptr__2095[_2097] < (int)0) || (_ptr__2095[_2097] >= ((*shape)((int)0)))))
      {
        {
          _2096 = true;
        }
      }
      {}
    }
  }
  if (_2096)
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< long long,1 > > _2098;
  _checked_ptr_1<long long> _ptr__2098(_2098 ? _2098->raw() : nullptr,_2098 ? _2098->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2099 = nullptr;
  _checked_ptr_1<long long> _ptr__2099(_2099 ? _2099->raw() : nullptr,_2099 ? _2099->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      std::vector<long long> _9574;
      for (int _2100 = (int)0, _9575 = (int)((_2095)->size(0)); _2100 < _9575 ; ++_2100)
      {
        _9574.push_back(((*nativeidxs)(_ptr__2095[_2100])));
      }
      auto _9576 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9574.size()),_9574.begin(),_9574.end()));
      _2098 = _9576;
      _ptr__2098.update(_2098 ? _2098->raw() : nullptr, _2098 ? _2098->size(0) : 0);
    }
  }
  else
  {
    {
      int _2101 = (int)0;
      int _9577 = (int)0;
      int _9578 = (int)((_2095)->size(0));
      for (int _2102 = _9577; _2102 < _9578; ++_2102)
      {
        {
          if ((::mosek::fusion::p_CommonTools::binarySearch(sparsity,(long long)(_ptr__2095[_2102])) >= (int)0))
          {
            {
              ++ _2101;
            }
          }
          {}
        }
      }
      _2098 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2101)));
      _ptr__2098.update(_2098 ? _2098->raw() : nullptr, _2098 ? _2098->size(0) : 0);
      _2099 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2101)));
      _ptr__2099.update(_2099 ? _2099->raw() : nullptr, _2099 ? _2099->size(0) : 0);
      int _2103 = (int)0;
      int _9579 = (int)0;
      int _9580 = (int)((_2095)->size(0));
      for (int _2104 = _9579; _2104 < _9580; ++_2104)
      {
        {
          int _2105 = ::mosek::fusion::p_CommonTools::binarySearch(sparsity,(long long)(_ptr__2095[_2104]));
          if ((_2105 >= (int)0))
          {
            {
              _ptr__2099[_2103] = _2104;
              _ptr__2098[_2103] = ((*nativeidxs)(_2105));
              ++ _2103;
            }
          }
          {}
        }
      }
      if ((_2101 == (int)((_2095)->size(0))))
      {
        {
          _2099 = nullptr;
          _ptr__2099.update(_2099 ? _2099->raw() : nullptr, _2099 ? _2099->size(0) : 0);
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2095)->size(0)))}),_2099,_2098)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__antidiag(int _2106) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__antidiag(_2106); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::antidiag(int _2106) { return __mosek_2fusion_2BaseVariable__antidiag(_2106); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__antidiag(int _2106) { return __mosek_2fusion_2BaseVariable__antidiag(_2106); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__antidiag(int _2106){
  if (((int)((shape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("antidiag() only works on two-dimensional objects"));
    }
  }
  else if(((_2106 >= ((*shape)((int)1))) || ((-_2106) >= ((*shape)((int)2)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Diagonal index out of bounds"));
    }
  }
  {}
  if ((_2106 >= (int)0))
  {
    {
      int _9581;
      bool _9582 = (((*shape)((int)0)) < (((*shape)((int)1)) - _2106));
      if (_9582)
      {
        _9581 = ((*shape)((int)0));
      }
      else
      {
        _9581 = (((*shape)((int)1)) - _2106);
      }
      return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0),(int)(((((*shape)((int)1)) - (int)1) - _2106))}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((-(int)1))}),_9581);
    }
  }
  else
  {
    {
      int _9583;
      bool _9584 = (((*shape)((int)1)) < safe_add( ((*shape)((int)0)),_2106 ));
      if (_9584)
      {
        _9583 = ((*shape)((int)1));
      }
      else
      {
        _9583 = safe_add( ((*shape)((int)0)),_2106 );
      }
      return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((-_2106)),(int)((((*shape)((int)1)) - (int)1))}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((-(int)1))}),_9583);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__antidiag() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__antidiag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::antidiag() { return __mosek_2fusion_2BaseVariable__antidiag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__antidiag() { return __mosek_2fusion_2BaseVariable__antidiag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__antidiag(){
  if (((int)((shape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("antidiag() only works on two-dimensional objects"));
    }
  }
  {}
  int _9585;
  bool _9586 = (((*shape)((int)0)) < ((*shape)((int)1)));
  if (_9586)
  {
    _9585 = ((*shape)((int)0));
  }
  else
  {
    _9585 = ((*shape)((int)1));
  }
  return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0),(int)((((*shape)((int)1)) - (int)1))}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((-(int)1))}),_9585);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__diag(int _2107) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__diag(_2107); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::diag(int _2107) { return __mosek_2fusion_2BaseVariable__diag(_2107); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__diag(int _2107) { return __mosek_2fusion_2BaseVariable__diag(_2107); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__diag(int _2107){
  if (((int)((shape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("diag() only works on two-dimensional objects"));
    }
  }
  else if(((_2107 >= ((*shape)((int)1))) || ((-_2107) >= ((*shape)((int)2)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Diagonal index out of bounds"));
    }
  }
  {}
  if ((_2107 >= (int)0))
  {
    {
      int _9587;
      bool _9588 = (((*shape)((int)0)) < (((*shape)((int)1)) - _2107));
      if (_9588)
      {
        _9587 = ((*shape)((int)0));
      }
      else
      {
        _9587 = (((*shape)((int)1)) - _2107);
      }
      return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0),(int)(_2107)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((int)1)}),_9587);
    }
  }
  else
  {
    {
      int _9589;
      bool _9590 = (((*shape)((int)1)) < safe_add( ((*shape)((int)0)),_2107 ));
      if (_9590)
      {
        _9589 = ((*shape)((int)1));
      }
      else
      {
        _9589 = safe_add( ((*shape)((int)0)),_2107 );
      }
      return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((-_2107)),(int)((int)0)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((int)1)}),_9589);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__diag() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__diag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::diag() { return __mosek_2fusion_2BaseVariable__diag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__diag() { return __mosek_2fusion_2BaseVariable__diag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__diag(){
  if (((int)((shape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("diag() only works on two-dimensional objects"));
    }
  }
  {}
  int _9591;
  bool _9592 = (((*shape)((int)0)) < ((*shape)((int)1)));
  if (_9592)
  {
    _9591 = ((*shape)((int)0));
  }
  else
  {
    _9591 = ((*shape)((int)1));
  }
  return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0),(int)((int)0)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((int)1)}),_9591);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > > _2108,std::shared_ptr< monty::ndarray< int,1 > > _2109,int _2110){
  _checked_ptr_1<int> _ptr__2108(_2108 ? _2108->raw() : nullptr, _2108 ? _2108->size(0) : 0);
  _checked_ptr_1<int> _ptr__2109(_2109 ? _2109->raw() : nullptr, _2109 ? _2109->size(0) : 0);
  int _2111 = (int)((shape)->size(0));
  if (((_2111 != (int)((_2108)->size(0))) || (_2111 != (int)((_2109)->size(0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid start or step definition"));
    }
  }
  {}
  int _9593 = (int)0;
  int _9594 = _2111;
  for (int _2112 = _9593; _2112 < _9594; ++_2112)
  {
    {
      if (((_ptr__2108[_2112] < (int)0) || (_ptr__2108[_2112] >= ((*shape)(_2112)))))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Start element is out of bounds"));
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _2113 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2111)));
  _checked_ptr_1<long long> _ptr__2113(_2113 ? _2113->raw() : nullptr,_2113 ? _2113->size(0) : 0);
  _ptr__2113[(_2111 - (int)1)] = (int)1;
  int _9595 = (int)1;
  int _9596 = _2111;
  for (int _2114 = _9595; _2114 < _9596; ++_2114)
  {
    {
      _ptr__2113[((_2111 - _2114) - (int)1)] = safe_mul( _ptr__2113[(_2111 - _2114)],((*shape)((_2111 - _2114))) );
    }
  }
  long long _2115 = (long long)0;
  int _9597 = (int)0;
  int _9598 = (int)((_2109)->size(0));
  for (int _2116 = _9597; _2116 < _9598; ++_2116)
  {
    {
      _2115 += safe_mul( _ptr__2108[_2116],_ptr__2113[_2116] );
    }
  }
  long long _2117 = (long long)0;
  int _9599 = (int)0;
  int _9600 = (int)((_2109)->size(0));
  for (int _2118 = _9599; _2118 < _9600; ++_2118)
  {
    {
      _2117 += safe_mul( _ptr__2109[_2118],_ptr__2113[_2118] );
    }
  }
  if ((NULL == sparsity.get()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _2119 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2110)));
      _checked_ptr_1<long long> _ptr__2119(_2119 ? _2119->raw() : nullptr,_2119 ? _2119->size(0) : 0);
      int _9601 = (int)0;
      int _9602 = _2110;
      for (int _2120 = _9601; _2120 < _9602; ++_2120)
      {
        {
          _ptr__2119[_2120] = ((*nativeidxs)(safe_add( _2115,safe_mul( _2117,_2120 ) )));
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2110)}),nullptr,_2119)).as<::mosek::fusion::Variable>();
    }
  }
  else
  {
    {
      int _2121 = (int)0;
      int _9603 = (int)0;
      int _9604 = _2110;
      for (int _2122 = _9603; _2122 < _9604; ++_2122)
      {
        {
          long long _2123 = safe_add( _2115,safe_mul( _2117,_2122 ) );
          int _2124 = ::mosek::fusion::p_CommonTools::binarySearch(sparsity,_2123);
          if ((_2124 >= (int)0))
          {
            {
              ++ _2121;
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _2125 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2121)));
      _checked_ptr_1<long long> _ptr__2125(_2125 ? _2125->raw() : nullptr,_2125 ? _2125->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _2126 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2121)));
      _checked_ptr_1<long long> _ptr__2126(_2126 ? _2126->raw() : nullptr,_2126 ? _2126->size(0) : 0);
      int _2127 = (int)0;
      int _9605 = (int)0;
      int _9606 = _2110;
      for (int _2128 = _9605; _2128 < _9606; ++_2128)
      {
        {
          _ptr__2125[_2128] = ((*nativeidxs)(safe_add( _2115,safe_mul( _2117,_2128 ) )));
          long long _2129 = safe_add( _2115,safe_mul( _2117,_2128 ) );
          int _2130 = ::mosek::fusion::p_CommonTools::binarySearch(sparsity,_2129);
          if ((_2130 >= (int)0))
          {
            {
              _ptr__2126[_2127] = _2128;
              _ptr__2125[_2127] = ((*nativeidxs)(_2130));
              ++ _2127;
            }
          }
          {}
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2110)}),_2126,_2125)).as<::mosek::fusion::Variable>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _2131,std::shared_ptr< monty::ndarray< int,1 > > _2132) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__slice(_2131,_2132); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::slice(std::shared_ptr< monty::ndarray< int,1 > > _2131,std::shared_ptr< monty::ndarray< int,1 > > _2132) { return __mosek_2fusion_2BaseVariable__slice(_2131,_2132); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__slice(std::shared_ptr< monty::ndarray< int,1 > > _2131,std::shared_ptr< monty::ndarray< int,1 > > _2132) { return __mosek_2fusion_2BaseVariable__slice(_2131,_2132); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _2131,std::shared_ptr< monty::ndarray< int,1 > > _2132){
  _checked_ptr_1<int> _ptr__2131(_2131 ? _2131->raw() : nullptr, _2131 ? _2131->size(0) : 0);
  _checked_ptr_1<int> _ptr__2132(_2132 ? _2132->raw() : nullptr, _2132 ? _2132->size(0) : 0);
  if (((int)((_2131)->size(0)) != (int)((_2132)->size(0))))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("Invalid slice"));
    }
  }
  else if(((int)((_2131)->size(0)) != (int)((shape)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable shape and slice do not match"));
    }
  }
  else
  {
    {
      int _9607 = (int)0;
      int _9608 = (int)((shape)->size(0));
      for (int _2133 = _9607; _2133 < _9608; ++_2133)
      {
        {
          if (((_ptr__2131[_2133] < (int)0) || (_ptr__2132[_2133] > ((*shape)(_2133)))))
          {
            {
              throw ::mosek::fusion::IndexError(std::string ("Slice is out of bounds"));
            }
          }
          else if((_ptr__2131[_2133] > _ptr__2132[_2133]))
          {
            {
              throw ::mosek::fusion::SliceError(std::string ("Invalid slice"));
            }
          }
          {}
        }
      }
      int _2134 = (int)((shape)->size(0));
      std::vector<int> _9609;
      for (int _2136 = (int)0, _9610 = _2134; _2136 < _9610 ; ++_2136)
      {
        _9609.push_back((_ptr__2132[_2136] - _ptr__2131[_2136]));
      }
      auto _9611 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9609.size()),_9609.begin(),_9609.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2135 = _9611;
      _checked_ptr_1<int> _ptr__2135(_2135 ? _2135->raw() : nullptr,_2135 ? _2135->size(0) : 0);
      int _2137 = (int)1;
      int _9612 = (int)0;
      int _9613 = _2134;
      for (int _2138 = _9612; _2138 < _9613; ++_2138)
      {
        {
          _2137 *= (_ptr__2132[_2138] - _ptr__2131[_2138]);
        }
      }
      if ((_2137 == (int)0))
      {
        {
          return (::mosek::fusion::p_NilVariable::_new_NilVariable()).as<::mosek::fusion::Variable>();
        }
      }
      else if((NULL != sparsity.get()))
      {
        {
          int _2139 = (int)0;
          std::shared_ptr< monty::ndarray< int,1 > > _2140 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2134)));
          _checked_ptr_1<int> _ptr__2140(_2140 ? _2140->raw() : nullptr,_2140 ? _2140->size(0) : 0);
          int _9614 = (int)0;
          int _9615 = (int)((sparsity)->size(0));
          for (int _2141 = _9614; _2141 < _9615; ++_2141)
          {
            {
              long long _2142 = ((*sparsity)(_2141));
              int _9616 = (int)1;
              int _9617 = _2134;
              for (int _2143 = _9616; _2143 < _9617; ++_2143)
              {
                {
                  _ptr__2140[(_2134 - _2143)] = (int)(_2142 % ((*shape)((_2134 - _2143))));
                  _2142 /= ((*shape)((_2134 - _2143)));
                }
              }
              _ptr__2140[(int)0] = (int)_2142;
              int _2144 = (int)0;
              while ( ((_ptr__2140[_2144] >= _ptr__2131[_2144]) && (_ptr__2140[_2144] < _ptr__2132[_2144])) )
              {
                {
                  ++ _2144;
                }
              }
              if ((_2144 == _2134))
              {
                {
                  ++ _2139;
                }
              }
              {}
            }
          }
          int _2145 = (int)0;
          std::shared_ptr< monty::ndarray< long long,1 > > _2146 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2139)));
          _checked_ptr_1<long long> _ptr__2146(_2146 ? _2146->raw() : nullptr,_2146 ? _2146->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _2147 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2139)));
          _checked_ptr_1<long long> _ptr__2147(_2147 ? _2147->raw() : nullptr,_2147 ? _2147->size(0) : 0);
          int _9618 = (int)0;
          int _9619 = (int)((sparsity)->size(0));
          for (int _2148 = _9618; _2148 < _9619; ++_2148)
          {
            {
              long long _2149 = ((*sparsity)(_2148));
              int _9620 = (int)1;
              int _9621 = _2134;
              for (int _2150 = _9620; _2150 < _9621; ++_2150)
              {
                {
                  _ptr__2140[(_2134 - _2150)] = (int)(_2149 % ((*shape)((_2134 - _2150))));
                  _2149 /= ((*shape)((_2134 - _2150)));
                }
              }
              _ptr__2140[(int)0] = (int)_2149;
              int _2151 = (int)0;
              while ( ((_ptr__2140[_2151] >= _ptr__2131[_2151]) && (_ptr__2140[_2151] < _ptr__2132[_2151])) )
              {
                {
                  ++ _2151;
                }
              }
              if ((_2151 == _2134))
              {
                {
                  _ptr__2146[_2145] = ((*nativeidxs)(_2148));
                  int _2152 = (int)0;
                  int _9622 = (int)0;
                  int _9623 = _2134;
                  for (int _2153 = _9622; _2153 < _9623; ++_2153)
                  {
                    {
                      _2152 = safe_add( safe_mul( _2152,_ptr__2135[_2153] ),(_ptr__2140[_2153] - _ptr__2131[_2153]) );
                    }
                  }
                  _ptr__2147[_2145] = _2152;
                  ++ _2145;
                }
              }
              {}
            }
          }
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_2135,_2147,_2146)).as<::mosek::fusion::Variable>();
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< long long,1 > > _2154 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2137)));
          _checked_ptr_1<long long> _ptr__2154(_2154 ? _2154->raw() : nullptr,_2154 ? _2154->size(0) : 0);
          {
            std::shared_ptr< monty::ndarray< int,1 > > _2155 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2134)));
            _checked_ptr_1<int> _ptr__2155(_2155 ? _2155->raw() : nullptr,_2155 ? _2155->size(0) : 0);
            _ptr__2155[(_2134 - (int)1)] = (int)1;
            int _9624 = (int)1;
            int _9625 = _2134;
            for (int _2156 = _9624; _2156 < _9625; ++_2156)
            {
              {
                _ptr__2155[((_2134 - _2156) - (int)1)] = safe_mul( _ptr__2155[(_2134 - _2156)],((*shape)((_2134 - _2156))) );
              }
            }
            int _2157 = (int)0;
            int _9626 = (int)0;
            int _9627 = _2134;
            for (int _2158 = _9626; _2158 < _9627; ++_2158)
            {
              {
                _2157 += safe_mul( _ptr__2131[_2158],_ptr__2155[_2158] );
              }
            }
            std::vector<int> _9628;
            for (int _2160 = (int)0, _9629 = _2134; _2160 < _9629 ; ++_2160)
            {
              _9628.push_back(_2157);
            }
            auto _9630 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9628.size()),_9628.begin(),_9628.end()));
            std::shared_ptr< monty::ndarray< int,1 > > _2159 = _9630;
            _checked_ptr_1<int> _ptr__2159(_2159 ? _2159->raw() : nullptr,_2159 ? _2159->size(0) : 0);
            std::vector<int> _9631;
            for (int _2162 = (int)0, _9632 = _2134; _2162 < _9632 ; ++_2162)
            {
              _9631.push_back(_ptr__2131[_2162]);
            }
            auto _9633 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9631.size()),_9631.begin(),_9631.end()));
            std::shared_ptr< monty::ndarray< int,1 > > _2161 = _9633;
            _checked_ptr_1<int> _ptr__2161(_2161 ? _2161->raw() : nullptr,_2161 ? _2161->size(0) : 0);
            int _9634 = (int)0;
            int _9635 = _2137;
            for (int _2163 = _9634; _2163 < _9635; ++_2163)
            {
              {
                _ptr__2154[_2163] = ((*nativeidxs)(_ptr__2159[(_2134 - (int)1)]));
                _ptr__2161[(_2134 - (int)1)] += (int)1;
                _ptr__2159[(_2134 - (int)1)] += _ptr__2155[(_2134 - (int)1)];
                if ((_ptr__2161[(_2134 - (int)1)] >= _ptr__2132[(_2134 - (int)1)]))
                {
                  {
                    int _2164 = (_2134 - (int)1);
                    while ( ((_2164 > (int)0) && (_ptr__2161[_2164] >= _ptr__2132[_2164])) )
                    {
                      {
                        _ptr__2161[_2164] = _ptr__2131[_2164];
                        _ptr__2161[(_2164 - (int)1)] += (int)1;
                        _ptr__2159[(_2164 - (int)1)] += _ptr__2155[(_2164 - (int)1)];
                        -- _2164;
                      }
                    }
                    int _9636 = safe_add( _2164,(int)1 );
                    int _9637 = _2134;
                    for (int _2165 = _9636; _2165 < _9637; ++_2165)
                    {
                      {
                        _ptr__2159[_2165] = _ptr__2159[_2164];
                      }
                    }
                  }
                }
                {}
              }
            }
          }
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_2135,nullptr,_2154)).as<::mosek::fusion::Variable>();
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__slice(int _2166,int _2167) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__slice(_2166,_2167); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::slice(int _2166,int _2167) { return __mosek_2fusion_2BaseVariable__slice(_2166,_2167); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__slice(int _2166,int _2167) { return __mosek_2fusion_2BaseVariable__slice(_2166,_2167); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__slice(int _2166,int _2167){
  if (((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable shape and slice do not match"));
    }
  }
  {}
  if (((_2166 == (int)0) && (_2167 == ((*shape)((int)0)))))
  {
    {
      return (::mosek::fusion::BaseVariable::t(_pubthis)).as<::mosek::fusion::Variable>();
    }
  }
  else if(((_2166 < (int)0) || (_2167 > ((*shape)((int)0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Slice is out of bounds"));
    }
  }
  else if((_2166 > _2167))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("Invalid slice"));
    }
  }
  else if((_2166 == _2167))
  {
    {
      return (::mosek::fusion::p_NilVariable::_new_NilVariable()).as<::mosek::fusion::Variable>();
    }
  }
  else if((NULL != sparsity.get()))
  {
    {
      int _2168 = (_2167 - _2166);
      int _2169 = (int)0;
      int _2170 = ::mosek::fusion::p_CommonTools::binarySearchL(sparsity,(long long)(_2166));
      int _2171 = ::mosek::fusion::p_CommonTools::binarySearchL(sparsity,(long long)(_2167));
      std::vector<long long> _9638;
      for (int _2172 = _2170, _9639 = _2171; _2172 < _9639 ; ++_2172)
      {
        _9638.push_back((((*sparsity)(_2172)) - _2166));
      }
      auto _9640 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9638.size()),_9638.begin(),_9638.end()));
      std::vector<long long> _9641;
      for (int _2173 = _2170, _9642 = _2171; _2173 < _9642 ; ++_2173)
      {
        _9641.push_back(((*nativeidxs)(_2173)));
      }
      auto _9643 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9641.size()),_9641.begin(),_9641.end()));
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2168)}),_9640,_9643)).as<::mosek::fusion::Variable>();
    }
  }
  else
  {
    {
      int _2174 = (_2167 - _2166);
      std::shared_ptr< monty::ndarray< long long,1 > > _2175 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2174)));
      _checked_ptr_1<long long> _ptr__2175(_2175 ? _2175->raw() : nullptr,_2175 ? _2175->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(nativeidxs,_2166,_2175,(int)0,_2174);
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2174)}),nullptr,_2175)).as<::mosek::fusion::Variable>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__asExpr() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__asExpr(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseVariable::asExpr() { return __mosek_2fusion_2BaseVariable__asExpr(); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__asExpr() { return __mosek_2fusion_2BaseVariable__asExpr(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__asExpr(){
  return (::mosek::fusion::p_ExprFromVar::_new_ExprFromVar((::mosek::fusion::BaseVariable::t(_pubthis)).as<::mosek::fusion::Variable>())).as<::mosek::fusion::Expression>();
}
int mosek::fusion::BaseVariable :: inst(int _2176,std::shared_ptr< monty::ndarray< long long,1 > > _2177,int _2178,std::shared_ptr< monty::ndarray< long long,1 > > _2179) { return mosek::fusion::p_BaseVariable::_get_impl(this)->inst(_2176,_2177,_2178,_2179); }int mosek::fusion::p_BaseVariable::inst(int _2176,std::shared_ptr< monty::ndarray< long long,1 > > _2177,int _2178,std::shared_ptr< monty::ndarray< long long,1 > > _2179){
  _checked_ptr_1<long long> _ptr__2177(_2177 ? _2177->raw() : nullptr, _2177 ? _2177->size(0) : 0);
  _checked_ptr_1<long long> _ptr__2179(_2179 ? _2179->raw() : nullptr, _2179 ? _2179->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2180 = mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->nativeidxs;
  _checked_ptr_1<long long> _ptr__2180(_2180 ? _2180->raw() : nullptr,_2180 ? _2180->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2181 = mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->sparsity;
  _checked_ptr_1<long long> _ptr__2181(_2181 ? _2181->raw() : nullptr,_2181 ? _2181->size(0) : 0);
  if ((NULL == _2181.get()))
  {
    {
      int _9644 = (int)0;
      int _9645 = (int)((_2180)->size(0));
      for (int _2182 = _9644; _2182 < _9645; ++_2182)
      {
        {
          _ptr__2177[safe_add( _2182,_2176 )] = _2182;
          _ptr__2179[safe_add( _2182,_2178 )] = _ptr__2180[_2182];
        }
      }
    }
  }
  else
  {
    {
      int _9646 = (int)0;
      int _9647 = (int)((mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->sparsity)->size(0));
      for (int _2183 = _9646; _2183 < _9647; ++_2183)
      {
        {
          _ptr__2177[safe_add( _2176,_2183 )] = _ptr__2181[_2183];
          _ptr__2179[safe_add( _2183,_2178 )] = _ptr__2180[_2183];
        }
      }
    }
  }
  return (int)((mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->nativeidxs)->size(0));
}
int mosek::fusion::BaseVariable :: numInst() { return mosek::fusion::p_BaseVariable::_get_impl(this)->numInst(); }int mosek::fusion::p_BaseVariable::numInst(){
  return (int)((nativeidxs)->size(0));
}
void mosek::fusion::BaseVariable :: inst(int _2184,std::shared_ptr< monty::ndarray< long long,1 > > _2185) { mosek::fusion::p_BaseVariable::_get_impl(this)->inst(_2184,_2185); }void mosek::fusion::p_BaseVariable::inst(int _2184,std::shared_ptr< monty::ndarray< long long,1 > > _2185){
  _checked_ptr_1<long long> _ptr__2185(_2185 ? _2185->raw() : nullptr, _2185 ? _2185->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      int _9648 = (int)0;
      int _9649 = (int)((nativeidxs)->size(0));
      for (int _2186 = _9648; _2186 < _9649; ++_2186)
      {
        {
          _ptr__2185[safe_add( _2184,_2186 )] = ((*nativeidxs)(_2186));
        }
      }
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _2187 = _pubthis->getShape();
      _checked_ptr_1<int> _ptr__2187(_2187 ? _2187->raw() : nullptr,_2187 ? _2187->size(0) : 0);
      int _2188 = (int)1;
      int _9650 = (int)0;
      int _9651 = (int)((_2187)->size(0));
      for (int _2189 = _9650; _2189 < _9651; ++_2189)
      {
        {
          _2188 *= _ptr__2187[_2189];
        }
      }
      int _9652 = (int)0;
      int _9653 = _2188;
      for (int _2190 = _9652; _2190 < _9653; ++_2190)
      {
        {
          _ptr__2185[safe_add( _2184,_2190 )] = (int)0;
        }
      }
      int _9654 = (int)0;
      int _9655 = (int)((sparsity)->size(0));
      for (int _2191 = _9654; _2191 < _9655; ++_2191)
      {
        {
          _ptr__2185[safe_add( _2184,((*sparsity)(_2191)) )] = ((*nativeidxs)(_2191));
        }
      }
    }
  }
}
void mosek::fusion::BaseVariable :: set_values(std::shared_ptr< monty::ndarray< double,1 > > _2192,bool _2193) { mosek::fusion::p_BaseVariable::_get_impl(this)->set_values(_2192,_2193); }void mosek::fusion::p_BaseVariable::set_values(std::shared_ptr< monty::ndarray< double,1 > > _2192,bool _2193){
  _checked_ptr_1<double> _ptr__2192(_2192 ? _2192->raw() : nullptr, _2192 ? _2192->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      _pubthis->__mosek_2fusion_2BaseVariable__getModel()->setVariableValues(_2193,nativeidxs,_2192);
    }
  }
  else
  {
    {
      int _2194 = (int)1;
      int _9656 = (int)0;
      int _9657 = (int)((shape)->size(0));
      for (int _2195 = _9656; _2195 < _9657; ++_2195)
      {
        {
          _2194 *= ((*shape)(_2195));
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _2196 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2194)));
      _checked_ptr_1<long long> _ptr__2196(_2196 ? _2196->raw() : nullptr,_2196 ? _2196->size(0) : 0);
      int _9658 = (int)0;
      int _9659 = (int)((nativeidxs)->size(0));
      for (int _2197 = _9658; _2197 < _9659; ++_2197)
      {
        {
          _ptr__2196[((*sparsity)(_2197))] = ((*nativeidxs)(_2197));
        }
      }
      _pubthis->__mosek_2fusion_2BaseVariable__getModel()->setVariableValues(_2193,_2196,_2192);
    }
  }
}
void mosek::fusion::p_BaseVariable::dual_lu(int _2198,std::shared_ptr< monty::ndarray< double,1 > > _2199,bool _2200){
  _checked_ptr_1<double> _ptr__2199(_2199 ? _2199->raw() : nullptr, _2199 ? _2199->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      model->getVariableDuals(_2200,nativeidxs,_2199,_2198);
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _2201 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_pubthis->getSize())));
      _checked_ptr_1<long long> _ptr__2201(_2201 ? _2201->raw() : nullptr,_2201 ? _2201->size(0) : 0);
      int _9660 = (int)0;
      int _9661 = (int)((sparsity)->size(0));
      for (int _2202 = _9660; _2202 < _9661; ++_2202)
      {
        {
          _ptr__2201[((*sparsity)(_2202))] = ((*nativeidxs)(_2202));
        }
      }
      model->getVariableDuals(_2200,_2201,_2199,_2198);
    }
  }
}
void mosek::fusion::BaseVariable :: values(int _2203,std::shared_ptr< monty::ndarray< double,1 > > _2204,bool _2205) { mosek::fusion::p_BaseVariable::_get_impl(this)->values(_2203,_2204,_2205); }void mosek::fusion::p_BaseVariable::values(int _2203,std::shared_ptr< monty::ndarray< double,1 > > _2204,bool _2205){
  _checked_ptr_1<double> _ptr__2204(_2204 ? _2204->raw() : nullptr, _2204 ? _2204->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      model->getVariableValues(_2205,nativeidxs,_2204,_2203);
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _2206 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_pubthis->getSize())));
      _checked_ptr_1<long long> _ptr__2206(_2206 ? _2206->raw() : nullptr,_2206 ? _2206->size(0) : 0);
      int _9662 = (int)0;
      int _9663 = (int)((sparsity)->size(0));
      for (int _2207 = _9662; _2207 < _9663; ++_2207)
      {
        {
          _ptr__2206[((*sparsity)(_2207))] = ((*nativeidxs)(_2207));
        }
      }
      model->getVariableValues(_2205,_2206,_2204,_2203);
    }
  }
}
void mosek::fusion::BaseVariable :: make_continuous() { mosek::fusion::p_BaseVariable::_get_impl(this)->make_continuous(); }void mosek::fusion::p_BaseVariable::make_continuous(){
  mosek::fusion::p_Model::_get_impl(_pubthis->__mosek_2fusion_2BaseVariable__getModel().get())->make_continuous(nativeidxs);
}
void mosek::fusion::BaseVariable :: make_integer() { mosek::fusion::p_BaseVariable::_get_impl(this)->make_integer(); }void mosek::fusion::p_BaseVariable::make_integer(){
  mosek::fusion::p_Model::_get_impl(_pubthis->__mosek_2fusion_2BaseVariable__getModel().get())->make_integer(nativeidxs);
}
void mosek::fusion::p_BaseVariable::destroy(){sparsity.reset();nativeidxs.reset();model.reset();shape.reset();}void mosek::fusion::BaseVariable::destroy() { mosek::fusion::p_BaseVariable::_get_impl(this)->destroy(); }monty::rc_ptr< mosek::fusion::Model > mosek::fusion::Variable::getModel() { return __mosek_2fusion_2Variable__getModel(); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::fromTril(int _2215) { return __mosek_2fusion_2Variable__fromTril(_2215); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::tril() { return __mosek_2fusion_2Variable__tril(); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::reshape(int _2216,int _2217,int _2218) { return __mosek_2fusion_2Variable__reshape(_2216,_2217,_2218); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::reshape(int _2219,int _2220) { return __mosek_2fusion_2Variable__reshape(_2219,_2220); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::reshape(int _2221) { return __mosek_2fusion_2Variable__reshape(_2221); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::reshape(std::shared_ptr< monty::ndarray< int,1 > > _2222) { return __mosek_2fusion_2Variable__reshape(_2222); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::transpose() { return __mosek_2fusion_2Variable__transpose(); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2228,std::shared_ptr< monty::ndarray< int,1 > > _2229,std::shared_ptr< monty::ndarray< int,1 > > _2230) { return __mosek_2fusion_2Variable__pick(_2228,_2229,_2230); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2231,std::shared_ptr< monty::ndarray< int,1 > > _2232) { return __mosek_2fusion_2Variable__pick(_2231,_2232); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int,2 > > _2233) { return __mosek_2fusion_2Variable__pick(_2233); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::pick(std::shared_ptr< monty::ndarray< int,2 > > _2233) { return __mosek_2fusion_2Variable__pick(_2233); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int,1 > > _2234) { return __mosek_2fusion_2Variable__pick(_2234); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2234) { return __mosek_2fusion_2Variable__pick(_2234); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::antidiag() { return __mosek_2fusion_2Variable__antidiag(); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::antidiag(int _2235) { return __mosek_2fusion_2Variable__antidiag(_2235); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::diag() { return __mosek_2fusion_2Variable__diag(); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::diag(int _2236) { return __mosek_2fusion_2Variable__diag(_2236); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__index(std::shared_ptr< monty::ndarray< int,1 > > _2237) { return __mosek_2fusion_2Variable__index(_2237); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::index(std::shared_ptr< monty::ndarray< int,1 > > _2237) { return __mosek_2fusion_2Variable__index(_2237); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::index(int _2238,int _2239,int _2240) { return __mosek_2fusion_2Variable__index(_2238,_2239,_2240); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::index(int _2241,int _2242) { return __mosek_2fusion_2Variable__index(_2241,_2242); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__index(int _2243) { return __mosek_2fusion_2Variable__index(_2243); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::index(int _2243) { return __mosek_2fusion_2Variable__index(_2243); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__slice(std::shared_ptr< monty::ndarray< int,1 > > _2244,std::shared_ptr< monty::ndarray< int,1 > > _2245) { return __mosek_2fusion_2Variable__slice(_2244,_2245); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::slice(std::shared_ptr< monty::ndarray< int,1 > > _2244,std::shared_ptr< monty::ndarray< int,1 > > _2245) { return __mosek_2fusion_2Variable__slice(_2244,_2245); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__slice(int _2246,int _2247) { return __mosek_2fusion_2Variable__slice(_2246,_2247); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::slice(int _2246,int _2247) { return __mosek_2fusion_2Variable__slice(_2246,_2247); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::asExpr() { return __mosek_2fusion_2Variable__asExpr(); }
mosek::fusion::Var::Var(mosek::fusion::p_Var *_impl) : _impl(_impl) { /*std::cout << "Var() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Var::~Var() { delete _impl; _impl = nullptr; }mosek::fusion::p_Var::p_Var  (::mosek::fusion::Var * _pubthis) :     _pubthis(_pubthis){}monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::empty  ( std::shared_ptr< monty::ndarray< int,1 > > _2248) { return mosek::fusion::p_Var::empty(_2248); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::empty(std::shared_ptr< monty::ndarray< int,1 > > _2248){
  _checked_ptr_1<int> _ptr__2248(_2248 ? _2248->raw() : nullptr, _2248 ? _2248->size(0) : 0);
  int _9664 = (int)0;
  int _9665 = (int)((_2248)->size(0));
  for (int _2249 = _9664; _2249 < _9665; ++_2249)
  {
    {
      if ((_ptr__2248[_2249] < (int)0))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid shape"));
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_NilVariable::_new_NilVariable(_2248)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::compress  ( monty::rc_ptr< ::mosek::fusion::Variable > _2250) { return mosek::fusion::p_Var::compress(_2250); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::compress(monty::rc_ptr< ::mosek::fusion::Variable > _2250){
  std::shared_ptr< monty::ndarray< int,1 > > _2251 = _2250->getShape();
  _checked_ptr_1<int> _ptr__2251(_2251 ? _2251->raw() : nullptr,_2251 ? _2251->size(0) : 0);
  int _2252 = (int)((_2251)->size(0));
  int _2253 = (int)0;
  int _9666 = (int)0;
  int _9667 = _2252;
  for (int _2254 = _9666; _2254 < _9667; ++_2254)
  {
    {
      if ((_ptr__2251[_2254] != (int)1))
      {
        {
          ++ _2253;
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _2255 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2253)));
  _checked_ptr_1<int> _ptr__2255(_2255 ? _2255->raw() : nullptr,_2255 ? _2255->size(0) : 0);
  {
    int _2256 = (int)0;
    int _9668 = (int)0;
    int _9669 = _2252;
    for (int _2257 = _9668; _2257 < _9669; ++_2257)
    {
      {
        if ((_ptr__2251[_2257] != (int)1))
        {
          {
            _ptr__2255[_2256] = _ptr__2251[_2257];
            ++ _2256;
          }
        }
        {}
      }
    }
  }
  return ::mosek::fusion::p_Var::reshape(_2250,_2255);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::reshape  ( monty::rc_ptr< ::mosek::fusion::Variable > _2258,    int _2259) { return mosek::fusion::p_Var::reshape(_2258,_2259); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::reshape(monty::rc_ptr< ::mosek::fusion::Variable > _2258,int _2259){
  return ::mosek::fusion::p_Var::reshape(_2258,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2259)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::reshape  ( monty::rc_ptr< ::mosek::fusion::Variable > _2260,    int _2261,    int _2262) { return mosek::fusion::p_Var::reshape(_2260,_2261,_2262); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::reshape(monty::rc_ptr< ::mosek::fusion::Variable > _2260,int _2261,int _2262){
  return ::mosek::fusion::p_Var::reshape(_2260,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2261),(int)(_2262)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::flatten  ( monty::rc_ptr< ::mosek::fusion::Variable > _2263) { return mosek::fusion::p_Var::flatten(_2263); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::flatten(monty::rc_ptr< ::mosek::fusion::Variable > _2263){
  return ::mosek::fusion::p_Var::reshape(_2263,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)::mosek::fusion::p_Set::size(_2263->getShape()))}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::reshape  ( monty::rc_ptr< ::mosek::fusion::Variable > _2264,    std::shared_ptr< monty::ndarray< int,1 > > _2265) { return mosek::fusion::p_Var::reshape(_2264,_2265); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::reshape(monty::rc_ptr< ::mosek::fusion::Variable > _2264,std::shared_ptr< monty::ndarray< int,1 > > _2265){
  _checked_ptr_1<int> _ptr__2265(_2265 ? _2265->raw() : nullptr, _2265 ? _2265->size(0) : 0);
  return _2264->__mosek_2fusion_2Variable__reshape(_2265);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::index_permute_(monty::rc_ptr< ::mosek::fusion::Variable > _2266,std::shared_ptr< monty::ndarray< int,1 > > _2267){
  _checked_ptr_1<int> _ptr__2267(_2267 ? _2267->raw() : nullptr, _2267 ? _2267->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2268;
  _checked_ptr_1<long long> _ptr__2268(_2268 ? _2268->raw() : nullptr,_2268 ? _2268->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2269;
  _checked_ptr_1<long long> _ptr__2269(_2269 ? _2269->raw() : nullptr,_2269 ? _2269->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _2270 = _2266->getShape();
  _checked_ptr_1<int> _ptr__2270(_2270 ? _2270->raw() : nullptr,_2270 ? _2270->size(0) : 0);
  int _2271 = (int)((_2270)->size(0));
  int _2272 = (int)1;
  int _9670 = (int)0;
  int _9671 = _2271;
  for (int _2273 = _9670; _2273 < _9671; ++_2273)
  {
    {
      _2272 *= _ptr__2270[_2273];
    }
  }
  int _2274 = _2266->numInst();
  std::shared_ptr< monty::ndarray< long long,1 > > _2275 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2271)));
  _checked_ptr_1<long long> _ptr__2275(_2275 ? _2275->raw() : nullptr,_2275 ? _2275->size(0) : 0);
  _ptr__2275[(_2271 - (int)1)] = (int)1;
  int _9672 = (int)1;
  int _9673 = _2271;
  for (int _2276 = _9672; _2276 < _9673; ++_2276)
  {
    {
      _ptr__2275[((_2271 - _2276) - (int)1)] = safe_mul( _ptr__2275[(_2271 - _2276)],_ptr__2270[_ptr__2267[(_2271 - _2276)]] );
    }
  }
  if ((_2274 < _2272))
  {
    {
      _2268 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2274)));
      _ptr__2268.update(_2268 ? _2268->raw() : nullptr, _2268 ? _2268->size(0) : 0);
      _2269 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2274)));
      _ptr__2269.update(_2269 ? _2269->raw() : nullptr, _2269 ? _2269->size(0) : 0);
      _2266->inst((int)0,_2268,(int)0,_2269);
    }
  }
  else
  {
    {
      _2268 = nullptr;
      _ptr__2268.update(_2268 ? _2268->raw() : nullptr, _2268 ? _2268->size(0) : 0);
      _2269 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2274)));
      _ptr__2269.update(_2269 ? _2269->raw() : nullptr, _2269 ? _2269->size(0) : 0);
      _2266->inst((int)0,_2269);
    }
  }
  if ((NULL == _2268.get()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _2277 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2274)));
      _checked_ptr_1<long long> _ptr__2277(_2277 ? _2277->raw() : nullptr,_2277 ? _2277->size(0) : 0);
      {
        std::shared_ptr< monty::ndarray< int,1 > > _2278 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2271)));
        _checked_ptr_1<int> _ptr__2278(_2278 ? _2278->raw() : nullptr,_2278 ? _2278->size(0) : 0);
        int _9674 = (int)0;
        int _9675 = _2274;
        for (int _2279 = _9674; _2279 < _9675; ++_2279)
        {
          {
            int _2280 = _2279;
            int _9676 = (int)0;
            int _9677 = _2271;
            for (int _2281 = _9676; _2281 < _9677; ++_2281)
            {
              {
                _ptr__2278[((_2271 - _2279) - (int)1)] = (_2280 % _ptr__2270[((_2271 - _2279) - (int)1)]);
                _2280 /= _ptr__2270[((_2271 - _2279) - (int)1)];
              }
            }
            int _2282 = (int)0;
            int _9678 = (int)0;
            int _9679 = _2271;
            for (int _2283 = _9678; _2283 < _9679; ++_2283)
            {
              {
                _2282 += (int)safe_mul( _ptr__2278[_ptr__2267[_2283]],_ptr__2275[_2283] );
              }
            }
            _ptr__2277[_2282] = _ptr__2269[_2279];
          }
        }
      }
      _2269 = _2277;
      _ptr__2269.update(_2269 ? _2269->raw() : nullptr, _2269 ? _2269->size(0) : 0);
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _2284 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2274)));
      _checked_ptr_1<long long> _ptr__2284(_2284 ? _2284->raw() : nullptr,_2284 ? _2284->size(0) : 0);
      {
        std::shared_ptr< monty::ndarray< int,1 > > _2285 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2271)));
        _checked_ptr_1<int> _ptr__2285(_2285 ? _2285->raw() : nullptr,_2285 ? _2285->size(0) : 0);
        int _9680 = (int)0;
        int _9681 = _2274;
        for (int _2286 = _9680; _2286 < _9681; ++_2286)
        {
          {
            int _2287 = _2286;
            int _9682 = (int)0;
            int _9683 = _2271;
            for (int _2288 = _9682; _2288 < _9683; ++_2288)
            {
              {
                _ptr__2285[((_2271 - _2286) - (int)1)] = (_2287 % _ptr__2270[((_2271 - _2286) - (int)1)]);
                _2287 /= _ptr__2270[((_2271 - _2286) - (int)1)];
              }
            }
            int _2289 = (int)0;
            int _9684 = (int)0;
            int _9685 = _2271;
            for (int _2290 = _9684; _2290 < _9685; ++_2290)
            {
              {
                _2289 += (int)safe_mul( _ptr__2285[_ptr__2267[_2290]],_ptr__2275[_2290] );
              }
            }
            _ptr__2284[_2286] = _2289;
          }
        }
      }
      std::vector<long long> _9686;
      for (int _2292 = (int)0, _9687 = _2274; _2292 < _9687 ; ++_2292)
      {
        _9686.push_back(_2292);
      }
      auto _9688 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9686.size()),_9686.begin(),_9686.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _2291 = _9688;
      _checked_ptr_1<long long> _ptr__2291(_2291 ? _2291->raw() : nullptr,_2291 ? _2291->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_2291,_2284,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_2274));
      std::vector<long long> _9689;
      for (int _2293 = (int)0, _9690 = _2274; _2293 < _9690 ; ++_2293)
      {
        _9689.push_back(_ptr__2268[_ptr__2291[_2293]]);
      }
      auto _9691 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9689.size()),_9689.begin(),_9689.end()));
      _2268 = _9691;
      _ptr__2268.update(_2268 ? _2268->raw() : nullptr, _2268 ? _2268->size(0) : 0);
      std::vector<long long> _9692;
      for (int _2294 = (int)0, _9693 = _2274; _2294 < _9693 ; ++_2294)
      {
        _9692.push_back(_ptr__2269[_ptr__2291[_2294]]);
      }
      auto _9694 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9692.size()),_9692.begin(),_9692.end()));
      _2269 = _9694;
      _ptr__2269.update(_2269 ? _2269->raw() : nullptr, _2269 ? _2269->size(0) : 0);
    }
  }
  std::vector<int> _9695;
  for (int _2295 = (int)0, _9696 = _2271; _2295 < _9696 ; ++_2295)
  {
    _9695.push_back(_ptr__2270[_ptr__2267[_2295]]);
  }
  auto _9697 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9695.size()),_9695.begin(),_9695.end()));
  return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2266->__mosek_2fusion_2Variable__getModel(),_9697,_2268,_2269)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hrepeat  ( monty::rc_ptr< ::mosek::fusion::Variable > _2296,    int _2297) { return mosek::fusion::p_Var::hrepeat(_2296,_2297); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hrepeat(monty::rc_ptr< ::mosek::fusion::Variable > _2296,int _2297){
  return ::mosek::fusion::p_Var::drepeat(_2296,(int)1,_2297);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vrepeat  ( monty::rc_ptr< ::mosek::fusion::Variable > _2298,    int _2299) { return mosek::fusion::p_Var::vrepeat(_2298,_2299); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vrepeat(monty::rc_ptr< ::mosek::fusion::Variable > _2298,int _2299){
  return ::mosek::fusion::p_Var::drepeat(_2298,(int)0,_2299);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::repeat  ( monty::rc_ptr< ::mosek::fusion::Variable > _2300,    int _2301) { return mosek::fusion::p_Var::repeat(_2300,_2301); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::repeat(monty::rc_ptr< ::mosek::fusion::Variable > _2300,int _2301){
  return ::mosek::fusion::p_Var::drepeat(_2300,(int)0,_2301);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::repeat  ( monty::rc_ptr< ::mosek::fusion::Variable > _2302,    int _2303,    int _2304) { return mosek::fusion::p_Var::repeat(_2302,_2303,_2304); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::repeat(monty::rc_ptr< ::mosek::fusion::Variable > _2302,int _2303,int _2304){
  return ::mosek::fusion::p_Var::drepeat(_2302,_2303,_2304);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::drepeat(monty::rc_ptr< ::mosek::fusion::Variable > _2305,int _2306,int _2307){
  if ((_2307 < (int)0))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Cannot repeat less than 0 times"));
    }
  }
  else if((_2307 == (int)0))
  {
    {
      return (::mosek::fusion::p_NilVariable::_new_NilVariable()).as<::mosek::fusion::Variable>();
    }
  }
  else if((_2307 == (int)1))
  {
    {
      return _2305;
    }
  }
  else
  {
    {
      monty::rc_ptr< ::mosek::fusion::Model > _2308 = _2305->__mosek_2fusion_2Variable__getModel();
      std::shared_ptr< monty::ndarray< int,1 > > _2309 = _2305->getShape();
      _checked_ptr_1<int> _ptr__2309(_2309 ? _2309->raw() : nullptr,_2309 ? _2309->size(0) : 0);
      int _2310 = (int)((_2309)->size(0));
      if (((_2306 < (int)0) || (_2306 > _2310)))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid stacking dimension"));
        }
      }
      {}
      long long _2311 = ::mosek::fusion::p_Set::size(_2309);
      int _2312 = _2305->numInst();
      int _2313 = safe_mul( _2312,_2307 );
      int _2314 = (int)1;
      int _9698 = (int)0;
      int _9699 = _2306;
      for (int _2315 = _9698; _2315 < _9699; ++_2315)
      {
        {
          _2314 *= _ptr__2309[_2315];
        }
      }
      int _9700;
      bool _9701 = (_2306 < _2310);
      if (_9701)
      {
        _9700 = _ptr__2309[_2306];
      }
      else
      {
        _9700 = (int)1;
      }
      int _2316 = _9700;
      int _2317 = safe_mul( _2316,_2307 );
      int _2318 = (int)1;
      int _9702 = safe_add( _2306,(int)1 );
      int _9703 = _2310;
      for (int _2319 = _9702; _2319 < _9703; ++_2319)
      {
        {
          _2318 *= _ptr__2309[_2319];
        }
      }
      int _9704;
      bool _9705 = (_2306 < _2310);
      if (_9705)
      {
        _9704 = _2310;
      }
      else
      {
        _9704 = safe_add( _2306,(int)1 );
      }
      int _2320 = _9704;
      std::shared_ptr< monty::ndarray< int,1 > > _2321 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2320)));
      _checked_ptr_1<int> _ptr__2321(_2321 ? _2321->raw() : nullptr,_2321 ? _2321->size(0) : 0);
      int _9706 = (int)0;
      int _9707 = _2310;
      for (int _2322 = _9706; _2322 < _9707; ++_2322)
      {
        {
          _ptr__2321[_2322] = _ptr__2309[_2322];
        }
      }
      int _9708 = _2310;
      int _9709 = _2320;
      for (int _2323 = _9708; _2323 < _9709; ++_2323)
      {
        {
          _ptr__2321[_2323] = (int)1;
        }
      }
      _ptr__2321[_2306] = _2317;
      if ((_2312 < _2311))
      {
        {
          std::shared_ptr< monty::ndarray< long long,1 > > _2324 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2312)));
          _checked_ptr_1<long long> _ptr__2324(_2324 ? _2324->raw() : nullptr,_2324 ? _2324->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _2325 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2312)));
          _checked_ptr_1<long long> _ptr__2325(_2325 ? _2325->raw() : nullptr,_2325 ? _2325->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _2326 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2313)));
          _checked_ptr_1<long long> _ptr__2326(_2326 ? _2326->raw() : nullptr,_2326 ? _2326->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _2327 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2313)));
          _checked_ptr_1<long long> _ptr__2327(_2327 ? _2327->raw() : nullptr,_2327 ? _2327->size(0) : 0);
          _2305->inst((int)0,_2325,(int)0,_2324);
          {
            int _2328 = safe_mul( _2317,_2318 );
            int _2329 = safe_mul( _2316,_2318 );
            int _2330 = _2318;
            if ((_2306 == (int)0))
            {
              {
                int _2331 = (int)0;
                int _9710 = (int)0;
                int _9711 = _2307;
                for (int _2332 = _9710; _2332 < _9711; ++_2332)
                {
                  {
                    int _9712 = (int)0;
                    int _9713 = _2312;
                    for (int _2333 = _9712; _2333 < _9713; ++_2333)
                    {
                      {
                        _ptr__2327[_2331] = safe_add( _ptr__2325[_2333],safe_mul( _2332,_2311 ) );
                        _ptr__2326[_2331] = _ptr__2324[_2333];
                        ++ _2331;
                      }
                    }
                  }
                }
                return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2308,_2321,_2327,_2326)).as<::mosek::fusion::Variable>();
              }
            }
            else if((_2306 >= _2310))
            {
              {
                int _2334 = (int)0;
                int _9714 = (int)0;
                int _9715 = _2312;
                for (int _2335 = _9714; _2335 < _9715; ++_2335)
                {
                  {
                    int _9716 = (int)0;
                    int _9717 = _2307;
                    for (int _2336 = _9716; _2336 < _9717; ++_2336)
                    {
                      {
                        _ptr__2327[_2334] = safe_add( safe_mul( _ptr__2325[_2335],_2307 ),_2336 );
                        _ptr__2326[_2334] = _ptr__2324[_2335];
                        ++ _2334;
                      }
                    }
                  }
                }
                return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2308,_2321,_2327,_2326)).as<::mosek::fusion::Variable>();
              }
            }
            else
            {
              {
                int _2337 = (int)0;
                int _9718 = (int)0;
                int _9719 = _2312;
                for (int _2338 = _9718; _2338 < _9719; ++_2338)
                {
                  {
                    long long _2339 = (_ptr__2325[_2338] / _2329);
                    long long _2340 = ((_ptr__2325[_2338] / _2330) % _2316);
                    long long _2341 = (_ptr__2325[_2338] % _2318);
                    int _9720 = (int)0;
                    int _9721 = _2307;
                    for (int _2342 = _9720; _2342 < _9721; ++_2342)
                    {
                      {
                        _ptr__2327[_2337] = safe_add( safe_add( safe_mul( _2339,_2328 ),safe_mul( safe_add( _2340,safe_mul( _2316,_2342 ) ),_2318 ) ),_2341 );
                        _ptr__2326[_2337] = _ptr__2324[_2338];
                        ++ _2337;
                      }
                    }
                  }
                }
                int _2343 = (int)1;
                int _9722 = (int)0;
                int _9723 = _2320;
                for (int _2344 = _9722; _2344 < _9723; ++_2344)
                {
                  {
                    if ((_2343 < _ptr__2321[_2344]))
                    {
                      {
                        _2343 = _ptr__2321[_2344];
                      }
                    }
                    {}
                  }
                }
                std::shared_ptr< monty::ndarray< int,1 > > _2345 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2313)));
                _checked_ptr_1<int> _ptr__2345(_2345 ? _2345->raw() : nullptr,_2345 ? _2345->size(0) : 0);
                std::shared_ptr< monty::ndarray< int,1 > > _2346 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2313)));
                _checked_ptr_1<int> _ptr__2346(_2346 ? _2346->raw() : nullptr,_2346 ? _2346->size(0) : 0);
                {
                  std::shared_ptr< monty::ndarray< int,1 > > _2347 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _2343,(int)1 ))));
                  _checked_ptr_1<int> _ptr__2347(_2347 ? _2347->raw() : nullptr,_2347 ? _2347->size(0) : 0);
                  std::shared_ptr< monty::ndarray< long long,1 > > _2348 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2320)));
                  _checked_ptr_1<long long> _ptr__2348(_2348 ? _2348->raw() : nullptr,_2348 ? _2348->size(0) : 0);
                  _ptr__2348[(_2320 - (int)1)] = (int)1;
                  int _9724 = (int)1;
                  int _9725 = _2320;
                  for (int _2349 = _9724; _2349 < _9725; ++_2349)
                  {
                    {
                      _ptr__2348[((_2320 - _2349) - (int)1)] = safe_mul( _ptr__2348[(_2320 - _2349)],_ptr__2321[(_2320 - _2349)] );
                    }
                  }
                  int _9726 = (int)0;
                  int _9727 = _2313;
                  for (int _2350 = _9726; _2350 < _9727; ++_2350)
                  {
                    {
                      _ptr__2345[_2350] = _2350;
                    }
                  }
                  int _9728 = (int)0;
                  int _9729 = _2320;
                  for (int _2351 = _9728; _2351 < _9729; ++_2351)
                  {
                    {
                      int _2352 = ((_2320 - _2351) - (int)1);
                      int _9730 = (int)0;
                      int _9731 = safe_add( _ptr__2321[_2352],(int)1 );
                      for (int _2353 = _9730; _2353 < _9731; ++_2353)
                      {
                        {
                          _ptr__2347[_2353] = (int)0;
                        }
                      }
                      int _9732 = (int)0;
                      int _9733 = _2313;
                      for (int _2354 = _9732; _2354 < _9733; ++_2354)
                      {
                        {
                          ++ _ptr__2347[safe_add( ((_ptr__2327[_2354] / _ptr__2348[_2352]) % _ptr__2321[_2352]),(int)1 )];
                        }
                      }
                      int _9734 = (int)0;
                      int _9735 = _ptr__2321[_2352];
                      for (int _2355 = _9734; _2355 < _9735; ++_2355)
                      {
                        {
                          _ptr__2347[safe_add( _2355,(int)1 )] += _ptr__2347[_2355];
                        }
                      }
                      int _9736 = (int)0;
                      int _9737 = _2313;
                      for (int _2356 = _9736; _2356 < _9737; ++_2356)
                      {
                        {
                          int _2357 = _ptr__2345[_2356];
                          long long _2358 = ((_ptr__2327[_2357] / _ptr__2348[_2352]) % _ptr__2321[_2352]);
                          _ptr__2346[_ptr__2347[_2358]] = _2357;
                          ++ _ptr__2347[_2358];
                        }
                      }
                      std::shared_ptr< monty::ndarray< int,1 > > _2359 = _2345;
                      _checked_ptr_1<int> _ptr__2359(_2359 ? _2359->raw() : nullptr,_2359 ? _2359->size(0) : 0);
                      _2345 = _2346;
                      _ptr__2345.update(_2345 ? _2345->raw() : nullptr, _2345 ? _2345->size(0) : 0);
                      _2346 = _2359;
                      _ptr__2346.update(_2346 ? _2346->raw() : nullptr, _2346 ? _2346->size(0) : 0);
                    }
                  }
                }
                std::vector<long long> _9738;
                for (int _2360 = (int)0, _9739 = _2313; _2360 < _9739 ; ++_2360)
                {
                  _9738.push_back(_ptr__2327[_ptr__2345[_2360]]);
                }
                auto _9740 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9738.size()),_9738.begin(),_9738.end()));
                std::vector<long long> _9741;
                for (int _2361 = (int)0, _9742 = _2313; _2361 < _9742 ; ++_2361)
                {
                  _9741.push_back(_ptr__2326[_ptr__2345[_2361]]);
                }
                auto _9743 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9741.size()),_9741.begin(),_9741.end()));
                return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2308,_2321,_9740,_9743)).as<::mosek::fusion::Variable>();
              }
            }
          }
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< long long,1 > > _2362 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2312)));
          _checked_ptr_1<long long> _ptr__2362(_2362 ? _2362->raw() : nullptr,_2362 ? _2362->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _2363 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( _2312,_2307 ))));
          _checked_ptr_1<long long> _ptr__2363(_2363 ? _2363->raw() : nullptr,_2363 ? _2363->size(0) : 0);
          _2305->inst((int)0,_2362);
          int _2364 = safe_mul( _2317,_2318 );
          int _2365 = _2318;
          int _2366 = (int)0;
          int _9744 = (int)0;
          int _9745 = _2314;
          for (int _2367 = _9744; _2367 < _9745; ++_2367)
          {
            {
              int _9746 = (int)0;
              int _9747 = _2316;
              for (int _2368 = _9746; _2368 < _9747; ++_2368)
              {
                {
                  int _9748 = (int)0;
                  int _9749 = _2318;
                  for (int _2369 = _9748; _2369 < _9749; ++_2369)
                  {
                    {
                      int _9750 = (int)0;
                      int _9751 = _2307;
                      for (int _2370 = _9750; _2370 < _9751; ++_2370)
                      {
                        {
                          _ptr__2363[safe_add( safe_add( safe_mul( _2367,_2364 ),safe_mul( safe_add( _2368,safe_mul( _2370,_2316 ) ),_2365 ) ),_2369 )] = _ptr__2362[_2366];
                        }
                      }
                      ++ _2366;
                    }
                  }
                }
              }
            }
          }
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2308,_2321,nullptr,_2363)).as<::mosek::fusion::Variable>();
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack  ( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >,1 > > _2371) { return mosek::fusion::p_Var::stack(_2371); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >,1 > > _2371){
  std::vector<monty::rc_ptr< ::mosek::fusion::Variable >> _9752;
  for (int _2372 = (int)0, _9753 = (int)((_2371)->size(0)); _2372 < _9753 ; ++_2372)
  {
    _9752.push_back(::mosek::fusion::p_Var::dstack(((*_2371)(_2372)),(int)1));
  }
  auto _9754 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(_9752.size()),_9752.begin(),_9752.end()));
  return ::mosek::fusion::p_Var::dstack(_9754,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _2373,    monty::rc_ptr< ::mosek::fusion::Variable > _2374,    monty::rc_ptr< ::mosek::fusion::Variable > _2375) { return mosek::fusion::p_Var::vstack(_2373,_2374,_2375); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vstack(monty::rc_ptr< ::mosek::fusion::Variable > _2373,monty::rc_ptr< ::mosek::fusion::Variable > _2374,monty::rc_ptr< ::mosek::fusion::Variable > _2375){
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2373.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2374.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2375.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _2376,    monty::rc_ptr< ::mosek::fusion::Variable > _2377) { return mosek::fusion::p_Var::vstack(_2376,_2377); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vstack(monty::rc_ptr< ::mosek::fusion::Variable > _2376,monty::rc_ptr< ::mosek::fusion::Variable > _2377){
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2376.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2377.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2378) { return mosek::fusion::p_Var::vstack(_2378); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2378){
  return ::mosek::fusion::p_Var::dstack(_2378,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _2379,    monty::rc_ptr< ::mosek::fusion::Variable > _2380,    monty::rc_ptr< ::mosek::fusion::Variable > _2381) { return mosek::fusion::p_Var::hstack(_2379,_2380,_2381); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hstack(monty::rc_ptr< ::mosek::fusion::Variable > _2379,monty::rc_ptr< ::mosek::fusion::Variable > _2380,monty::rc_ptr< ::mosek::fusion::Variable > _2381){
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2379.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2380.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2381.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _2382,    monty::rc_ptr< ::mosek::fusion::Variable > _2383) { return mosek::fusion::p_Var::hstack(_2382,_2383); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hstack(monty::rc_ptr< ::mosek::fusion::Variable > _2382,monty::rc_ptr< ::mosek::fusion::Variable > _2383){
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2382.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2383.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2384) { return mosek::fusion::p_Var::hstack(_2384); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2384){
  return ::mosek::fusion::p_Var::dstack(_2384,(int)1);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack  ( monty::rc_ptr< ::mosek::fusion::Variable > _2385,    monty::rc_ptr< ::mosek::fusion::Variable > _2386,    monty::rc_ptr< ::mosek::fusion::Variable > _2387,    int _2388) { return mosek::fusion::p_Var::stack(_2385,_2386,_2387,_2388); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(monty::rc_ptr< ::mosek::fusion::Variable > _2385,monty::rc_ptr< ::mosek::fusion::Variable > _2386,monty::rc_ptr< ::mosek::fusion::Variable > _2387,int _2388){
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2385.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2386.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2387.get())}),_2388);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack  ( monty::rc_ptr< ::mosek::fusion::Variable > _2389,    monty::rc_ptr< ::mosek::fusion::Variable > _2390,    int _2391) { return mosek::fusion::p_Var::stack(_2389,_2390,_2391); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(monty::rc_ptr< ::mosek::fusion::Variable > _2389,monty::rc_ptr< ::mosek::fusion::Variable > _2390,int _2391){
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2389.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2390.get())}),_2391);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2392,    int _2393) { return mosek::fusion::p_Var::stack(_2392,_2393); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2392,int _2393){
  int _2394 = _2393;
  int _9755 = (int)0;
  int _9756 = (int)((_2392)->size(0));
  for (int _2395 = _9755; _2395 < _9756; ++_2395)
  {
    {
      if ((_2394 < ((*_2392)(_2395))->getND()))
      {
        {
          _2394 = ((*_2392)(_2395))->getND();
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Var::dstack(_2392,_2393);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::promote  ( monty::rc_ptr< ::mosek::fusion::Variable > _2396,    int _2397) { return mosek::fusion::p_Var::promote(_2396,_2397); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::promote(monty::rc_ptr< ::mosek::fusion::Variable > _2396,int _2397){
  if ((_2397 > _2396->getND()))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _2398 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2397)));
      _checked_ptr_1<int> _ptr__2398(_2398 ? _2398->raw() : nullptr,_2398 ? _2398->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2399 = _2396->getShape();
      _checked_ptr_1<int> _ptr__2399(_2399 ? _2399->raw() : nullptr,_2399 ? _2399->size(0) : 0);
      int _9757 = (int)0;
      int _9758 = (int)((_2399)->size(0));
      for (int _2400 = _9757; _2400 < _9758; ++_2400)
      {
        {
          _ptr__2398[_2400] = _ptr__2399[_2400];
        }
      }
      int _9759 = (int)((_2399)->size(0));
      int _9760 = _2397;
      for (int _2401 = _9759; _2401 < _9760; ++_2401)
      {
        {
          _ptr__2398[_2401] = (int)1;
        }
      }
      return _2396->__mosek_2fusion_2Variable__reshape(_2398);
    }
  }
  else
  {
    {
      return _2396;
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2402,int _2403){
  if ((_2403 < (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid stacking dimension"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::Model > _2404 = nullptr;
  {
    int _9761 = (int)0;
    int _9762 = (int)((_2402)->size(0));
    for (int _2405 = _9761; _2405 < _9762; ++_2405)
    {
      {
        if ((NULL == _2404.get()))
        {
          {
            _2404 = ((*_2402)(_2405))->__mosek_2fusion_2Variable__getModel();
          }
        }
        else if(((NULL != ((*_2402)(_2405))->__mosek_2fusion_2Variable__getModel().get()) && (((*_2402)(_2405))->__mosek_2fusion_2Variable__getModel() != _2404)))
        {
          {
            monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2406 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
            std::string _9763;
            bool _9764 = ((int)((mosek::fusion::p_Model::_get_impl(_2404.get())->getName()).size()) > (int)0);
            if (_9764)
            {
              _9763 = mosek::fusion::p_Model::_get_impl(_2404.get())->getName();
            }
            else
            {
              _9763 = std::string ("?");
            }
            std::string _2407 = _9763;
            std::string _9765;
            bool _9766 = ((int)((mosek::fusion::p_Model::_get_impl(((*_2402)(_2405))->__mosek_2fusion_2Variable__getModel().get())->getName()).size()) > (int)0);
            if (_9766)
            {
              _9765 = mosek::fusion::p_Model::_get_impl(((*_2402)(_2405))->__mosek_2fusion_2Variable__getModel().get())->getName();
            }
            else
            {
              _9765 = std::string ("?");
            }
            std::string _2408 = _9765;
            _2406->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Variables belong to different models: '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2407)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("' and '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2408)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"));
            throw ::mosek::fusion::ModelError(_2406->toString());
          }
        }
        {}
      }
    }
  }
  if (((int)((_2402)->size(0)) == (int)0))
  {
    {
      return (::mosek::fusion::p_NilVariable::_new_NilVariable()).as<::mosek::fusion::Variable>();
    }
  }
  else if(((int)((_2402)->size(0)) == (int)1))
  {
    {
      return ((*_2402)((int)0));
    }
  }
  else
  {
    {
      int _2409 = (int)((_2402)->size(0));
      std::vector<int> _9767;
      for (int _2411 = (int)0, _9768 = _2409; _2411 < _9768 ; ++_2411)
      {
        _9767.push_back(((*_2402)(_2411))->numInst());
      }
      auto _9769 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9767.size()),_9767.begin(),_9767.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2410 = _9769;
      _checked_ptr_1<int> _ptr__2410(_2410 ? _2410->raw() : nullptr,_2410 ? _2410->size(0) : 0);
      std::vector<std::shared_ptr< monty::ndarray< int,1 > >> _9770;
      for (int _2413 = (int)0, _9771 = _2409; _2413 < _9771 ; ++_2413)
      {
        _9770.push_back(((*_2402)(_2413))->getShape());
      }
      auto _9772 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 >(monty::shape(_9770.size()),_9770.begin(),_9770.end()));
      std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _2412 = _9772;
      std::vector<int> _9773;
      for (int _2415 = (int)0, _9774 = _2409; _2415 < _9774 ; ++_2415)
      {
        _9773.push_back((int)((((*_2412)(_2415)))->size(0)));
      }
      auto _9775 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9773.size()),_9773.begin(),_9773.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2414 = _9775;
      _checked_ptr_1<int> _ptr__2414(_2414 ? _2414->raw() : nullptr,_2414 ? _2414->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2416 = ((*_2412)((int)0));
      _checked_ptr_1<int> _ptr__2416(_2416 ? _2416->raw() : nullptr,_2416 ? _2416->size(0) : 0);
      int _2417 = _ptr__2414[(int)0];
      int _2418 = (int)0;
      int _9776 = (int)0;
      int _9777 = _2409;
      for (int _2419 = _9776; _2419 < _9777; ++_2419)
      {
        {
          _2418 += _ptr__2410[_2419];
        }
      }
      int _2420 = safe_add( _2403,(int)1 );
      int _9778 = (int)0;
      int _9779 = _2409;
      for (int _2421 = _9778; _2421 < _9779; ++_2421)
      {
        {
          if ((_2420 < _ptr__2414[_2421]))
          {
            {
              _2420 = _ptr__2414[_2421];
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _2422 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2420)));
      _checked_ptr_1<int> _ptr__2422(_2422 ? _2422->raw() : nullptr,_2422 ? _2422->size(0) : 0);
      int _9780 = (int)0;
      int _9781 = _2417;
      for (int _2423 = _9780; _2423 < _9781; ++_2423)
      {
        {
          _ptr__2422[_2423] = _ptr__2416[_2423];
        }
      }
      int _9782 = _2417;
      int _9783 = _2420;
      for (int _2424 = _9782; _2424 < _9783; ++_2424)
      {
        {
          _ptr__2422[_2424] = (int)1;
        }
      }
      _ptr__2422[_2403] = (int)0;
      int _9784 = (int)0;
      int _9785 = _2409;
      for (int _2425 = _9784; _2425 < _9785; ++_2425)
      {
        {
          int _9786;
          bool _9787 = ((int)((((*_2412)(_2425)))->size(0)) > _2403);
          if (_9787)
          {
            _9786 = ((*((*_2412)(_2425)))(_2403));
          }
          else
          {
            _9786 = (int)1;
          }
          _ptr__2422[_2403] += _9786;
        }
      }
      int _9788 = (int)0;
      int _9789 = _2409;
      for (int _2426 = _9788; _2426 < _9789; ++_2426)
      {
        {
          int _9790 = (int)0;
          int _9791 = (int)((((*_2412)(_2426)))->size(0));
          for (int _2427 = _9790; _2427 < _9791; ++_2427)
          {
            {
              if (((_2427 != _2403) && (((*((*_2412)(_2426)))(_2427)) != _ptr__2422[_2427])))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Variable dimensions do not match"));
                }
              }
              {}
            }
          }
          int _9792 = (int)((((*_2412)(_2426)))->size(0));
          int _9793 = _2420;
          for (int _2428 = _9792; _2428 < _9793; ++_2428)
          {
            {
              if (((_2428 != _2403) && ((int)1 != _ptr__2422[_2428])))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Variable dimensions do not match"));
                }
              }
              {}
            }
          }
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _2429 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2418)));
      _checked_ptr_1<long long> _ptr__2429(_2429 ? _2429->raw() : nullptr,_2429 ? _2429->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _2430 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2418)));
      _checked_ptr_1<long long> _ptr__2430(_2430 ? _2430->raw() : nullptr,_2430 ? _2430->size(0) : 0);
      std::vector<int> _9794;
      for (int _2432 = (int)0, _9795 = (int)((_2402)->size(0)); _2432 < _9795 ; ++_2432)
      {
        int _9796;
        bool _9797 = (_2403 < (int)((((*_2412)(_2432)))->size(0)));
        if (_9797)
        {
          _9796 = ((*((*_2412)(_2432)))(_2403));
        }
        else
        {
          _9796 = (int)1;
        }
        _9794.push_back(_9796);
      }
      auto _9798 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9794.size()),_9794.begin(),_9794.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2431 = _9798;
      _checked_ptr_1<int> _ptr__2431(_2431 ? _2431->raw() : nullptr,_2431 ? _2431->size(0) : 0);
      int _2433 = (int)1;
      int _9799 = (int)0;
      int _9800 = _2403;
      for (int _2434 = _9799; _2434 < _9800; ++_2434)
      {
        {
          int _9801;
          bool _9802 = (_2434 < (int)((_2416)->size(0)));
          if (_9802)
          {
            _9801 = _ptr__2416[_2434];
          }
          else
          {
            _9801 = (int)1;
          }
          _2433 *= _9801;
        }
      }
      int _2435 = (int)0;
      int _9803 = (int)0;
      int _9804 = _2409;
      for (int _2436 = _9803; _2436 < _9804; ++_2436)
      {
        {
          _2435 += _ptr__2431[_2436];
        }
      }
      int _2437 = (int)1;
      int _9805 = safe_add( _2403,(int)1 );
      int _9806 = (int)((_2416)->size(0));
      for (int _2438 = _9805; _2438 < _9806; ++_2438)
      {
        {
          _2437 *= _ptr__2416[_2438];
        }
      }
      if ((_2433 == (int)1))
      {
        {
          int _2439 = (int)0;
          long long _2440 = (int)0;
          int _9807 = (int)0;
          int _9808 = _2409;
          for (int _2441 = _9807; _2441 < _9808; ++_2441)
          {
            {
              ((*_2402)(_2441))->inst(_2439,_2430,_2439,_2429);
              int _9809 = (int)0;
              int _9810 = _ptr__2410[_2441];
              for (int _2442 = _9809; _2442 < _9810; ++_2442)
              {
                {
                  _ptr__2430[_2439] += _2440;
                  ++ _2439;
                }
              }
              _2440 += ::mosek::fusion::p_Set::size(((*_2412)(_2441)));
            }
          }
          std::shared_ptr< monty::ndarray< long long,1 > > _9811;
          bool _9812 = (_2418 < safe_mul( safe_mul( _2433,_2435 ),_2437 ));
          if (_9812)
          {
            _9811 = _2430;
          }
          else
          {
            _9811 = nullptr;
          }
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2404,_2422,_9811,_2429)).as<::mosek::fusion::Variable>();
        }
      }
      else
      {
        {
          int _2443 = (int)0;
          int _9813 = (int)0;
          int _9814 = _2409;
          for (int _2444 = _9813; _2444 < _9814; ++_2444)
          {
            {
              _2443 += ((*_2402)(_2444))->inst(_2443,_2430,_2443,_2429);
            }
          }
          std::shared_ptr< monty::ndarray< int,1 > > _2445 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2418)));
          _checked_ptr_1<int> _ptr__2445(_2445 ? _2445->raw() : nullptr,_2445 ? _2445->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2446 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2418)));
          _checked_ptr_1<int> _ptr__2446(_2446 ? _2446->raw() : nullptr,_2446 ? _2446->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2447 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2409)));
          _checked_ptr_1<int> _ptr__2447(_2447 ? _2447->raw() : nullptr,_2447 ? _2447->size(0) : 0);
          int _9815 = (int)0;
          int _9816 = (_2409 - (int)1);
          for (int _2448 = _9815; _2448 < _9816; ++_2448)
          {
            {
              _ptr__2447[safe_add( _2448,(int)1 )] = safe_add( _ptr__2447[_2448],_ptr__2431[_2448] );
            }
          }
          int _9817 = (int)0;
          int _9818 = _2418;
          for (int _2449 = _9817; _2449 < _9818; ++_2449)
          {
            {
              _ptr__2445[_2449] = _2449;
            }
          }
          int _2450 = (int)0;
          int _9819 = (int)0;
          int _9820 = _2409;
          for (int _2451 = _9819; _2451 < _9820; ++_2451)
          {
            {
              int _9821 = (int)0;
              int _9822 = _ptr__2410[_2451];
              for (int _2452 = _9821; _2452 < _9822; ++_2452)
              {
                {
                  long long _2453 = (_ptr__2430[_2450] / safe_mul( _ptr__2431[_2451],_2437 ));
                  long long _2454 = ((_ptr__2430[_2450] / _2437) % _ptr__2431[_2451]);
                  long long _2455 = (_ptr__2430[_2450] % _2437);
                  _ptr__2430[_2450] = safe_add( safe_mul( safe_add( safe_add( safe_mul( _2453,_2435 ),_2454 ),_ptr__2447[_2451] ),_2437 ),_2455 );
                  ++ _2450;
                }
              }
            }
          }
          int _2456 = (int)1;
          int _9823 = (int)0;
          int _9824 = _2420;
          for (int _2457 = _9823; _2457 < _9824; ++_2457)
          {
            {
              int _9825;
              bool _9826 = (_2456 < _ptr__2422[_2457]);
              if (_9826)
              {
                _9825 = _ptr__2422[_2457];
              }
              else
              {
                _9825 = _2456;
              }
              _2456 = _9825;
            }
          }
          std::shared_ptr< monty::ndarray< long long,1 > > _2458 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2420)));
          _checked_ptr_1<long long> _ptr__2458(_2458 ? _2458->raw() : nullptr,_2458 ? _2458->size(0) : 0);
          _ptr__2458[(_2420 - (int)1)] = (int)1;
          int _9827 = (int)1;
          int _9828 = _2420;
          for (int _2459 = _9827; _2459 < _9828; ++_2459)
          {
            {
              _ptr__2458[((_2420 - _2459) - (int)1)] = safe_mul( _ptr__2458[(_2420 - _2459)],_ptr__2422[(_2420 - _2459)] );
            }
          }
          std::shared_ptr< monty::ndarray< int,1 > > _2460 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _2456,(int)1 ))));
          _checked_ptr_1<int> _ptr__2460(_2460 ? _2460->raw() : nullptr,_2460 ? _2460->size(0) : 0);
          int _9829 = (int)0;
          int _9830 = _2420;
          for (int _2461 = _9829; _2461 < _9830; ++_2461)
          {
            {
              int _2462 = ((_2420 - _2461) - (int)1);
              int _9831 = (int)0;
              int _9832 = safe_add( _ptr__2422[_2462],(int)1 );
              for (int _2463 = _9831; _2463 < _9832; ++_2463)
              {
                {
                  _ptr__2460[_2463] = (int)0;
                }
              }
              int _9833 = (int)0;
              int _9834 = _2418;
              for (int _2464 = _9833; _2464 < _9834; ++_2464)
              {
                {
                  ++ _ptr__2460[safe_add( ((_ptr__2430[_2464] / _ptr__2458[_2462]) % _ptr__2422[_2462]),(int)1 )];
                }
              }
              int _9835 = (int)0;
              int _9836 = _ptr__2422[_2462];
              for (int _2465 = _9835; _2465 < _9836; ++_2465)
              {
                {
                  _ptr__2460[safe_add( _2465,(int)1 )] += _ptr__2460[_2465];
                }
              }
              int _9837 = (int)0;
              int _9838 = _2418;
              for (int _2466 = _9837; _2466 < _9838; ++_2466)
              {
                {
                  int _2467 = _ptr__2445[_2466];
                  long long _2468 = ((_ptr__2430[_2467] / _ptr__2458[_2462]) % _ptr__2422[_2462]);
                  _ptr__2446[_ptr__2460[_2468]] = _2467;
                  ++ _ptr__2460[_2468];
                }
              }
              std::shared_ptr< monty::ndarray< int,1 > > _2469 = _2445;
              _checked_ptr_1<int> _ptr__2469(_2469 ? _2469->raw() : nullptr,_2469 ? _2469->size(0) : 0);
              _2445 = _2446;
              _ptr__2445.update(_2445 ? _2445->raw() : nullptr, _2445 ? _2445->size(0) : 0);
              _2446 = _2469;
              _ptr__2446.update(_2446 ? _2446->raw() : nullptr, _2446 ? _2446->size(0) : 0);
            }
          }
          std::shared_ptr< monty::ndarray< long long,1 > > _9839;
          bool _9840 = (_2418 < safe_mul( safe_mul( _2433,_2435 ),_2437 ));
          if (_9840)
          {
            std::vector<long long> _9841;
            for (int _2470 = (int)0, _9842 = _2418; _2470 < _9842 ; ++_2470)
            {
              _9841.push_back(_ptr__2430[_ptr__2445[_2470]]);
            }
            auto _9843 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9841.size()),_9841.begin(),_9841.end()));
            _9839 = _9843;
          }
          else
          {
            _9839 = nullptr;
          }
          std::vector<long long> _9844;
          for (int _2471 = (int)0, _9845 = _2418; _2471 < _9845 ; ++_2471)
          {
            _9844.push_back(_ptr__2429[_ptr__2445[_2471]]);
          }
          auto _9846 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9844.size()),_9844.begin(),_9844.end()));
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2404,_2422,_9839,_9846)).as<::mosek::fusion::Variable>();
        }
      }
    }
  }
}
void mosek::fusion::p_Var::destroy(){}void mosek::fusion::Var::destroy() { mosek::fusion::p_Var::_get_impl(this)->destroy(); }mosek::fusion::LinearPSDConstraint::LinearPSDConstraint(mosek::fusion::p_LinearPSDConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "LinearPSDConstraint()" << this << std::endl; */ }mosek::fusion::LinearPSDConstraint::~LinearPSDConstraint() {  /* std::cout << "~LinearPSDConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_LinearPSDConstraint::p_LinearPSDConstraint  (::mosek::fusion::LinearPSDConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::LinearPSDConstraint::t mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint  (monty::rc_ptr< ::mosek::fusion::LinearPSDConstraint > _2472,    monty::rc_ptr< ::mosek::fusion::Model > _2473){ return new mosek::fusion::LinearPSDConstraint(_2472,_2473); }mosek::fusion::LinearPSDConstraint::LinearPSDConstraint  (monty::rc_ptr< ::mosek::fusion::LinearPSDConstraint > _2472,    monty::rc_ptr< ::mosek::fusion::Model > _2473) :    LinearPSDConstraint(new mosek::fusion::p_LinearPSDConstraint(this)){ mosek::fusion::p_LinearPSDConstraint::_get_impl(this)->_initialize(_2472,_2473); }void mosek::fusion::p_LinearPSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearPSDConstraint > _2472,    monty::rc_ptr< ::mosek::fusion::Model > _2473){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelConstraint::_initialize(_2472,_2473);
    conid = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2472)->conid;
    slackidxs = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2472)->slackidxs;
    nativeidxs = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2472)->nativeidxs;
    conedim = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2472)->conedim;
    shape = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2472)->shape;
  }
}mosek::fusion::LinearPSDConstraint::t mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2474,    const std::string &  _2475,    int _2476,    std::shared_ptr< monty::ndarray< int,1 > > _2477,    int _2478,    std::shared_ptr< monty::ndarray< int,1 > > _2479,    std::shared_ptr< monty::ndarray< long long,1 > > _2480){ return new mosek::fusion::LinearPSDConstraint(_2474,_2475,_2476,_2477,_2478,_2479,_2480); }mosek::fusion::LinearPSDConstraint::LinearPSDConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2474,    const std::string &  _2475,    int _2476,    std::shared_ptr< monty::ndarray< int,1 > > _2477,    int _2478,    std::shared_ptr< monty::ndarray< int,1 > > _2479,    std::shared_ptr< monty::ndarray< long long,1 > > _2480) :    LinearPSDConstraint(new mosek::fusion::p_LinearPSDConstraint(this)){ mosek::fusion::p_LinearPSDConstraint::_get_impl(this)->_initialize(_2474,_2475,_2476,_2477,_2478,_2479,_2480); }void mosek::fusion::p_LinearPSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2474,    const std::string &  _2475,    int _2476,    std::shared_ptr< monty::ndarray< int,1 > > _2477,    int _2478,    std::shared_ptr< monty::ndarray< int,1 > > _2479,    std::shared_ptr< monty::ndarray< long long,1 > > _2480){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2477(_2477 ? _2477->raw() : nullptr, _2477 ? _2477->size(0) : 0);
    _checked_ptr_1<int> _ptr__2479(_2479 ? _2479->raw() : nullptr, _2479 ? _2479->size(0) : 0);
    _checked_ptr_1<long long> _ptr__2480(_2480 ? _2480->raw() : nullptr, _2480 ? _2480->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2474,_2475,_2477,_2479,_2476);
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->conid = _2476;
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->slackidxs = _2480;
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->nativeidxs = _2479;
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->conedim = _2478;
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->shape = _2477;
  }
}void mosek::fusion::p_LinearPSDConstraint::domainToString(long long _2481,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2482){
  std::shared_ptr< monty::ndarray< int,1 > > _2483 = ::mosek::fusion::p_Set::idxtokey(shape,_2481);
  _checked_ptr_1<int> _ptr__2483(_2483 ? _2483->raw() : nullptr,_2483 ? _2483->size(0) : 0);
  _2482->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" : element ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2483[(int)0]);
  int _9847 = (int)1;
  int _9848 = (int)((_2483)->size(0));
  for (int _2484 = _9847; _2484 < _9848; ++_2484)
  {
    {
      _2482->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2483[_2484]);
    }
  }
  _2482->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") in a positive semi-definite cone of size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
  int _9849 = (int)1;
  int _9850 = (int)((_2483)->size(0));
  for (int _2485 = _9849; _2485 < _9850; ++_2485)
  {
    {
      _2482->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_2485)));
    }
  }
  _2482->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
}
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_LinearPSDConstraint::__mosek_2fusion_2LinearPSDConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2486){
  return (::mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint(::mosek::fusion::LinearPSDConstraint::t(_pubthis),_2486)).as<::mosek::fusion::ModelConstraint>();
}
void mosek::fusion::p_LinearPSDConstraint::destroy(){shape.reset();slackidxs.reset();nativeidxs.reset();}void mosek::fusion::LinearPSDConstraint::destroy() { mosek::fusion::p_LinearPSDConstraint::_get_impl(this)->destroy(); }mosek::fusion::PSDConstraint::PSDConstraint(mosek::fusion::p_PSDConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "PSDConstraint()" << this << std::endl; */ }mosek::fusion::PSDConstraint::~PSDConstraint() {  /* std::cout << "~PSDConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_PSDConstraint::p_PSDConstraint  (::mosek::fusion::PSDConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::PSDConstraint::t mosek::fusion::p_PSDConstraint::_new_PSDConstraint  (monty::rc_ptr< ::mosek::fusion::PSDConstraint > _2487,    monty::rc_ptr< ::mosek::fusion::Model > _2488){ return new mosek::fusion::PSDConstraint(_2487,_2488); }mosek::fusion::PSDConstraint::PSDConstraint  (monty::rc_ptr< ::mosek::fusion::PSDConstraint > _2487,    monty::rc_ptr< ::mosek::fusion::Model > _2488) :    PSDConstraint(new mosek::fusion::p_PSDConstraint(this)){ mosek::fusion::p_PSDConstraint::_get_impl(this)->_initialize(_2487,_2488); }void mosek::fusion::p_PSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::PSDConstraint > _2487,    monty::rc_ptr< ::mosek::fusion::Model > _2488){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelConstraint::_initialize(_2487,_2488);
    conid = mosek::fusion::p_PSDConstraint::_get_impl(_2487)->conid;
    name = mosek::fusion::p_PSDConstraint::_get_impl(_2487)->name;
    shape = mosek::fusion::p_PSDConstraint::_get_impl(_2487)->shape;
    slackidxs = mosek::fusion::p_PSDConstraint::_get_impl(_2487)->slackidxs;
    nativeidxs = mosek::fusion::p_PSDConstraint::_get_impl(_2487)->nativeidxs;
    names_flushed = mosek::fusion::p_PSDConstraint::_get_impl(_2487)->names_flushed;
    conedim0 = mosek::fusion::p_PSDConstraint::_get_impl(_2487)->conedim0;
    conedim1 = mosek::fusion::p_PSDConstraint::_get_impl(_2487)->conedim1;
  }
}mosek::fusion::PSDConstraint::t mosek::fusion::p_PSDConstraint::_new_PSDConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2489,    const std::string &  _2490,    int _2491,    std::shared_ptr< monty::ndarray< int,1 > > _2492,    int _2493,    int _2494,    std::shared_ptr< monty::ndarray< long long,1 > > _2495,    std::shared_ptr< monty::ndarray< int,1 > > _2496){ return new mosek::fusion::PSDConstraint(_2489,_2490,_2491,_2492,_2493,_2494,_2495,_2496); }mosek::fusion::PSDConstraint::PSDConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2489,    const std::string &  _2490,    int _2491,    std::shared_ptr< monty::ndarray< int,1 > > _2492,    int _2493,    int _2494,    std::shared_ptr< monty::ndarray< long long,1 > > _2495,    std::shared_ptr< monty::ndarray< int,1 > > _2496) :    PSDConstraint(new mosek::fusion::p_PSDConstraint(this)){ mosek::fusion::p_PSDConstraint::_get_impl(this)->_initialize(_2489,_2490,_2491,_2492,_2493,_2494,_2495,_2496); }void mosek::fusion::p_PSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2489,    const std::string &  _2490,    int _2491,    std::shared_ptr< monty::ndarray< int,1 > > _2492,    int _2493,    int _2494,    std::shared_ptr< monty::ndarray< long long,1 > > _2495,    std::shared_ptr< monty::ndarray< int,1 > > _2496){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2492(_2492 ? _2492->raw() : nullptr, _2492 ? _2492->size(0) : 0);
    _checked_ptr_1<long long> _ptr__2495(_2495 ? _2495->raw() : nullptr, _2495 ? _2495->size(0) : 0);
    _checked_ptr_1<int> _ptr__2496(_2496 ? _2496->raw() : nullptr, _2496 ? _2496->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2489,_2490,_2492,::mosek::fusion::p_PSDConstraint::computenidxs(_2492,_2493,_2494,_2496),_2491);
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->conid = _2491;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->nativeidxs = _2496;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->slackidxs = _2495;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->name = _2490;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->shape = _2492;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->conedim0 = _2493;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->conedim1 = _2494;
    names_flushed = false;
  }
}std::string mosek::fusion::PSDConstraint :: toString() { return mosek::fusion::p_PSDConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_PSDConstraint::toString(){
  throw ::mosek::fusion::UnimplementedError(std::string ("PSDConstraint.toString not implemented"));
}
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_PSDConstraint::__mosek_2fusion_2PSDConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2497){
  return (::mosek::fusion::p_PSDConstraint::_new_PSDConstraint(::mosek::fusion::PSDConstraint::t(_pubthis),_2497)).as<::mosek::fusion::ModelConstraint>();
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_PSDConstraint::computenidxs(std::shared_ptr< monty::ndarray< int,1 > > _2498,int _2499,int _2500,std::shared_ptr< monty::ndarray< int,1 > > _2501){
  _checked_ptr_1<int> _ptr__2498(_2498 ? _2498->raw() : nullptr, _2498 ? _2498->size(0) : 0);
  _checked_ptr_1<int> _ptr__2501(_2501 ? _2501->raw() : nullptr, _2501 ? _2501->size(0) : 0);
  int _2502 = (int)((_2498)->size(0));
  bool _2503 = (_2499 < _2500);
  int _9851;
  bool _9852 = _2503;
  if (_9852)
  {
    _9851 = _2499;
  }
  else
  {
    _9851 = _2500;
  }
  int _2504 = _9851;
  int _9853;
  bool _9854 = _2503;
  if (_9854)
  {
    _9853 = _2500;
  }
  else
  {
    _9853 = _2499;
  }
  int _2505 = _9853;
  std::shared_ptr< monty::ndarray< int,1 > > _2506 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((int)1),(int)((int)1),(int)((int)1),(int)((int)1)});
  _checked_ptr_1<int> _ptr__2506(_2506 ? _2506->raw() : nullptr,_2506 ? _2506->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _2507 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)5)));
  _checked_ptr_1<int> _ptr__2507(_2507 ? _2507->raw() : nullptr,_2507 ? _2507->size(0) : 0);
  int _2508 = (int)1;
  int _9855 = (int)0;
  int _9856 = (int)((_2498)->size(0));
  for (int _2509 = _9855; _2509 < _9856; ++_2509)
  {
    {
      _2508 *= _ptr__2498[_2509];
    }
  }
  int _9857 = (int)0;
  int _9858 = _2504;
  for (int _2510 = _9857; _2510 < _9858; ++_2510)
  {
    {
      _ptr__2506[(int)0] *= _ptr__2498[_2510];
    }
  }
  _ptr__2506[(int)1] = _ptr__2498[_2504];
  int _9859 = safe_add( _2504,(int)1 );
  int _9860 = _2505;
  for (int _2511 = _9859; _2511 < _9860; ++_2511)
  {
    {
      _ptr__2506[(int)2] *= _ptr__2498[_2511];
    }
  }
  _ptr__2506[(int)3] = _ptr__2498[_2505];
  int _9861 = safe_add( _2505,(int)1 );
  int _9862 = _2502;
  for (int _2512 = _9861; _2512 < _9862; ++_2512)
  {
    {
      _ptr__2506[(int)4] *= _ptr__2498[_2512];
    }
  }
  _ptr__2507[(int)4] = (int)1;
  int _9863 = (int)1;
  int _9864 = (int)5;
  for (int _2513 = _9863; _2513 < _9864; ++_2513)
  {
    {
      _ptr__2507[(((int)5 - _2513) - (int)1)] = safe_mul( _ptr__2507[((int)5 - _2513)],_ptr__2506[((int)5 - _2513)] );
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _2514 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2508)));
  _checked_ptr_1<int> _ptr__2514(_2514 ? _2514->raw() : nullptr,_2514 ? _2514->size(0) : 0);
  int _2515 = (int)0;
  if (_2503)
  {
    {
      int _9865 = (int)0;
      int _9866 = _ptr__2506[(int)0];
      for (int _2516 = _9865; _2516 < _9866; ++_2516)
      {
        {
          int _9867 = (int)0;
          int _9868 = _ptr__2506[(int)1];
          for (int _2517 = _9867; _2517 < _9868; ++_2517)
          {
            {
              int _9869 = (int)0;
              int _9870 = _ptr__2506[(int)2];
              for (int _2518 = _9869; _2518 < _9870; ++_2518)
              {
                {
                  int _9871 = _2517;
                  int _9872 = _ptr__2506[(int)1];
                  for (int _2519 = _9871; _2519 < _9872; ++_2519)
                  {
                    {
                      int _9873 = (int)0;
                      int _9874 = _ptr__2506[(int)4];
                      for (int _2520 = _9873; _2520 < _9874; ++_2520)
                      {
                        {
                          _ptr__2514[safe_add( safe_add( safe_add( safe_add( safe_mul( _2516,_ptr__2507[(int)0] ),safe_mul( _2517,_ptr__2507[(int)1] ) ),safe_mul( _2518,_ptr__2507[(int)2] ) ),safe_mul( _2519,_ptr__2507[(int)3] ) ),safe_mul( _2520,_ptr__2507[(int)4] ) )] = _ptr__2501[_2515];
                          _ptr__2514[safe_add( safe_add( safe_add( safe_add( safe_mul( _2516,_ptr__2507[(int)0] ),safe_mul( _2519,_ptr__2507[(int)1] ) ),safe_mul( _2518,_ptr__2507[(int)2] ) ),safe_mul( _2517,_ptr__2507[(int)3] ) ),safe_mul( _2520,_ptr__2507[(int)4] ) )] = _ptr__2501[_2515];
                          ++ _2515;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int _9875 = (int)0;
      int _9876 = _ptr__2506[(int)0];
      for (int _2521 = _9875; _2521 < _9876; ++_2521)
      {
        {
          int _9877 = (int)0;
          int _9878 = _ptr__2506[(int)1];
          for (int _2522 = _9877; _2522 < _9878; ++_2522)
          {
            {
              int _9879 = (int)0;
              int _9880 = _ptr__2506[(int)2];
              for (int _2523 = _9879; _2523 < _9880; ++_2523)
              {
                {
                  int _9881 = (int)0;
                  int _9882 = safe_add( _2522,(int)1 );
                  for (int _2524 = _9881; _2524 < _9882; ++_2524)
                  {
                    {
                      int _9883 = (int)0;
                      int _9884 = _ptr__2506[(int)4];
                      for (int _2525 = _9883; _2525 < _9884; ++_2525)
                      {
                        {
                          _ptr__2514[safe_add( safe_add( safe_add( safe_add( safe_mul( _2521,_ptr__2507[(int)0] ),safe_mul( _2522,_ptr__2507[(int)1] ) ),safe_mul( _2523,_ptr__2507[(int)2] ) ),safe_mul( _2524,_ptr__2507[(int)3] ) ),safe_mul( _2525,_ptr__2507[(int)4] ) )] = _ptr__2501[_2515];
                          _ptr__2514[safe_add( safe_add( safe_add( safe_add( safe_mul( _2521,_ptr__2507[(int)0] ),safe_mul( _2524,_ptr__2507[(int)1] ) ),safe_mul( _2523,_ptr__2507[(int)2] ) ),safe_mul( _2522,_ptr__2507[(int)3] ) ),safe_mul( _2525,_ptr__2507[(int)4] ) )] = _ptr__2501[_2515];
                          ++ _2515;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return _2514;
}
void mosek::fusion::p_PSDConstraint::destroy(){shape.reset();slackidxs.reset();nativeidxs.reset();}void mosek::fusion::PSDConstraint::destroy() { mosek::fusion::p_PSDConstraint::_get_impl(this)->destroy(); }mosek::fusion::ConstraintCache::ConstraintCache(mosek::fusion::p_ConstraintCache *_impl) : _impl(_impl) { /*std::cout << "ConstraintCache() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::ConstraintCache::~ConstraintCache() { delete _impl; _impl = nullptr; }mosek::fusion::p_ConstraintCache::p_ConstraintCache  (::mosek::fusion::ConstraintCache * _pubthis) :     _pubthis(_pubthis){}std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_barmatidx() { return _impl->barmatidx; }
void mosek::fusion::ConstraintCache::set_barmatidx(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->barmatidx = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_barsubj() { return _impl->barsubj; }
void mosek::fusion::ConstraintCache::set_barsubj(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->barsubj = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_barsubi() { return _impl->barsubi; }
void mosek::fusion::ConstraintCache::set_barsubi(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->barsubi = _val; }
long long mosek::fusion::ConstraintCache::get_nbarnz() { return _impl->nbarnz; }
void mosek::fusion::ConstraintCache::set_nbarnz(long long _val) { _impl->nbarnz = _val; }
long long mosek::fusion::ConstraintCache::get_nunordered() { return _impl->nunordered; }
void mosek::fusion::ConstraintCache::set_nunordered(long long _val) { _impl->nunordered = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_buffer_subi() { return _impl->buffer_subi; }
void mosek::fusion::ConstraintCache::set_buffer_subi(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->buffer_subi = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_buffer_subj() { return _impl->buffer_subj; }
void mosek::fusion::ConstraintCache::set_buffer_subj(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->buffer_subj = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::ConstraintCache::get_buffer_cof() { return _impl->buffer_cof; }
void mosek::fusion::ConstraintCache::set_buffer_cof(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->buffer_cof = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::ConstraintCache::get_bfix() { return _impl->bfix; }
void mosek::fusion::ConstraintCache::set_bfix(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->bfix = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::ConstraintCache::get_cof() { return _impl->cof; }
void mosek::fusion::ConstraintCache::set_cof(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->cof = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_subi() { return _impl->subi; }
void mosek::fusion::ConstraintCache::set_subi(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->subi = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_subj() { return _impl->subj; }
void mosek::fusion::ConstraintCache::set_subj(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->subj = _val; }
long long mosek::fusion::ConstraintCache::get_nnz() { return _impl->nnz; }
void mosek::fusion::ConstraintCache::set_nnz(long long _val) { _impl->nnz = _val; }
int mosek::fusion::ConstraintCache::get_nrows() { return _impl->nrows; }
void mosek::fusion::ConstraintCache::set_nrows(int _val) { _impl->nrows = _val; }
mosek::fusion::ConstraintCache::t mosek::fusion::p_ConstraintCache::_new_ConstraintCache  (monty::rc_ptr< ::mosek::fusion::ConstraintCache > _2526){ return new mosek::fusion::ConstraintCache(_2526); }mosek::fusion::ConstraintCache::ConstraintCache  (monty::rc_ptr< ::mosek::fusion::ConstraintCache > _2526) :    ConstraintCache(new mosek::fusion::p_ConstraintCache(this)){ mosek::fusion::p_ConstraintCache::_get_impl(this)->_initialize(_2526); }void mosek::fusion::p_ConstraintCache::_initialize  (monty::rc_ptr< ::mosek::fusion::ConstraintCache > _2526){monty::rc_reserve __reserve_this(_pubthis);   {
    nrows = mosek::fusion::p_ConstraintCache::_get_impl(_2526)->nrows;
    nnz = mosek::fusion::p_ConstraintCache::_get_impl(_2526)->nnz;
    std::shared_ptr< monty::ndarray< int,1 > > _9885;
    bool _9886 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2526)->subj.get());
    if (_9886)
    {
      _9885 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2526)->subj);
    }
    else
    {
      _9885 = nullptr;
    }
    subj = _9885;
    std::shared_ptr< monty::ndarray< int,1 > > _9887;
    bool _9888 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2526)->subi.get());
    if (_9888)
    {
      _9887 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2526)->subi);
    }
    else
    {
      _9887 = nullptr;
    }
    subi = _9887;
    std::shared_ptr< monty::ndarray< double,1 > > _9889;
    bool _9890 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2526)->cof.get());
    if (_9890)
    {
      _9889 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2526)->cof);
    }
    else
    {
      _9889 = nullptr;
    }
    cof = _9889;
    std::shared_ptr< monty::ndarray< double,1 > > _9891;
    bool _9892 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2526)->bfix.get());
    if (_9892)
    {
      _9891 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2526)->bfix);
    }
    else
    {
      _9891 = nullptr;
    }
    bfix = _9891;
    std::shared_ptr< monty::ndarray< double,1 > > _9893;
    bool _9894 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2526)->buffer_cof.get());
    if (_9894)
    {
      _9893 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2526)->buffer_cof);
    }
    else
    {
      _9893 = nullptr;
    }
    buffer_cof = _9893;
    std::shared_ptr< monty::ndarray< int,1 > > _9895;
    bool _9896 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2526)->buffer_subj.get());
    if (_9896)
    {
      _9895 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2526)->buffer_subj);
    }
    else
    {
      _9895 = nullptr;
    }
    buffer_subj = _9895;
    std::shared_ptr< monty::ndarray< int,1 > > _9897;
    bool _9898 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2526)->buffer_subi.get());
    if (_9898)
    {
      _9897 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2526)->buffer_subi);
    }
    else
    {
      _9897 = nullptr;
    }
    buffer_subi = _9897;
    nunordered = mosek::fusion::p_ConstraintCache::_get_impl(_2526)->nunordered;
    nbarnz = mosek::fusion::p_ConstraintCache::_get_impl(_2526)->nbarnz;
    std::shared_ptr< monty::ndarray< int,1 > > _9899;
    bool _9900 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2526)->barsubi.get());
    if (_9900)
    {
      _9899 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2526)->barsubi);
    }
    else
    {
      _9899 = nullptr;
    }
    barsubi = _9899;
    std::shared_ptr< monty::ndarray< int,1 > > _9901;
    bool _9902 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2526)->barsubj.get());
    if (_9902)
    {
      _9901 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2526)->barsubj);
    }
    else
    {
      _9901 = nullptr;
    }
    barsubj = _9901;
    std::shared_ptr< monty::ndarray< int,1 > > _9903;
    bool _9904 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2526)->barmatidx.get());
    if (_9904)
    {
      _9903 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2526)->barmatidx);
    }
    else
    {
      _9903 = nullptr;
    }
    barmatidx = _9903;
  }
}mosek::fusion::ConstraintCache::t mosek::fusion::p_ConstraintCache::_new_ConstraintCache  (std::shared_ptr< monty::ndarray< long long,1 > > _2527,    std::shared_ptr< monty::ndarray< double,1 > > _2528,    std::shared_ptr< monty::ndarray< int,1 > > _2529,    std::shared_ptr< monty::ndarray< double,1 > > _2530,    std::shared_ptr< monty::ndarray< int,1 > > _2531,    std::shared_ptr< monty::ndarray< int,1 > > _2532,    std::shared_ptr< monty::ndarray< int,1 > > _2533){ return new mosek::fusion::ConstraintCache(_2527,_2528,_2529,_2530,_2531,_2532,_2533); }mosek::fusion::ConstraintCache::ConstraintCache  (std::shared_ptr< monty::ndarray< long long,1 > > _2527,    std::shared_ptr< monty::ndarray< double,1 > > _2528,    std::shared_ptr< monty::ndarray< int,1 > > _2529,    std::shared_ptr< monty::ndarray< double,1 > > _2530,    std::shared_ptr< monty::ndarray< int,1 > > _2531,    std::shared_ptr< monty::ndarray< int,1 > > _2532,    std::shared_ptr< monty::ndarray< int,1 > > _2533) :    ConstraintCache(new mosek::fusion::p_ConstraintCache(this)){ mosek::fusion::p_ConstraintCache::_get_impl(this)->_initialize(_2527,_2528,_2529,_2530,_2531,_2532,_2533); }void mosek::fusion::p_ConstraintCache::_initialize  (std::shared_ptr< monty::ndarray< long long,1 > > _2527,    std::shared_ptr< monty::ndarray< double,1 > > _2528,    std::shared_ptr< monty::ndarray< int,1 > > _2529,    std::shared_ptr< monty::ndarray< double,1 > > _2530,    std::shared_ptr< monty::ndarray< int,1 > > _2531,    std::shared_ptr< monty::ndarray< int,1 > > _2532,    std::shared_ptr< monty::ndarray< int,1 > > _2533){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__2527(_2527 ? _2527->raw() : nullptr, _2527 ? _2527->size(0) : 0);
    _checked_ptr_1<double> _ptr__2528(_2528 ? _2528->raw() : nullptr, _2528 ? _2528->size(0) : 0);
    _checked_ptr_1<int> _ptr__2529(_2529 ? _2529->raw() : nullptr, _2529 ? _2529->size(0) : 0);
    _checked_ptr_1<double> _ptr__2530(_2530 ? _2530->raw() : nullptr, _2530 ? _2530->size(0) : 0);
    _checked_ptr_1<int> _ptr__2531(_2531 ? _2531->raw() : nullptr, _2531 ? _2531->size(0) : 0);
    _checked_ptr_1<int> _ptr__2532(_2532 ? _2532->raw() : nullptr, _2532 ? _2532->size(0) : 0);
    _checked_ptr_1<int> _ptr__2533(_2533 ? _2533->raw() : nullptr, _2533 ? _2533->size(0) : 0);
    nrows = ((int)((_2527)->size(0)) - (int)1);
    nnz = _ptr__2527[((int)((_2527)->size(0)) - (int)1)];
    subj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nnz)));
    subi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nnz)));
    cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(nnz)));
    if ((NULL != _2530.get()))
    {
      {
        bfix = _2530;
      }
    }
    else
    {
      {
        bfix = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(nrows)));
      }
    }
    if (((NULL != _2531.get()) && ((NULL != _2532.get()) && (NULL != _2533.get()))))
    {
      {
        nbarnz = (int)((_2531)->size(0));
        if ((nbarnz > (int)((_2532)->size(0))))
        {
          {
            nbarnz = (int)((_2532)->size(0));
          }
        }
        {}
        if ((nbarnz > (int)((_2533)->size(0))))
        {
          {
            nbarnz = (int)((_2533)->size(0));
          }
        }
        {}
        barsubi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nbarnz)));
        barsubj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nbarnz)));
        barmatidx = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nbarnz)));
        ::mosek::fusion::Utils::Tools::arraycopy(_2531,(long long)((int)0),barsubi,(long long)((int)0),nbarnz);
        ::mosek::fusion::Utils::Tools::arraycopy(_2532,(long long)((int)0),barsubj,(long long)((int)0),nbarnz);
        ::mosek::fusion::Utils::Tools::arraycopy(_2533,(long long)((int)0),barmatidx,(long long)((int)0),nbarnz);
      }
    }
    else
    {
      {
        nbarnz = (int)0;
        barsubi = nullptr;
        barsubj = nullptr;
        barmatidx = nullptr;
      }
    }
    ::mosek::fusion::Utils::Tools::arraycopy(_2529,(long long)0,subj,(long long)0,nnz);
    ::mosek::fusion::Utils::Tools::arraycopy(_2528,(long long)0,cof,(long long)0,nnz);
    int _9905 = (int)0;
    int _9906 = nrows;
    for (int _2534 = _9905; _2534 < _9906; ++_2534)
    {
      {
        long long _9907 = _ptr__2527[_2534];
        long long _9908 = _ptr__2527[safe_add( _2534,(int)1 )];
        for (long long _2535 = _9907; _2535 < _9908; ++_2535)
        {
          {
            ((*subi)(_2535)) = _2534;
          }
        }
      }
    }
    buffer_cof = nullptr;
    buffer_subj = nullptr;
    buffer_subi = nullptr;
    nunordered = (long long)0;
  }
}void mosek::fusion::p_ConstraintCache::unchecked_add_fx(std::shared_ptr< monty::ndarray< double,1 > > _2536){
  _checked_ptr_1<double> _ptr__2536(_2536 ? _2536->raw() : nullptr, _2536 ? _2536->size(0) : 0);
  int _9909 = (int)0;
  int _9910 = nrows;
  for (int _2537 = _9909; _2537 < _9910; ++_2537)
  {
    {
      ((*bfix)(_2537)) = (((*bfix)(_2537)) + _ptr__2536[_2537]);
    }
  }
}
long long mosek::fusion::p_ConstraintCache::order_barentries(){
  std::vector<long long> _9911;
  for (long long _2539 = (long long)0, _9912 = nbarnz; _2539 < _9912 ; ++_2539)
  {
    _9911.push_back(_2539);
  }
  auto _9913 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9911.size()),_9911.begin(),_9911.end()));
  std::shared_ptr< monty::ndarray< long long,1 > > _2538 = _9913;
  _checked_ptr_1<long long> _ptr__2538(_2538 ? _2538->raw() : nullptr,_2538 ? _2538->size(0) : 0);
  if ((!::mosek::fusion::p_Sort::issorted(_2538,barsubi,barsubj,(long long)((int)0),nbarnz,false)))
  {
    {
      ::mosek::fusion::p_Sort::argsort(_2538,barsubi,barsubj,(long long)((int)0),nbarnz,false);
      std::shared_ptr< monty::ndarray< int,1 > > _2540 = barsubi;
      _checked_ptr_1<int> _ptr__2540(_2540 ? _2540->raw() : nullptr,_2540 ? _2540->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2541 = barsubj;
      _checked_ptr_1<int> _ptr__2541(_2541 ? _2541->raw() : nullptr,_2541 ? _2541->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2542 = barmatidx;
      _checked_ptr_1<int> _ptr__2542(_2542 ? _2542->raw() : nullptr,_2542 ? _2542->size(0) : 0);
      std::vector<int> _9914;
      for (long long _2543 = (int)0, _9915 = nbarnz; _2543 < _9915 ; ++_2543)
      {
        _9914.push_back(_ptr__2540[_ptr__2538[_2543]]);
      }
      auto _9916 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9914.size()),_9914.begin(),_9914.end()));
      barsubi = _9916;
      std::vector<int> _9917;
      for (long long _2544 = (int)0, _9918 = nbarnz; _2544 < _9918 ; ++_2544)
      {
        _9917.push_back(_ptr__2541[_ptr__2538[_2544]]);
      }
      auto _9919 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9917.size()),_9917.begin(),_9917.end()));
      barsubj = _9919;
      std::vector<int> _9920;
      for (long long _2545 = (int)0, _9921 = nbarnz; _2545 < _9921 ; ++_2545)
      {
        _9920.push_back(_ptr__2542[_ptr__2538[_2545]]);
      }
      auto _9922 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9920.size()),_9920.begin(),_9920.end()));
      barmatidx = _9922;
    }
  }
  {}
  return nbarnz;
}
void mosek::fusion::p_ConstraintCache::add_bar(std::shared_ptr< monty::ndarray< int,1 > > _2546,std::shared_ptr< monty::ndarray< int,1 > > _2547,std::shared_ptr< monty::ndarray< int,1 > > _2548){
  _checked_ptr_1<int> _ptr__2546(_2546 ? _2546->raw() : nullptr, _2546 ? _2546->size(0) : 0);
  _checked_ptr_1<int> _ptr__2547(_2547 ? _2547->raw() : nullptr, _2547 ? _2547->size(0) : 0);
  _checked_ptr_1<int> _ptr__2548(_2548 ? _2548->raw() : nullptr, _2548 ? _2548->size(0) : 0);
  if ((NULL != _2546.get()))
  {
    {
      int _2549 = (int)((_2546)->size(0));
      if (((int)((_2546)->size(0)) <= safe_add( nbarnz,_2549 )))
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _2550 = barsubi;
          _checked_ptr_1<int> _ptr__2550(_2550 ? _2550->raw() : nullptr,_2550 ? _2550->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2551 = barsubj;
          _checked_ptr_1<int> _ptr__2551(_2551 ? _2551->raw() : nullptr,_2551 ? _2551->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2552 = barmatidx;
          _checked_ptr_1<int> _ptr__2552(_2552 ? _2552->raw() : nullptr,_2552 ? _2552->size(0) : 0);
          long long _9923;
          bool _9924 = (safe_mul( (int)2,nbarnz ) > safe_add( nbarnz,_2549 ));
          if (_9924)
          {
            _9923 = safe_mul( (int)2,nbarnz );
          }
          else
          {
            _9923 = safe_add( nbarnz,safe_mul( _2549,(int)2 ) );
          }
          long long _2553 = _9923;
          barsubi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2553)));
          barsubj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2553)));
          barmatidx = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2553)));
          if ((nbarnz > (int)0))
          {
            {
              ::mosek::fusion::Utils::Tools::arraycopy(_2550,(long long)((int)0),barsubi,(long long)((int)0),nbarnz);
              ::mosek::fusion::Utils::Tools::arraycopy(_2551,(long long)((int)0),barsubj,(long long)((int)0),nbarnz);
              ::mosek::fusion::Utils::Tools::arraycopy(_2552,(long long)((int)0),barmatidx,(long long)((int)0),nbarnz);
            }
          }
          {}
        }
      }
      {}
      ::mosek::fusion::Utils::Tools::arraycopy(_2546,(long long)((int)0),barsubi,nbarnz,(long long)(_2549));
      ::mosek::fusion::Utils::Tools::arraycopy(_2547,(long long)((int)0),barsubj,nbarnz,(long long)(_2549));
      ::mosek::fusion::Utils::Tools::arraycopy(_2548,(long long)((int)0),barmatidx,nbarnz,(long long)(_2549));
      nbarnz += _2549;
    }
  }
  {}
}
void mosek::fusion::p_ConstraintCache::unchecked_add_l(std::shared_ptr< monty::ndarray< long long,1 > > _2554,std::shared_ptr< monty::ndarray< int,1 > > _2555,std::shared_ptr< monty::ndarray< double,1 > > _2556,std::shared_ptr< monty::ndarray< double,1 > > _2557){
  _checked_ptr_1<long long> _ptr__2554(_2554 ? _2554->raw() : nullptr, _2554 ? _2554->size(0) : 0);
  _checked_ptr_1<int> _ptr__2555(_2555 ? _2555->raw() : nullptr, _2555 ? _2555->size(0) : 0);
  _checked_ptr_1<double> _ptr__2556(_2556 ? _2556->raw() : nullptr, _2556 ? _2556->size(0) : 0);
  _checked_ptr_1<double> _ptr__2557(_2557 ? _2557->raw() : nullptr, _2557 ? _2557->size(0) : 0);
  long long _2558 = safe_add( nunordered,_ptr__2554[nrows] );
  long long _2559 = _ptr__2554[nrows];
  std::shared_ptr< monty::ndarray< int,1 > > _2560;
  _checked_ptr_1<int> _ptr__2560(_2560 ? _2560->raw() : nullptr,_2560 ? _2560->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _2561;
  _checked_ptr_1<int> _ptr__2561(_2561 ? _2561->raw() : nullptr,_2561 ? _2561->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _2562;
  _checked_ptr_1<double> _ptr__2562(_2562 ? _2562->raw() : nullptr,_2562 ? _2562->size(0) : 0);
  if (((NULL == buffer_cof.get()) || ((int)((buffer_cof)->size(0)) < _2558)))
  {
    {
      _2560 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2558)));
      _ptr__2560.update(_2560 ? _2560->raw() : nullptr, _2560 ? _2560->size(0) : 0);
      _2561 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2558)));
      _ptr__2561.update(_2561 ? _2561->raw() : nullptr, _2561 ? _2561->size(0) : 0);
      _2562 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2558)));
      _ptr__2562.update(_2562 ? _2562->raw() : nullptr, _2562 ? _2562->size(0) : 0);
      if ((NULL != buffer_cof.get()))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(buffer_subi,(long long)0,_2560,(long long)0,nunordered);
          ::mosek::fusion::Utils::Tools::arraycopy(buffer_subj,(long long)0,_2561,(long long)0,nunordered);
          ::mosek::fusion::Utils::Tools::arraycopy(buffer_cof,(long long)0,_2562,(long long)0,nunordered);
        }
      }
      {}
    }
  }
  else
  {
    {
      _2560 = buffer_subi;
      _ptr__2560.update(_2560 ? _2560->raw() : nullptr, _2560 ? _2560->size(0) : 0);
      _2561 = buffer_subj;
      _ptr__2561.update(_2561 ? _2561->raw() : nullptr, _2561 ? _2561->size(0) : 0);
      _2562 = buffer_cof;
      _ptr__2562.update(_2562 ? _2562->raw() : nullptr, _2562 ? _2562->size(0) : 0);
    }
  }
  int _9925 = (int)0;
  int _9926 = nrows;
  for (int _2563 = _9925; _2563 < _9926; ++_2563)
  {
    {
      long long _9927 = _ptr__2554[_2563];
      long long _9928 = _ptr__2554[safe_add( _2563,(int)1 )];
      for (long long _2564 = _9927; _2564 < _9928; ++_2564)
      {
        {
          _ptr__2560[safe_add( nunordered,_2564 )] = _2563;
        }
      }
    }
  }
  ::mosek::fusion::Utils::Tools::arraycopy(_2555,(long long)0,_2561,nunordered,_2559);
  ::mosek::fusion::Utils::Tools::arraycopy(_2556,(long long)0,_2562,nunordered,_2559);
  buffer_subi = _2560;
  buffer_subj = _2561;
  buffer_cof = _2562;
  if ((NULL != _2557.get()))
  {
    {
      int _9929 = (int)0;
      int _9930 = nrows;
      for (int _2565 = _9929; _2565 < _9930; ++_2565)
      {
        {
          ((*bfix)(_2565)) = (((*bfix)(_2565)) + _ptr__2557[_2565]);
        }
      }
    }
  }
  {}
  nunordered = _2558;
}
void mosek::fusion::ConstraintCache :: add(std::shared_ptr< monty::ndarray< long long,1 > > _2566,std::shared_ptr< monty::ndarray< int,1 > > _2567,std::shared_ptr< monty::ndarray< double,1 > > _2568,std::shared_ptr< monty::ndarray< double,1 > > _2569) { mosek::fusion::p_ConstraintCache::_get_impl(this)->add(_2566,_2567,_2568,_2569); }void mosek::fusion::p_ConstraintCache::add(std::shared_ptr< monty::ndarray< long long,1 > > _2566,std::shared_ptr< monty::ndarray< int,1 > > _2567,std::shared_ptr< monty::ndarray< double,1 > > _2568,std::shared_ptr< monty::ndarray< double,1 > > _2569){
  _checked_ptr_1<long long> _ptr__2566(_2566 ? _2566->raw() : nullptr, _2566 ? _2566->size(0) : 0);
  _checked_ptr_1<int> _ptr__2567(_2567 ? _2567->raw() : nullptr, _2567 ? _2567->size(0) : 0);
  _checked_ptr_1<double> _ptr__2568(_2568 ? _2568->raw() : nullptr, _2568 ? _2568->size(0) : 0);
  _checked_ptr_1<double> _ptr__2569(_2569 ? _2569->raw() : nullptr, _2569 ? _2569->size(0) : 0);
  if ((((int)((_2566)->size(0)) != safe_add( nrows,(int)1 )) || ((NULL != _2569.get()) && ((int)((_2569)->size(0)) != nrows))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching expression lengths"));
    }
  }
  {}
  unchecked_add_l(_2566,_2567,_2568,_2569);
}
long long mosek::fusion::ConstraintCache :: flush(std::shared_ptr< monty::ndarray< int,1 > > _2570,std::shared_ptr< monty::ndarray< int,1 > > _2571,std::shared_ptr< monty::ndarray< double,1 > > _2572,std::shared_ptr< monty::ndarray< double,1 > > _2573) { return mosek::fusion::p_ConstraintCache::_get_impl(this)->flush(_2570,_2571,_2572,_2573); }long long mosek::fusion::p_ConstraintCache::flush(std::shared_ptr< monty::ndarray< int,1 > > _2570,std::shared_ptr< monty::ndarray< int,1 > > _2571,std::shared_ptr< monty::ndarray< double,1 > > _2572,std::shared_ptr< monty::ndarray< double,1 > > _2573){
  _checked_ptr_1<int> _ptr__2570(_2570 ? _2570->raw() : nullptr, _2570 ? _2570->size(0) : 0);
  _checked_ptr_1<int> _ptr__2571(_2571 ? _2571->raw() : nullptr, _2571 ? _2571->size(0) : 0);
  _checked_ptr_1<double> _ptr__2572(_2572 ? _2572->raw() : nullptr, _2572 ? _2572->size(0) : 0);
  _checked_ptr_1<double> _ptr__2573(_2573 ? _2573->raw() : nullptr, _2573 ? _2573->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2574 = nullptr;
  _checked_ptr_1<long long> _ptr__2574(_2574 ? _2574->raw() : nullptr,_2574 ? _2574->size(0) : 0);
  if (((NULL != bfix.get()) && (NULL != _2573.get())))
  {
    {
      int _9931 = (int)0;
      int _9932 = nrows;
      for (int _2575 = _9931; _2575 < _9932; ++_2575)
      {
        {
          _ptr__2573[_2575] = ((*bfix)(_2575));
        }
      }
    }
  }
  {}
  if ((nunordered == (long long)0))
  {
    {
      return (long long)0;
    }
  }
  {}
  bool _2576 = false;
  {
    int _2577 = (int)1;
    while ( ((_2577 < nunordered) && ((((*buffer_subi)((_2577 - (int)1))) < ((*buffer_subi)(_2577))) || ((((*buffer_subi)((_2577 - (int)1))) == ((*buffer_subi)(_2577))) && (((*buffer_subj)((_2577 - (int)1))) <= ((*buffer_subj)(_2577)))))) )
    {
      {
        ++ _2577;
      }
    }
    _2576 = (_2577 == nunordered);
  }
  if ((!_2576))
  {
    {
      std::vector<long long> _9933;
      for (long long _2578 = (int)0, _9934 = nunordered; _2578 < _9934 ; ++_2578)
      {
        _9933.push_back(_2578);
      }
      auto _9935 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9933.size()),_9933.begin(),_9933.end()));
      _2574 = _9935;
      _ptr__2574.update(_2574 ? _2574->raw() : nullptr, _2574 ? _2574->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_2574,buffer_subi,buffer_subj,(long long)0,nunordered);
    }
  }
  {}
  long long _2579 = nnz;
  std::shared_ptr< monty::ndarray< int,1 > > _2580 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( nunordered,_2579 ))));
  _checked_ptr_1<int> _ptr__2580(_2580 ? _2580->raw() : nullptr,_2580 ? _2580->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _2581 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( nunordered,_2579 ))));
  _checked_ptr_1<int> _ptr__2581(_2581 ? _2581->raw() : nullptr,_2581 ? _2581->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _2582 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_add( nunordered,_2579 ))));
  _checked_ptr_1<double> _ptr__2582(_2582 ? _2582->raw() : nullptr,_2582 ? _2582->size(0) : 0);
  long long _2583 = (long long)0;
  if (_2576)
  {
    {
      long long _2584 = (long long)0;
      int _2585 = (int)0;
      long long _2586 = nunordered;
      long long _2587 = _2579;
      int _2588 = (int)0;
      int _2589 = (int)0;
      while ( ((_2589 < _2587) && (_2588 < _2586)) )
      {
        {
          if (((((*subi)(_2589)) < ((*buffer_subi)(_2588))) || ((((*subi)(_2589)) == ((*buffer_subi)(_2588))) && (((*subj)(_2589)) < ((*buffer_subj)(_2588))))))
          {
            {
              _ptr__2580[_2585] = ((*subi)(_2589));
              _ptr__2581[_2585] = ((*subj)(_2589));
              _ptr__2582[_2585] = ((*cof)(_2589));
              ++ _2589;
              ++ _2585;
            }
          }
          else if(((((*subi)(_2589)) > ((*buffer_subi)(_2588))) || ((((*subi)(_2589)) == ((*buffer_subi)(_2588))) && (((*subj)(_2589)) > ((*buffer_subj)(_2588))))))
          {
            {
              _ptr__2580[_2585] = ((*buffer_subi)(_2588));
              _ptr__2581[_2585] = ((*buffer_subj)(_2588));
              _ptr__2582[_2585] = ((*buffer_cof)(_2588));
              _ptr__2570[_2583] = _ptr__2580[_2585];
              _ptr__2571[_2583] = _ptr__2581[_2585];
              _ptr__2572[_2583] = _ptr__2582[_2585];
              ++ _2583;
              ++ _2588;
              ++ _2585;
            }
          }
          else
          {
            {
              _ptr__2580[_2585] = ((*subi)(_2589));
              _ptr__2581[_2585] = ((*subj)(_2589));
              _ptr__2582[_2585] = ((*cof)(_2589));
              while ( ((_2589 < (int)((subi)->size(0))) && ((_2588 < (int)((buffer_subi)->size(0))) && ((((*subi)(_2589)) == ((*buffer_subi)(_2588))) && (((*subj)(_2589)) == ((*buffer_subj)(_2588)))))) )
              {
                {
                  _ptr__2582[_2585] = (_ptr__2582[_2585] + ((*buffer_cof)(_2588)));
                  ++ _2588;
                }
              }
              _ptr__2570[_2583] = _ptr__2580[_2585];
              _ptr__2571[_2583] = _ptr__2581[_2585];
              _ptr__2572[_2583] = _ptr__2582[_2585];
              ++ _2583;
              ++ _2589;
              ++ _2585;
            }
          }
        }
      }
      while ( (_2589 < _2587) )
      {
        {
          _ptr__2580[_2585] = ((*subi)(_2589));
          _ptr__2581[_2585] = ((*subj)(_2589));
          _ptr__2582[_2585] = ((*cof)(_2589));
          ++ _2589;
          ++ _2585;
        }
      }
      while ( (_2588 < _2586) )
      {
        {
          _ptr__2580[_2585] = ((*buffer_subi)(_2588));
          _ptr__2581[_2585] = ((*buffer_subj)(_2588));
          _ptr__2582[_2585] = ((*buffer_cof)(_2588));
          _ptr__2570[_2583] = _ptr__2580[_2585];
          _ptr__2571[_2583] = _ptr__2581[_2585];
          _ptr__2572[_2583] = _ptr__2582[_2585];
          ++ _2583;
          ++ _2588;
          ++ _2585;
        }
      }
      nnz = _2585;
    }
  }
  else
  {
    {
      long long _2590 = (long long)0;
      int _2591 = (int)0;
      long long _2592 = nunordered;
      long long _2593 = _2579;
      int _2594 = (int)0;
      int _2595 = (int)0;
      while ( ((_2595 < _2593) && (_2594 < _2592)) )
      {
        {
          if (((((*subi)(_2595)) < ((*buffer_subi)(_ptr__2574[_2594]))) || ((((*subi)(_2595)) == ((*buffer_subi)(_ptr__2574[_2594]))) && (((*subj)(_2595)) < ((*buffer_subj)(_ptr__2574[_2594]))))))
          {
            {
              _ptr__2580[_2591] = ((*subi)(_2595));
              _ptr__2581[_2591] = ((*subj)(_2595));
              _ptr__2582[_2591] = ((*cof)(_2595));
              ++ _2595;
              ++ _2591;
            }
          }
          else if(((((*subi)(_2595)) > ((*buffer_subi)(_ptr__2574[_2594]))) || ((((*subi)(_2595)) == ((*buffer_subi)(_ptr__2574[_2594]))) && (((*subj)(_2595)) > ((*buffer_subj)(_ptr__2574[_2594]))))))
          {
            {
              _ptr__2580[_2591] = ((*buffer_subi)(_ptr__2574[_2594]));
              _ptr__2581[_2591] = ((*buffer_subj)(_ptr__2574[_2594]));
              _ptr__2582[_2591] = ((*buffer_cof)(_ptr__2574[_2594]));
              _ptr__2570[_2583] = _ptr__2580[_2591];
              _ptr__2571[_2583] = _ptr__2581[_2591];
              _ptr__2572[_2583] = _ptr__2582[_2591];
              ++ _2583;
              ++ _2594;
              ++ _2591;
            }
          }
          else
          {
            {
              _ptr__2580[_2591] = ((*subi)(_2595));
              _ptr__2581[_2591] = ((*subj)(_2595));
              _ptr__2582[_2591] = ((*cof)(_2595));
              while ( ((((*subi)(_2595)) == ((*buffer_subi)(_ptr__2574[_2594]))) && (((*subj)(_2595)) == ((*buffer_subj)(_ptr__2574[_2594])))) )
              {
                {
                  _ptr__2582[_2591] = (_ptr__2582[_2591] + ((*buffer_cof)(_ptr__2574[_2594])));
                  ++ _2594;
                }
              }
              _ptr__2570[_2583] = _ptr__2580[_2591];
              _ptr__2571[_2583] = _ptr__2581[_2591];
              _ptr__2572[_2583] = _ptr__2582[_2591];
              ++ _2583;
              ++ _2595;
              ++ _2591;
            }
          }
        }
      }
      nnz = _2591;
    }
  }
  subi = _2580;
  subj = _2581;
  cof = _2582;
  nunordered = (long long)0;
  return _2583;
}
long long mosek::fusion::ConstraintCache :: numUnsorted() { return mosek::fusion::p_ConstraintCache::_get_impl(this)->numUnsorted(); }long long mosek::fusion::p_ConstraintCache::numUnsorted(){
  return nunordered;
}
monty::rc_ptr< ::mosek::fusion::ConstraintCache > mosek::fusion::p_ConstraintCache::__mosek_2fusion_2ConstraintCache__clone(){
  return ::mosek::fusion::p_ConstraintCache::_new_ConstraintCache(::mosek::fusion::ConstraintCache::t(_pubthis));
}
void mosek::fusion::p_ConstraintCache::destroy(){barmatidx.reset();barsubj.reset();barsubi.reset();buffer_subi.reset();buffer_subj.reset();buffer_cof.reset();bfix.reset();cof.reset();subi.reset();subj.reset();}void mosek::fusion::ConstraintCache::destroy() { mosek::fusion::p_ConstraintCache::_get_impl(this)->destroy(); }mosek::fusion::BoundInterfaceConstraint::BoundInterfaceConstraint(mosek::fusion::p_BoundInterfaceConstraint *_impl) : mosek::fusion::SliceConstraint(_impl) { /*std::cout << "BoundInterfaceConstraint()" << this << std::endl; */ }mosek::fusion::BoundInterfaceConstraint::~BoundInterfaceConstraint() {  /* std::cout << "~BoundInterfaceConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_BoundInterfaceConstraint::p_BoundInterfaceConstraint  (::mosek::fusion::BoundInterfaceConstraint * _pubthis) :     mosek::fusion::p_SliceConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::BoundInterfaceConstraint::t mosek::fusion::p_BoundInterfaceConstraint::_new_BoundInterfaceConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2596,    std::shared_ptr< monty::ndarray< int,1 > > _2597,    std::shared_ptr< monty::ndarray< int,1 > > _2598,    bool _2599){ return new mosek::fusion::BoundInterfaceConstraint(_2596,_2597,_2598,_2599); }mosek::fusion::BoundInterfaceConstraint::BoundInterfaceConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2596,    std::shared_ptr< monty::ndarray< int,1 > > _2597,    std::shared_ptr< monty::ndarray< int,1 > > _2598,    bool _2599) :    BoundInterfaceConstraint(new mosek::fusion::p_BoundInterfaceConstraint(this)){ mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->_initialize(_2596,_2597,_2598,_2599); }void mosek::fusion::p_BoundInterfaceConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2596,    std::shared_ptr< monty::ndarray< int,1 > > _2597,    std::shared_ptr< monty::ndarray< int,1 > > _2598,    bool _2599){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2597(_2597 ? _2597->raw() : nullptr, _2597 ? _2597->size(0) : 0);
    _checked_ptr_1<int> _ptr__2598(_2598 ? _2598->raw() : nullptr, _2598 ? _2598->size(0) : 0);
    mosek::fusion::p_SliceConstraint::_initialize(_2596,_2597,_2598);
    mosek::fusion::p_BoundInterfaceConstraint::_get_impl(::mosek::fusion::BoundInterfaceConstraint::t(_pubthis))->islower = _2599;
  }
}mosek::fusion::BoundInterfaceConstraint::t mosek::fusion::p_BoundInterfaceConstraint::_new_BoundInterfaceConstraint  (monty::rc_ptr< ::mosek::fusion::SliceConstraint > _2600,    bool _2601){ return new mosek::fusion::BoundInterfaceConstraint(_2600,_2601); }mosek::fusion::BoundInterfaceConstraint::BoundInterfaceConstraint  (monty::rc_ptr< ::mosek::fusion::SliceConstraint > _2600,    bool _2601) :    BoundInterfaceConstraint(new mosek::fusion::p_BoundInterfaceConstraint(this)){ mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->_initialize(_2600,_2601); }void mosek::fusion::p_BoundInterfaceConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::SliceConstraint > _2600,    bool _2601){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_SliceConstraint::_initialize(_2600);
    mosek::fusion::p_BoundInterfaceConstraint::_get_impl(::mosek::fusion::BoundInterfaceConstraint::t(_pubthis))->islower = _2601;
  }
}std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::BoundInterfaceConstraint :: dual() { return mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->dual(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_BoundInterfaceConstraint::dual(){
  std::shared_ptr< monty::ndarray< double,1 > > _2602 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_pubthis->getSize())));
  _checked_ptr_1<double> _ptr__2602(_2602 ? _2602->raw() : nullptr,_2602 ? _2602->size(0) : 0);
  dual_lu((int)0,_2602,islower);
  return _2602;
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint :: __mosek_2fusion_2BoundInterfaceConstraint__slice(std::shared_ptr< monty::ndarray< int,1 > > _2603,std::shared_ptr< monty::ndarray< int,1 > > _2604) { return mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->__mosek_2fusion_2BoundInterfaceConstraint__slice(_2603,_2604); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::slice(std::shared_ptr< monty::ndarray< int,1 > > _2603,std::shared_ptr< monty::ndarray< int,1 > > _2604) { return __mosek_2fusion_2BoundInterfaceConstraint__slice(_2603,_2604); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::__mosek_2fusion_2Constraint__slice(std::shared_ptr< monty::ndarray< int,1 > > _2603,std::shared_ptr< monty::ndarray< int,1 > > _2604) { return __mosek_2fusion_2BoundInterfaceConstraint__slice(_2603,_2604); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_BoundInterfaceConstraint::__mosek_2fusion_2BoundInterfaceConstraint__slice(std::shared_ptr< monty::ndarray< int,1 > > _2603,std::shared_ptr< monty::ndarray< int,1 > > _2604){
  _checked_ptr_1<int> _ptr__2603(_2603 ? _2603->raw() : nullptr, _2603 ? _2603->size(0) : 0);
  _checked_ptr_1<int> _ptr__2604(_2604 ? _2604->raw() : nullptr, _2604 ? _2604->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::Constraint > _2605 = ::mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__slice(_2603,_2604);
  return (__mosek_2fusion_2BoundInterfaceConstraint__from_(_2605)).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint :: __mosek_2fusion_2BoundInterfaceConstraint__slice(int _2606,int _2607) { return mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->__mosek_2fusion_2BoundInterfaceConstraint__slice(_2606,_2607); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::slice(int _2606,int _2607) { return __mosek_2fusion_2BoundInterfaceConstraint__slice(_2606,_2607); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::__mosek_2fusion_2Constraint__slice(int _2606,int _2607) { return __mosek_2fusion_2BoundInterfaceConstraint__slice(_2606,_2607); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_BoundInterfaceConstraint::__mosek_2fusion_2BoundInterfaceConstraint__slice(int _2606,int _2607){
  monty::rc_ptr< ::mosek::fusion::Constraint > _2608 = ::mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__slice(_2606,_2607);
  return (__mosek_2fusion_2BoundInterfaceConstraint__from_(_2608)).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint :: __mosek_2fusion_2BoundInterfaceConstraint__index(std::shared_ptr< monty::ndarray< int,1 > > _2609) { return mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->__mosek_2fusion_2BoundInterfaceConstraint__index(_2609); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::index(std::shared_ptr< monty::ndarray< int,1 > > _2609) { return __mosek_2fusion_2BoundInterfaceConstraint__index(_2609); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::__mosek_2fusion_2Constraint__index(std::shared_ptr< monty::ndarray< int,1 > > _2609) { return __mosek_2fusion_2BoundInterfaceConstraint__index(_2609); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_BoundInterfaceConstraint::__mosek_2fusion_2BoundInterfaceConstraint__index(std::shared_ptr< monty::ndarray< int,1 > > _2609){
  _checked_ptr_1<int> _ptr__2609(_2609 ? _2609->raw() : nullptr, _2609 ? _2609->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::Constraint > _2610 = ::mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__index(_2609);
  return (__mosek_2fusion_2BoundInterfaceConstraint__from_(_2610)).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint :: __mosek_2fusion_2BoundInterfaceConstraint__index(int _2611) { return mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->__mosek_2fusion_2BoundInterfaceConstraint__index(_2611); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::index(int _2611) { return __mosek_2fusion_2BoundInterfaceConstraint__index(_2611); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::__mosek_2fusion_2Constraint__index(int _2611) { return __mosek_2fusion_2BoundInterfaceConstraint__index(_2611); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_BoundInterfaceConstraint::__mosek_2fusion_2BoundInterfaceConstraint__index(int _2611){
  monty::rc_ptr< ::mosek::fusion::Constraint > _2612 = ::mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__index(_2611);
  return (__mosek_2fusion_2BoundInterfaceConstraint__from_(_2612)).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::BoundInterfaceConstraint > mosek::fusion::p_BoundInterfaceConstraint::__mosek_2fusion_2BoundInterfaceConstraint__from_(monty::rc_ptr< ::mosek::fusion::Constraint > _2613){
  monty::rc_ptr< ::mosek::fusion::Constraint > _9936 = _2613;
  if (false) {}
  else if (nullptr != dynamic_cast<::mosek::fusion::SliceConstraint*>(_9936.get()))
  {
    ::mosek::fusion::SliceConstraint::t _2614 (dynamic_cast<::mosek::fusion::SliceConstraint*>(_9936.get()));
    {
      return ::mosek::fusion::p_BoundInterfaceConstraint::_new_BoundInterfaceConstraint(_2614,islower);
    }
  }
  else
  {
    mosek::fusion::Constraint::t _2615 = _9936;
    {
      return nullptr;
    }
  }
}
void mosek::fusion::p_BoundInterfaceConstraint::destroy(){}void mosek::fusion::BoundInterfaceConstraint::destroy() { mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->destroy(); }mosek::fusion::SliceConstraint::SliceConstraint(mosek::fusion::p_SliceConstraint *_impl) : mosek::fusion::Constraint(_impl) { /*std::cout << "SliceConstraint()" << this << std::endl; */ }mosek::fusion::SliceConstraint::~SliceConstraint() {  /* std::cout << "~SliceConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_SliceConstraint::p_SliceConstraint  (::mosek::fusion::SliceConstraint * _pubthis) :     mosek::fusion::p_Constraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SliceConstraint::t mosek::fusion::p_SliceConstraint::_new_SliceConstraint  (monty::rc_ptr< ::mosek::fusion::SliceConstraint > _2616){ return new mosek::fusion::SliceConstraint(_2616); }mosek::fusion::SliceConstraint::SliceConstraint  (monty::rc_ptr< ::mosek::fusion::SliceConstraint > _2616) :    SliceConstraint(new mosek::fusion::p_SliceConstraint(this)){ mosek::fusion::p_SliceConstraint::_get_impl(this)->_initialize(_2616); }void mosek::fusion::p_SliceConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::SliceConstraint > _2616){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_Constraint::_initialize(_2616,_2616->__mosek_2fusion_2Constraint__getModel());
  }
}mosek::fusion::SliceConstraint::t mosek::fusion::p_SliceConstraint::_new_SliceConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2617,    std::shared_ptr< monty::ndarray< int,1 > > _2618,    std::shared_ptr< monty::ndarray< int,1 > > _2619){ return new mosek::fusion::SliceConstraint(_2617,_2618,_2619); }mosek::fusion::SliceConstraint::SliceConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2617,    std::shared_ptr< monty::ndarray< int,1 > > _2618,    std::shared_ptr< monty::ndarray< int,1 > > _2619) :    SliceConstraint(new mosek::fusion::p_SliceConstraint(this)){ mosek::fusion::p_SliceConstraint::_get_impl(this)->_initialize(_2617,_2618,_2619); }void mosek::fusion::p_SliceConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2617,    std::shared_ptr< monty::ndarray< int,1 > > _2618,    std::shared_ptr< monty::ndarray< int,1 > > _2619){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2618(_2618 ? _2618->raw() : nullptr, _2618 ? _2618->size(0) : 0);
    _checked_ptr_1<int> _ptr__2619(_2619 ? _2619->raw() : nullptr, _2619 ? _2619->size(0) : 0);
    mosek::fusion::p_Constraint::_initialize(_2617,_2618,_2619);
  }
}std::string mosek::fusion::SliceConstraint :: toString() { return mosek::fusion::p_SliceConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_SliceConstraint::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2620 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2620->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("SliceConstraint()"));
  return _2620->toString();
}
void mosek::fusion::p_SliceConstraint::destroy(){}void mosek::fusion::SliceConstraint::destroy() { mosek::fusion::p_SliceConstraint::_get_impl(this)->destroy(); }mosek::fusion::RangedConstraint::RangedConstraint(mosek::fusion::p_RangedConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "RangedConstraint()" << this << std::endl; */ }mosek::fusion::RangedConstraint::~RangedConstraint() {  /* std::cout << "~RangedConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_RangedConstraint::p_RangedConstraint  (::mosek::fusion::RangedConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::RangedConstraint::t mosek::fusion::p_RangedConstraint::_new_RangedConstraint  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _2621,    monty::rc_ptr< ::mosek::fusion::Model > _2622){ return new mosek::fusion::RangedConstraint(_2621,_2622); }mosek::fusion::RangedConstraint::RangedConstraint  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _2621,    monty::rc_ptr< ::mosek::fusion::Model > _2622) :    RangedConstraint(new mosek::fusion::p_RangedConstraint(this)){ mosek::fusion::p_RangedConstraint::_get_impl(this)->_initialize(_2621,_2622); }void mosek::fusion::p_RangedConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _2621,    monty::rc_ptr< ::mosek::fusion::Model > _2622){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelConstraint::_initialize(_2621,_2622);
    shape = mosek::fusion::p_RangedConstraint::_get_impl(_2621)->shape;
    nativeidxs = mosek::fusion::p_RangedConstraint::_get_impl(_2621)->nativeidxs;
  }
}mosek::fusion::RangedConstraint::t mosek::fusion::p_RangedConstraint::_new_RangedConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2623,    const std::string &  _2624,    std::shared_ptr< monty::ndarray< int,1 > > _2625,    std::shared_ptr< monty::ndarray< int,1 > > _2626,    int _2627){ return new mosek::fusion::RangedConstraint(_2623,_2624,_2625,_2626,_2627); }mosek::fusion::RangedConstraint::RangedConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2623,    const std::string &  _2624,    std::shared_ptr< monty::ndarray< int,1 > > _2625,    std::shared_ptr< monty::ndarray< int,1 > > _2626,    int _2627) :    RangedConstraint(new mosek::fusion::p_RangedConstraint(this)){ mosek::fusion::p_RangedConstraint::_get_impl(this)->_initialize(_2623,_2624,_2625,_2626,_2627); }void mosek::fusion::p_RangedConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2623,    const std::string &  _2624,    std::shared_ptr< monty::ndarray< int,1 > > _2625,    std::shared_ptr< monty::ndarray< int,1 > > _2626,    int _2627){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2625(_2625 ? _2625->raw() : nullptr, _2625 ? _2625->size(0) : 0);
    _checked_ptr_1<int> _ptr__2626(_2626 ? _2626->raw() : nullptr, _2626 ? _2626->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2623,_2624,_2625,_2626,_2627);
    mosek::fusion::p_RangedConstraint::_get_impl(::mosek::fusion::RangedConstraint::t(_pubthis))->shape = _2625;
    mosek::fusion::p_RangedConstraint::_get_impl(::mosek::fusion::RangedConstraint::t(_pubthis))->nativeidxs = _2626;
  }
}monty::rc_ptr< ::mosek::fusion::BoundInterfaceConstraint > mosek::fusion::RangedConstraint :: __mosek_2fusion_2RangedConstraint__upperBoundCon() { return mosek::fusion::p_RangedConstraint::_get_impl(this)->__mosek_2fusion_2RangedConstraint__upperBoundCon(); }monty::rc_ptr< ::mosek::fusion::BoundInterfaceConstraint > mosek::fusion::RangedConstraint::upperBoundCon() { return __mosek_2fusion_2RangedConstraint__upperBoundCon(); }
monty::rc_ptr< ::mosek::fusion::BoundInterfaceConstraint > mosek::fusion::p_RangedConstraint::__mosek_2fusion_2RangedConstraint__upperBoundCon(){
  return ::mosek::fusion::p_BoundInterfaceConstraint::_new_BoundInterfaceConstraint(_pubthis->__mosek_2fusion_2Constraint__getModel(),shape,nativeidxs,false);
}
monty::rc_ptr< ::mosek::fusion::BoundInterfaceConstraint > mosek::fusion::RangedConstraint :: __mosek_2fusion_2RangedConstraint__lowerBoundCon() { return mosek::fusion::p_RangedConstraint::_get_impl(this)->__mosek_2fusion_2RangedConstraint__lowerBoundCon(); }monty::rc_ptr< ::mosek::fusion::BoundInterfaceConstraint > mosek::fusion::RangedConstraint::lowerBoundCon() { return __mosek_2fusion_2RangedConstraint__lowerBoundCon(); }
monty::rc_ptr< ::mosek::fusion::BoundInterfaceConstraint > mosek::fusion::p_RangedConstraint::__mosek_2fusion_2RangedConstraint__lowerBoundCon(){
  return ::mosek::fusion::p_BoundInterfaceConstraint::_new_BoundInterfaceConstraint(_pubthis->__mosek_2fusion_2Constraint__getModel(),shape,nativeidxs,true);
}
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_RangedConstraint::__mosek_2fusion_2RangedConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2628){
  return (::mosek::fusion::p_RangedConstraint::_new_RangedConstraint(::mosek::fusion::RangedConstraint::t(_pubthis),_2628)).as<::mosek::fusion::ModelConstraint>();
}
void mosek::fusion::p_RangedConstraint::destroy(){nativeidxs.reset();shape.reset();}void mosek::fusion::RangedConstraint::destroy() { mosek::fusion::p_RangedConstraint::_get_impl(this)->destroy(); }mosek::fusion::ConicConstraint::ConicConstraint(mosek::fusion::p_ConicConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "ConicConstraint()" << this << std::endl; */ }mosek::fusion::ConicConstraint::~ConicConstraint() {  /* std::cout << "~ConicConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_ConicConstraint::p_ConicConstraint  (::mosek::fusion::ConicConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ConicConstraint::t mosek::fusion::p_ConicConstraint::_new_ConicConstraint  (monty::rc_ptr< ::mosek::fusion::ConicConstraint > _2629,    monty::rc_ptr< ::mosek::fusion::Model > _2630){ return new mosek::fusion::ConicConstraint(_2629,_2630); }mosek::fusion::ConicConstraint::ConicConstraint  (monty::rc_ptr< ::mosek::fusion::ConicConstraint > _2629,    monty::rc_ptr< ::mosek::fusion::Model > _2630) :    ConicConstraint(new mosek::fusion::p_ConicConstraint(this)){ mosek::fusion::p_ConicConstraint::_get_impl(this)->_initialize(_2629,_2630); }void mosek::fusion::p_ConicConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::ConicConstraint > _2629,    monty::rc_ptr< ::mosek::fusion::Model > _2630){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelConstraint::_initialize(_2629,_2630);
    dom = mosek::fusion::p_ConicConstraint::_get_impl(_2629)->dom;
    conid = mosek::fusion::p_ConicConstraint::_get_impl(_2629)->conid;
    shape = mosek::fusion::p_ConicConstraint::_get_impl(_2629)->shape;
    name = mosek::fusion::p_ConicConstraint::_get_impl(_2629)->name;
    nativeidxs = mosek::fusion::p_ConicConstraint::_get_impl(_2629)->nativeidxs;
    nativeslack = mosek::fusion::p_ConicConstraint::_get_impl(_2629)->nativeslack;
    names_flushed = mosek::fusion::p_ConicConstraint::_get_impl(_2629)->names_flushed;
  }
}mosek::fusion::ConicConstraint::t mosek::fusion::p_ConicConstraint::_new_ConicConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2631,    const std::string &  _2632,    monty::rc_ptr< ::mosek::fusion::ConeDomain > _2633,    std::shared_ptr< monty::ndarray< int,1 > > _2634,    int _2635,    std::shared_ptr< monty::ndarray< int,1 > > _2636,    std::shared_ptr< monty::ndarray< int,1 > > _2637){ return new mosek::fusion::ConicConstraint(_2631,_2632,_2633,_2634,_2635,_2636,_2637); }mosek::fusion::ConicConstraint::ConicConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2631,    const std::string &  _2632,    monty::rc_ptr< ::mosek::fusion::ConeDomain > _2633,    std::shared_ptr< monty::ndarray< int,1 > > _2634,    int _2635,    std::shared_ptr< monty::ndarray< int,1 > > _2636,    std::shared_ptr< monty::ndarray< int,1 > > _2637) :    ConicConstraint(new mosek::fusion::p_ConicConstraint(this)){ mosek::fusion::p_ConicConstraint::_get_impl(this)->_initialize(_2631,_2632,_2633,_2634,_2635,_2636,_2637); }void mosek::fusion::p_ConicConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2631,    const std::string &  _2632,    monty::rc_ptr< ::mosek::fusion::ConeDomain > _2633,    std::shared_ptr< monty::ndarray< int,1 > > _2634,    int _2635,    std::shared_ptr< monty::ndarray< int,1 > > _2636,    std::shared_ptr< monty::ndarray< int,1 > > _2637){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2634(_2634 ? _2634->raw() : nullptr, _2634 ? _2634->size(0) : 0);
    _checked_ptr_1<int> _ptr__2636(_2636 ? _2636->raw() : nullptr, _2636 ? _2636->size(0) : 0);
    _checked_ptr_1<int> _ptr__2637(_2637 ? _2637->raw() : nullptr, _2637 ? _2637->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2631,_2632,_2634,_2636,_2635);
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->dom = _2633;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->shape = _2634;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->name = _2632;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->nativeidxs = _2636;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->nativeslack = _2637;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->conid = _2635;
    names_flushed = false;
  }
}void mosek::fusion::p_ConicConstraint::flushNames(){
  ::mosek::fusion::p_ModelConstraint::flushNames();
  int _2638 = (int)((nativeslack)->size(0));
  monty::rc_ptr< ::mosek::fusion::Model > _2639 = _pubthis->__mosek_2fusion_2Constraint__getModel();
  if (((!names_flushed) && ((int)((name).size()) > (int)0)))
  {
    {
      if (((int)((name).size()) == (int)0))
      {
        {
          int _9937 = (int)0;
          int _9938 = _2638;
          for (int _2640 = _9937; _2640 < _9938; ++_2640)
          {
            {
              mosek::fusion::p_Model::_get_impl(_2639.get())->task_var_name(((*nativeslack)(_2640)),std::string (""));
            }
          }
        }
      }
      else
      {
        {
          monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2641 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
          int _9939 = (int)0;
          int _9940 = _2638;
          for (int _2642 = _9939; _2642 < _9940; ++_2642)
          {
            {
              mosek::fusion::p_Model::_get_impl(_2639.get())->task_var_name(((*nativeslack)(_2642)),_2641->__mosek_2fusion_2Utils_2StringBuffer__clear()->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a(::mosek::fusion::p_Set::indexToString(shape,(long long)(_2642)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("].coneslack"))->toString());
            }
          }
        }
      }
      names_flushed = true;
    }
  }
  {}
}
std::string mosek::fusion::ConicConstraint :: toString() { return mosek::fusion::p_ConicConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_ConicConstraint::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2643 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2643->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ConicConstraint('"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("')"));
  return _2643->toString();
}
void mosek::fusion::p_ConicConstraint::domainToString(long long _2644,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2645){
  throw ::mosek::fusion::UnimplementedError(std::string ("ConicConstraint.domainToString"));
}
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_ConicConstraint::__mosek_2fusion_2ConicConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2646){
  return (::mosek::fusion::p_ConicConstraint::_new_ConicConstraint(::mosek::fusion::ConicConstraint::t(_pubthis),_2646)).as<::mosek::fusion::ModelConstraint>();
}
void mosek::fusion::p_ConicConstraint::destroy(){nativeslack.reset();nativeidxs.reset();shape.reset();dom.reset();}void mosek::fusion::ConicConstraint::destroy() { mosek::fusion::p_ConicConstraint::_get_impl(this)->destroy(); }mosek::fusion::LinearConstraint::LinearConstraint(mosek::fusion::p_LinearConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "LinearConstraint()" << this << std::endl; */ }mosek::fusion::LinearConstraint::~LinearConstraint() {  /* std::cout << "~LinearConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_LinearConstraint::p_LinearConstraint  (::mosek::fusion::LinearConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::LinearConstraint::t mosek::fusion::p_LinearConstraint::_new_LinearConstraint  (monty::rc_ptr< ::mosek::fusion::LinearConstraint > _2647,    monty::rc_ptr< ::mosek::fusion::Model > _2648){ return new mosek::fusion::LinearConstraint(_2647,_2648); }mosek::fusion::LinearConstraint::LinearConstraint  (monty::rc_ptr< ::mosek::fusion::LinearConstraint > _2647,    monty::rc_ptr< ::mosek::fusion::Model > _2648) :    LinearConstraint(new mosek::fusion::p_LinearConstraint(this)){ mosek::fusion::p_LinearConstraint::_get_impl(this)->_initialize(_2647,_2648); }void mosek::fusion::p_LinearConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearConstraint > _2647,    monty::rc_ptr< ::mosek::fusion::Model > _2648){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelConstraint::_initialize(_2647,_2648);
    conid = mosek::fusion::p_LinearConstraint::_get_impl(_2647)->conid;
    name = mosek::fusion::p_LinearConstraint::_get_impl(_2647)->name;
  }
}mosek::fusion::LinearConstraint::t mosek::fusion::p_LinearConstraint::_new_LinearConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2649,    const std::string &  _2650,    int _2651,    std::shared_ptr< monty::ndarray< int,1 > > _2652,    std::shared_ptr< monty::ndarray< int,1 > > _2653){ return new mosek::fusion::LinearConstraint(_2649,_2650,_2651,_2652,_2653); }mosek::fusion::LinearConstraint::LinearConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2649,    const std::string &  _2650,    int _2651,    std::shared_ptr< monty::ndarray< int,1 > > _2652,    std::shared_ptr< monty::ndarray< int,1 > > _2653) :    LinearConstraint(new mosek::fusion::p_LinearConstraint(this)){ mosek::fusion::p_LinearConstraint::_get_impl(this)->_initialize(_2649,_2650,_2651,_2652,_2653); }void mosek::fusion::p_LinearConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2649,    const std::string &  _2650,    int _2651,    std::shared_ptr< monty::ndarray< int,1 > > _2652,    std::shared_ptr< monty::ndarray< int,1 > > _2653){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2652(_2652 ? _2652->raw() : nullptr, _2652 ? _2652->size(0) : 0);
    _checked_ptr_1<int> _ptr__2653(_2653 ? _2653->raw() : nullptr, _2653 ? _2653->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2649,_2650,_2652,_2653,_2651);
    mosek::fusion::p_LinearConstraint::_get_impl(::mosek::fusion::LinearConstraint::t(_pubthis))->conid = _2651;
    mosek::fusion::p_LinearConstraint::_get_impl(::mosek::fusion::LinearConstraint::t(_pubthis))->name = _2650;
  }
}std::string mosek::fusion::LinearConstraint :: toString() { return mosek::fusion::p_LinearConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_LinearConstraint::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2654 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2654->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("LinearConstraint('"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("')"));
  return _2654->toString();
}
void mosek::fusion::p_LinearConstraint::domainToString(long long _2655,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2656){
}
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_LinearConstraint::__mosek_2fusion_2LinearConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2657){
  return (::mosek::fusion::p_LinearConstraint::_new_LinearConstraint(::mosek::fusion::LinearConstraint::t(_pubthis),_2657)).as<::mosek::fusion::ModelConstraint>();
}
void mosek::fusion::p_LinearConstraint::destroy(){}void mosek::fusion::LinearConstraint::destroy() { mosek::fusion::p_LinearConstraint::_get_impl(this)->destroy(); }mosek::fusion::ModelConstraint::ModelConstraint(mosek::fusion::p_ModelConstraint *_impl) : mosek::fusion::Constraint(_impl) { /*std::cout << "ModelConstraint()" << this << std::endl; */ }mosek::fusion::ModelConstraint::~ModelConstraint() {  /* std::cout << "~ModelConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_ModelConstraint::p_ModelConstraint  (::mosek::fusion::ModelConstraint * _pubthis) :     mosek::fusion::p_Constraint(_pubthis),    _pubthis(_pubthis){}void mosek::fusion::p_ModelConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::ModelConstraint > _2658,    monty::rc_ptr< ::mosek::fusion::Model > _2659){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_Constraint::_initialize(_2658,_2659);
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->conid = mosek::fusion::p_ModelConstraint::_get_impl(_2658)->conid;
    name = mosek::fusion::p_ModelConstraint::_get_impl(_2658)->name;
    names_flushed = mosek::fusion::p_ModelConstraint::_get_impl(_2658)->names_flushed;
    nativeidxs = mosek::fusion::p_ModelConstraint::_get_impl(_2658)->nativeidxs;
    shape = mosek::fusion::p_ModelConstraint::_get_impl(_2658)->shape;
  }
}void mosek::fusion::p_ModelConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2660,    const std::string &  _2661,    std::shared_ptr< monty::ndarray< int,1 > > _2662,    std::shared_ptr< monty::ndarray< int,1 > > _2663,    int _2664){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2662(_2662 ? _2662->raw() : nullptr, _2662 ? _2662->size(0) : 0);
    _checked_ptr_1<int> _ptr__2663(_2663 ? _2663->raw() : nullptr, _2663 ? _2663->size(0) : 0);
    mosek::fusion::p_Constraint::_initialize(_2660,_2662,_2663);
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->name = _2661;
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->names_flushed = false;
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->nativeidxs = _2663;
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->shape = _2662;
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->conid = _2664;
  }
}std::string mosek::fusion::ModelConstraint :: toString() { return mosek::fusion::p_ModelConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_ModelConstraint::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2665 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2665->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Constraint('"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("')"));
  return _2665->toString();
}
void mosek::fusion::p_ModelConstraint::flushNames(){
  monty::rc_ptr< ::mosek::fusion::Model > _2666 = _pubthis->__mosek_2fusion_2Constraint__getModel();
  if ((!names_flushed))
  {
    {
      if ((_pubthis->getSize() == (int)0))
      {
        {
          names_flushed = true;
        }
      }
      else
      {
        {
          if (((int)((name).size()) == (int)0))
          {
            {
              mosek::fusion::p_Model::_get_impl(_2666.get())->connames(nativeidxs,std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_pubthis->getSize())}),std::shared_ptr< monty::ndarray< long long,1 > >(nullptr));
            }
          }
          else
          {
            {
              monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2667 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
              _2667->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
              if ((_pubthis->getND() > (int)0))
              {
                {
                  _2667->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
                  int _9941 = (int)1;
                  int _9942 = _pubthis->getND();
                  for (int _2668 = _9941; _2668 < _9942; ++_2668)
                  {
                    {
                      _2667->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2668);
                    }
                  }
                }
              }
              {}
              _2667->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
              std::shared_ptr< monty::ndarray< int,1 > > _9943;
              bool _9944 = (_pubthis->getND() > (int)0);
              if (_9944)
              {
                _9943 = _pubthis->getShape();
              }
              else
              {
                _9943 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1)});
              }
              mosek::fusion::p_Model::_get_impl(_2666.get())->connames(nativeidxs,_2667->toString(),_9943,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr));
              names_flushed = true;
            }
          }
        }
      }
    }
  }
  {}
}
void mosek::fusion::ModelConstraint :: remove() { mosek::fusion::p_ModelConstraint::_get_impl(this)->remove(); }void mosek::fusion::p_ModelConstraint::remove(){
  if ((conid >= (int)0))
  {
    {
      mosek::fusion::p_Model::_get_impl(_pubthis->__mosek_2fusion_2Constraint__getModel().get())->removeConstraintBlock(conid);
    }
  }
  {}
  conid = (-(int)1);
}
void mosek::fusion::p_ModelConstraint::destroy(){shape.reset();nativeidxs.reset();}void mosek::fusion::ModelConstraint::destroy() { mosek::fusion::p_ModelConstraint::_get_impl(this)->destroy(); }mosek::fusion::Constraint::Constraint(mosek::fusion::p_Constraint *_impl) : _impl(_impl) { /*std::cout << "Constraint() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Constraint::~Constraint() { delete _impl; _impl = nullptr; }mosek::fusion::p_Constraint::p_Constraint  (::mosek::fusion::Constraint * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::p_Constraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Constraint > _2670,    monty::rc_ptr< ::mosek::fusion::Model > _2671){monty::rc_reserve __reserve_this(_pubthis);   {
    model = _2671;
    shape = mosek::fusion::p_Constraint::_get_impl(_2670)->shape;
    nativeidxs = mosek::fusion::p_Constraint::_get_impl(_2670)->nativeidxs;
  }
}void mosek::fusion::p_Constraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2672,    std::shared_ptr< monty::ndarray< int,1 > > _2673,    std::shared_ptr< monty::ndarray< int,1 > > _2674){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2673(_2673 ? _2673->raw() : nullptr, _2673 ? _2673->size(0) : 0);
    _checked_ptr_1<int> _ptr__2674(_2674 ? _2674->raw() : nullptr, _2674 ? _2674->size(0) : 0);
    mosek::fusion::p_Constraint::_get_impl(::mosek::fusion::Constraint::t(_pubthis))->model = _2672;
    mosek::fusion::p_Constraint::_get_impl(::mosek::fusion::Constraint::t(_pubthis))->shape = _2673;
    mosek::fusion::p_Constraint::_get_impl(::mosek::fusion::Constraint::t(_pubthis))->nativeidxs = _2674;
  }
}std::string mosek::fusion::Constraint :: toString() { return mosek::fusion::p_Constraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_Constraint::toString(){
  throw ::mosek::fusion::UnimplementedError(std::string ("Constraint.toString"));
}
void mosek::fusion::p_Constraint::toStringArray(std::shared_ptr< monty::ndarray< long long,1 > > _2675,long long _2676,std::shared_ptr< monty::ndarray< std::string,1 > > _2677){
  _checked_ptr_1<long long> _ptr__2675(_2675 ? _2675->raw() : nullptr, _2675 ? _2675->size(0) : 0);
}
void mosek::fusion::p_Constraint::dual_lu(int _2678,std::shared_ptr< monty::ndarray< double,1 > > _2679,bool _2680){
  _checked_ptr_1<double> _ptr__2679(_2679 ? _2679->raw() : nullptr, _2679 ? _2679->size(0) : 0);
  model->getConstraintDuals(_2680,nativeidxs,_2679,_2678);
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::Constraint :: dual() { return mosek::fusion::p_Constraint::_get_impl(this)->dual(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Constraint::dual(){
  std::shared_ptr< monty::ndarray< double,1 > > _2681 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((nativeidxs)->size(0)))));
  _checked_ptr_1<double> _ptr__2681(_2681 ? _2681->raw() : nullptr,_2681 ? _2681->size(0) : 0);
  values(false,(int)0,_2681);
  return _2681;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::Constraint :: level() { return mosek::fusion::p_Constraint::_get_impl(this)->level(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Constraint::level(){
  std::shared_ptr< monty::ndarray< double,1 > > _2682 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((nativeidxs)->size(0)))));
  _checked_ptr_1<double> _ptr__2682(_2682 ? _2682->raw() : nullptr,_2682 ? _2682->size(0) : 0);
  values(true,(int)0,_2682);
  return _2682;
}
void mosek::fusion::p_Constraint::values(bool _2683,int _2684,std::shared_ptr< monty::ndarray< double,1 > > _2685){
  _checked_ptr_1<double> _ptr__2685(_2685 ? _2685->raw() : nullptr, _2685 ? _2685->size(0) : 0);
  model->getConstraintValues(_2683,nativeidxs,_2685,_2684);
}
void mosek::fusion::Constraint :: remove() { mosek::fusion::p_Constraint::_get_impl(this)->remove(); }void mosek::fusion::p_Constraint::remove(){
  throw ::mosek::fusion::DeletionError(std::string ("Only original constraints can be removed"));
}
void mosek::fusion::Constraint :: update(std::shared_ptr< monty::ndarray< double,1 > > _2686) { mosek::fusion::p_Constraint::_get_impl(this)->update(_2686); }void mosek::fusion::p_Constraint::update(std::shared_ptr< monty::ndarray< double,1 > > _2686){
  _checked_ptr_1<double> _ptr__2686(_2686 ? _2686->raw() : nullptr, _2686 ? _2686->size(0) : 0);
  _pubthis->update(::mosek::fusion::p_Expr::reshape(::mosek::fusion::p_Expr::constTerm(_2686),_pubthis->getShape()),(::mosek::fusion::p_NilVariable::_new_NilVariable()).as<::mosek::fusion::Variable>(),true);
}
void mosek::fusion::Constraint :: update(monty::rc_ptr< ::mosek::fusion::Expression > _2687) { mosek::fusion::p_Constraint::_get_impl(this)->update(_2687); }void mosek::fusion::p_Constraint::update(monty::rc_ptr< ::mosek::fusion::Expression > _2687){
  std::shared_ptr< monty::ndarray< int,1 > > _2688 = _2687->getShape();
  _checked_ptr_1<int> _ptr__2688(_2688 ? _2688->raw() : nullptr,_2688 ? _2688->size(0) : 0);
  if (((int)((shape)->size(0)) < (int)((_2688)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
    }
  }
  {}
  int _9945 = (int)0;
  int _9946 = (int)((_2688)->size(0));
  for (int _2689 = _9945; _2689 < _9946; ++_2689)
  {
    {
      if ((_ptr__2688[_2689] != ((*shape)(_2689))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
        }
      }
      {}
    }
  }
  int _9947 = (int)((_2688)->size(0));
  int _9948 = (int)((shape)->size(0));
  for (int _2690 = _9947; _2690 < _9948; ++_2690)
  {
    {
      if ((((*shape)(_2690)) != (int)1))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
        }
      }
      {}
    }
  }
  mosek::fusion::p_Model::_get_impl(model.get())->update(nativeidxs,_2687);
}
void mosek::fusion::Constraint :: update(monty::rc_ptr< ::mosek::fusion::Expression > _2691,monty::rc_ptr< ::mosek::fusion::Variable > _2692,bool _2693) { mosek::fusion::p_Constraint::_get_impl(this)->update(_2691,_2692,_2693); }void mosek::fusion::p_Constraint::update(monty::rc_ptr< ::mosek::fusion::Expression > _2691,monty::rc_ptr< ::mosek::fusion::Variable > _2692,bool _2693){
  int _2694 = _pubthis->getND();
  std::shared_ptr< monty::ndarray< int,1 > > _2695 = _2691->getShape();
  _checked_ptr_1<int> _ptr__2695(_2695 ? _2695->raw() : nullptr,_2695 ? _2695->size(0) : 0);
  if ((_2694 < (int)((_2695)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
    }
  }
  {}
  int _9949 = (int)0;
  int _9950 = (int)((_2695)->size(0));
  for (int _2696 = _9949; _2696 < _9950; ++_2696)
  {
    {
      if ((_ptr__2695[_2696] != ((*shape)(_2696))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
        }
      }
      {}
    }
  }
  int _9951 = (int)((_2695)->size(0));
  int _9952 = (int)((shape)->size(0));
  for (int _2697 = _9951; _2697 < _9952; ++_2697)
  {
    {
      if ((((*shape)(_2697)) != (int)1))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
        }
      }
      {}
    }
  }
  int _2698 = _2692->numInst();
  std::shared_ptr< monty::ndarray< long long,1 > > _2699 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2698)));
  _checked_ptr_1<long long> _ptr__2699(_2699 ? _2699->raw() : nullptr,_2699 ? _2699->size(0) : 0);
  if ((_2698 < _2692->getSize()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _2700 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2698)));
      _checked_ptr_1<long long> _ptr__2700(_2700 ? _2700->raw() : nullptr,_2700 ? _2700->size(0) : 0);
      _2692->inst((int)0,_2700,(int)0,_2699);
    }
  }
  else
  {
    {
      _2692->inst((int)0,_2699);
    }
  }
  int _9953 = (int)0;
  int _9954 = _2698;
  for (int _2701 = _9953; _2701 < _9954; ++_2701)
  {
    {
      if ((_ptr__2699[_2701] < (int)0))
      {
        {
          throw ::mosek::fusion::UpdateError(std::string ("Semidefinite terms cannot be updated"));
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _2702;
  _checked_ptr_1<int> _ptr__2702(_2702 ? _2702->raw() : nullptr,_2702 ? _2702->size(0) : 0);
  {
    bool _2703 = true;
    int _9955 = (int)0;
    int _9956 = (_2698 - (int)1);
    for (int _2704 = _9955; _2704 < _9956; ++_2704)
    {
      {
        _2703 = (_2703 && (_ptr__2699[_2704] < _ptr__2699[safe_add( _2704,(int)1 )]));
      }
    }
    if (_2703)
    {
      {
        if ((!_2693))
        {
          {
            std::vector<int> _9957;
            for (int _2705 = (int)0, _9958 = _2698; _2705 < _9958 ; ++_2705)
            {
              _9957.push_back((int)_ptr__2699[_2705]);
            }
            auto _9959 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9957.size()),_9957.begin(),_9957.end()));
            _2702 = _9959;
            _ptr__2702.update(_2702 ? _2702->raw() : nullptr, _2702 ? _2702->size(0) : 0);
          }
        }
        else
        {
          {
            _2702 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _2698,(int)1 ))));
            _ptr__2702.update(_2702 ? _2702->raw() : nullptr, _2702 ? _2702->size(0) : 0);
            _ptr__2702[(int)0] = (int)0;
            int _9960 = (int)0;
            int _9961 = _2698;
            for (int _2706 = _9960; _2706 < _9961; ++_2706)
            {
              {
                _ptr__2702[safe_add( (int)1,_2706 )] = (int)_ptr__2699[_2706];
              }
            }
          }
        }
      }
    }
    else
    {
      {
        std::vector<long long> _9962;
        for (int _2708 = (int)0, _9963 = _2698; _2708 < _9963 ; ++_2708)
        {
          _9962.push_back(_2708);
        }
        auto _9964 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9962.size()),_9962.begin(),_9962.end()));
        std::shared_ptr< monty::ndarray< long long,1 > > _2707 = _9964;
        _checked_ptr_1<long long> _ptr__2707(_2707 ? _2707->raw() : nullptr,_2707 ? _2707->size(0) : 0);
        ::mosek::fusion::p_CommonTools::argQsort(_2707,_2699,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_2698));
        int _2709 = (int)1;
        int _9965 = (int)1;
        int _9966 = _2698;
        for (int _2710 = _9965; _2710 < _9966; ++_2710)
        {
          {
            if ((_ptr__2699[_ptr__2707[(_2710 - (int)1)]] < _ptr__2699[_ptr__2707[_2710]]))
            {
              {
                ++ _2709;
              }
            }
            {}
          }
        }
        if (_2693)
        {
          {
            _2709 += (int)1;
          }
        }
        {}
        _2702 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2709)));
        _ptr__2702.update(_2702 ? _2702->raw() : nullptr, _2702 ? _2702->size(0) : 0);
        int _2711 = (int)0;
        if (_2693)
        {
          {
            _ptr__2702[(int)0] = (int)0;
            ++ _2711;
          }
        }
        {}
        _ptr__2702[_2711] = (int)_ptr__2699[_ptr__2707[(int)0]];
        int _9967 = (int)1;
        int _9968 = _2698;
        for (int _2712 = _9967; _2712 < _9968; ++_2712)
        {
          {
            if ((_ptr__2699[(_2712 - (int)1)] < _ptr__2699[_2712]))
            {
              {
                _ptr__2702[_2711] = (int)_ptr__2699[_ptr__2707[_2712]];
                ++ _2711;
              }
            }
            {}
          }
        }
      }
    }
  }
  mosek::fusion::p_Model::_get_impl(model.get())->update(nativeidxs,_2691,_2702);
}
void mosek::fusion::Constraint :: update(monty::rc_ptr< ::mosek::fusion::Expression > _2713,monty::rc_ptr< ::mosek::fusion::Variable > _2714) { mosek::fusion::p_Constraint::_get_impl(this)->update(_2713,_2714); }void mosek::fusion::p_Constraint::update(monty::rc_ptr< ::mosek::fusion::Expression > _2713,monty::rc_ptr< ::mosek::fusion::Variable > _2714){
  _pubthis->update(_2713,_2714,false);
}
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__get_model() { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__get_model(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Constraint::get_model() { return __mosek_2fusion_2Constraint__get_model(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__get_model(){
  return model;
}
int mosek::fusion::Constraint :: get_nd() { return mosek::fusion::p_Constraint::_get_impl(this)->get_nd(); }int mosek::fusion::p_Constraint::get_nd(){
  return (int)((shape)->size(0));
}
long long mosek::fusion::Constraint :: size() { return mosek::fusion::p_Constraint::_get_impl(this)->size(); }long long mosek::fusion::p_Constraint::size(){
  long long _2715 = (int)1;
  int _9969 = (int)0;
  int _9970 = (int)((shape)->size(0));
  for (int _2716 = _9969; _2716 < _9970; ++_2716)
  {
    {
      _2715 *= ((*shape)(_2716));
    }
  }
  return _2715;
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::stack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2717,    int _2718) { return mosek::fusion::p_Constraint::stack(_2717,_2718); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::stack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2717,int _2718){
  return ::mosek::fusion::p_Constraint::dstack(_2717,_2718);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::stack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2719,    monty::rc_ptr< ::mosek::fusion::Constraint > _2720,    monty::rc_ptr< ::mosek::fusion::Constraint > _2721,    int _2722) { return mosek::fusion::p_Constraint::stack(_2719,_2720,_2721,_2722); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::stack(monty::rc_ptr< ::mosek::fusion::Constraint > _2719,monty::rc_ptr< ::mosek::fusion::Constraint > _2720,monty::rc_ptr< ::mosek::fusion::Constraint > _2721,int _2722){
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2719.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2720.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2721.get())}),_2722);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::stack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2723,    monty::rc_ptr< ::mosek::fusion::Constraint > _2724,    int _2725) { return mosek::fusion::p_Constraint::stack(_2723,_2724,_2725); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::stack(monty::rc_ptr< ::mosek::fusion::Constraint > _2723,monty::rc_ptr< ::mosek::fusion::Constraint > _2724,int _2725){
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2723.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2724.get())}),_2725);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::hstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2726) { return mosek::fusion::p_Constraint::hstack(_2726); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::hstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2726){
  return ::mosek::fusion::p_Constraint::dstack(_2726,(int)1);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::vstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2727) { return mosek::fusion::p_Constraint::vstack(_2727); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::vstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2727){
  return ::mosek::fusion::p_Constraint::dstack(_2727,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::hstack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2728,    monty::rc_ptr< ::mosek::fusion::Constraint > _2729,    monty::rc_ptr< ::mosek::fusion::Constraint > _2730) { return mosek::fusion::p_Constraint::hstack(_2728,_2729,_2730); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::hstack(monty::rc_ptr< ::mosek::fusion::Constraint > _2728,monty::rc_ptr< ::mosek::fusion::Constraint > _2729,monty::rc_ptr< ::mosek::fusion::Constraint > _2730){
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2728.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2729.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2730.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::vstack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2731,    monty::rc_ptr< ::mosek::fusion::Constraint > _2732,    monty::rc_ptr< ::mosek::fusion::Constraint > _2733) { return mosek::fusion::p_Constraint::vstack(_2731,_2732,_2733); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::vstack(monty::rc_ptr< ::mosek::fusion::Constraint > _2731,monty::rc_ptr< ::mosek::fusion::Constraint > _2732,monty::rc_ptr< ::mosek::fusion::Constraint > _2733){
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2731.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2732.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2733.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::hstack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2734,    monty::rc_ptr< ::mosek::fusion::Constraint > _2735) { return mosek::fusion::p_Constraint::hstack(_2734,_2735); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::hstack(monty::rc_ptr< ::mosek::fusion::Constraint > _2734,monty::rc_ptr< ::mosek::fusion::Constraint > _2735){
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2734.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2735.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::vstack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2736,    monty::rc_ptr< ::mosek::fusion::Constraint > _2737) { return mosek::fusion::p_Constraint::vstack(_2736,_2737); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::vstack(monty::rc_ptr< ::mosek::fusion::Constraint > _2736,monty::rc_ptr< ::mosek::fusion::Constraint > _2737){
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2736.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2737.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2738,int _2739){
  monty::rc_ptr< ::mosek::fusion::Model > _2740 = nullptr;
  {
    int _9971 = (int)0;
    int _9972 = (int)((_2738)->size(0));
    for (int _2741 = _9971; _2741 < _9972; ++_2741)
    {
      {
        if ((NULL == _2740.get()))
        {
          {
            _2740 = ((*_2738)(_2741))->__mosek_2fusion_2Constraint__getModel();
          }
        }
        else if(((NULL != mosek::fusion::p_Constraint::_get_impl(((*_2738)(_2741)))->model.get()) && (mosek::fusion::p_Constraint::_get_impl(((*_2738)(_2741)))->model != _2740)))
        {
          {
            monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2742 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
            std::string _9973;
            bool _9974 = ((int)((mosek::fusion::p_Model::_get_impl(_2740.get())->getName()).size()) > (int)0);
            if (_9974)
            {
              _9973 = mosek::fusion::p_Model::_get_impl(_2740.get())->getName();
            }
            else
            {
              _9973 = std::string ("?");
            }
            std::string _2743 = _9973;
            std::string _9975;
            bool _9976 = ((int)((mosek::fusion::p_Model::_get_impl(((*_2738)(_2741))->__mosek_2fusion_2Constraint__getModel().get())->getName()).size()) > (int)0);
            if (_9976)
            {
              _9975 = mosek::fusion::p_Model::_get_impl(((*_2738)(_2741))->__mosek_2fusion_2Constraint__getModel().get())->getName();
            }
            else
            {
              _9975 = std::string ("?");
            }
            std::string _2744 = _9975;
            _2742->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Constraints belong to different models: '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2743)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("' and '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2744)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"));
            throw ::mosek::fusion::ModelError(_2742->toString());
          }
        }
        {}
      }
    }
  }
  if (((int)((_2738)->size(0)) == (int)0))
  {
    {
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))))).as<::mosek::fusion::Constraint>();
    }
  }
  else if(((int)((_2738)->size(0)) == (int)1))
  {
    {
      return ((*_2738)((int)1));
    }
  }
  else
  {
    {
      int _2745 = (int)((_2738)->size(0));
      int _2746 = (int)1;
      int _9977 = (int)0;
      int _9978 = _2745;
      for (int _2747 = _9977; _2747 < _9978; ++_2747)
      {
        {
          int _9979;
          bool _9980 = (((*_2738)(_2747))->getND() > _2746);
          if (_9980)
          {
            _9979 = ((*_2738)(_2747))->getND();
          }
          else
          {
            _9979 = _2746;
          }
          _2746 = _9979;
        }
      }
      if ((_2739 == _2746))
      {
        {
          ++ _2746;
        }
      }
      {}
      std::shared_ptr< monty::ndarray< int,2 > > _2748 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape(_2745,_2746)));
      int _9981 = (int)0;
      int _9982 = _2745;
      for (int _2749 = _9981; _2749 < _9982; ++_2749)
      {
        {
          int _9983 = (int)0;
          int _9984 = _2746;
          for (int _2750 = _9983; _2750 < _9984; ++_2750)
          {
            {
              ((*_2748)(_2749,_2750)) = (int)1;
            }
          }
        }
      }
      std::vector<int> _9985;
      for (int _2752 = (int)0, _9986 = _2745; _2752 < _9986 ; ++_2752)
      {
        _9985.push_back(((*_2738)(_2752))->getSize());
      }
      auto _9987 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9985.size()),_9985.begin(),_9985.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2751 = _9987;
      _checked_ptr_1<int> _ptr__2751(_2751 ? _2751->raw() : nullptr,_2751 ? _2751->size(0) : 0);
      int _2753 = (int)0;
      int _9988 = (int)0;
      int _9989 = _2745;
      for (int _2754 = _9988; _2754 < _9989; ++_2754)
      {
        {
          _2753 += _ptr__2751[_2754];
        }
      }
      int _9990 = (int)0;
      int _9991 = _2745;
      for (int _2755 = _9990; _2755 < _9991; ++_2755)
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _2756 = ((*_2738)(_2755))->getShape();
          _checked_ptr_1<int> _ptr__2756(_2756 ? _2756->raw() : nullptr,_2756 ? _2756->size(0) : 0);
          int _9992 = (int)0;
          int _9993 = (int)((_2756)->size(0));
          for (int _2757 = _9992; _2757 < _9993; ++_2757)
          {
            {
              ((*_2748)(_2755,_2757)) = _ptr__2756[_2757];
            }
          }
        }
      }
      if (((_2739 < (int)0) || (_2739 > _2746)))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid stacking dimension"));
        }
      }
      {}
      int _9994 = (int)0;
      int _9995 = _2739;
      for (int _2758 = _9994; _2758 < _9995; ++_2758)
      {
        {
          int _9996 = (int)1;
          int _9997 = _2745;
          for (int _2759 = _9996; _2759 < _9997; ++_2759)
          {
            {
              if ((((*_2748)((int)0,_2758)) != ((*_2748)(_2759,_2758))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Constraint dimensions do not match"));
                }
              }
              {}
            }
          }
        }
      }
      int _9998 = safe_add( _2739,(int)1 );
      int _9999 = _2746;
      for (int _2760 = _9998; _2760 < _9999; ++_2760)
      {
        {
          int _10000 = (int)1;
          int _10001 = _2745;
          for (int _2761 = _10000; _2761 < _10001; ++_2761)
          {
            {
              if ((((*_2748)((int)0,_2760)) != ((*_2748)(_2761,_2760))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Constraint dimensions do not match"));
                }
              }
              {}
            }
          }
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _2762 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2753)));
      _checked_ptr_1<int> _ptr__2762(_2762 ? _2762->raw() : nullptr,_2762 ? _2762->size(0) : 0);
      std::vector<int> _10002;
      for (int _2764 = (int)0, _10003 = _2746; _2764 < _10003 ; ++_2764)
      {
        _10002.push_back(((*_2748)((int)0,_2764)));
      }
      auto _10004 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10002.size()),_10002.begin(),_10002.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2763 = _10004;
      _checked_ptr_1<int> _ptr__2763(_2763 ? _2763->raw() : nullptr,_2763 ? _2763->size(0) : 0);
      int _10005 = (int)1;
      int _10006 = _2745;
      for (int _2765 = _10005; _2765 < _10006; ++_2765)
      {
        {
          _ptr__2763[_2739] += ((*_2748)(_2765,_2739));
        }
      }
      {
        int _2766 = (int)((_2763)->size(0));
        std::shared_ptr< monty::ndarray< long long,1 > > _2767 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( (int)((_2738)->size(0)),(int)1 ))));
        _checked_ptr_1<long long> _ptr__2767(_2767 ? _2767->raw() : nullptr,_2767 ? _2767->size(0) : 0);
        int _10007 = (int)0;
        int _10008 = (int)((_2738)->size(0));
        for (int _2768 = _10007; _2768 < _10008; ++_2768)
        {
          {
            _ptr__2767[safe_add( _2768,(int)1 )] = safe_add( _ptr__2767[_2768],((*_2748)(_2768,_2739)) );
          }
        }
        if ((_2739 == (int)0))
        {
          {
            int _2769 = (int)0;
            int _10009 = (int)0;
            int _10010 = _2745;
            for (int _2770 = _10009; _2770 < _10010; ++_2770)
            {
              {
                int _2771 = (int)((mosek::fusion::p_Constraint::_get_impl(((*_2738)(_2770)))->nativeidxs)->size(0));
                ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Constraint::_get_impl(((*_2738)(_2770)))->nativeidxs,(int)0,_2762,_2769,_2771);
                _2769 += _2771;
              }
            }
          }
        }
        else
        {
          {
            std::vector<std::shared_ptr< monty::ndarray< int,1 > >> _10011;
            for (int _2773 = (int)0, _10012 = _2745; _2773 < _10012 ; ++_2773)
            {
              _10011.push_back(mosek::fusion::p_Constraint::_get_impl(((*_2738)(_2773)))->nativeidxs);
            }
            auto _10013 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 >(monty::shape(_10011.size()),_10011.begin(),_10011.end()));
            std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _2772 = _10013;
            if ((_2739 < _2746))
            {
              {
                int _2774 = (int)1;
                int _10014 = (int)0;
                int _10015 = _2739;
                for (int _2775 = _10014; _2775 < _10015; ++_2775)
                {
                  {
                    _2774 *= _ptr__2763[_2775];
                  }
                }
                int _2776 = (int)1;
                int _10016 = safe_add( _2739,(int)1 );
                int _10017 = _2746;
                for (int _2777 = _10016; _2777 < _10017; ++_2777)
                {
                  {
                    _2776 *= _ptr__2763[_2777];
                  }
                }
                int _2778 = (int)0;
                int _10018 = (int)0;
                int _10019 = _2774;
                for (int _2779 = _10018; _2779 < _10019; ++_2779)
                {
                  {
                    int _10020 = (int)0;
                    int _10021 = _2745;
                    for (int _2780 = _10020; _2780 < _10021; ++_2780)
                    {
                      {
                        int _2781 = (int)0;
                        int _2782 = ((*_2748)(_2780,_2739));
                        int _10022 = (int)0;
                        int _10023 = _2782;
                        for (int _2783 = _10022; _2783 < _10023; ++_2783)
                        {
                          {
                            int _10024 = (int)0;
                            int _10025 = _2776;
                            for (int _2784 = _10024; _2784 < _10025; ++_2784)
                            {
                              {
                                _ptr__2762[_2778] = ((*mosek::fusion::p_Constraint::_get_impl(((*_2738)(_2745)))->nativeidxs)(safe_add( safe_mul( safe_mul( _2779,_2776 ),_2782 ),_2781 )));
                                ++ _2778;
                                ++ _2781;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            else
            {
              {
                int _2785 = (int)1;
                int _10026 = (int)0;
                int _10027 = _2746;
                for (int _2786 = _10026; _2786 < _10027; ++_2786)
                {
                  {
                    _2785 *= _ptr__2763[_2786];
                  }
                }
                int _2787 = (int)0;
                int _10028 = (int)0;
                int _10029 = _2785;
                for (int _2788 = _10028; _2788 < _10029; ++_2788)
                {
                  {
                    int _10030 = (int)0;
                    int _10031 = _2745;
                    for (int _2789 = _10030; _2789 < _10031; ++_2789)
                    {
                      {
                        _ptr__2762[_2787] = ((*((*_2772)(_2789)))(_2788));
                        ++ _2787;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(_2740,_2763,_2762)).as<::mosek::fusion::Constraint>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__index(std::shared_ptr< monty::ndarray< int,1 > > _2790) { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__index(_2790); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::index(std::shared_ptr< monty::ndarray< int,1 > > _2790) { return __mosek_2fusion_2Constraint__index(_2790); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__index(std::shared_ptr< monty::ndarray< int,1 > > _2790){
  _checked_ptr_1<int> _ptr__2790(_2790 ? _2790->raw() : nullptr, _2790 ? _2790->size(0) : 0);
  if (((int)((_2790)->size(0)) != (int)((shape)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("variable shape and slice do not match"));
    }
  }
  else
  {
    {
      int _10032 = (int)0;
      int _10033 = (int)((shape)->size(0));
      for (int _2791 = _10032; _2791 < _10033; ++_2791)
      {
        {
          if (((_ptr__2790[_2791] < (int)0) || (_ptr__2790[_2791] > ((*shape)(_2791)))))
          {
            {
              throw ::mosek::fusion::IndexError(std::string ("index is out of bounds"));
            }
          }
          {}
        }
      }
      int _2792 = (int)((shape)->size(0));
      std::shared_ptr< monty::ndarray< long long,1 > > _2793 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2792)));
      _checked_ptr_1<long long> _ptr__2793(_2793 ? _2793->raw() : nullptr,_2793 ? _2793->size(0) : 0);
      _ptr__2793[(_2792 - (int)1)] = (int)1;
      int _10034 = (int)1;
      int _10035 = _2792;
      for (int _2794 = _10034; _2794 < _10035; ++_2794)
      {
        {
          _ptr__2793[((_2792 - _2794) - (int)1)] = safe_mul( _ptr__2793[(_2792 - _2794)],((*shape)((_2792 - _2794))) );
        }
      }
      int _2795 = (int)0;
      int _10036 = (int)0;
      int _10037 = _2792;
      for (int _2796 = _10036; _2796 < _10037; ++_2796)
      {
        {
          _2795 += (int)safe_mul( _ptr__2793[_2796],_ptr__2790[_2796] );
        }
      }
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(((*nativeidxs)(_2795)))}))).as<::mosek::fusion::Constraint>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__index(int _2797) { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__index(_2797); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::index(int _2797) { return __mosek_2fusion_2Constraint__index(_2797); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__index(int _2797){
  if ((((int)((shape)->size(0)) == (int)0) && (_2797 == (int)0)))
  {
    {
      return ::mosek::fusion::Constraint::t(_pubthis);
    }
  }
  else if(((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable shape and slice do not match"));
    }
  }
  else if(((_2797 < (int)0) || (_2797 > ((*shape)((int)0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Index is out of bounds"));
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(((*nativeidxs)(_2797)))}))).as<::mosek::fusion::Constraint>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__slice(std::shared_ptr< monty::ndarray< int,1 > > _2798,std::shared_ptr< monty::ndarray< int,1 > > _2799) { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__slice(_2798,_2799); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::slice(std::shared_ptr< monty::ndarray< int,1 > > _2798,std::shared_ptr< monty::ndarray< int,1 > > _2799) { return __mosek_2fusion_2Constraint__slice(_2798,_2799); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__slice(std::shared_ptr< monty::ndarray< int,1 > > _2798,std::shared_ptr< monty::ndarray< int,1 > > _2799){
  _checked_ptr_1<int> _ptr__2798(_2798 ? _2798->raw() : nullptr, _2798 ? _2798->size(0) : 0);
  _checked_ptr_1<int> _ptr__2799(_2799 ? _2799->raw() : nullptr, _2799 ? _2799->size(0) : 0);
  if (((int)((_2798)->size(0)) != (int)((_2799)->size(0))))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("invalid slice"));
    }
  }
  else if(((int)((_2798)->size(0)) != (int)((shape)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("variable shape and slice do not match"));
    }
  }
  else
  {
    {
      int _10038 = (int)0;
      int _10039 = (int)((shape)->size(0));
      for (int _2800 = _10038; _2800 < _10039; ++_2800)
      {
        {
          if (((_ptr__2798[_2800] < (int)0) || (_ptr__2799[_2800] > ((*shape)(_2800)))))
          {
            {
              throw ::mosek::fusion::IndexError(std::string ("slice is out of bounds"));
            }
          }
          else if((_ptr__2798[_2800] > _ptr__2799[_2800]))
          {
            {
              throw ::mosek::fusion::SliceError(std::string ("invalid slice"));
            }
          }
          {}
        }
      }
      int _2801 = (int)((shape)->size(0));
      std::vector<int> _10040;
      for (int _2803 = (int)0, _10041 = _2801; _2803 < _10041 ; ++_2803)
      {
        _10040.push_back((_ptr__2799[_2803] - _ptr__2798[_2803]));
      }
      auto _10042 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10040.size()),_10040.begin(),_10040.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2802 = _10042;
      _checked_ptr_1<int> _ptr__2802(_2802 ? _2802->raw() : nullptr,_2802 ? _2802->size(0) : 0);
      int _2804 = (int)1;
      int _10043 = (int)0;
      int _10044 = _2801;
      for (int _2805 = _10043; _2805 < _10044; ++_2805)
      {
        {
          _2804 *= (_ptr__2799[_2805] - _ptr__2798[_2805]);
        }
      }
      if ((_2804 == (int)0))
      {
        {
          return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(model,_2802,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))))).as<::mosek::fusion::Constraint>();
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _2806 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2804)));
          _checked_ptr_1<int> _ptr__2806(_2806 ? _2806->raw() : nullptr,_2806 ? _2806->size(0) : 0);
          {
            std::shared_ptr< monty::ndarray< int,1 > > _2807 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2801)));
            _checked_ptr_1<int> _ptr__2807(_2807 ? _2807->raw() : nullptr,_2807 ? _2807->size(0) : 0);
            _ptr__2807[(_2801 - (int)1)] = (int)1;
            int _10045 = (int)1;
            int _10046 = _2801;
            for (int _2808 = _10045; _2808 < _10046; ++_2808)
            {
              {
                _ptr__2807[((_2801 - _2808) - (int)1)] = safe_mul( _ptr__2807[(_2801 - _2808)],((*shape)((_2801 - _2808))) );
              }
            }
            int _2809 = (int)0;
            int _10047 = (int)0;
            int _10048 = _2801;
            for (int _2810 = _10047; _2810 < _10048; ++_2810)
            {
              {
                _2809 += safe_mul( _ptr__2798[_2810],_ptr__2807[_2810] );
              }
            }
            std::vector<int> _10049;
            for (int _2812 = (int)0, _10050 = _2801; _2812 < _10050 ; ++_2812)
            {
              _10049.push_back(_2809);
            }
            auto _10051 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10049.size()),_10049.begin(),_10049.end()));
            std::shared_ptr< monty::ndarray< int,1 > > _2811 = _10051;
            _checked_ptr_1<int> _ptr__2811(_2811 ? _2811->raw() : nullptr,_2811 ? _2811->size(0) : 0);
            std::vector<int> _10052;
            for (int _2814 = (int)0, _10053 = _2801; _2814 < _10053 ; ++_2814)
            {
              _10052.push_back(_ptr__2798[_2814]);
            }
            auto _10054 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10052.size()),_10052.begin(),_10052.end()));
            std::shared_ptr< monty::ndarray< int,1 > > _2813 = _10054;
            _checked_ptr_1<int> _ptr__2813(_2813 ? _2813->raw() : nullptr,_2813 ? _2813->size(0) : 0);
            int _10055 = (int)0;
            int _10056 = _2804;
            for (int _2815 = _10055; _2815 < _10056; ++_2815)
            {
              {
                _ptr__2806[_2815] = ((*nativeidxs)(_ptr__2811[(_2801 - (int)1)]));
                _ptr__2813[(_2801 - (int)1)] += (int)1;
                _ptr__2811[(_2801 - (int)1)] += _ptr__2807[(_2801 - (int)1)];
                if ((_ptr__2813[(_2801 - (int)1)] >= _ptr__2799[(_2801 - (int)1)]))
                {
                  {
                    int _2816 = (_2801 - (int)1);
                    while ( ((_2816 > (int)0) && (_ptr__2813[_2816] >= _ptr__2799[_2816])) )
                    {
                      {
                        _ptr__2813[_2816] = _ptr__2798[_2816];
                        _ptr__2813[(_2816 - (int)1)] += (int)1;
                        _ptr__2811[(_2816 - (int)1)] += _ptr__2807[(_2816 - (int)1)];
                        -- _2816;
                      }
                    }
                    int _10057 = safe_add( _2816,(int)1 );
                    int _10058 = _2801;
                    for (int _2817 = _10057; _2817 < _10058; ++_2817)
                    {
                      {
                        _ptr__2811[_2817] = _ptr__2811[_2816];
                      }
                    }
                  }
                }
                {}
              }
            }
          }
          return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(_pubthis->__mosek_2fusion_2Constraint__getModel(),_2802,_2806)).as<::mosek::fusion::Constraint>();
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__slice(int _2818,int _2819) { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__slice(_2818,_2819); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::slice(int _2818,int _2819) { return __mosek_2fusion_2Constraint__slice(_2818,_2819); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__slice(int _2818,int _2819){
  if (((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable shape and slice do not match"));
    }
  }
  {}
  if (((_2818 == (int)0) && (_2819 == ((*shape)((int)0)))))
  {
    {
      return ::mosek::fusion::Constraint::t(_pubthis);
    }
  }
  else if(((_2818 < (int)0) || (_2819 > ((*shape)((int)0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Slice is out of bounds"));
    }
  }
  else if((_2818 > _2819))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("Invalid slice"));
    }
  }
  else
  {
    {
      std::vector<int> _10059;
      for (int _2820 = _2818, _10060 = _2819; _2820 < _10060 ; ++_2820)
      {
        _10059.push_back(((*nativeidxs)(_2820)));
      }
      auto _10061 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10059.size()),_10059.begin(),_10059.end()));
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((_2819 - _2818))}),_10061)).as<::mosek::fusion::Constraint>();
    }
  }
}
int mosek::fusion::Constraint :: getND() { return mosek::fusion::p_Constraint::_get_impl(this)->getND(); }int mosek::fusion::p_Constraint::getND(){
  return (int)((shape)->size(0));
}
int mosek::fusion::Constraint :: getSize() { return mosek::fusion::p_Constraint::_get_impl(this)->getSize(); }int mosek::fusion::p_Constraint::getSize(){
  int _2821 = (int)1;
  int _10062 = (int)0;
  int _10063 = (int)((shape)->size(0));
  for (int _2822 = _10062; _2822 < _10063; ++_2822)
  {
    {
      _2821 *= ((*shape)(_2822));
    }
  }
  return _2821;
}
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__getModel() { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__getModel(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Constraint::getModel() { return __mosek_2fusion_2Constraint__getModel(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__getModel(){
  return model;
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Constraint :: getShape() { return mosek::fusion::p_Constraint::_get_impl(this)->getShape(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Constraint::getShape(){
  std::vector<int> _10064;
  for (int _2823 = (int)0, _10065 = (int)((shape)->size(0)); _2823 < _10065 ; ++_2823)
  {
    _10064.push_back(((*shape)(_2823)));
  }
  auto _10066 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10064.size()),_10064.begin(),_10064.end()));
  return _10066;
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Constraint::getNativeidxs(){
  return nativeidxs;
}
void mosek::fusion::p_Constraint::destroy(){nativeidxs.reset();shape.reset();model.reset();}void mosek::fusion::Constraint::destroy() { mosek::fusion::p_Constraint::_get_impl(this)->destroy(); }mosek::fusion::Set::Set(mosek::fusion::p_Set *_impl) : _impl(_impl) { /*std::cout << "Set() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Set::~Set() { delete _impl; _impl = nullptr; }mosek::fusion::p_Set::p_Set  (::mosek::fusion::Set * _pubthis) :     _pubthis(_pubthis){}long long mosek::fusion::Set::size  ( std::shared_ptr< monty::ndarray< int,1 > > _2824) { return mosek::fusion::p_Set::size(_2824); }long long mosek::fusion::p_Set::size(std::shared_ptr< monty::ndarray< int,1 > > _2824){
  _checked_ptr_1<int> _ptr__2824(_2824 ? _2824->raw() : nullptr, _2824 ? _2824->size(0) : 0);
  long long _2825 = (long long)1;
  int _10067 = (int)0;
  int _10068 = (int)((_2824)->size(0));
  for (int _2826 = _10067; _2826 < _10068; ++_2826)
  {
    {
      _2825 *= _ptr__2824[_2826];
    }
  }
  return _2825;
}
bool mosek::fusion::Set::match  ( std::shared_ptr< monty::ndarray< int,1 > > _2827,    std::shared_ptr< monty::ndarray< int,1 > > _2828) { return mosek::fusion::p_Set::match(_2827,_2828); }bool mosek::fusion::p_Set::match(std::shared_ptr< monty::ndarray< int,1 > > _2827,std::shared_ptr< monty::ndarray< int,1 > > _2828){
  _checked_ptr_1<int> _ptr__2827(_2827 ? _2827->raw() : nullptr, _2827 ? _2827->size(0) : 0);
  _checked_ptr_1<int> _ptr__2828(_2828 ? _2828->raw() : nullptr, _2828 ? _2828->size(0) : 0);
  if (((int)((_2827)->size(0)) != (int)((_2828)->size(0))))
  {
    {
      return false;
    }
  }
  {}
  int _10069 = (int)0;
  int _10070 = (int)((_2827)->size(0));
  for (int _2829 = _10069; _2829 < _10070; ++_2829)
  {
    {
      if ((_ptr__2827[_2829] != _ptr__2828[_2829]))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
long long mosek::fusion::Set::linearidx  ( std::shared_ptr< monty::ndarray< int,1 > > _2830,    std::shared_ptr< monty::ndarray< int,1 > > _2831) { return mosek::fusion::p_Set::linearidx(_2830,_2831); }long long mosek::fusion::p_Set::linearidx(std::shared_ptr< monty::ndarray< int,1 > > _2830,std::shared_ptr< monty::ndarray< int,1 > > _2831){
  _checked_ptr_1<int> _ptr__2830(_2830 ? _2830->raw() : nullptr, _2830 ? _2830->size(0) : 0);
  _checked_ptr_1<int> _ptr__2831(_2831 ? _2831->raw() : nullptr, _2831 ? _2831->size(0) : 0);
  long long _2832 = _ptr__2831[(int)0];
  int _10071 = (int)1;
  int _10072 = (int)((_2831)->size(0));
  for (int _2833 = _10071; _2833 < _10072; ++_2833)
  {
    {
      _2832 = safe_add( safe_mul( _2832,_ptr__2830[_2833] ),_ptr__2831[_2833] );
    }
  }
  return _2832;
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::idxtokey  ( std::shared_ptr< monty::ndarray< int,1 > > _2834,    long long _2835) { return mosek::fusion::p_Set::idxtokey(_2834,_2835); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::idxtokey(std::shared_ptr< monty::ndarray< int,1 > > _2834,long long _2835){
  _checked_ptr_1<int> _ptr__2834(_2834 ? _2834->raw() : nullptr, _2834 ? _2834->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _2836 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_2834)->size(0)))));
  _checked_ptr_1<int> _ptr__2836(_2836 ? _2836->raw() : nullptr,_2836 ? _2836->size(0) : 0);
  ::mosek::fusion::p_Set::idxtokey(_2834,_2835,_2836);
  return _2836;
}
void mosek::fusion::Set::idxtokey  ( std::shared_ptr< monty::ndarray< int,1 > > _2837,    long long _2838,    std::shared_ptr< monty::ndarray< int,1 > > _2839) { mosek::fusion::p_Set::idxtokey(_2837,_2838,_2839); }void mosek::fusion::p_Set::idxtokey(std::shared_ptr< monty::ndarray< int,1 > > _2837,long long _2838,std::shared_ptr< monty::ndarray< int,1 > > _2839){
  _checked_ptr_1<int> _ptr__2837(_2837 ? _2837->raw() : nullptr, _2837 ? _2837->size(0) : 0);
  _checked_ptr_1<int> _ptr__2839(_2839 ? _2839->raw() : nullptr, _2839 ? _2839->size(0) : 0);
  int _2840 = (int)((_2837)->size(0));
  if ((_2840 > (int)0))
  {
    {
      long long _2841 = _2838;
      int _10073 = (int)0;
      int _10074 = (_2840 - (int)1);
      for (int _2842 = _10073; _2842 < _10074; ++_2842)
      {
        {
          _ptr__2839[((_2840 - _2842) - (int)1)] = (int)(_2841 % _ptr__2837[((_2840 - _2842) - (int)1)]);
          _2841 /= _ptr__2837[((_2840 - _2842) - (int)1)];
        }
      }
      _ptr__2839[(int)0] = (int)_2841;
    }
  }
  {}
}
std::string mosek::fusion::Set::indexToString  ( std::shared_ptr< monty::ndarray< int,1 > > _2843,    long long _2844) { return mosek::fusion::p_Set::indexToString(_2843,_2844); }std::string mosek::fusion::p_Set::indexToString(std::shared_ptr< monty::ndarray< int,1 > > _2843,long long _2844){
  _checked_ptr_1<int> _ptr__2843(_2843 ? _2843->raw() : nullptr, _2843 ? _2843->size(0) : 0);
  int _2845 = (int)((_2843)->size(0));
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2846 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  if ((_2845 == (int)0))
  {
    {
      return std::string ("0");
    }
  }
  else if((_2845 == (int)1))
  {
    {
      return _2846->__mosek_2fusion_2Utils_2StringBuffer__a(_2844)->toString();
    }
  }
  else
  {
    {
      long long _2847 = _2844;
      std::shared_ptr< monty::ndarray< int,1 > > _2848 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2845)));
      _checked_ptr_1<int> _ptr__2848(_2848 ? _2848->raw() : nullptr,_2848 ? _2848->size(0) : 0);
      int _10075 = (int)1;
      int _10076 = _2845;
      for (int _2849 = _10075; _2849 < _10076; ++_2849)
      {
        {
          _ptr__2848[(_2845 - _2849)] = (int)(_2847 % _ptr__2843[(_2845 - _2849)]);
          _2847 /= _ptr__2843[(_2845 - _2849)];
        }
      }
      _ptr__2848[(int)0] = (int)_2847;
      _2846->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2848[(int)0]);
      int _10077 = (int)1;
      int _10078 = _2845;
      for (int _2850 = _10077; _2850 < _10078; ++_2850)
      {
        {
          _2846->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2848[_2850]);
        }
      }
      return _2846->toString();
    }
  }
}
std::string mosek::fusion::Set::keyToString  ( std::shared_ptr< monty::ndarray< int,1 > > _2851) { return mosek::fusion::p_Set::keyToString(_2851); }std::string mosek::fusion::p_Set::keyToString(std::shared_ptr< monty::ndarray< int,1 > > _2851){
  _checked_ptr_1<int> _ptr__2851(_2851 ? _2851->raw() : nullptr, _2851 ? _2851->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2852 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2852->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2851[(int)0]);
  int _10079 = (int)1;
  int _10080 = (int)((_2851)->size(0));
  for (int _2853 = _10079; _2853 < _10080; ++_2853)
  {
    {
      _2852->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2851[_2853]);
    }
  }
  return _2852->toString();
}
void mosek::fusion::Set::indexToKey  ( std::shared_ptr< monty::ndarray< int,1 > > _2854,    long long _2855,    std::shared_ptr< monty::ndarray< int,1 > > _2856) { mosek::fusion::p_Set::indexToKey(_2854,_2855,_2856); }void mosek::fusion::p_Set::indexToKey(std::shared_ptr< monty::ndarray< int,1 > > _2854,long long _2855,std::shared_ptr< monty::ndarray< int,1 > > _2856){
  _checked_ptr_1<int> _ptr__2854(_2854 ? _2854->raw() : nullptr, _2854 ? _2854->size(0) : 0);
  _checked_ptr_1<int> _ptr__2856(_2856 ? _2856->raw() : nullptr, _2856 ? _2856->size(0) : 0);
  int _2857 = (int)((_2854)->size(0));
  if ((_2857 == (int)1))
  {
    {
      _ptr__2856[(int)0] = (int)_2855;
    }
  }
  else
  {
    {
      long long _2858 = _2855;
      int _10081 = (int)1;
      int _10082 = _2857;
      for (int _2859 = _10081; _2859 < _10082; ++_2859)
      {
        {
          _ptr__2856[(_2857 - _2859)] = (int)(_2858 % _ptr__2854[(_2857 - _2859)]);
          _2858 /= _ptr__2854[(_2857 - _2859)];
        }
      }
      _ptr__2856[(int)0] = (int)_2858;
    }
  }
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::Set::strides  ( std::shared_ptr< monty::ndarray< int,1 > > _2860) { return mosek::fusion::p_Set::strides(_2860); }std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_Set::strides(std::shared_ptr< monty::ndarray< int,1 > > _2860){
  _checked_ptr_1<int> _ptr__2860(_2860 ? _2860->raw() : nullptr, _2860 ? _2860->size(0) : 0);
  int _2861 = (int)((_2860)->size(0));
  std::shared_ptr< monty::ndarray< long long,1 > > _2862 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2861)));
  _checked_ptr_1<long long> _ptr__2862(_2862 ? _2862->raw() : nullptr,_2862 ? _2862->size(0) : 0);
  _ptr__2862[(_2861 - (int)1)] = (int)1;
  int _10083 = (int)1;
  int _10084 = _2861;
  for (int _2863 = _10083; _2863 < _10084; ++_2863)
  {
    {
      _ptr__2862[((_2861 - _2863) - (int)1)] = safe_mul( _ptr__2862[(_2861 - _2863)],_ptr__2860[(_2861 - _2863)] );
    }
  }
  return _2862;
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::make  ( std::shared_ptr< monty::ndarray< int,1 > > _2864,    std::shared_ptr< monty::ndarray< int,1 > > _2865) { return mosek::fusion::p_Set::make(_2864,_2865); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::make(std::shared_ptr< monty::ndarray< int,1 > > _2864,std::shared_ptr< monty::ndarray< int,1 > > _2865){
  _checked_ptr_1<int> _ptr__2864(_2864 ? _2864->raw() : nullptr, _2864 ? _2864->size(0) : 0);
  _checked_ptr_1<int> _ptr__2865(_2865 ? _2865->raw() : nullptr, _2865 ? _2865->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _2866 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( (int)((_2864)->size(0)),(int)((_2865)->size(0)) ))));
  _checked_ptr_1<int> _ptr__2866(_2866 ? _2866->raw() : nullptr,_2866 ? _2866->size(0) : 0);
  int _10085 = (int)0;
  int _10086 = (int)((_2864)->size(0));
  for (int _2867 = _10085; _2867 < _10086; ++_2867)
  {
    {
      _ptr__2866[_2867] = _ptr__2864[_2867];
    }
  }
  int _10087 = (int)0;
  int _10088 = (int)((_2865)->size(0));
  for (int _2868 = _10087; _2868 < _10088; ++_2868)
  {
    {
      _ptr__2866[safe_add( (int)((_2864)->size(0)),_2868 )] = _ptr__2865[_2868];
    }
  }
  return _2866;
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::make  ( std::shared_ptr< monty::ndarray< int,1 > > _2869) { return mosek::fusion::p_Set::make(_2869); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::make(std::shared_ptr< monty::ndarray< int,1 > > _2869){
  _checked_ptr_1<int> _ptr__2869(_2869 ? _2869->raw() : nullptr, _2869 ? _2869->size(0) : 0);
  std::vector<int> _10089;
  for (int _2870 = (int)0, _10090 = (int)((_2869)->size(0)); _2870 < _10090 ; ++_2870)
  {
    _10089.push_back(_ptr__2869[_2870]);
  }
  auto _10091 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10089.size()),_10089.begin(),_10089.end()));
  return _10091;
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::make  ( int _2871,    int _2872,    int _2873) { return mosek::fusion::p_Set::make(_2871,_2872,_2873); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::make(int _2871,int _2872,int _2873){
  return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2871),(int)(_2872),(int)(_2873)});
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::make  ( int _2874,    int _2875) { return mosek::fusion::p_Set::make(_2874,_2875); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::make(int _2874,int _2875){
  return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2874),(int)(_2875)});
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::make  ( int _2876) { return mosek::fusion::p_Set::make(_2876); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::make(int _2876){
  return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2876)});
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::scalar  ( ) { return mosek::fusion::p_Set::scalar(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::scalar(){
  return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::make  ( std::shared_ptr< monty::ndarray< std::string,1 > > _2877) { return mosek::fusion::p_Set::make(_2877); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::make(std::shared_ptr< monty::ndarray< std::string,1 > > _2877){
  return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2877)->size(0)))});
}
void mosek::fusion::p_Set::destroy(){}void mosek::fusion::Set::destroy() { mosek::fusion::p_Set::_get_impl(this)->destroy(); }mosek::fusion::ConeDomain::ConeDomain(mosek::fusion::p_ConeDomain *_impl) : _impl(_impl) { /*std::cout << "ConeDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::ConeDomain::~ConeDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_ConeDomain::p_ConeDomain  (::mosek::fusion::ConeDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::ConeDomain::t mosek::fusion::p_ConeDomain::_new_ConeDomain  (mosek::fusion::QConeKey _2878,    double _2879,    std::shared_ptr< monty::ndarray< int,1 > > _2880){ return new mosek::fusion::ConeDomain(_2878,_2879,_2880); }mosek::fusion::ConeDomain::ConeDomain  (mosek::fusion::QConeKey _2878,    double _2879,    std::shared_ptr< monty::ndarray< int,1 > > _2880) :    ConeDomain(new mosek::fusion::p_ConeDomain(this)){ mosek::fusion::p_ConeDomain::_get_impl(this)->_initialize(_2878,_2879,_2880); }void mosek::fusion::p_ConeDomain::_initialize  (mosek::fusion::QConeKey _2878,    double _2879,    std::shared_ptr< monty::ndarray< int,1 > > _2880){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2880(_2880 ? _2880->raw() : nullptr, _2880 ? _2880->size(0) : 0);
    std::shared_ptr< monty::ndarray< int,1 > > _10092;
    bool _10093 = (NULL != _2880.get());
    if (_10093)
    {
      _10092 = ::mosek::fusion::p_Set::make(_2880);
    }
    else
    {
      _10092 = nullptr;
    }
    shape = _10092;
    mosek::fusion::p_ConeDomain::_get_impl(::mosek::fusion::ConeDomain::t(_pubthis))->alpha = _2879;
    key = _2878;
    axisidx = (int)0;
    axisset = false;
    int_flag = false;
    mosek::fusion::p_ConeDomain::_get_impl(::mosek::fusion::ConeDomain::t(_pubthis))->alpha = _2879;
  }
}mosek::fusion::ConeDomain::t mosek::fusion::p_ConeDomain::_new_ConeDomain  (mosek::fusion::QConeKey _2881,    std::shared_ptr< monty::ndarray< int,1 > > _2882){ return new mosek::fusion::ConeDomain(_2881,_2882); }mosek::fusion::ConeDomain::ConeDomain  (mosek::fusion::QConeKey _2881,    std::shared_ptr< monty::ndarray< int,1 > > _2882) :    ConeDomain(new mosek::fusion::p_ConeDomain(this)){ mosek::fusion::p_ConeDomain::_get_impl(this)->_initialize(_2881,_2882); }void mosek::fusion::p_ConeDomain::_initialize  (mosek::fusion::QConeKey _2881,    std::shared_ptr< monty::ndarray< int,1 > > _2882){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2882(_2882 ? _2882->raw() : nullptr, _2882 ? _2882->size(0) : 0);
    mosek::fusion::p_ConeDomain::_initialize(_2881,1.0,_2882);
  }
}bool mosek::fusion::p_ConeDomain::match_shape(std::shared_ptr< monty::ndarray< int,1 > > _2883){
  _checked_ptr_1<int> _ptr__2883(_2883 ? _2883->raw() : nullptr, _2883 ? _2883->size(0) : 0);
  return ((NULL == shape.get()) || ::mosek::fusion::p_Set::match(_2883,shape));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain :: __mosek_2fusion_2ConeDomain__integral() { return mosek::fusion::p_ConeDomain::_get_impl(this)->__mosek_2fusion_2ConeDomain__integral(); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain::integral() { return __mosek_2fusion_2ConeDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_ConeDomain::__mosek_2fusion_2ConeDomain__integral(){
  int_flag = true;
  return ::mosek::fusion::ConeDomain::t(_pubthis);
}
bool mosek::fusion::ConeDomain :: axisIsSet() { return mosek::fusion::p_ConeDomain::_get_impl(this)->axisIsSet(); }bool mosek::fusion::p_ConeDomain::axisIsSet(){
  return axisset;
}
int mosek::fusion::ConeDomain :: getAxis() { return mosek::fusion::p_ConeDomain::_get_impl(this)->getAxis(); }int mosek::fusion::p_ConeDomain::getAxis(){
  return axisidx;
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain :: __mosek_2fusion_2ConeDomain__axis(int _2884) { return mosek::fusion::p_ConeDomain::_get_impl(this)->__mosek_2fusion_2ConeDomain__axis(_2884); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain::axis(int _2884) { return __mosek_2fusion_2ConeDomain__axis(_2884); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_ConeDomain::__mosek_2fusion_2ConeDomain__axis(int _2884){
  axisidx = _2884;
  axisset = true;
  return ::mosek::fusion::ConeDomain::t(_pubthis);
}
void mosek::fusion::p_ConeDomain::destroy(){shape.reset();}void mosek::fusion::ConeDomain::destroy() { mosek::fusion::p_ConeDomain::_get_impl(this)->destroy(); }mosek::fusion::LinPSDDomain::LinPSDDomain(mosek::fusion::p_LinPSDDomain *_impl) : _impl(_impl) { /*std::cout << "LinPSDDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::LinPSDDomain::~LinPSDDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_LinPSDDomain::p_LinPSDDomain  (::mosek::fusion::LinPSDDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::LinPSDDomain::t mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain  (std::shared_ptr< monty::ndarray< int,1 > > _2885,    int _2886){ return new mosek::fusion::LinPSDDomain(_2885,_2886); }mosek::fusion::LinPSDDomain::LinPSDDomain  (std::shared_ptr< monty::ndarray< int,1 > > _2885,    int _2886) :    LinPSDDomain(new mosek::fusion::p_LinPSDDomain(this)){ mosek::fusion::p_LinPSDDomain::_get_impl(this)->_initialize(_2885,_2886); }void mosek::fusion::p_LinPSDDomain::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _2885,    int _2886){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2885(_2885 ? _2885->raw() : nullptr, _2885 ? _2885->size(0) : 0);
    mosek::fusion::p_LinPSDDomain::_get_impl(::mosek::fusion::LinPSDDomain::t(_pubthis))->conedim = _2886;
    shape = ::mosek::fusion::Utils::Tools::arraycopy(_2885);
  }
}mosek::fusion::LinPSDDomain::t mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain  (std::shared_ptr< monty::ndarray< int,1 > > _2887){ return new mosek::fusion::LinPSDDomain(_2887); }mosek::fusion::LinPSDDomain::LinPSDDomain  (std::shared_ptr< monty::ndarray< int,1 > > _2887) :    LinPSDDomain(new mosek::fusion::p_LinPSDDomain(this)){ mosek::fusion::p_LinPSDDomain::_get_impl(this)->_initialize(_2887); }void mosek::fusion::p_LinPSDDomain::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _2887){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2887(_2887 ? _2887->raw() : nullptr, _2887 ? _2887->size(0) : 0);
    shape = ::mosek::fusion::Utils::Tools::arraycopy(_2887);
    conedim = ((int)((shape)->size(0)) - (int)1);
  }
}mosek::fusion::LinPSDDomain::t mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain  (){ return new mosek::fusion::LinPSDDomain(); }mosek::fusion::LinPSDDomain::LinPSDDomain  () :    LinPSDDomain(new mosek::fusion::p_LinPSDDomain(this)){ mosek::fusion::p_LinPSDDomain::_get_impl(this)->_initialize(); }void mosek::fusion::p_LinPSDDomain::_initialize  (){monty::rc_reserve __reserve_this(_pubthis);   {
    conedim = (int)0;
    shape = nullptr;
  }
}void mosek::fusion::p_LinPSDDomain::destroy(){shape.reset();}void mosek::fusion::LinPSDDomain::destroy() { mosek::fusion::p_LinPSDDomain::_get_impl(this)->destroy(); }mosek::fusion::PSDDomain::PSDDomain(mosek::fusion::p_PSDDomain *_impl) : _impl(_impl) { /*std::cout << "PSDDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::PSDDomain::~PSDDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_PSDDomain::p_PSDDomain  (::mosek::fusion::PSDDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::PSDDomain::t mosek::fusion::p_PSDDomain::_new_PSDDomain  (mosek::fusion::PSDKey _2888,    std::shared_ptr< monty::ndarray< int,1 > > _2889,    int _2890,    int _2891){ return new mosek::fusion::PSDDomain(_2888,_2889,_2890,_2891); }mosek::fusion::PSDDomain::PSDDomain  (mosek::fusion::PSDKey _2888,    std::shared_ptr< monty::ndarray< int,1 > > _2889,    int _2890,    int _2891) :    PSDDomain(new mosek::fusion::p_PSDDomain(this)){ mosek::fusion::p_PSDDomain::_get_impl(this)->_initialize(_2888,_2889,_2890,_2891); }void mosek::fusion::p_PSDDomain::_initialize  (mosek::fusion::PSDKey _2888,    std::shared_ptr< monty::ndarray< int,1 > > _2889,    int _2890,    int _2891){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2889(_2889 ? _2889->raw() : nullptr, _2889 ? _2889->size(0) : 0);
    axisIsSet = true;
    shape = _2889;
    key = _2888;
    mosek::fusion::p_PSDDomain::_get_impl(::mosek::fusion::PSDDomain::t(_pubthis))->conedim1 = _2890;
    mosek::fusion::p_PSDDomain::_get_impl(::mosek::fusion::PSDDomain::t(_pubthis))->conedim2 = _2891;
    int _2892 = (int)((shape)->size(0));
    if (((!(((int)((shape)->size(0)) > _2890) && (((int)((shape)->size(0)) > _2891) && ((_2890 >= (int)0) && ((_2891 >= (int)0) && (_2890 != _2891)))))) && (((*shape)(_2890)) == ((*shape)(_2891)))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape or cone dimensions"));
      }
    }
    {}
  }
}mosek::fusion::PSDDomain::t mosek::fusion::p_PSDDomain::_new_PSDDomain  (mosek::fusion::PSDKey _2893,    std::shared_ptr< monty::ndarray< int,1 > > _2894){ return new mosek::fusion::PSDDomain(_2893,_2894); }mosek::fusion::PSDDomain::PSDDomain  (mosek::fusion::PSDKey _2893,    std::shared_ptr< monty::ndarray< int,1 > > _2894) :    PSDDomain(new mosek::fusion::p_PSDDomain(this)){ mosek::fusion::p_PSDDomain::_get_impl(this)->_initialize(_2893,_2894); }void mosek::fusion::p_PSDDomain::_initialize  (mosek::fusion::PSDKey _2893,    std::shared_ptr< monty::ndarray< int,1 > > _2894){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2894(_2894 ? _2894->raw() : nullptr, _2894 ? _2894->size(0) : 0);
    mosek::fusion::p_PSDDomain::_initialize(_2893,_2894,((int)((_2894)->size(0)) - (int)2),((int)((_2894)->size(0)) - (int)1));
  }
}mosek::fusion::PSDDomain::t mosek::fusion::p_PSDDomain::_new_PSDDomain  (mosek::fusion::PSDKey _2895){ return new mosek::fusion::PSDDomain(_2895); }mosek::fusion::PSDDomain::PSDDomain  (mosek::fusion::PSDKey _2895) :    PSDDomain(new mosek::fusion::p_PSDDomain(this)){ mosek::fusion::p_PSDDomain::_get_impl(this)->_initialize(_2895); }void mosek::fusion::p_PSDDomain::_initialize  (mosek::fusion::PSDKey _2895){monty::rc_reserve __reserve_this(_pubthis);   {
    shape = nullptr;
    key = _2895;
    conedim1 = (int)0;
    conedim2 = (int)0;
    axisIsSet = false;
  }
}monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::PSDDomain :: __mosek_2fusion_2PSDDomain__axis(int _2896,int _2897) { return mosek::fusion::p_PSDDomain::_get_impl(this)->__mosek_2fusion_2PSDDomain__axis(_2896,_2897); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::PSDDomain::axis(int _2896,int _2897) { return __mosek_2fusion_2PSDDomain__axis(_2896,_2897); }
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_PSDDomain::__mosek_2fusion_2PSDDomain__axis(int _2896,int _2897){
  mosek::fusion::p_PSDDomain::_get_impl(::mosek::fusion::PSDDomain::t(_pubthis))->conedim1 = _2896;
  mosek::fusion::p_PSDDomain::_get_impl(::mosek::fusion::PSDDomain::t(_pubthis))->conedim2 = _2897;
  axisIsSet = true;
  if (((NULL == shape.get()) && (!((_2896 >= (int)0) && ((_2897 >= (int)0) && (_2896 != _2897))))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape or cone dimensions"));
    }
  }
  else if(((NULL != shape.get()) && ((!(((int)((shape)->size(0)) > _2896) && (((int)((shape)->size(0)) > _2897) && ((_2896 >= (int)0) && ((_2897 >= (int)0) && (_2896 != _2897)))))) && (((*shape)(_2896)) == ((*shape)(_2897))))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape or cone dimensions"));
    }
  }
  {}
  return ::mosek::fusion::PSDDomain::t(_pubthis);
}
void mosek::fusion::p_PSDDomain::destroy(){shape.reset();}void mosek::fusion::PSDDomain::destroy() { mosek::fusion::p_PSDDomain::_get_impl(this)->destroy(); }mosek::fusion::SymmetricRangeDomain::SymmetricRangeDomain(mosek::fusion::p_SymmetricRangeDomain *_impl) : mosek::fusion::RangeDomain(_impl) { /*std::cout << "SymmetricRangeDomain()" << this << std::endl; */ }mosek::fusion::SymmetricRangeDomain::~SymmetricRangeDomain() {  /* std::cout << "~SymmetricRangeDomain()" << this << std::endl << std::flush; */ }mosek::fusion::p_SymmetricRangeDomain::p_SymmetricRangeDomain  (::mosek::fusion::SymmetricRangeDomain * _pubthis) :     mosek::fusion::p_RangeDomain(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SymmetricRangeDomain::t mosek::fusion::p_SymmetricRangeDomain::_new_SymmetricRangeDomain  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _2898){ return new mosek::fusion::SymmetricRangeDomain(_2898); }mosek::fusion::SymmetricRangeDomain::SymmetricRangeDomain  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _2898) :    SymmetricRangeDomain(new mosek::fusion::p_SymmetricRangeDomain(this)){ mosek::fusion::p_SymmetricRangeDomain::_get_impl(this)->_initialize(_2898); }void mosek::fusion::p_SymmetricRangeDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _2898){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_RangeDomain::_initialize(_2898);
    if (((NULL != shape.get()) && (((int)((shape)->size(0)) != (int)2) || (((*shape)((int)0)) != ((*shape)((int)1))))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Only square domains can be symmetric"));
      }
    }
    {}
    int _10094;
    bool _10095 = (NULL == shape.get());
    if (_10095)
    {
      _10094 = (int)0;
    }
    else
    {
      _10094 = ((*shape)((int)0));
    }
    dim = _10094;
  }
}void mosek::fusion::p_SymmetricRangeDomain::destroy(){}void mosek::fusion::SymmetricRangeDomain::destroy() { mosek::fusion::p_SymmetricRangeDomain::_get_impl(this)->destroy(); }mosek::fusion::RangeDomain::RangeDomain(mosek::fusion::p_RangeDomain *_impl) : _impl(_impl) { /*std::cout << "RangeDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::RangeDomain::~RangeDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_RangeDomain::p_RangeDomain  (::mosek::fusion::RangeDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain  (bool _2899,    std::shared_ptr< monty::ndarray< double,1 > > _2900,    std::shared_ptr< monty::ndarray< double,1 > > _2901,    std::shared_ptr< monty::ndarray< int,1 > > _2902){ return new mosek::fusion::RangeDomain(_2899,_2900,_2901,_2902); }mosek::fusion::RangeDomain::RangeDomain  (bool _2899,    std::shared_ptr< monty::ndarray< double,1 > > _2900,    std::shared_ptr< monty::ndarray< double,1 > > _2901,    std::shared_ptr< monty::ndarray< int,1 > > _2902) :    RangeDomain(new mosek::fusion::p_RangeDomain(this)){ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_2899,_2900,_2901,_2902); }void mosek::fusion::p_RangeDomain::_initialize  (bool _2899,    std::shared_ptr< monty::ndarray< double,1 > > _2900,    std::shared_ptr< monty::ndarray< double,1 > > _2901,    std::shared_ptr< monty::ndarray< int,1 > > _2902){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__2900(_2900 ? _2900->raw() : nullptr, _2900 ? _2900->size(0) : 0);
    _checked_ptr_1<double> _ptr__2901(_2901 ? _2901->raw() : nullptr, _2901 ? _2901->size(0) : 0);
    _checked_ptr_1<int> _ptr__2902(_2902 ? _2902->raw() : nullptr, _2902 ? _2902->size(0) : 0);
    mosek::fusion::p_RangeDomain::_initialize(_2899,_2900,_2901,_2902,nullptr,(int)1);
  }
}mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain  (bool _2903,    std::shared_ptr< monty::ndarray< double,1 > > _2904,    std::shared_ptr< monty::ndarray< double,1 > > _2905,    std::shared_ptr< monty::ndarray< int,1 > > _2906,    std::shared_ptr< monty::ndarray< int,2 > > _2907){ return new mosek::fusion::RangeDomain(_2903,_2904,_2905,_2906,_2907); }mosek::fusion::RangeDomain::RangeDomain  (bool _2903,    std::shared_ptr< monty::ndarray< double,1 > > _2904,    std::shared_ptr< monty::ndarray< double,1 > > _2905,    std::shared_ptr< monty::ndarray< int,1 > > _2906,    std::shared_ptr< monty::ndarray< int,2 > > _2907) :    RangeDomain(new mosek::fusion::p_RangeDomain(this)){ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_2903,_2904,_2905,_2906,_2907); }void mosek::fusion::p_RangeDomain::_initialize  (bool _2903,    std::shared_ptr< monty::ndarray< double,1 > > _2904,    std::shared_ptr< monty::ndarray< double,1 > > _2905,    std::shared_ptr< monty::ndarray< int,1 > > _2906,    std::shared_ptr< monty::ndarray< int,2 > > _2907){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__2904(_2904 ? _2904->raw() : nullptr, _2904 ? _2904->size(0) : 0);
    _checked_ptr_1<double> _ptr__2905(_2905 ? _2905->raw() : nullptr, _2905 ? _2905->size(0) : 0);
    _checked_ptr_1<int> _ptr__2906(_2906 ? _2906->raw() : nullptr, _2906 ? _2906->size(0) : 0);
    mosek::fusion::p_RangeDomain::_initialize(_2903,_2904,_2905,_2906,_2907,(int)1);
  }
}mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain  (bool _2908,    std::shared_ptr< monty::ndarray< double,1 > > _2909,    std::shared_ptr< monty::ndarray< double,1 > > _2910,    std::shared_ptr< monty::ndarray< int,1 > > _2911,    std::shared_ptr< monty::ndarray< int,2 > > _2912,    int _2913){ return new mosek::fusion::RangeDomain(_2908,_2909,_2910,_2911,_2912,_2913); }mosek::fusion::RangeDomain::RangeDomain  (bool _2908,    std::shared_ptr< monty::ndarray< double,1 > > _2909,    std::shared_ptr< monty::ndarray< double,1 > > _2910,    std::shared_ptr< monty::ndarray< int,1 > > _2911,    std::shared_ptr< monty::ndarray< int,2 > > _2912,    int _2913) :    RangeDomain(new mosek::fusion::p_RangeDomain(this)){ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_2908,_2909,_2910,_2911,_2912,_2913); }void mosek::fusion::p_RangeDomain::_initialize  (bool _2908,    std::shared_ptr< monty::ndarray< double,1 > > _2909,    std::shared_ptr< monty::ndarray< double,1 > > _2910,    std::shared_ptr< monty::ndarray< int,1 > > _2911,    std::shared_ptr< monty::ndarray< int,2 > > _2912,    int _2913){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__2909(_2909 ? _2909->raw() : nullptr, _2909 ? _2909->size(0) : 0);
    _checked_ptr_1<double> _ptr__2910(_2910 ? _2910->raw() : nullptr, _2910 ? _2910->size(0) : 0);
    _checked_ptr_1<int> _ptr__2911(_2911 ? _2911->raw() : nullptr, _2911 ? _2911->size(0) : 0);
    cardinal_flag = false;
    shape = _2911;
    sparsity = nullptr;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->scalable = _2908;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->ub = _2910;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->lb = _2909;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity = _2912;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->empty = false;
  }
}mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _2914){ return new mosek::fusion::RangeDomain(_2914); }mosek::fusion::RangeDomain::RangeDomain  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _2914) :    RangeDomain(new mosek::fusion::p_RangeDomain(this)){ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_2914); }void mosek::fusion::p_RangeDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _2914){monty::rc_reserve __reserve_this(_pubthis);   {
    cardinal_flag = mosek::fusion::p_RangeDomain::_get_impl(_2914)->cardinal_flag;
    sparsity = mosek::fusion::p_RangeDomain::_get_impl(_2914)->sparsity;
    scalable = mosek::fusion::p_RangeDomain::_get_impl(_2914)->scalable;
    shape = mosek::fusion::p_RangeDomain::_get_impl(_2914)->shape;
    ub = mosek::fusion::p_RangeDomain::_get_impl(_2914)->ub;
    lb = mosek::fusion::p_RangeDomain::_get_impl(_2914)->lb;
    empty = mosek::fusion::p_RangeDomain::_get_impl(_2914)->empty;
  }
}monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__symmetric() { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__symmetric(); }monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::RangeDomain::symmetric() { return __mosek_2fusion_2RangeDomain__symmetric(); }
monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__symmetric(){
  return ::mosek::fusion::p_SymmetricRangeDomain::_new_SymmetricRangeDomain(::mosek::fusion::RangeDomain::t(_pubthis));
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__sparse(std::shared_ptr< monty::ndarray< int,2 > > _2915) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__sparse(_2915); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::sparse(std::shared_ptr< monty::ndarray< int,2 > > _2915) { return __mosek_2fusion_2RangeDomain__sparse(_2915); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__sparse(std::shared_ptr< monty::ndarray< int,2 > > _2915){
  mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2915)->size(0)),(int)((_2915)->size(1)))));
  {
    int _2916 = (int)0;
    for(;(_2916 < (int)((_2915)->size(0)));++ _2916)
    {
      {
        {
          int _2917 = (int)0;
          for(;(_2917 < (int)((_2915)->size(1)));++ _2917)
          {
            {
              ((*mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity)(_2916,_2917)) = ((*_2915)(_2916,_2917));
            }
          }
        }
      }
    }
  }
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__sparse(std::shared_ptr< monty::ndarray< int,1 > > _2918) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__sparse(_2918); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::sparse(std::shared_ptr< monty::ndarray< int,1 > > _2918) { return __mosek_2fusion_2RangeDomain__sparse(_2918); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__sparse(std::shared_ptr< monty::ndarray< int,1 > > _2918){
  _checked_ptr_1<int> _ptr__2918(_2918 ? _2918->raw() : nullptr, _2918 ? _2918->size(0) : 0);
  mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2918)->size(0)),(int)1)));
  int _10096 = (int)0;
  int _10097 = (int)((_2918)->size(0));
  for (int _2919 = _10096; _2919 < _10097; ++_2919)
  {
    {
      ((*mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity)(_2919,(int)0)) = _ptr__2918[_2919];
    }
  }
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__sparse() { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__sparse(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::sparse() { return __mosek_2fusion_2RangeDomain__sparse(); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__sparse(){
  mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->empty = true;
  mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity = nullptr;
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__integral() { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__integral(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::integral() { return __mosek_2fusion_2RangeDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__integral(){
  cardinal_flag = true;
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__withShape(int _2920,int _2921,int _2922) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__withShape(_2920,_2921,_2922); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::withShape(int _2920,int _2921,int _2922) { return __mosek_2fusion_2RangeDomain__withShape(_2920,_2921,_2922); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__withShape(int _2920,int _2921,int _2922){
  shape = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2920),(int)(_2921),(int)(_2922)});
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__withShape(int _2923,int _2924) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__withShape(_2923,_2924); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::withShape(int _2923,int _2924) { return __mosek_2fusion_2RangeDomain__withShape(_2923,_2924); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__withShape(int _2923,int _2924){
  shape = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2923),(int)(_2924)});
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__withShape(int _2925) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__withShape(_2925); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::withShape(int _2925) { return __mosek_2fusion_2RangeDomain__withShape(_2925); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__withShape(int _2925){
  shape = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2925)});
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__withShape(std::shared_ptr< monty::ndarray< int,1 > > _2926) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__withShape(_2926); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::withShape(std::shared_ptr< monty::ndarray< int,1 > > _2926) { return __mosek_2fusion_2RangeDomain__withShape(_2926); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__withShape(std::shared_ptr< monty::ndarray< int,1 > > _2926){
  _checked_ptr_1<int> _ptr__2926(_2926 ? _2926->raw() : nullptr, _2926 ? _2926->size(0) : 0);
  shape = _2926;
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
bool mosek::fusion::p_RangeDomain::match_shape(std::shared_ptr< monty::ndarray< int,1 > > _2927){
  _checked_ptr_1<int> _ptr__2927(_2927 ? _2927->raw() : nullptr, _2927 ? _2927->size(0) : 0);
  if (scalable)
  {
    {
      return true;
    }
  }
  else if(((int)((shape)->size(0)) != (int)((_2927)->size(0))))
  {
    {
      return false;
    }
  }
  else
  {
    {
      int _10098 = (int)0;
      int _10099 = (int)((shape)->size(0));
      for (int _2928 = _10098; _2928 < _10099; ++_2928)
      {
        {
          if ((((*shape)(_2928)) != _ptr__2927[_2928]))
          {
            {
              return false;
            }
          }
          {}
        }
      }
    }
  }
  return true;
}
void mosek::fusion::p_RangeDomain::destroy(){ub.reset();lb.reset();sparsity.reset();shape.reset();}void mosek::fusion::RangeDomain::destroy() { mosek::fusion::p_RangeDomain::_get_impl(this)->destroy(); }mosek::fusion::SymmetricLinearDomain::SymmetricLinearDomain(mosek::fusion::p_SymmetricLinearDomain *_impl) : _impl(_impl) { /*std::cout << "SymmetricLinearDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::SymmetricLinearDomain::~SymmetricLinearDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_SymmetricLinearDomain::p_SymmetricLinearDomain  (::mosek::fusion::SymmetricLinearDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::SymmetricLinearDomain::t mosek::fusion::p_SymmetricLinearDomain::_new_SymmetricLinearDomain  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _2929){ return new mosek::fusion::SymmetricLinearDomain(_2929); }mosek::fusion::SymmetricLinearDomain::SymmetricLinearDomain  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _2929) :    SymmetricLinearDomain(new mosek::fusion::p_SymmetricLinearDomain(this)){ mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->_initialize(_2929); }void mosek::fusion::p_SymmetricLinearDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _2929){monty::rc_reserve __reserve_this(_pubthis);   {
    dom = _2929;
    shape = mosek::fusion::p_LinearDomain::_get_impl(_2929)->shape;
    key = mosek::fusion::p_LinearDomain::_get_impl(_2929)->key;
    cardinal_flag = mosek::fusion::p_LinearDomain::_get_impl(_2929)->cardinal_flag;
    sparsity = mosek::fusion::p_LinearDomain::_get_impl(_2929)->sparsity;
    if (((NULL != shape.get()) && (((int)((shape)->size(0)) != (int)2) || (((*shape)((int)0)) != ((*shape)((int)1))))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Only square domains can be symmetric"));
      }
    }
    {}
    int _10100;
    bool _10101 = (NULL == shape.get());
    if (_10101)
    {
      _10100 = (int)0;
    }
    else
    {
      _10100 = ((*shape)((int)0));
    }
    dim = _10100;
  }
}monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain :: __mosek_2fusion_2SymmetricLinearDomain__sparse(std::shared_ptr< monty::ndarray< int,2 > > _2930) { return mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->__mosek_2fusion_2SymmetricLinearDomain__sparse(_2930); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain::sparse(std::shared_ptr< monty::ndarray< int,2 > > _2930) { return __mosek_2fusion_2SymmetricLinearDomain__sparse(_2930); }
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_SymmetricLinearDomain::__mosek_2fusion_2SymmetricLinearDomain__sparse(std::shared_ptr< monty::ndarray< int,2 > > _2930){
  mosek::fusion::p_SymmetricLinearDomain::_get_impl(::mosek::fusion::SymmetricLinearDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2930)->size(0)),(int)((_2930)->size(1)))));
  {
    int _2931 = (int)0;
    for(;(_2931 < (int)((_2930)->size(0)));++ _2931)
    {
      {
        {
          int _2932 = (int)0;
          for(;(_2932 < (int)((_2930)->size(1)));++ _2932)
          {
            {
              ((*mosek::fusion::p_SymmetricLinearDomain::_get_impl(::mosek::fusion::SymmetricLinearDomain::t(_pubthis))->sparsity)(_2931,_2932)) = ((*_2930)(_2931,_2932));
            }
          }
        }
      }
    }
  }
  return ::mosek::fusion::SymmetricLinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain :: __mosek_2fusion_2SymmetricLinearDomain__sparse(std::shared_ptr< monty::ndarray< int,1 > > _2933) { return mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->__mosek_2fusion_2SymmetricLinearDomain__sparse(_2933); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain::sparse(std::shared_ptr< monty::ndarray< int,1 > > _2933) { return __mosek_2fusion_2SymmetricLinearDomain__sparse(_2933); }
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_SymmetricLinearDomain::__mosek_2fusion_2SymmetricLinearDomain__sparse(std::shared_ptr< monty::ndarray< int,1 > > _2933){
  _checked_ptr_1<int> _ptr__2933(_2933 ? _2933->raw() : nullptr, _2933 ? _2933->size(0) : 0);
  mosek::fusion::p_SymmetricLinearDomain::_get_impl(::mosek::fusion::SymmetricLinearDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2933)->size(0)),(int)1)));
  int _10102 = (int)0;
  int _10103 = (int)((_2933)->size(0));
  for (int _2934 = _10102; _2934 < _10103; ++_2934)
  {
    {
      ((*mosek::fusion::p_SymmetricLinearDomain::_get_impl(::mosek::fusion::SymmetricLinearDomain::t(_pubthis))->sparsity)(_2934,(int)0)) = _ptr__2933[_2934];
    }
  }
  return ::mosek::fusion::SymmetricLinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain :: __mosek_2fusion_2SymmetricLinearDomain__integral() { return mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->__mosek_2fusion_2SymmetricLinearDomain__integral(); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain::integral() { return __mosek_2fusion_2SymmetricLinearDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_SymmetricLinearDomain::__mosek_2fusion_2SymmetricLinearDomain__integral(){
  cardinal_flag = true;
  return ::mosek::fusion::SymmetricLinearDomain::t(_pubthis);
}
bool mosek::fusion::p_SymmetricLinearDomain::match_shape(std::shared_ptr< monty::ndarray< int,1 > > _2935){
  _checked_ptr_1<int> _ptr__2935(_2935 ? _2935->raw() : nullptr, _2935 ? _2935->size(0) : 0);
  int _10104 = (int)0;
  int _10105 = (int)((_2935)->size(0));
  for (int _2936 = _10104; _2936 < _10105; ++_2936)
  {
    {
      if ((_ptr__2935[_2936] == ((*shape)(_2936))))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
void mosek::fusion::p_SymmetricLinearDomain::destroy(){sparsity.reset();shape.reset();dom.reset();}void mosek::fusion::SymmetricLinearDomain::destroy() { mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->destroy(); }mosek::fusion::LinearDomain::LinearDomain(mosek::fusion::p_LinearDomain *_impl) : _impl(_impl) { /*std::cout << "LinearDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::LinearDomain::~LinearDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_LinearDomain::p_LinearDomain  (::mosek::fusion::LinearDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::LinearDomain::t mosek::fusion::p_LinearDomain::_new_LinearDomain  (mosek::fusion::RelationKey _2937,    bool _2938,    std::shared_ptr< monty::ndarray< double,1 > > _2939,    std::shared_ptr< monty::ndarray< int,1 > > _2940){ return new mosek::fusion::LinearDomain(_2937,_2938,_2939,_2940); }mosek::fusion::LinearDomain::LinearDomain  (mosek::fusion::RelationKey _2937,    bool _2938,    std::shared_ptr< monty::ndarray< double,1 > > _2939,    std::shared_ptr< monty::ndarray< int,1 > > _2940) :    LinearDomain(new mosek::fusion::p_LinearDomain(this)){ mosek::fusion::p_LinearDomain::_get_impl(this)->_initialize(_2937,_2938,_2939,_2940); }void mosek::fusion::p_LinearDomain::_initialize  (mosek::fusion::RelationKey _2937,    bool _2938,    std::shared_ptr< monty::ndarray< double,1 > > _2939,    std::shared_ptr< monty::ndarray< int,1 > > _2940){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__2939(_2939 ? _2939->raw() : nullptr, _2939 ? _2939->size(0) : 0);
    _checked_ptr_1<int> _ptr__2940(_2940 ? _2940->raw() : nullptr, _2940 ? _2940->size(0) : 0);
    mosek::fusion::p_LinearDomain::_initialize(_2937,_2938,_2939,_2940,nullptr,(int)1);
  }
}mosek::fusion::LinearDomain::t mosek::fusion::p_LinearDomain::_new_LinearDomain  (mosek::fusion::RelationKey _2941,    bool _2942,    std::shared_ptr< monty::ndarray< double,1 > > _2943,    std::shared_ptr< monty::ndarray< int,1 > > _2944,    std::shared_ptr< monty::ndarray< int,2 > > _2945,    int _2946){ return new mosek::fusion::LinearDomain(_2941,_2942,_2943,_2944,_2945,_2946); }mosek::fusion::LinearDomain::LinearDomain  (mosek::fusion::RelationKey _2941,    bool _2942,    std::shared_ptr< monty::ndarray< double,1 > > _2943,    std::shared_ptr< monty::ndarray< int,1 > > _2944,    std::shared_ptr< monty::ndarray< int,2 > > _2945,    int _2946) :    LinearDomain(new mosek::fusion::p_LinearDomain(this)){ mosek::fusion::p_LinearDomain::_get_impl(this)->_initialize(_2941,_2942,_2943,_2944,_2945,_2946); }void mosek::fusion::p_LinearDomain::_initialize  (mosek::fusion::RelationKey _2941,    bool _2942,    std::shared_ptr< monty::ndarray< double,1 > > _2943,    std::shared_ptr< monty::ndarray< int,1 > > _2944,    std::shared_ptr< monty::ndarray< int,2 > > _2945,    int _2946){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__2943(_2943 ? _2943->raw() : nullptr, _2943 ? _2943->size(0) : 0);
    _checked_ptr_1<int> _ptr__2944(_2944 ? _2944->raw() : nullptr, _2944 ? _2944->size(0) : 0);
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->scalable = _2942;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->shape = _2944;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->key = _2941;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->bnd = _2943;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity = _2945;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->cardinal_flag = false;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->empty = false;
  }
}mosek::fusion::LinearDomain::t mosek::fusion::p_LinearDomain::_new_LinearDomain  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _2947){ return new mosek::fusion::LinearDomain(_2947); }mosek::fusion::LinearDomain::LinearDomain  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _2947) :    LinearDomain(new mosek::fusion::p_LinearDomain(this)){ mosek::fusion::p_LinearDomain::_get_impl(this)->_initialize(_2947); }void mosek::fusion::p_LinearDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _2947){monty::rc_reserve __reserve_this(_pubthis);   {
    scalable = mosek::fusion::p_LinearDomain::_get_impl(_2947)->scalable;
    shape = mosek::fusion::p_LinearDomain::_get_impl(_2947)->shape;
    key = mosek::fusion::p_LinearDomain::_get_impl(_2947)->key;
    bnd = mosek::fusion::p_LinearDomain::_get_impl(_2947)->bnd;
    sparsity = mosek::fusion::p_LinearDomain::_get_impl(_2947)->sparsity;
    cardinal_flag = mosek::fusion::p_LinearDomain::_get_impl(_2947)->cardinal_flag;
    empty = mosek::fusion::p_LinearDomain::_get_impl(_2947)->empty;
  }
}monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__symmetric() { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__symmetric(); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::LinearDomain::symmetric() { return __mosek_2fusion_2LinearDomain__symmetric(); }
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__symmetric(){
  return ::mosek::fusion::p_SymmetricLinearDomain::_new_SymmetricLinearDomain(::mosek::fusion::LinearDomain::t(_pubthis));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__sparse(std::shared_ptr< monty::ndarray< int,2 > > _2948) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__sparse(_2948); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::sparse(std::shared_ptr< monty::ndarray< int,2 > > _2948) { return __mosek_2fusion_2LinearDomain__sparse(_2948); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__sparse(std::shared_ptr< monty::ndarray< int,2 > > _2948){
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2948)->size(0)),(int)((_2948)->size(1)))));
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->empty = false;
  {
    int _2949 = (int)0;
    for(;(_2949 < (int)((_2948)->size(0)));++ _2949)
    {
      {
        {
          int _2950 = (int)0;
          for(;(_2950 < (int)((_2948)->size(1)));++ _2950)
          {
            {
              ((*mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity)(_2949,_2950)) = ((*_2948)(_2949,_2950));
            }
          }
        }
      }
    }
  }
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__sparse(std::shared_ptr< monty::ndarray< int,1 > > _2951) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__sparse(_2951); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::sparse(std::shared_ptr< monty::ndarray< int,1 > > _2951) { return __mosek_2fusion_2LinearDomain__sparse(_2951); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__sparse(std::shared_ptr< monty::ndarray< int,1 > > _2951){
  _checked_ptr_1<int> _ptr__2951(_2951 ? _2951->raw() : nullptr, _2951 ? _2951->size(0) : 0);
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2951)->size(0)),(int)1)));
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->empty = false;
  int _10106 = (int)0;
  int _10107 = (int)((_2951)->size(0));
  for (int _2952 = _10106; _2952 < _10107; ++_2952)
  {
    {
      ((*mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity)(_2952,(int)0)) = _ptr__2951[_2952];
    }
  }
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__sparse() { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__sparse(); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::sparse() { return __mosek_2fusion_2LinearDomain__sparse(); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__sparse(){
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->empty = true;
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity = nullptr;
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__integral() { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__integral(); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::integral() { return __mosek_2fusion_2LinearDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__integral(){
  cardinal_flag = true;
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__withShape(int _2953,int _2954,int _2955) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__withShape(_2953,_2954,_2955); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::withShape(int _2953,int _2954,int _2955) { return __mosek_2fusion_2LinearDomain__withShape(_2953,_2954,_2955); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__withShape(int _2953,int _2954,int _2955){
  shape = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2953),(int)(_2954),(int)(_2955)});
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__withShape(int _2956,int _2957) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__withShape(_2956,_2957); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::withShape(int _2956,int _2957) { return __mosek_2fusion_2LinearDomain__withShape(_2956,_2957); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__withShape(int _2956,int _2957){
  shape = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2956),(int)(_2957)});
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__withShape(int _2958) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__withShape(_2958); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::withShape(int _2958) { return __mosek_2fusion_2LinearDomain__withShape(_2958); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__withShape(int _2958){
  shape = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2958)});
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__withShape(std::shared_ptr< monty::ndarray< int,1 > > _2959) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__withShape(_2959); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::withShape(std::shared_ptr< monty::ndarray< int,1 > > _2959) { return __mosek_2fusion_2LinearDomain__withShape(_2959); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__withShape(std::shared_ptr< monty::ndarray< int,1 > > _2959){
  _checked_ptr_1<int> _ptr__2959(_2959 ? _2959->raw() : nullptr, _2959 ? _2959->size(0) : 0);
  shape = _2959;
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
bool mosek::fusion::p_LinearDomain::match_shape(std::shared_ptr< monty::ndarray< int,1 > > _2960){
  _checked_ptr_1<int> _ptr__2960(_2960 ? _2960->raw() : nullptr, _2960 ? _2960->size(0) : 0);
  if ((!scalable))
  {
    {
      int _10108 = (int)0;
      int _10109 = (int)((_2960)->size(0));
      for (int _2961 = _10108; _2961 < _10109; ++_2961)
      {
        {
          if ((_ptr__2960[_2961] == ((*shape)(_2961))))
          {
            {
              return false;
            }
          }
          {}
        }
      }
    }
  }
  {}
  return true;
}
void mosek::fusion::p_LinearDomain::destroy(){sparsity.reset();bnd.reset();shape.reset();}void mosek::fusion::LinearDomain::destroy() { mosek::fusion::p_LinearDomain::_get_impl(this)->destroy(); }mosek::fusion::Domain::Domain(mosek::fusion::p_Domain *_impl) : _impl(_impl) { /*std::cout << "Domain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Domain::~Domain() { delete _impl; _impl = nullptr; }mosek::fusion::p_Domain::p_Domain  (::mosek::fusion::Domain * _pubthis) :     _pubthis(_pubthis){}long long mosek::fusion::p_Domain::dimsize(std::shared_ptr< monty::ndarray< int,1 > > _2962){
  _checked_ptr_1<int> _ptr__2962(_2962 ? _2962->raw() : nullptr, _2962 ? _2962->size(0) : 0);
  long long _2963 = (long long)1;
  int _10110 = (int)0;
  int _10111 = (int)((_2962)->size(0));
  for (int _2964 = _10110; _2964 < _10111; ++_2964)
  {
    {
      _2963 *= _ptr__2962[_2964];
    }
  }
  return _2963;
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::mkRangedDomain(monty::rc_ptr< ::mosek::fusion::Matrix > _2965,monty::rc_ptr< ::mosek::fusion::Matrix > _2966){
  if (((mosek::fusion::p_Matrix::_get_impl(_2965)->dimi != mosek::fusion::p_Matrix::_get_impl(_2966)->dimi) || (mosek::fusion::p_Matrix::_get_impl(_2965)->dimj != mosek::fusion::p_Matrix::_get_impl(_2966)->dimj)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions in domain"));
    }
  }
  {}
  if ((_2965->isSparse() && _2966->isSparse()))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _2967 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2965->numNonzeros())));
      _checked_ptr_1<int> _ptr__2967(_2967 ? _2967->raw() : nullptr,_2967 ? _2967->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2968 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2965->numNonzeros())));
      _checked_ptr_1<int> _ptr__2968(_2968 ? _2968->raw() : nullptr,_2968 ? _2968->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2969 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2965->numNonzeros())));
      _checked_ptr_1<double> _ptr__2969(_2969 ? _2969->raw() : nullptr,_2969 ? _2969->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2970 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2966->numNonzeros())));
      _checked_ptr_1<int> _ptr__2970(_2970 ? _2970->raw() : nullptr,_2970 ? _2970->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2971 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2966->numNonzeros())));
      _checked_ptr_1<int> _ptr__2971(_2971 ? _2971->raw() : nullptr,_2971 ? _2971->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2972 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2966->numNonzeros())));
      _checked_ptr_1<double> _ptr__2972(_2972 ? _2972->raw() : nullptr,_2972 ? _2972->size(0) : 0);
      _2965->getDataAsTriplets(_2967,_2968,_2969);
      _2966->getDataAsTriplets(_2970,_2971,_2972);
      long long _2973 = (int)0;
      {
        int _2974 = (int)0;
        int _2975 = (int)0;
        while ( ((_2975 < (int)((_2967)->size(0))) && (_2974 < (int)((_2970)->size(0)))) )
        {
          {
            if (((_ptr__2967[_2975] < _ptr__2970[_2974]) || ((_ptr__2967[_2975] == _ptr__2970[_2974]) && (_ptr__2968[_2975] < _ptr__2971[_2974]))))
            {
              {
                ++ _2973;
                ++ _2975;
              }
            }
            else
            {
              {
                if (((_ptr__2967[_2975] > _ptr__2970[_2974]) || ((_ptr__2967[_2975] == _ptr__2970[_2974]) && (_ptr__2968[_2975] > _ptr__2971[_2974]))))
                {
                  {
                    ++ _2973;
                    ++ _2974;
                  }
                }
                else
                {
                  {
                    ++ _2973;
                    ++ _2975;
                    ++ _2974;
                  }
                }
              }
            }
          }
        }
        _2973 += ((int)((_2967)->size(0)) - _2975);
        _2973 += ((int)((_2970)->size(0)) - _2974);
      }
      std::shared_ptr< monty::ndarray< int,2 > > _2976 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape(_2973,(int)2)));
      std::shared_ptr< monty::ndarray< double,1 > > _2977 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2973)));
      _checked_ptr_1<double> _ptr__2977(_2977 ? _2977->raw() : nullptr,_2977 ? _2977->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2978 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2973)));
      _checked_ptr_1<double> _ptr__2978(_2978 ? _2978->raw() : nullptr,_2978 ? _2978->size(0) : 0);
      {
        int _2979 = (int)0;
        int _2980 = (int)0;
        int _2981 = (int)0;
        while ( ((_2981 < (int)((_2967)->size(0))) && (_2980 < (int)((_2970)->size(0)))) )
        {
          {
            if (((_ptr__2967[_2981] < _ptr__2970[_2980]) || ((_ptr__2967[_2981] == _ptr__2970[_2980]) && (_ptr__2968[_2981] < _ptr__2971[_2980]))))
            {
              {
                ((*_2976)(_2979,(int)0)) = _ptr__2967[_2981];
                ((*_2976)(_2979,(int)1)) = _ptr__2968[_2981];
                _ptr__2977[_2979] = _ptr__2969[_2981];
                _ptr__2978[_2979] = 0.0;
                ++ _2979;
                ++ _2981;
              }
            }
            else
            {
              {
                if (((_ptr__2967[_2981] > _ptr__2970[_2980]) || ((_ptr__2967[_2981] == _ptr__2970[_2980]) && (_ptr__2968[_2981] > _ptr__2971[_2980]))))
                {
                  {
                    ((*_2976)(_2979,(int)0)) = _ptr__2970[_2980];
                    ((*_2976)(_2979,(int)1)) = _ptr__2971[_2980];
                    _ptr__2977[_2979] = 0.0;
                    _ptr__2978[_2979] = _ptr__2972[_2980];
                    ++ _2979;
                    ++ _2980;
                  }
                }
                else
                {
                  {
                    ((*_2976)(_2979,(int)0)) = _ptr__2970[_2980];
                    ((*_2976)(_2979,(int)1)) = _ptr__2971[_2980];
                    _ptr__2977[_2979] = _ptr__2969[_2980];
                    _ptr__2978[_2979] = _ptr__2972[_2980];
                    ++ _2979;
                    ++ _2981;
                    ++ _2980;
                  }
                }
              }
            }
          }
        }
        while ( (_2981 < (int)((_2967)->size(0))) )
        {
          {
            ((*_2976)(_2979,(int)0)) = _ptr__2967[_2981];
            ((*_2976)(_2979,(int)1)) = _ptr__2968[_2981];
            _ptr__2977[_2979] = _ptr__2969[_2981];
            _ptr__2978[_2979] = 0.0;
            ++ _2979;
            ++ _2981;
          }
        }
        while ( (_2980 < (int)((_2970)->size(0))) )
        {
          {
            ((*_2976)(_2979,(int)0)) = _ptr__2970[_2980];
            ((*_2976)(_2979,(int)1)) = _ptr__2971[_2980];
            _ptr__2977[_2979] = 0.0;
            _ptr__2978[_2979] = _ptr__2972[_2980];
            ++ _2979;
            ++ _2980;
          }
        }
      }
      return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_2977,_2978,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(mosek::fusion::p_Matrix::_get_impl(_2965)->dimi),(int)(mosek::fusion::p_Matrix::_get_impl(_2965)->dimj)}),_2976,(int)1);
    }
  }
  else
  {
    {
      int _2982 = mosek::fusion::p_Matrix::_get_impl(_2965)->dimj;
      int _2983 = mosek::fusion::p_Matrix::_get_impl(_2965)->dimi;
      int _2984 = safe_mul( _2983,_2982 );
      std::shared_ptr< monty::ndarray< double,1 > > _2985;
      _checked_ptr_1<double> _ptr__2985(_2985 ? _2985->raw() : nullptr,_2985 ? _2985->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2986;
      _checked_ptr_1<double> _ptr__2986(_2986 ? _2986->raw() : nullptr,_2986 ? _2986->size(0) : 0);
      if (_2965->isSparse())
      {
        {
          _2985 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2984)));
          _ptr__2985.update(_2985 ? _2985->raw() : nullptr, _2985 ? _2985->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2987 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2965->numNonzeros())));
          _checked_ptr_1<int> _ptr__2987(_2987 ? _2987->raw() : nullptr,_2987 ? _2987->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2988 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2965->numNonzeros())));
          _checked_ptr_1<int> _ptr__2988(_2988 ? _2988->raw() : nullptr,_2988 ? _2988->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _2989 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2965->numNonzeros())));
          _checked_ptr_1<double> _ptr__2989(_2989 ? _2989->raw() : nullptr,_2989 ? _2989->size(0) : 0);
          _2965->getDataAsTriplets(_2987,_2988,_2989);
          int _10112 = (int)0;
          int _10113 = (int)((_2987)->size(0));
          for (int _2990 = _10112; _2990 < _10113; ++_2990)
          {
            {
              _ptr__2985[safe_add( safe_mul( _ptr__2987[_2990],_2982 ),_ptr__2988[_2990] )] = _ptr__2989[_2990];
            }
          }
        }
      }
      else
      {
        {
          _2985 = _2965->getDataAsArray();
          _ptr__2985.update(_2985 ? _2985->raw() : nullptr, _2985 ? _2985->size(0) : 0);
        }
      }
      if (_2966->isSparse())
      {
        {
          _2986 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2984)));
          _ptr__2986.update(_2986 ? _2986->raw() : nullptr, _2986 ? _2986->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2991 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2966->numNonzeros())));
          _checked_ptr_1<int> _ptr__2991(_2991 ? _2991->raw() : nullptr,_2991 ? _2991->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2992 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2966->numNonzeros())));
          _checked_ptr_1<int> _ptr__2992(_2992 ? _2992->raw() : nullptr,_2992 ? _2992->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _2993 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2966->numNonzeros())));
          _checked_ptr_1<double> _ptr__2993(_2993 ? _2993->raw() : nullptr,_2993 ? _2993->size(0) : 0);
          _2966->getDataAsTriplets(_2991,_2992,_2993);
          int _10114 = (int)0;
          int _10115 = (int)((_2991)->size(0));
          for (int _2994 = _10114; _2994 < _10115; ++_2994)
          {
            {
              _ptr__2986[safe_add( safe_mul( _ptr__2991[_2994],_2982 ),_ptr__2992[_2994] )] = _ptr__2993[_2994];
            }
          }
        }
      }
      else
      {
        {
          _2986 = _2966->getDataAsArray();
          _ptr__2986.update(_2986 ? _2986->raw() : nullptr, _2986 ? _2986->size(0) : 0);
        }
      }
      return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_2985,_2986,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(mosek::fusion::p_Matrix::_get_impl(_2965)->dimi),(int)(mosek::fusion::p_Matrix::_get_impl(_2965)->dimj)}),nullptr,(int)1);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::mkRangedDomain(std::shared_ptr< monty::ndarray< double,2 > > _2995,std::shared_ptr< monty::ndarray< double,2 > > _2996){
  if ((((int)((_2995)->size(0)) != (int)((_2996)->size(0))) || ((int)((_2995)->size(1)) != (int)((_2996)->size(1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions in domain"));
    }
  }
  {}
  int _2997 = (int)((_2995)->size(1));
  int _2998 = (int)((_2995)->size(0));
  int _2999 = safe_mul( _2998,_2997 );
  std::shared_ptr< monty::ndarray< double,1 > > _3000 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2999)));
  _checked_ptr_1<double> _ptr__3000(_3000 ? _3000->raw() : nullptr,_3000 ? _3000->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3001 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2999)));
  _checked_ptr_1<double> _ptr__3001(_3001 ? _3001->raw() : nullptr,_3001 ? _3001->size(0) : 0);
  int _3002 = (int)0;
  int _10116 = (int)0;
  int _10117 = _2998;
  for (int _3003 = _10116; _3003 < _10117; ++_3003)
  {
    {
      int _10118 = (int)0;
      int _10119 = _2997;
      for (int _3004 = _10118; _3004 < _10119; ++_3004)
      {
        {
          _ptr__3000[_3002] = ((*_2995)(_3003,_3004));
          _ptr__3001[_3002] = ((*_2996)(_3003,_3004));
          ++ _3002;
        }
      }
    }
  }
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_3000,_3001,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2998),(int)(_2997)}),nullptr,(int)1);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::mkLinearDomain(mosek::fusion::RelationKey _3005,monty::rc_ptr< ::mosek::fusion::Matrix > _3006){
  if (_3006->isSparse())
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _3007 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3006->numNonzeros())));
      _checked_ptr_1<int> _ptr__3007(_3007 ? _3007->raw() : nullptr,_3007 ? _3007->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _3008 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3006->numNonzeros())));
      _checked_ptr_1<int> _ptr__3008(_3008 ? _3008->raw() : nullptr,_3008 ? _3008->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3009 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3006->numNonzeros())));
      _checked_ptr_1<double> _ptr__3009(_3009 ? _3009->raw() : nullptr,_3009 ? _3009->size(0) : 0);
      _3006->getDataAsTriplets(_3007,_3008,_3009);
      std::shared_ptr< monty::ndarray< int,2 > > _3010 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_3007)->size(0)),(int)2)));
      int _10120 = (int)0;
      int _10121 = (int)((_3007)->size(0));
      for (int _3011 = _10120; _3011 < _10121; ++_3011)
      {
        {
          ((*_3010)(_3011,(int)0)) = _ptr__3007[_3011];
          ((*_3010)(_3011,(int)1)) = _ptr__3008[_3011];
        }
      }
      return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(_3005,false,_3009,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(mosek::fusion::p_Matrix::_get_impl(_3006)->dimi),(int)(mosek::fusion::p_Matrix::_get_impl(_3006)->dimj)}),_3010,(int)1);
    }
  }
  else
  {
    {
      return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(_3005,false,_3006->getDataAsArray(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(mosek::fusion::p_Matrix::_get_impl(_3006)->dimi),(int)(mosek::fusion::p_Matrix::_get_impl(_3006)->dimj)}),nullptr,(int)1);
    }
  }
}
long long mosek::fusion::p_Domain::prod(std::shared_ptr< monty::ndarray< int,1 > > _3012){
  _checked_ptr_1<int> _ptr__3012(_3012 ? _3012->raw() : nullptr, _3012 ? _3012->size(0) : 0);
  long long _3013 = (int)1;
  int _10122 = (int)0;
  int _10123 = (int)((_3012)->size(0));
  for (int _3014 = _10122; _3014 < _10123; ++_3014)
  {
    {
      _3013 *= _ptr__3012[_3014];
    }
  }
  return _3013;
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(bool _3015,std::shared_ptr< monty::ndarray< double,1 > > _3016,std::shared_ptr< monty::ndarray< double,1 > > _3017,std::shared_ptr< monty::ndarray< int,2 > > _3018,std::shared_ptr< monty::ndarray< int,1 > > _3019){
  _checked_ptr_1<double> _ptr__3016(_3016 ? _3016->raw() : nullptr, _3016 ? _3016->size(0) : 0);
  _checked_ptr_1<double> _ptr__3017(_3017 ? _3017->raw() : nullptr, _3017 ? _3017->size(0) : 0);
  _checked_ptr_1<int> _ptr__3019(_3019 ? _3019->raw() : nullptr, _3019 ? _3019->size(0) : 0);
  if (((!_3015) && ((int)((_3016)->size(0)) != (int)((_3017)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching lengths of upper and lower bounds."));
    }
  }
  {}
  if (((NULL != _3018.get()) && ((int)((_3018)->size(0)) != (int)((_3016)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching lengths of upper/lower bounds and sparsity."));
    }
  }
  {}
  int _10124 = (int)0;
  int _10125 = (int)((_3017)->size(0));
  for (int _3020 = _10124; _3020 < _10125; ++_3020)
  {
    {
      if ((_ptr__3016[_3020] > _ptr__3017[_3020]))
      {
        {
          throw ::mosek::fusion::DomainError(std::string ("Invalid range specified"));
        }
      }
      {}
    }
  }
  if (((NULL != _3019.get()) && (::mosek::fusion::p_Domain::dimsize(_3019) != (int)((_3016)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching dimensions."));
    }
  }
  {}
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(_3015,_3016,_3017,_3019)->__mosek_2fusion_2RangeDomain__sparse(_3018);
}
monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::Domain::symmetric  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _3021) { return mosek::fusion::p_Domain::symmetric(_3021); }monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::p_Domain::symmetric(monty::rc_ptr< ::mosek::fusion::RangeDomain > _3021){
  return _3021->__mosek_2fusion_2RangeDomain__symmetric();
}
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::Domain::symmetric  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _3022) { return mosek::fusion::p_Domain::symmetric(_3022); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_Domain::symmetric(monty::rc_ptr< ::mosek::fusion::LinearDomain > _3022){
  return _3022->__mosek_2fusion_2LinearDomain__symmetric();
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::sparse  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _3023,    std::shared_ptr< monty::ndarray< int,2 > > _3024) { return mosek::fusion::p_Domain::sparse(_3023,_3024); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::sparse(monty::rc_ptr< ::mosek::fusion::RangeDomain > _3023,std::shared_ptr< monty::ndarray< int,2 > > _3024){
  return _3023->__mosek_2fusion_2RangeDomain__sparse(_3024);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::sparse  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _3025,    std::shared_ptr< monty::ndarray< int,1 > > _3026) { return mosek::fusion::p_Domain::sparse(_3025,_3026); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::sparse(monty::rc_ptr< ::mosek::fusion::RangeDomain > _3025,std::shared_ptr< monty::ndarray< int,1 > > _3026){
  _checked_ptr_1<int> _ptr__3026(_3026 ? _3026->raw() : nullptr, _3026 ? _3026->size(0) : 0);
  return _3025->__mosek_2fusion_2RangeDomain__sparse(_3026);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::sparse  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _3027,    std::shared_ptr< monty::ndarray< int,2 > > _3028) { return mosek::fusion::p_Domain::sparse(_3027,_3028); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::sparse(monty::rc_ptr< ::mosek::fusion::LinearDomain > _3027,std::shared_ptr< monty::ndarray< int,2 > > _3028){
  return _3027->__mosek_2fusion_2LinearDomain__sparse(_3028);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::sparse  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _3029,    std::shared_ptr< monty::ndarray< int,1 > > _3030) { return mosek::fusion::p_Domain::sparse(_3029,_3030); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::sparse(monty::rc_ptr< ::mosek::fusion::LinearDomain > _3029,std::shared_ptr< monty::ndarray< int,1 > > _3030){
  _checked_ptr_1<int> _ptr__3030(_3030 ? _3030->raw() : nullptr, _3030 ? _3030->size(0) : 0);
  return _3029->__mosek_2fusion_2LinearDomain__sparse(_3030);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::integral  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _3031) { return mosek::fusion::p_Domain::integral(_3031); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::integral(monty::rc_ptr< ::mosek::fusion::RangeDomain > _3031){
  return _3031->__mosek_2fusion_2RangeDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::integral  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _3032) { return mosek::fusion::p_Domain::integral(_3032); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::integral(monty::rc_ptr< ::mosek::fusion::LinearDomain > _3032){
  return _3032->__mosek_2fusion_2LinearDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::integral  ( monty::rc_ptr< ::mosek::fusion::ConeDomain > _3033) { return mosek::fusion::p_Domain::integral(_3033); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::integral(monty::rc_ptr< ::mosek::fusion::ConeDomain > _3033){
  return _3033->__mosek_2fusion_2ConeDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::axis  ( monty::rc_ptr< ::mosek::fusion::ConeDomain > _3034,    int _3035) { return mosek::fusion::p_Domain::axis(_3034,_3035); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::axis(monty::rc_ptr< ::mosek::fusion::ConeDomain > _3034,int _3035){
  return _3034->__mosek_2fusion_2ConeDomain__axis(_3035);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDPowerCone  ( double _3036,    std::shared_ptr< monty::ndarray< int,1 > > _3037) { return mosek::fusion::p_Domain::inDPowerCone(_3036,_3037); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDPowerCone(double _3036,std::shared_ptr< monty::ndarray< int,1 > > _3037){
  _checked_ptr_1<int> _ptr__3037(_3037 ? _3037->raw() : nullptr, _3037 ? _3037->size(0) : 0);
  std::vector<int> _10126;
  for (int _3038 = (int)0, _10127 = (int)((_3037)->size(0)); _3038 < _10127 ; ++_3038)
  {
    _10126.push_back(_ptr__3037[_3038]);
  }
  auto _10128 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10126.size()),_10126.begin(),_10126.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDPowCone,_3036,_10128);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDPowerCone  ( double _3039,    int _3040) { return mosek::fusion::p_Domain::inDPowerCone(_3039,_3040); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDPowerCone(double _3039,int _3040){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDPowCone,_3039,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3040),(int)((int)3)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDPowerCone  ( double _3041) { return mosek::fusion::p_Domain::inDPowerCone(_3041); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDPowerCone(double _3041){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDPowCone,_3041,nullptr);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPPowerCone  ( double _3042,    std::shared_ptr< monty::ndarray< int,1 > > _3043) { return mosek::fusion::p_Domain::inPPowerCone(_3042,_3043); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPPowerCone(double _3042,std::shared_ptr< monty::ndarray< int,1 > > _3043){
  _checked_ptr_1<int> _ptr__3043(_3043 ? _3043->raw() : nullptr, _3043 ? _3043->size(0) : 0);
  std::vector<int> _10129;
  for (int _3044 = (int)0, _10130 = (int)((_3043)->size(0)); _3044 < _10130 ; ++_3044)
  {
    _10129.push_back(_ptr__3043[_3044]);
  }
  auto _10131 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10129.size()),_10129.begin(),_10129.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPPowCone,_3042,_10131);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPPowerCone  ( double _3045,    int _3046) { return mosek::fusion::p_Domain::inPPowerCone(_3045,_3046); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPPowerCone(double _3045,int _3046){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPPowCone,_3045,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3046),(int)((int)3)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPPowerCone  ( double _3047) { return mosek::fusion::p_Domain::inPPowerCone(_3047); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPPowerCone(double _3047){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPPowCone,_3047,nullptr);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDExpCone  ( std::shared_ptr< monty::ndarray< int,1 > > _3048) { return mosek::fusion::p_Domain::inDExpCone(_3048); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDExpCone(std::shared_ptr< monty::ndarray< int,1 > > _3048){
  _checked_ptr_1<int> _ptr__3048(_3048 ? _3048->raw() : nullptr, _3048 ? _3048->size(0) : 0);
  std::vector<int> _10132;
  for (int _3049 = (int)0, _10133 = (int)((_3048)->size(0)); _3049 < _10133 ; ++_3049)
  {
    _10132.push_back(_ptr__3048[_3049]);
  }
  auto _10134 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10132.size()),_10132.begin(),_10132.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDExpCone,_10134);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDExpCone  ( int _3050) { return mosek::fusion::p_Domain::inDExpCone(_3050); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDExpCone(int _3050){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDExpCone,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3050),(int)((int)3)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDExpCone  ( ) { return mosek::fusion::p_Domain::inDExpCone(); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDExpCone(){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDExpCone,nullptr);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPExpCone  ( std::shared_ptr< monty::ndarray< int,1 > > _3051) { return mosek::fusion::p_Domain::inPExpCone(_3051); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPExpCone(std::shared_ptr< monty::ndarray< int,1 > > _3051){
  _checked_ptr_1<int> _ptr__3051(_3051 ? _3051->raw() : nullptr, _3051 ? _3051->size(0) : 0);
  std::vector<int> _10135;
  for (int _3052 = (int)0, _10136 = (int)((_3051)->size(0)); _3052 < _10136 ; ++_3052)
  {
    _10135.push_back(_ptr__3051[_3052]);
  }
  auto _10137 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10135.size()),_10135.begin(),_10135.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPExpCone,_10137);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPExpCone  ( int _3053) { return mosek::fusion::p_Domain::inPExpCone(_3053); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPExpCone(int _3053){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPExpCone,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3053),(int)((int)3)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPExpCone  ( ) { return mosek::fusion::p_Domain::inPExpCone(); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPExpCone(){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPExpCone,nullptr);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inRotatedQCone  ( std::shared_ptr< monty::ndarray< int,1 > > _3054) { return mosek::fusion::p_Domain::inRotatedQCone(_3054); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inRotatedQCone(std::shared_ptr< monty::ndarray< int,1 > > _3054){
  _checked_ptr_1<int> _ptr__3054(_3054 ? _3054->raw() : nullptr, _3054 ? _3054->size(0) : 0);
  std::vector<int> _10138;
  for (int _3055 = (int)0, _10139 = (int)((_3054)->size(0)); _3055 < _10139 ; ++_3055)
  {
    _10138.push_back(_ptr__3054[_3055]);
  }
  auto _10140 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10138.size()),_10138.begin(),_10138.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,0.0,_10140);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inRotatedQCone  ( int _3056,    int _3057) { return mosek::fusion::p_Domain::inRotatedQCone(_3056,_3057); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inRotatedQCone(int _3056,int _3057){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,0.0,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3056),(int)(_3057)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inRotatedQCone  ( int _3058) { return mosek::fusion::p_Domain::inRotatedQCone(_3058); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inRotatedQCone(int _3058){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,0.0,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3058)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inRotatedQCone  ( ) { return mosek::fusion::p_Domain::inRotatedQCone(); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inRotatedQCone(){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,0.0,nullptr);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inQCone  ( std::shared_ptr< monty::ndarray< int,1 > > _3059) { return mosek::fusion::p_Domain::inQCone(_3059); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inQCone(std::shared_ptr< monty::ndarray< int,1 > > _3059){
  _checked_ptr_1<int> _ptr__3059(_3059 ? _3059->raw() : nullptr, _3059 ? _3059->size(0) : 0);
  std::vector<int> _10141;
  for (int _3060 = (int)0, _10142 = (int)((_3059)->size(0)); _3060 < _10142 ; ++_3060)
  {
    _10141.push_back(_ptr__3059[_3060]);
  }
  auto _10143 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10141.size()),_10141.begin(),_10141.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InQCone,0.0,_10143);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inQCone  ( int _3061,    int _3062) { return mosek::fusion::p_Domain::inQCone(_3061,_3062); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inQCone(int _3061,int _3062){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InQCone,0.0,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3061),(int)(_3062)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inQCone  ( int _3063) { return mosek::fusion::p_Domain::inQCone(_3063); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inQCone(int _3063){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InQCone,0.0,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3063)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inQCone  ( ) { return mosek::fusion::p_Domain::inQCone(); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inQCone(){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InQCone,0.0,nullptr);
}
monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::Domain::isLinPSD  ( int _3064,    int _3065) { return mosek::fusion::p_Domain::isLinPSD(_3064,_3065); }monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::p_Domain::isLinPSD(int _3064,int _3065){
  return ::mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain(::mosek::fusion::p_Set::make(_3065,(safe_mul( _3064,safe_add( _3064,(int)1 ) ) / (int)2)));
}
monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::Domain::isLinPSD  ( int _3066) { return mosek::fusion::p_Domain::isLinPSD(_3066); }monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::p_Domain::isLinPSD(int _3066){
  return ::mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain(::mosek::fusion::p_Set::make((safe_mul( _3066,safe_add( _3066,(int)1 ) ) / (int)2)));
}
monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::Domain::isLinPSD  ( ) { return mosek::fusion::p_Domain::isLinPSD(); }monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::p_Domain::isLinPSD(){
  return ::mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain();
}
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::isTrilPSD  ( int _3067,    int _3068) { return mosek::fusion::p_Domain::isTrilPSD(_3067,_3068); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::isTrilPSD(int _3067,int _3068){
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsTrilPSD,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3068),(int)(_3067),(int)(_3067)}),(int)1,(int)2);
}
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::isTrilPSD  ( int _3069) { return mosek::fusion::p_Domain::isTrilPSD(_3069); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::isTrilPSD(int _3069){
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsTrilPSD,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3069),(int)(_3069)}),(int)0,(int)1);
}
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::isTrilPSD  ( ) { return mosek::fusion::p_Domain::isTrilPSD(); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::isTrilPSD(){
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsTrilPSD);
}
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::inPSDCone  ( int _3070,    int _3071) { return mosek::fusion::p_Domain::inPSDCone(_3070,_3071); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::inPSDCone(int _3070,int _3071){
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsSymPSD,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3071),(int)(_3070),(int)(_3070)}));
}
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::inPSDCone  ( int _3072) { return mosek::fusion::p_Domain::inPSDCone(_3072); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::inPSDCone(int _3072){
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsSymPSD,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3072),(int)(_3072)}));
}
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::inPSDCone  ( ) { return mosek::fusion::p_Domain::inPSDCone(); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::inPSDCone(){
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsSymPSD);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary  ( ) { return mosek::fusion::p_Domain::binary(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary(){
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(0.0)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}),nullptr)->__mosek_2fusion_2RangeDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary  ( std::shared_ptr< monty::ndarray< int,1 > > _3073) { return mosek::fusion::p_Domain::binary(_3073); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary(std::shared_ptr< monty::ndarray< int,1 > > _3073){
  _checked_ptr_1<int> _ptr__3073(_3073 ? _3073->raw() : nullptr, _3073 ? _3073->size(0) : 0);
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(0.0)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}),_3073)->__mosek_2fusion_2RangeDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary  ( int _3074,    int _3075) { return mosek::fusion::p_Domain::binary(_3074,_3075); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary(int _3074,int _3075){
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(0.0)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3074),(int)(_3075)}))->__mosek_2fusion_2RangeDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary  ( int _3076) { return mosek::fusion::p_Domain::binary(_3076); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary(int _3076){
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(0.0)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3076)}))->__mosek_2fusion_2RangeDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( monty::rc_ptr< ::mosek::fusion::Matrix > _3077,    monty::rc_ptr< ::mosek::fusion::Matrix > _3078) { return mosek::fusion::p_Domain::inRange(_3077,_3078); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(monty::rc_ptr< ::mosek::fusion::Matrix > _3077,monty::rc_ptr< ::mosek::fusion::Matrix > _3078){
  return ::mosek::fusion::p_Domain::mkRangedDomain(_3077,_3078);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( std::shared_ptr< monty::ndarray< double,2 > > _3079,    std::shared_ptr< monty::ndarray< double,2 > > _3080) { return mosek::fusion::p_Domain::inRange(_3079,_3080); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,2 > > _3079,std::shared_ptr< monty::ndarray< double,2 > > _3080){
  return ::mosek::fusion::p_Domain::mkRangedDomain(_3079,_3080);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( std::shared_ptr< monty::ndarray< double,1 > > _3081,    std::shared_ptr< monty::ndarray< double,1 > > _3082,    std::shared_ptr< monty::ndarray< int,1 > > _3083) { return mosek::fusion::p_Domain::inRange(_3081,_3082,_3083); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,1 > > _3081,std::shared_ptr< monty::ndarray< double,1 > > _3082,std::shared_ptr< monty::ndarray< int,1 > > _3083){
  _checked_ptr_1<double> _ptr__3081(_3081 ? _3081->raw() : nullptr, _3081 ? _3081->size(0) : 0);
  _checked_ptr_1<double> _ptr__3082(_3082 ? _3082->raw() : nullptr, _3082 ? _3082->size(0) : 0);
  _checked_ptr_1<int> _ptr__3083(_3083 ? _3083->raw() : nullptr, _3083 ? _3083->size(0) : 0);
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_3081,_3082,_3083);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( std::shared_ptr< monty::ndarray< double,1 > > _3084,    double _3085,    std::shared_ptr< monty::ndarray< int,1 > > _3086) { return mosek::fusion::p_Domain::inRange(_3084,_3085,_3086); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,1 > > _3084,double _3085,std::shared_ptr< monty::ndarray< int,1 > > _3086){
  _checked_ptr_1<double> _ptr__3084(_3084 ? _3084->raw() : nullptr, _3084 ? _3084->size(0) : 0);
  _checked_ptr_1<int> _ptr__3086(_3086 ? _3086->raw() : nullptr, _3086 ? _3086->size(0) : 0);
  std::vector<double> _10144;
  for (int _3087 = (int)0, _10145 = (int)((_3084)->size(0)); _3087 < _10145 ; ++_3087)
  {
    _10144.push_back(_3085);
  }
  auto _10146 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10144.size()),_10144.begin(),_10144.end()));
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_3084,_10146,_3086);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( double _3088,    std::shared_ptr< monty::ndarray< double,1 > > _3089,    std::shared_ptr< monty::ndarray< int,1 > > _3090) { return mosek::fusion::p_Domain::inRange(_3088,_3089,_3090); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(double _3088,std::shared_ptr< monty::ndarray< double,1 > > _3089,std::shared_ptr< monty::ndarray< int,1 > > _3090){
  _checked_ptr_1<double> _ptr__3089(_3089 ? _3089->raw() : nullptr, _3089 ? _3089->size(0) : 0);
  _checked_ptr_1<int> _ptr__3090(_3090 ? _3090->raw() : nullptr, _3090 ? _3090->size(0) : 0);
  std::vector<double> _10147;
  for (int _3091 = (int)0, _10148 = (int)((_3089)->size(0)); _3091 < _10148 ; ++_3091)
  {
    _10147.push_back(_3088);
  }
  auto _10149 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10147.size()),_10147.begin(),_10147.end()));
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_10149,_3089,_3090);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( double _3092,    double _3093,    std::shared_ptr< monty::ndarray< int,1 > > _3094) { return mosek::fusion::p_Domain::inRange(_3092,_3093,_3094); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(double _3092,double _3093,std::shared_ptr< monty::ndarray< int,1 > > _3094){
  _checked_ptr_1<int> _ptr__3094(_3094 ? _3094->raw() : nullptr, _3094 ? _3094->size(0) : 0);
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3092)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3093)}),_3094);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( std::shared_ptr< monty::ndarray< double,1 > > _3095,    std::shared_ptr< monty::ndarray< double,1 > > _3096) { return mosek::fusion::p_Domain::inRange(_3095,_3096); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,1 > > _3095,std::shared_ptr< monty::ndarray< double,1 > > _3096){
  _checked_ptr_1<double> _ptr__3095(_3095 ? _3095->raw() : nullptr, _3095 ? _3095->size(0) : 0);
  _checked_ptr_1<double> _ptr__3096(_3096 ? _3096->raw() : nullptr, _3096 ? _3096->size(0) : 0);
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_3095,_3096,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_3095)->size(0)))}));
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( std::shared_ptr< monty::ndarray< double,1 > > _3097,    double _3098) { return mosek::fusion::p_Domain::inRange(_3097,_3098); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,1 > > _3097,double _3098){
  _checked_ptr_1<double> _ptr__3097(_3097 ? _3097->raw() : nullptr, _3097 ? _3097->size(0) : 0);
  std::vector<double> _10150;
  for (int _3099 = (int)0, _10151 = (int)((_3097)->size(0)); _3099 < _10151 ; ++_3099)
  {
    _10150.push_back(_3098);
  }
  auto _10152 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10150.size()),_10150.begin(),_10150.end()));
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_3097,_10152,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_3097)->size(0)))}));
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( double _3100,    std::shared_ptr< monty::ndarray< double,1 > > _3101) { return mosek::fusion::p_Domain::inRange(_3100,_3101); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(double _3100,std::shared_ptr< monty::ndarray< double,1 > > _3101){
  _checked_ptr_1<double> _ptr__3101(_3101 ? _3101->raw() : nullptr, _3101 ? _3101->size(0) : 0);
  std::vector<double> _10153;
  for (int _3102 = (int)0, _10154 = (int)((_3101)->size(0)); _3102 < _10154 ; ++_3102)
  {
    _10153.push_back(_3100);
  }
  auto _10155 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10153.size()),_10153.begin(),_10153.end()));
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_10155,_3101,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_3101)->size(0)))}));
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( double _3103,    double _3104) { return mosek::fusion::p_Domain::inRange(_3103,_3104); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(double _3103,double _3104){
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3103)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3104)}),nullptr);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( monty::rc_ptr< ::mosek::fusion::Matrix > _3105) { return mosek::fusion::p_Domain::greaterThan(_3105); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(monty::rc_ptr< ::mosek::fusion::Matrix > _3105){
  return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::GreaterThan,_3105);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( std::shared_ptr< monty::ndarray< double,1 > > _3106,    std::shared_ptr< monty::ndarray< int,1 > > _3107) { return mosek::fusion::p_Domain::greaterThan(_3106,_3107); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(std::shared_ptr< monty::ndarray< double,1 > > _3106,std::shared_ptr< monty::ndarray< int,1 > > _3107){
  _checked_ptr_1<double> _ptr__3106(_3106 ? _3106->raw() : nullptr, _3106 ? _3106->size(0) : 0);
  _checked_ptr_1<int> _ptr__3107(_3107 ? _3107->raw() : nullptr, _3107 ? _3107->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,false,::mosek::fusion::Utils::Tools::arraycopy(_3106),_3107);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( std::shared_ptr< monty::ndarray< double,2 > > _3108) { return mosek::fusion::p_Domain::greaterThan(_3108); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(std::shared_ptr< monty::ndarray< double,2 > > _3108){
  std::vector<double> _10156;
  for (int _3109 = (int)0, _10157 = (int)((_3108)->size(0)); _3109 < _10157 ; ++_3109)
  {
    for (int _3110 = (int)0, _10158 = (int)((_3108)->size(1)); _3110 < _10158 ; ++_3110)
    {
      _10156.push_back(((*_3108)(_3109,_3110)));
    }
  }
  auto _10159 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10156.size()),_10156.begin(),_10156.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,false,_10159,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_3108)->size(0))),(int)((int)((_3108)->size(1)))}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( std::shared_ptr< monty::ndarray< double,1 > > _3111) { return mosek::fusion::p_Domain::greaterThan(_3111); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(std::shared_ptr< monty::ndarray< double,1 > > _3111){
  _checked_ptr_1<double> _ptr__3111(_3111 ? _3111->raw() : nullptr, _3111 ? _3111->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,false,::mosek::fusion::Utils::Tools::arraycopy(_3111),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_3111)->size(0)))}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( double _3112,    std::shared_ptr< monty::ndarray< int,1 > > _3113) { return mosek::fusion::p_Domain::greaterThan(_3112,_3113); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(double _3112,std::shared_ptr< monty::ndarray< int,1 > > _3113){
  _checked_ptr_1<int> _ptr__3113(_3113 ? _3113->raw() : nullptr, _3113 ? _3113->size(0) : 0);
  std::vector<double> _10160;
  for (long long _3114 = (int)0, _10161 = ::mosek::fusion::p_Domain::prod(_3113); _3114 < _10161 ; ++_3114)
  {
    _10160.push_back(_3112);
  }
  auto _10162 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10160.size()),_10160.begin(),_10160.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,true,_10162,_3113);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( double _3115,    int _3116,    int _3117) { return mosek::fusion::p_Domain::greaterThan(_3115,_3116,_3117); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(double _3115,int _3116,int _3117){
  std::vector<double> _10163;
  for (int _3118 = (int)0, _10164 = safe_mul( _3117,_3116 ); _3118 < _10164 ; ++_3118)
  {
    _10163.push_back(_3115);
  }
  auto _10165 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10163.size()),_10163.begin(),_10163.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,true,_10165,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3116),(int)(_3117)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( double _3119,    int _3120) { return mosek::fusion::p_Domain::greaterThan(_3119,_3120); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(double _3119,int _3120){
  std::vector<double> _10166;
  for (int _3121 = (int)0, _10167 = _3120; _3121 < _10167 ; ++_3121)
  {
    _10166.push_back(_3119);
  }
  auto _10168 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10166.size()),_10166.begin(),_10166.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,true,_10168,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3120)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( double _3122) { return mosek::fusion::p_Domain::greaterThan(_3122); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(double _3122){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3122)}),nullptr);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( monty::rc_ptr< ::mosek::fusion::Matrix > _3123) { return mosek::fusion::p_Domain::lessThan(_3123); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(monty::rc_ptr< ::mosek::fusion::Matrix > _3123){
  return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::LessThan,_3123);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( std::shared_ptr< monty::ndarray< double,1 > > _3124,    std::shared_ptr< monty::ndarray< int,1 > > _3125) { return mosek::fusion::p_Domain::lessThan(_3124,_3125); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(std::shared_ptr< monty::ndarray< double,1 > > _3124,std::shared_ptr< monty::ndarray< int,1 > > _3125){
  _checked_ptr_1<double> _ptr__3124(_3124 ? _3124->raw() : nullptr, _3124 ? _3124->size(0) : 0);
  _checked_ptr_1<int> _ptr__3125(_3125 ? _3125->raw() : nullptr, _3125 ? _3125->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,false,::mosek::fusion::Utils::Tools::arraycopy(_3124),_3125);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( std::shared_ptr< monty::ndarray< double,2 > > _3126) { return mosek::fusion::p_Domain::lessThan(_3126); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(std::shared_ptr< monty::ndarray< double,2 > > _3126){
  std::vector<double> _10169;
  for (int _3127 = (int)0, _10170 = (int)((_3126)->size(0)); _3127 < _10170 ; ++_3127)
  {
    for (int _3128 = (int)0, _10171 = (int)((_3126)->size(1)); _3128 < _10171 ; ++_3128)
    {
      _10169.push_back(((*_3126)(_3127,_3128)));
    }
  }
  auto _10172 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10169.size()),_10169.begin(),_10169.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,false,_10172,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_3126)->size(0))),(int)((int)((_3126)->size(1)))}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( std::shared_ptr< monty::ndarray< double,1 > > _3129) { return mosek::fusion::p_Domain::lessThan(_3129); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(std::shared_ptr< monty::ndarray< double,1 > > _3129){
  _checked_ptr_1<double> _ptr__3129(_3129 ? _3129->raw() : nullptr, _3129 ? _3129->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,false,::mosek::fusion::Utils::Tools::arraycopy(_3129),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_3129)->size(0)))}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( double _3130,    std::shared_ptr< monty::ndarray< int,1 > > _3131) { return mosek::fusion::p_Domain::lessThan(_3130,_3131); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(double _3130,std::shared_ptr< monty::ndarray< int,1 > > _3131){
  _checked_ptr_1<int> _ptr__3131(_3131 ? _3131->raw() : nullptr, _3131 ? _3131->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3130)}),_3131);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( double _3132,    int _3133,    int _3134) { return mosek::fusion::p_Domain::lessThan(_3132,_3133,_3134); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(double _3132,int _3133,int _3134){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3132)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3133),(int)(_3134)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( double _3135,    int _3136) { return mosek::fusion::p_Domain::lessThan(_3135,_3136); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(double _3135,int _3136){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3135)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3136)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( double _3137) { return mosek::fusion::p_Domain::lessThan(_3137); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(double _3137){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3137)}),nullptr);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( monty::rc_ptr< ::mosek::fusion::Matrix > _3138) { return mosek::fusion::p_Domain::equalsTo(_3138); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(monty::rc_ptr< ::mosek::fusion::Matrix > _3138){
  return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::EqualsTo,_3138);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( std::shared_ptr< monty::ndarray< double,1 > > _3139,    std::shared_ptr< monty::ndarray< int,1 > > _3140) { return mosek::fusion::p_Domain::equalsTo(_3139,_3140); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(std::shared_ptr< monty::ndarray< double,1 > > _3139,std::shared_ptr< monty::ndarray< int,1 > > _3140){
  _checked_ptr_1<double> _ptr__3139(_3139 ? _3139->raw() : nullptr, _3139 ? _3139->size(0) : 0);
  _checked_ptr_1<int> _ptr__3140(_3140 ? _3140->raw() : nullptr, _3140 ? _3140->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,false,::mosek::fusion::Utils::Tools::arraycopy(_3139),_3140);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( std::shared_ptr< monty::ndarray< double,2 > > _3141) { return mosek::fusion::p_Domain::equalsTo(_3141); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(std::shared_ptr< monty::ndarray< double,2 > > _3141){
  std::vector<double> _10173;
  for (int _3142 = (int)0, _10174 = (int)((_3141)->size(0)); _3142 < _10174 ; ++_3142)
  {
    for (int _3143 = (int)0, _10175 = (int)((_3141)->size(1)); _3143 < _10175 ; ++_3143)
    {
      _10173.push_back(((*_3141)(_3142,_3143)));
    }
  }
  auto _10176 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10173.size()),_10173.begin(),_10173.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,false,_10176,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_3141)->size(0))),(int)((int)((_3141)->size(1)))}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( std::shared_ptr< monty::ndarray< double,1 > > _3144) { return mosek::fusion::p_Domain::equalsTo(_3144); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(std::shared_ptr< monty::ndarray< double,1 > > _3144){
  _checked_ptr_1<double> _ptr__3144(_3144 ? _3144->raw() : nullptr, _3144 ? _3144->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,false,::mosek::fusion::Utils::Tools::arraycopy(_3144),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_3144)->size(0)))}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( double _3145,    std::shared_ptr< monty::ndarray< int,1 > > _3146) { return mosek::fusion::p_Domain::equalsTo(_3145,_3146); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(double _3145,std::shared_ptr< monty::ndarray< int,1 > > _3146){
  _checked_ptr_1<int> _ptr__3146(_3146 ? _3146->raw() : nullptr, _3146 ? _3146->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3145)}),_3146);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( double _3147,    int _3148,    int _3149) { return mosek::fusion::p_Domain::equalsTo(_3147,_3148,_3149); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(double _3147,int _3148,int _3149){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3147)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3148),(int)(_3149)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( double _3150,    int _3151) { return mosek::fusion::p_Domain::equalsTo(_3150,_3151); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(double _3150,int _3151){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3150)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3151)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( double _3152) { return mosek::fusion::p_Domain::equalsTo(_3152); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(double _3152){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3152)}),nullptr);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded  ( std::shared_ptr< monty::ndarray< int,1 > > _3153) { return mosek::fusion::p_Domain::unbounded(_3153); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded(std::shared_ptr< monty::ndarray< int,1 > > _3153){
  _checked_ptr_1<int> _ptr__3153(_3153 ? _3153->raw() : nullptr, _3153 ? _3153->size(0) : 0);
  std::vector<int> _10177;
  for (int _3154 = (int)0, _10178 = (int)((_3153)->size(0)); _3154 < _10178 ; ++_3154)
  {
    _10177.push_back(_ptr__3153[_3154]);
  }
  auto _10179 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10177.size()),_10177.begin(),_10177.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,false,nullptr,_10179);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded  ( int _3155,    int _3156) { return mosek::fusion::p_Domain::unbounded(_3155,_3156); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded(int _3155,int _3156){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,false,nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3155),(int)(_3156)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded  ( int _3157) { return mosek::fusion::p_Domain::unbounded(_3157); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded(int _3157){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,false,nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3157)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded  ( ) { return mosek::fusion::p_Domain::unbounded(); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded(){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,true,nullptr,nullptr);
}
void mosek::fusion::p_Domain::destroy(){}void mosek::fusion::Domain::destroy() { mosek::fusion::p_Domain::_get_impl(this)->destroy(); }mosek::fusion::ExprCode::ExprCode(mosek::fusion::p_ExprCode *_impl) : _impl(_impl) { /*std::cout << "ExprCode() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::ExprCode::~ExprCode() { delete _impl; _impl = nullptr; }mosek::fusion::p_ExprCode::p_ExprCode  (::mosek::fusion::ExprCode * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::ExprCode::inplace_relocate  ( std::shared_ptr< monty::ndarray< int,1 > > _3158,    int _3159,    int _3160,    int _3161) { mosek::fusion::p_ExprCode::inplace_relocate(_3158,_3159,_3160,_3161); }void mosek::fusion::p_ExprCode::inplace_relocate(std::shared_ptr< monty::ndarray< int,1 > > _3158,int _3159,int _3160,int _3161){
  _checked_ptr_1<int> _ptr__3158(_3158 ? _3158->raw() : nullptr, _3158 ? _3158->size(0) : 0);
  int _10180 = (int)0;
  int _10181 = _3160;
  int _10182 = (int)2;
  for (int _3162 = _10180; _3162 < _10181; _3162 += _10182)
  {
    {
      if ((_ptr__3158[_3162] == (int)2))
      {
        {
          _ptr__3158[safe_add( _3162,(int)1 )] += _3161;
        }
      }
      {}
    }
  }
}
std::string mosek::fusion::ExprCode::op2str  ( int _3163) { return mosek::fusion::p_ExprCode::op2str(_3163); }std::string mosek::fusion::p_ExprCode::op2str(int _3163){
  if ((_3163 == 0))
  {
    {
      return std::string ("NOP");
    }
  }
  else if((_3163 == 1))
  {
    {
      return std::string ("PARAMREF");
    }
  }
  else if((_3163 == 2))
  {
    {
      return std::string ("CONST");
    }
  }
  else if((_3163 == 3))
  {
    {
      return std::string ("ADD");
    }
  }
  else if((_3163 == 4))
  {
    {
      return std::string ("NEG");
    }
  }
  else if((_3163 == 5))
  {
    {
      return std::string ("MUL");
    }
  }
  else if((_3163 == 6))
  {
    {
      return std::string ("INV");
    }
  }
  else if((_3163 == 8))
  {
    {
      return std::string ("SUM");
    }
  }
  else
  {
    {
      return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("?("))->__mosek_2fusion_2Utils_2StringBuffer__a(_3163)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
    }
  }
}
void mosek::fusion::ExprCode::eval_add_list  ( std::shared_ptr< monty::ndarray< int,1 > > _3164,    std::shared_ptr< monty::ndarray< int,1 > > _3165,    std::shared_ptr< monty::ndarray< double,1 > > _3166,    int _3167,    std::shared_ptr< monty::ndarray< double,1 > > _3168,    std::shared_ptr< monty::ndarray< double,1 > > _3169,    monty::rc_ptr< ::mosek::fusion::WorkStack > _3170) { mosek::fusion::p_ExprCode::eval_add_list(_3164,_3165,_3166,_3167,_3168,_3169,_3170); }void mosek::fusion::p_ExprCode::eval_add_list(std::shared_ptr< monty::ndarray< int,1 > > _3164,std::shared_ptr< monty::ndarray< int,1 > > _3165,std::shared_ptr< monty::ndarray< double,1 > > _3166,int _3167,std::shared_ptr< monty::ndarray< double,1 > > _3168,std::shared_ptr< monty::ndarray< double,1 > > _3169,monty::rc_ptr< ::mosek::fusion::WorkStack > _3170){
  _checked_ptr_1<int> _ptr__3164(_3164 ? _3164->raw() : nullptr, _3164 ? _3164->size(0) : 0);
  _checked_ptr_1<int> _ptr__3165(_3165 ? _3165->raw() : nullptr, _3165 ? _3165->size(0) : 0);
  _checked_ptr_1<double> _ptr__3166(_3166 ? _3166->raw() : nullptr, _3166 ? _3166->size(0) : 0);
  _checked_ptr_1<double> _ptr__3168(_3168 ? _3168->raw() : nullptr, _3168 ? _3168->size(0) : 0);
  _checked_ptr_1<double> _ptr__3169(_3169 ? _3169->raw() : nullptr, _3169 ? _3169->size(0) : 0);
  int _3171 = _3170->allocf64((int)((_3164)->size(0)));
  int _3172 = (int)0;
  std::shared_ptr< monty::ndarray< double,1 > > _3173 = mosek::fusion::p_WorkStack::_get_impl(_3170)->f64;
  _checked_ptr_1<double> _ptr__3173(_3173 ? _3173->raw() : nullptr,_3173 ? _3173->size(0) : 0);
  int _10183 = (int)0;
  int _10184 = ((int)((_3165)->size(0)) - (int)1);
  for (int _3174 = _10183; _3174 < _10184; ++_3174)
  {
    {
      int _10185 = _ptr__3165[_3174];
      int _10186 = _ptr__3165[safe_add( _3174,(int)1 )];
      int _10187 = (int)2;
      for (int _3175 = _10185; _3175 < _10186; _3175 += _10187)
      {
        {
          if ((_ptr__3164[_3175] == 0))
          {
            {
            }
          }
          else if((_ptr__3164[_3175] == 1))
          {
            {
              _ptr__3173[safe_add( _3171,_3172 )] = _ptr__3169[_ptr__3164[safe_add( _3175,(int)1 )]];
              ++ _3172;
            }
          }
          else if((_ptr__3164[_3175] == 2))
          {
            {
              _ptr__3173[safe_add( _3171,_3172 )] = _ptr__3166[(_3175 / (int)2)];
              ++ _3172;
            }
          }
          else if((_ptr__3164[_3175] == 3))
          {
            {
              _ptr__3173[(safe_add( _3171,_3172 ) - (int)2)] = (_ptr__3173[(safe_add( _3171,_3172 ) - (int)1)] + _ptr__3173[(safe_add( _3171,_3172 ) - (int)2)]);
              -- _3172;
            }
          }
          else if((_ptr__3164[_3175] == 4))
          {
            {
              _ptr__3173[(safe_add( _3171,_3172 ) - (int)1)] = (-_ptr__3173[(safe_add( _3171,_3172 ) - (int)1)]);
            }
          }
          else if((_ptr__3164[_3175] == 5))
          {
            {
              _ptr__3173[(safe_add( _3171,_3172 ) - (int)2)] = (_ptr__3173[(safe_add( _3171,_3172 ) - (int)1)] * _ptr__3173[(safe_add( _3171,_3172 ) - (int)2)]);
              -- _3172;
            }
          }
          else if((_ptr__3164[_3175] == 6))
          {
            {
              _ptr__3173[(safe_add( _3171,_3172 ) - (int)1)] = (1.0 / _ptr__3173[(safe_add( _3171,_3172 ) - (int)1)]);
            }
          }
          else if((_ptr__3164[_3175] == 8))
          {
            {
              double _3176 = 0.0;
              int _10188 = (int)0;
              int _10189 = _ptr__3164[safe_add( _3175,(int)1 )];
              for (int _3177 = _10188; _3177 < _10189; ++_3177)
              {
                {
                  -- _3172;
                  _3176 += _ptr__3173[safe_add( _3171,_3172 )];
                }
              }
              _ptr__3173[safe_add( _3171,_3172 )] = _3176;
              ++ _3172;
            }
          }
          {}
        }
      }
      _ptr__3168[safe_add( _3167,_3174 )] += _ptr__3173[(safe_add( _3171,_3172 ) - (int)1)];
    }
  }
  _3170->clear();
}
void mosek::fusion::ExprCode::eval_add_list  ( std::shared_ptr< monty::ndarray< int,1 > > _3178,    std::shared_ptr< monty::ndarray< int,1 > > _3179,    std::shared_ptr< monty::ndarray< double,1 > > _3180,    std::shared_ptr< monty::ndarray< double,1 > > _3181,    std::shared_ptr< monty::ndarray< double,1 > > _3182,    monty::rc_ptr< ::mosek::fusion::WorkStack > _3183) { mosek::fusion::p_ExprCode::eval_add_list(_3178,_3179,_3180,_3181,_3182,_3183); }void mosek::fusion::p_ExprCode::eval_add_list(std::shared_ptr< monty::ndarray< int,1 > > _3178,std::shared_ptr< monty::ndarray< int,1 > > _3179,std::shared_ptr< monty::ndarray< double,1 > > _3180,std::shared_ptr< monty::ndarray< double,1 > > _3181,std::shared_ptr< monty::ndarray< double,1 > > _3182,monty::rc_ptr< ::mosek::fusion::WorkStack > _3183){
  _checked_ptr_1<int> _ptr__3178(_3178 ? _3178->raw() : nullptr, _3178 ? _3178->size(0) : 0);
  _checked_ptr_1<int> _ptr__3179(_3179 ? _3179->raw() : nullptr, _3179 ? _3179->size(0) : 0);
  _checked_ptr_1<double> _ptr__3180(_3180 ? _3180->raw() : nullptr, _3180 ? _3180->size(0) : 0);
  _checked_ptr_1<double> _ptr__3181(_3181 ? _3181->raw() : nullptr, _3181 ? _3181->size(0) : 0);
  _checked_ptr_1<double> _ptr__3182(_3182 ? _3182->raw() : nullptr, _3182 ? _3182->size(0) : 0);
  ::mosek::fusion::p_ExprCode::eval_add_list(_3178,_3179,_3180,(int)0,_3181,_3182,_3183);
}
int mosek::fusion::ExprCode::emit_sum  ( std::shared_ptr< monty::ndarray< int,1 > > _3184,    int _3185,    int _3186) { return mosek::fusion::p_ExprCode::emit_sum(_3184,_3185,_3186); }int mosek::fusion::p_ExprCode::emit_sum(std::shared_ptr< monty::ndarray< int,1 > > _3184,int _3185,int _3186){
  _checked_ptr_1<int> _ptr__3184(_3184 ? _3184->raw() : nullptr, _3184 ? _3184->size(0) : 0);
  _ptr__3184[_3185] = 8;
  _ptr__3184[safe_add( _3185,(int)1 )] = _3186;
  return (int)2;
}
int mosek::fusion::ExprCode::emit_inv  ( std::shared_ptr< monty::ndarray< int,1 > > _3187,    int _3188) { return mosek::fusion::p_ExprCode::emit_inv(_3187,_3188); }int mosek::fusion::p_ExprCode::emit_inv(std::shared_ptr< monty::ndarray< int,1 > > _3187,int _3188){
  _checked_ptr_1<int> _ptr__3187(_3187 ? _3187->raw() : nullptr, _3187 ? _3187->size(0) : 0);
  _ptr__3187[_3188] = 6;
  _ptr__3187[safe_add( _3188,(int)1 )] = (int)0;
  return (int)2;
}
int mosek::fusion::ExprCode::emit_mul  ( std::shared_ptr< monty::ndarray< int,1 > > _3189,    int _3190) { return mosek::fusion::p_ExprCode::emit_mul(_3189,_3190); }int mosek::fusion::p_ExprCode::emit_mul(std::shared_ptr< monty::ndarray< int,1 > > _3189,int _3190){
  _checked_ptr_1<int> _ptr__3189(_3189 ? _3189->raw() : nullptr, _3189 ? _3189->size(0) : 0);
  _ptr__3189[_3190] = 5;
  _ptr__3189[safe_add( _3190,(int)1 )] = (int)0;
  return (int)2;
}
int mosek::fusion::ExprCode::emit_neg  ( std::shared_ptr< monty::ndarray< int,1 > > _3191,    int _3192) { return mosek::fusion::p_ExprCode::emit_neg(_3191,_3192); }int mosek::fusion::p_ExprCode::emit_neg(std::shared_ptr< monty::ndarray< int,1 > > _3191,int _3192){
  _checked_ptr_1<int> _ptr__3191(_3191 ? _3191->raw() : nullptr, _3191 ? _3191->size(0) : 0);
  _ptr__3191[_3192] = 4;
  _ptr__3191[safe_add( _3192,(int)1 )] = (int)0;
  return (int)2;
}
int mosek::fusion::ExprCode::emit_add  ( std::shared_ptr< monty::ndarray< int,1 > > _3193,    int _3194) { return mosek::fusion::p_ExprCode::emit_add(_3193,_3194); }int mosek::fusion::p_ExprCode::emit_add(std::shared_ptr< monty::ndarray< int,1 > > _3193,int _3194){
  _checked_ptr_1<int> _ptr__3193(_3193 ? _3193->raw() : nullptr, _3193 ? _3193->size(0) : 0);
  _ptr__3193[_3194] = 3;
  _ptr__3193[safe_add( _3194,(int)1 )] = (int)0;
  return (int)2;
}
int mosek::fusion::ExprCode::emit_constref  ( std::shared_ptr< monty::ndarray< int,1 > > _3195,    int _3196,    int _3197) { return mosek::fusion::p_ExprCode::emit_constref(_3195,_3196,_3197); }int mosek::fusion::p_ExprCode::emit_constref(std::shared_ptr< monty::ndarray< int,1 > > _3195,int _3196,int _3197){
  _checked_ptr_1<int> _ptr__3195(_3195 ? _3195->raw() : nullptr, _3195 ? _3195->size(0) : 0);
  _ptr__3195[_3196] = 2;
  _ptr__3195[safe_add( _3196,(int)1 )] = _3197;
  return (int)2;
}
int mosek::fusion::ExprCode::emit_paramref  ( std::shared_ptr< monty::ndarray< int,1 > > _3198,    int _3199,    int _3200) { return mosek::fusion::p_ExprCode::emit_paramref(_3198,_3199,_3200); }int mosek::fusion::p_ExprCode::emit_paramref(std::shared_ptr< monty::ndarray< int,1 > > _3198,int _3199,int _3200){
  _checked_ptr_1<int> _ptr__3198(_3198 ? _3198->raw() : nullptr, _3198 ? _3198->size(0) : 0);
  _ptr__3198[_3199] = 1;
  _ptr__3198[safe_add( _3199,(int)1 )] = _3200;
  return (int)2;
}
int mosek::fusion::ExprCode::emit_nop  ( std::shared_ptr< monty::ndarray< int,1 > > _3201,    int _3202) { return mosek::fusion::p_ExprCode::emit_nop(_3201,_3202); }int mosek::fusion::p_ExprCode::emit_nop(std::shared_ptr< monty::ndarray< int,1 > > _3201,int _3202){
  _checked_ptr_1<int> _ptr__3201(_3201 ? _3201->raw() : nullptr, _3201 ? _3201->size(0) : 0);
  _ptr__3201[_3202] = 0;
  _ptr__3201[safe_add( _3202,(int)1 )] = (int)0;
  return (int)2;
}
void mosek::fusion::p_ExprCode::destroy(){}void mosek::fusion::ExprCode::destroy() { mosek::fusion::p_ExprCode::_get_impl(this)->destroy(); }mosek::fusion::ExprParameter::ExprParameter(mosek::fusion::p_ExprParameter *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprParameter()" << this << std::endl; */ }mosek::fusion::ExprParameter::~ExprParameter() {  /* std::cout << "~ExprParameter()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprParameter::p_ExprParameter  (::mosek::fusion::ExprParameter * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprParameter::t mosek::fusion::p_ExprParameter::_new_ExprParameter  (monty::rc_ptr< ::mosek::fusion::Parameter > _3203){ return new mosek::fusion::ExprParameter(_3203); }mosek::fusion::ExprParameter::ExprParameter  (monty::rc_ptr< ::mosek::fusion::Parameter > _3203) :    ExprParameter(new mosek::fusion::p_ExprParameter(this)){ mosek::fusion::p_ExprParameter::_get_impl(this)->_initialize(_3203); }void mosek::fusion::p_ExprParameter::_initialize  (monty::rc_ptr< ::mosek::fusion::Parameter > _3203){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_3203->getShape());
    mosek::fusion::p_ExprParameter::_get_impl(::mosek::fusion::ExprParameter::t(_pubthis))->p = _3203;
  }
}void mosek::fusion::ExprParameter :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3204,monty::rc_ptr< ::mosek::fusion::WorkStack > _3205,monty::rc_ptr< ::mosek::fusion::WorkStack > _3206) { mosek::fusion::p_ExprParameter::_get_impl(this)->eval(_3204,_3205,_3206); }void mosek::fusion::p_ExprParameter::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3204,monty::rc_ptr< ::mosek::fusion::WorkStack > _3205,monty::rc_ptr< ::mosek::fusion::WorkStack > _3206){
  p->eval(_3204,_3205,_3206);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ExprParameter :: __mosek_2fusion_2ExprParameter__slice(std::shared_ptr< monty::ndarray< int,1 > > _3207,std::shared_ptr< monty::ndarray< int,1 > > _3208) { return mosek::fusion::p_ExprParameter::_get_impl(this)->__mosek_2fusion_2ExprParameter__slice(_3207,_3208); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ExprParameter::slice(std::shared_ptr< monty::ndarray< int,1 > > _3207,std::shared_ptr< monty::ndarray< int,1 > > _3208) { return __mosek_2fusion_2ExprParameter__slice(_3207,_3208); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ExprParameter::__mosek_2fusion_2BaseExpression__slice(std::shared_ptr< monty::ndarray< int,1 > > _3207,std::shared_ptr< monty::ndarray< int,1 > > _3208) { return __mosek_2fusion_2ExprParameter__slice(_3207,_3208); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_ExprParameter::__mosek_2fusion_2ExprParameter__slice(std::shared_ptr< monty::ndarray< int,1 > > _3207,std::shared_ptr< monty::ndarray< int,1 > > _3208){
  _checked_ptr_1<int> _ptr__3207(_3207 ? _3207->raw() : nullptr, _3207 ? _3207->size(0) : 0);
  _checked_ptr_1<int> _ptr__3208(_3208 ? _3208->raw() : nullptr, _3208 ? _3208->size(0) : 0);
  return (::mosek::fusion::p_ExprParameter::_new_ExprParameter(p->__mosek_2fusion_2Parameter__slice(_3207,_3208))).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ExprParameter :: __mosek_2fusion_2ExprParameter__slice(int _3209,int _3210) { return mosek::fusion::p_ExprParameter::_get_impl(this)->__mosek_2fusion_2ExprParameter__slice(_3209,_3210); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ExprParameter::slice(int _3209,int _3210) { return __mosek_2fusion_2ExprParameter__slice(_3209,_3210); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ExprParameter::__mosek_2fusion_2BaseExpression__slice(int _3209,int _3210) { return __mosek_2fusion_2ExprParameter__slice(_3209,_3210); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_ExprParameter::__mosek_2fusion_2ExprParameter__slice(int _3209,int _3210){
  return (::mosek::fusion::p_ExprParameter::_new_ExprParameter(p->__mosek_2fusion_2Parameter__slice(_3209,_3210))).as<::mosek::fusion::Expression>();
}
std::string mosek::fusion::ExprParameter :: toString() { return mosek::fusion::p_ExprParameter::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprParameter::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprParameter("))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprParameter::destroy(){p.reset();}void mosek::fusion::ExprParameter::destroy() { mosek::fusion::p_ExprParameter::_get_impl(this)->destroy(); }mosek::fusion::Param::Param(mosek::fusion::p_Param *_impl) : _impl(_impl) { /*std::cout << "Param() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Param::~Param() { delete _impl; _impl = nullptr; }mosek::fusion::p_Param::p_Param  (::mosek::fusion::Param * _pubthis) :     _pubthis(_pubthis){}monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::repeat  ( monty::rc_ptr< ::mosek::fusion::Parameter > _3211,    int _3212,    int _3213) { return mosek::fusion::p_Param::repeat(_3211,_3212,_3213); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::repeat(monty::rc_ptr< ::mosek::fusion::Parameter > _3211,int _3212,int _3213){
  std::vector<monty::rc_ptr< ::mosek::fusion::Parameter >> _10190;
  for (int _3214 = (int)0, _10191 = _3212; _3214 < _10191 ; ++_3214)
  {
    _10190.push_back(_3211);
  }
  auto _10192 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >(monty::shape(_10190.size()),_10190.begin(),_10190.end()));
  return ::mosek::fusion::p_Param::stack(_3213,_10192);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::stack  ( int _3215,    monty::rc_ptr< ::mosek::fusion::Parameter > _3216,    monty::rc_ptr< ::mosek::fusion::Parameter > _3217,    monty::rc_ptr< ::mosek::fusion::Parameter > _3218) { return mosek::fusion::p_Param::stack(_3215,_3216,_3217,_3218); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::stack(int _3215,monty::rc_ptr< ::mosek::fusion::Parameter > _3216,monty::rc_ptr< ::mosek::fusion::Parameter > _3217,monty::rc_ptr< ::mosek::fusion::Parameter > _3218){
  return ::mosek::fusion::p_Param::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >{::monty::rc_ptr<::mosek::fusion::Parameter>(_3216.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3217.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3218.get())}),_3215);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::stack  ( int _3219,    monty::rc_ptr< ::mosek::fusion::Parameter > _3220,    monty::rc_ptr< ::mosek::fusion::Parameter > _3221) { return mosek::fusion::p_Param::stack(_3219,_3220,_3221); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::stack(int _3219,monty::rc_ptr< ::mosek::fusion::Parameter > _3220,monty::rc_ptr< ::mosek::fusion::Parameter > _3221){
  return ::mosek::fusion::p_Param::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >{::monty::rc_ptr<::mosek::fusion::Parameter>(_3220.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3221.get())}),_3219);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::stack  ( int _3222,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _3223) { return mosek::fusion::p_Param::stack(_3222,_3223); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::stack(int _3222,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _3223){
  return ::mosek::fusion::p_Param::dstack(_3223,_3222);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::stack  ( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >,1 > > _3224) { return mosek::fusion::p_Param::stack(_3224); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::stack(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >,1 > > _3224){
  std::vector<monty::rc_ptr< ::mosek::fusion::Parameter >> _10193;
  for (int _3225 = (int)0, _10194 = (int)((_3224)->size(0)); _3225 < _10194 ; ++_3225)
  {
    _10193.push_back(::mosek::fusion::p_Param::hstack(((*_3224)(_3225))));
  }
  auto _10195 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >(monty::shape(_10193.size()),_10193.begin(),_10193.end()));
  return ::mosek::fusion::p_Param::vstack(_10195);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::hstack  ( monty::rc_ptr< ::mosek::fusion::Parameter > _3226,    monty::rc_ptr< ::mosek::fusion::Parameter > _3227,    monty::rc_ptr< ::mosek::fusion::Parameter > _3228) { return mosek::fusion::p_Param::hstack(_3226,_3227,_3228); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::hstack(monty::rc_ptr< ::mosek::fusion::Parameter > _3226,monty::rc_ptr< ::mosek::fusion::Parameter > _3227,monty::rc_ptr< ::mosek::fusion::Parameter > _3228){
  return ::mosek::fusion::p_Param::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >{::monty::rc_ptr<::mosek::fusion::Parameter>(_3226.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3227.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3228.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::hstack  ( monty::rc_ptr< ::mosek::fusion::Parameter > _3229,    monty::rc_ptr< ::mosek::fusion::Parameter > _3230) { return mosek::fusion::p_Param::hstack(_3229,_3230); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::hstack(monty::rc_ptr< ::mosek::fusion::Parameter > _3229,monty::rc_ptr< ::mosek::fusion::Parameter > _3230){
  return ::mosek::fusion::p_Param::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >{::monty::rc_ptr<::mosek::fusion::Parameter>(_3229.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3230.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::hstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _3231) { return mosek::fusion::p_Param::hstack(_3231); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::hstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _3231){
  return ::mosek::fusion::p_Param::dstack(_3231,(int)1);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::vstack  ( monty::rc_ptr< ::mosek::fusion::Parameter > _3232,    monty::rc_ptr< ::mosek::fusion::Parameter > _3233,    monty::rc_ptr< ::mosek::fusion::Parameter > _3234) { return mosek::fusion::p_Param::vstack(_3232,_3233,_3234); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::vstack(monty::rc_ptr< ::mosek::fusion::Parameter > _3232,monty::rc_ptr< ::mosek::fusion::Parameter > _3233,monty::rc_ptr< ::mosek::fusion::Parameter > _3234){
  return ::mosek::fusion::p_Param::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >{::monty::rc_ptr<::mosek::fusion::Parameter>(_3232.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3233.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3234.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::vstack  ( monty::rc_ptr< ::mosek::fusion::Parameter > _3235,    monty::rc_ptr< ::mosek::fusion::Parameter > _3236) { return mosek::fusion::p_Param::vstack(_3235,_3236); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::vstack(monty::rc_ptr< ::mosek::fusion::Parameter > _3235,monty::rc_ptr< ::mosek::fusion::Parameter > _3236){
  return ::mosek::fusion::p_Param::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >{::monty::rc_ptr<::mosek::fusion::Parameter>(_3235.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3236.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::vstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _3237) { return mosek::fusion::p_Param::vstack(_3237); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::vstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _3237){
  return ::mosek::fusion::p_Param::dstack(_3237,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _3238,int _3239){
  if ((_3239 < (int)0))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid stacking dimension"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _3240 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_3238)->size(0)))));
  _checked_ptr_1<int> _ptr__3240(_3240 ? _3240->raw() : nullptr,_3240 ? _3240->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3241 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_3238)->size(0)))));
  _checked_ptr_1<long long> _ptr__3241(_3241 ? _3241->raw() : nullptr,_3241 ? _3241->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3242;
  _checked_ptr_1<int> _ptr__3242(_3242 ? _3242->raw() : nullptr,_3242 ? _3242->size(0) : 0);
  int _3243 = ((*_3238)((int)0))->getND();
  int _10196 = (int)1;
  int _10197 = (int)((_3238)->size(0));
  for (int _3244 = _10196; _3244 < _10197; ++_3244)
  {
    {
      if ((_3243 < ((*_3238)(_3244))->getND()))
      {
        {
          _3243 = ((*_3238)(_3244))->getND();
        }
      }
      {}
    }
  }
  if ((_3239 < _3243))
  {
    {
      int _3245 = (int)0;
      while ( ((_3245 < (int)((_3238)->size(0))) && (_3243 != ((*_3238)(_3245))->getND())) )
      {
        {
          ++ _3245;
        }
      }
      _3242 = ((*_3238)(_3245))->getShape();
      _ptr__3242.update(_3242 ? _3242->raw() : nullptr, _3242 ? _3242->size(0) : 0);
      {
        int _3246 = (int)0;
        while ( ((_3246 < (int)((_3238)->size(0))) && (_3243 != ((*_3238)(_3246))->getND())) )
        {
          {
            ++ _3246;
          }
        }
        _3242 = ((*_3238)(_3246))->getShape();
        _ptr__3242.update(_3242 ? _3242->raw() : nullptr, _3242 ? _3242->size(0) : 0);
      }
    }
  }
  else
  {
    {
      std::vector<int> _10198;
      for (int _3247 = (int)0, _10199 = safe_add( _3239,(int)1 ); _3247 < _10199 ; ++_3247)
      {
        _10198.push_back((int)1);
      }
      auto _10200 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10198.size()),_10198.begin(),_10198.end()));
      _3242 = _10200;
      _ptr__3242.update(_3242 ? _3242->raw() : nullptr, _3242 ? _3242->size(0) : 0);
      {
        int _3248 = (int)0;
        while ( ((_3248 < (int)((_3238)->size(0))) && (_3243 != ((*_3238)(_3248))->getND())) )
        {
          {
            ++ _3248;
          }
        }
        int _3249 = ((*_3238)(_3248))->getND();
        std::shared_ptr< monty::ndarray< int,1 > > _3250 = ((*_3238)(_3248))->getShape();
        _checked_ptr_1<int> _ptr__3250(_3250 ? _3250->raw() : nullptr,_3250 ? _3250->size(0) : 0);
        int _10201 = (int)0;
        int _10202 = _3249;
        for (int _3251 = _10201; _3251 < _10202; ++_3251)
        {
          {
            _ptr__3242[_3251] = _ptr__3250[_3251];
          }
        }
      }
    }
  }
  _3243 = (int)((_3242)->size(0));
  int _3252 = (int)0;
  {
    bool _3253 = false;
    int _10203 = (int)0;
    int _10204 = (int)((_3238)->size(0));
    for (int _3254 = _10203; _3254 < _10204; ++_3254)
    {
      {
        std::shared_ptr< monty::ndarray< int,1 > > _3255 = ((*_3238)(_3254))->getShape();
        _checked_ptr_1<int> _ptr__3255(_3255 ? _3255->raw() : nullptr,_3255 ? _3255->size(0) : 0);
        _ptr__3241[_3254] = ::mosek::fusion::p_Set::size(_3255);
        int _10205 = (int)0;
        int _10206 = (int)((_3255)->size(0));
        for (int _3256 = _10205; _3256 < _10206; ++_3256)
        {
          {
            _3253 = (_3253 && ((_3256 == _3239) || (_ptr__3255[_3256] == _ptr__3242[_3256])));
          }
        }
        if ((_3239 < (int)((_3255)->size(0))))
        {
          {
            _ptr__3240[_3254] = _ptr__3255[_3239];
            _3252 += _ptr__3255[_3239];
            int _10207 = (int)((_3255)->size(0));
            int _10208 = _3243;
            for (int _3257 = _10207; _3257 < _10208; ++_3257)
            {
              {
                _3253 = (_3253 && ((_3257 == _3239) || (_ptr__3242[_3257] == (int)1)));
              }
            }
          }
        }
        else
        {
          {
            _3252 += (int)1;
            _ptr__3240[_3254] = (int)1;
          }
        }
      }
    }
    if (_3253)
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions for stacking"));
      }
    }
    {}
  }
  _ptr__3242[_3239] = _3252;
  std::vector<int> _10209;
  for (int _3259 = (int)0, _10210 = (int)((_3238)->size(0)); _3259 < _10210 ; ++_3259)
  {
    _10209.push_back(((*_3238)(_3259))->getNumNonzero());
  }
  auto _10211 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10209.size()),_10209.begin(),_10209.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _3258 = _10211;
  _checked_ptr_1<int> _ptr__3258(_3258 ? _3258->raw() : nullptr,_3258 ? _3258->size(0) : 0);
  int _3260 = (int)0;
  int _10212 = (int)0;
  int _10213 = (int)((_3258)->size(0));
  for (int _3261 = _10212; _3261 < _10213; ++_3261)
  {
    {
      _3260 += _ptr__3258[_3261];
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _3262 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_3260)));
  _checked_ptr_1<long long> _ptr__3262(_3262 ? _3262->raw() : nullptr,_3262 ? _3262->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3263 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3260)));
  _checked_ptr_1<int> _ptr__3263(_3263 ? _3263->raw() : nullptr,_3263 ? _3263->size(0) : 0);
  long long _3264 = (int)1;
  int _10214 = (int)0;
  int _10215 = _3239;
  for (int _3265 = _10214; _3265 < _10215; ++_3265)
  {
    {
      _3264 *= _ptr__3242[_3265];
    }
  }
  long long _3266 = _3252;
  long long _3267 = (int)1;
  int _10216 = safe_add( _3239,(int)1 );
  int _10217 = _3243;
  for (int _3268 = _10216; _3268 < _10217; ++_3268)
  {
    {
      _3267 *= _ptr__3242[_3268];
    }
  }
  {
    int _3269 = (int)0;
    long long _3270 = (int)0;
    int _10218 = (int)0;
    int _10219 = (int)((_3238)->size(0));
    for (int _3271 = _10218; _3271 < _10219; ++_3271)
    {
      {
        int _3272 = ((*_3238)(_3271))->getNumNonzero();
        ((*_3238)(_3271))->getSp(_3262,_3269);
        ((*_3238)(_3271))->getAllIndexes(_3263,_3269);
        if ((_3239 == (int)0))
        {
          {
            int _10220 = _3269;
            int _10221 = safe_add( _3269,_3272 );
            for (int _3273 = _10220; _3273 < _10221; ++_3273)
            {
              {
                _ptr__3262[_3273] += _3270;
              }
            }
            _3270 += _ptr__3241[_3271];
          }
        }
        else
        {
          {
            int _10222 = _3269;
            int _10223 = safe_add( _3269,_3272 );
            for (int _3274 = _10222; _3274 < _10223; ++_3274)
            {
              {
                long long _3275 = (_ptr__3262[_3274] / safe_mul( _ptr__3240[_3271],_3267 ));
                long long _3276 = ((_ptr__3262[_3274] / _3267) % _ptr__3240[_3271]);
                long long _3277 = (_ptr__3262[_3274] % _3267);
                _ptr__3262[_3274] = safe_add( safe_add( safe_mul( _3275,safe_mul( _3252,_3267 ) ),safe_mul( safe_add( _3276,_3270 ),_3267 ) ),_3277 );
              }
            }
            _3270 += _ptr__3240[_3271];
          }
        }
        _3269 += _3272;
      }
    }
  }
  int _3278 = _ptr__3242[(int)0];
  int _10224 = (int)1;
  int _10225 = _3243;
  for (int _3279 = _10224; _3279 < _10225; ++_3279)
  {
    {
      if ((_3278 < _ptr__3242[_3279]))
      {
        {
          _3278 = _ptr__3242[_3279];
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _3280 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _3278,(int)1 ))));
  _checked_ptr_1<int> _ptr__3280(_3280 ? _3280->raw() : nullptr,_3280 ? _3280->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3281 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3260)));
  _checked_ptr_1<int> _ptr__3281(_3281 ? _3281->raw() : nullptr,_3281 ? _3281->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3282 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3260)));
  _checked_ptr_1<int> _ptr__3282(_3282 ? _3282->raw() : nullptr,_3282 ? _3282->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3283 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_3243)));
  _checked_ptr_1<long long> _ptr__3283(_3283 ? _3283->raw() : nullptr,_3283 ? _3283->size(0) : 0);
  _ptr__3283[(_3243 - (int)1)] = (int)1;
  int _10226 = (int)1;
  int _10227 = _3243;
  for (int _3284 = _10226; _3284 < _10227; ++_3284)
  {
    {
      _ptr__3283[((_3243 - _3284) - (int)1)] = safe_mul( _ptr__3283[(_3243 - _3284)],_ptr__3242[(_3243 - _3284)] );
    }
  }
  int _10228 = (int)0;
  int _10229 = _3260;
  for (int _3285 = _10228; _3285 < _10229; ++_3285)
  {
    {
      _ptr__3281[_3285] = _3285;
    }
  }
  int _10230 = (int)0;
  int _10231 = _3243;
  for (int _3286 = _10230; _3286 < _10231; ++_3286)
  {
    {
      int _3287 = ((_3243 - _3286) - (int)1);
      int _10232 = (int)0;
      int _10233 = safe_add( _3278,(int)1 );
      for (int _3288 = _10232; _3288 < _10233; ++_3288)
      {
        {
          _ptr__3280[_3288] = (int)0;
        }
      }
      int _10234 = (int)0;
      int _10235 = _3260;
      for (int _3289 = _10234; _3289 < _10235; ++_3289)
      {
        {
          ++ _ptr__3280[safe_add( (int)1,((_ptr__3262[_3289] / _ptr__3283[_3287]) % _ptr__3242[_3287]) )];
        }
      }
      int _10236 = (int)0;
      int _10237 = _3278;
      for (int _3290 = _10236; _3290 < _10237; ++_3290)
      {
        {
          _ptr__3280[safe_add( _3290,(int)1 )] += _ptr__3280[_3290];
        }
      }
      int _10238 = (int)0;
      int _10239 = _3260;
      for (int _3291 = _10238; _3291 < _10239; ++_3291)
      {
        {
          long long _3292 = ((_ptr__3262[_ptr__3281[_3291]] / _ptr__3283[_3287]) % _ptr__3242[_3287]);
          _ptr__3282[_ptr__3280[_3292]] = _ptr__3281[_3291];
          ++ _ptr__3280[_3292];
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _3293 = _3282;
      _checked_ptr_1<int> _ptr__3293(_3293 ? _3293->raw() : nullptr,_3293 ? _3293->size(0) : 0);
      _3282 = _3281;
      _ptr__3282.update(_3282 ? _3282->raw() : nullptr, _3282 ? _3282->size(0) : 0);
      _3281 = _3293;
      _ptr__3281.update(_3281 ? _3281->raw() : nullptr, _3281 ? _3281->size(0) : 0);
    }
  }
  std::vector<long long> _10240;
  for (int _3295 = (int)0, _10241 = _3260; _3295 < _10241 ; ++_3295)
  {
    _10240.push_back(_ptr__3262[_ptr__3281[_3295]]);
  }
  auto _10242 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_10240.size()),_10240.begin(),_10240.end()));
  std::shared_ptr< monty::ndarray< long long,1 > > _3294 = _10242;
  _checked_ptr_1<long long> _ptr__3294(_3294 ? _3294->raw() : nullptr,_3294 ? _3294->size(0) : 0);
  std::vector<int> _10243;
  for (int _3297 = (int)0, _10244 = _3260; _3297 < _10244 ; ++_3297)
  {
    _10243.push_back(_ptr__3263[_ptr__3281[_3297]]);
  }
  auto _10245 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10243.size()),_10243.begin(),_10243.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _3296 = _10245;
  _checked_ptr_1<int> _ptr__3296(_3296 ? _3296->raw() : nullptr,_3296 ? _3296->size(0) : 0);
  return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(((*_3238)((int)0))->__mosek_2fusion_2Parameter__getModel(),_3242,_3294,_3296)).as<::mosek::fusion::Parameter>();
}
void mosek::fusion::p_Param::destroy(){}void mosek::fusion::Param::destroy() { mosek::fusion::p_Param::_get_impl(this)->destroy(); }mosek::fusion::ExprMulParamScalarExpr::ExprMulParamScalarExpr(mosek::fusion::p_ExprMulParamScalarExpr *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulParamScalarExpr()" << this << std::endl; */ }mosek::fusion::ExprMulParamScalarExpr::~ExprMulParamScalarExpr() {  /* std::cout << "~ExprMulParamScalarExpr()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulParamScalarExpr::p_ExprMulParamScalarExpr  (::mosek::fusion::ExprMulParamScalarExpr * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulParamScalarExpr::t mosek::fusion::p_ExprMulParamScalarExpr::_new_ExprMulParamScalarExpr  (monty::rc_ptr< ::mosek::fusion::Parameter > _3298,    monty::rc_ptr< ::mosek::fusion::Expression > _3299){ return new mosek::fusion::ExprMulParamScalarExpr(_3298,_3299); }mosek::fusion::ExprMulParamScalarExpr::ExprMulParamScalarExpr  (monty::rc_ptr< ::mosek::fusion::Parameter > _3298,    monty::rc_ptr< ::mosek::fusion::Expression > _3299) :    ExprMulParamScalarExpr(new mosek::fusion::p_ExprMulParamScalarExpr(this)){ mosek::fusion::p_ExprMulParamScalarExpr::_get_impl(this)->_initialize(_3298,_3299); }void mosek::fusion::p_ExprMulParamScalarExpr::_initialize  (monty::rc_ptr< ::mosek::fusion::Parameter > _3298,    monty::rc_ptr< ::mosek::fusion::Expression > _3299){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_3298->getShape());
    mosek::fusion::p_ExprMulParamScalarExpr::_get_impl(::mosek::fusion::ExprMulParamScalarExpr::t(_pubthis))->p = _3298;
    mosek::fusion::p_ExprMulParamScalarExpr::_get_impl(::mosek::fusion::ExprMulParamScalarExpr::t(_pubthis))->e = _3299;
    if ((_3299->getND() != (int)0))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
  }
}void mosek::fusion::ExprMulParamScalarExpr :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3300,monty::rc_ptr< ::mosek::fusion::WorkStack > _3301,monty::rc_ptr< ::mosek::fusion::WorkStack > _3302) { mosek::fusion::p_ExprMulParamScalarExpr::_get_impl(this)->eval(_3300,_3301,_3302); }void mosek::fusion::p_ExprMulParamScalarExpr::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3300,monty::rc_ptr< ::mosek::fusion::WorkStack > _3301,monty::rc_ptr< ::mosek::fusion::WorkStack > _3302){
  e->eval(_3301,_3300,_3302);
  _3301->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _3303 = mosek::fusion::p_WorkStack::_get_impl(_3301)->i32;
  _checked_ptr_1<int> _ptr__3303(_3303 ? _3303->raw() : nullptr,_3303 ? _3303->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3304 = mosek::fusion::p_WorkStack::_get_impl(_3301)->i64;
  _checked_ptr_1<long long> _ptr__3304(_3304 ? _3304->raw() : nullptr,_3304 ? _3304->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3305 = mosek::fusion::p_WorkStack::_get_impl(_3301)->f64;
  _checked_ptr_1<double> _ptr__3305(_3305 ? _3305->raw() : nullptr,_3305 ? _3305->size(0) : 0);
  int _3306 = mosek::fusion::p_WorkStack::_get_impl(_3301)->nd;
  if ((_3306 != (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operator shape for multiplication"));
    }
  }
  {}
  int _3307 = mosek::fusion::p_WorkStack::_get_impl(_3301)->nelem;
  int _3308 = mosek::fusion::p_WorkStack::_get_impl(_3301)->nnz;
  bool _3309 = mosek::fusion::p_WorkStack::_get_impl(_3301)->hassp;
  int _3310 = mosek::fusion::p_WorkStack::_get_impl(_3301)->ptr_base;
  int _3311 = mosek::fusion::p_WorkStack::_get_impl(_3301)->ncodeatom;
  int _3312 = mosek::fusion::p_WorkStack::_get_impl(_3301)->sp_base;
  int _3313 = mosek::fusion::p_WorkStack::_get_impl(_3301)->nidxs_base;
  int _3314 = mosek::fusion::p_WorkStack::_get_impl(_3301)->cof_base;
  int _3315 = mosek::fusion::p_WorkStack::_get_impl(_3301)->cconst_base;
  int _3316 = mosek::fusion::p_WorkStack::_get_impl(_3301)->codeptr_base;
  int _3317 = mosek::fusion::p_WorkStack::_get_impl(_3301)->code_base;
  int _3318 = p->getND();
  int _3319 = p->getNumNonzero();
  int _3320 = safe_mul( _3308,p->getNumNonzero() );
  bool _3321 = (p->getNumNonzero() < p->getSize());
  int _10246;
  bool _10247 = (_3311 > (int)0);
  if (_10247)
  {
    _10246 = safe_add( _3311,safe_mul( _3320,(int)4 ) );
  }
  else
  {
    _10246 = safe_mul( _3320,(int)3 );
  }
  int _3322 = _10246;
  int _3323 = _3302->alloci32(p->getNumNonzero());
  std::shared_ptr< monty::ndarray< int,1 > > _3324 = mosek::fusion::p_WorkStack::_get_impl(_3302)->i32;
  _checked_ptr_1<int> _ptr__3324(_3324 ? _3324->raw() : nullptr,_3324 ? _3324->size(0) : 0);
  p->getAllIndexes(_3324,_3323);
  _3300->alloc_expr(_3318,_3319,_3320,_3321,_3322);
  std::shared_ptr< monty::ndarray< long long,1 > > _3325 = mosek::fusion::p_WorkStack::_get_impl(_3300)->i64;
  _checked_ptr_1<long long> _ptr__3325(_3325 ? _3325->raw() : nullptr,_3325 ? _3325->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3326 = mosek::fusion::p_WorkStack::_get_impl(_3300)->f64;
  _checked_ptr_1<double> _ptr__3326(_3326 ? _3326->raw() : nullptr,_3326 ? _3326->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3327 = mosek::fusion::p_WorkStack::_get_impl(_3300)->i32;
  _checked_ptr_1<int> _ptr__3327(_3327 ? _3327->raw() : nullptr,_3327 ? _3327->size(0) : 0);
  int _3328 = mosek::fusion::p_WorkStack::_get_impl(_3300)->ptr_base;
  int _3329 = mosek::fusion::p_WorkStack::_get_impl(_3300)->nidxs_base;
  int _3330 = mosek::fusion::p_WorkStack::_get_impl(_3300)->sp_base;
  int _3331 = mosek::fusion::p_WorkStack::_get_impl(_3300)->cof_base;
  bool _3332 = mosek::fusion::p_WorkStack::_get_impl(_3300)->hassp;
  int _3333 = mosek::fusion::p_WorkStack::_get_impl(_3300)->shape_base;
  int _3334 = mosek::fusion::p_WorkStack::_get_impl(_3300)->codeptr_base;
  int _3335 = mosek::fusion::p_WorkStack::_get_impl(_3300)->code_base;
  int _3336 = mosek::fusion::p_WorkStack::_get_impl(_3300)->cconst_base;
  {
    int _10248 = (int)0;
    int _10249 = _3320;
    for (int _3337 = _10248; _3337 < _10249; ++_3337)
    {
      {
        _ptr__3326[safe_add( _3331,_3337 )] = 0.0;
      }
    }
    int _10250 = (int)0;
    int _10251 = safe_add( _3319,(int)1 );
    for (int _3338 = _10250; _3338 < _10251; ++_3338)
    {
      {
        _ptr__3327[safe_add( _3328,_3338 )] = safe_mul( _3338,_3308 );
      }
    }
    int _10252 = (int)0;
    int _10253 = _3318;
    for (int _3339 = _10252; _3339 < _10253; ++_3339)
    {
      {
        _ptr__3327[safe_add( _3333,_3339 )] = p->getDim(_3339);
      }
    }
    if (_3332)
    {
      {
        p->getSp(_3325,_3330);
      }
    }
    {}
    int _10254 = (int)0;
    int _10255 = _3320;
    for (int _3340 = _10254; _3340 < _10255; ++_3340)
    {
      {
        _ptr__3325[safe_add( _3329,_3340 )] = (-(int)999);
      }
    }
    {
      int _3341 = (int)0;
      int _10256 = (int)0;
      int _10257 = _3319;
      for (int _3342 = _10256; _3342 < _10257; ++_3342)
      {
        {
          int _10258 = (int)0;
          int _10259 = _3308;
          for (int _3343 = _10258; _3343 < _10259; ++_3343)
          {
            {
              _ptr__3325[safe_add( _3329,_3341 )] = _ptr__3304[safe_add( _3313,_3343 )];
              ++ _3341;
            }
          }
        }
      }
    }
    if ((_3322 > (int)0))
    {
      {
        _ptr__3327[_3334] = (int)0;
      }
    }
    {}
    {
      if ((_3311 == (int)0))
      {
        {
          int _3344 = (int)0;
          int _3345 = (int)0;
          int _10260 = (int)0;
          int _10261 = _3319;
          for (int _3346 = _10260; _3346 < _10261; ++_3346)
          {
            {
              int _10262 = (int)0;
              int _10263 = _3308;
              for (int _3347 = _10262; _3347 < _10263; ++_3347)
              {
                {
                  _ptr__3327[safe_add( _3335,_3345 )] = 2;
                  _ptr__3326[safe_add( _3336,_3345 )] = _ptr__3305[safe_add( _3314,_3347 )];
                  ++ _3345;
                  _ptr__3327[safe_add( _3335,_3345 )] = 1;
                  _ptr__3326[safe_add( _3336,_3345 )] = _ptr__3324[safe_add( _3323,_3346 )];
                  ++ _3345;
                  _ptr__3327[safe_add( _3335,_3345 )] = 5;
                  ++ _3345;
                  _ptr__3327[safe_add( safe_add( _3334,_3344 ),(int)1 )] = _3345;
                  ++ _3344;
                }
              }
            }
          }
        }
      }
      else
      {
        {
          int _3348 = (int)0;
          int _3349 = (int)0;
          int _10264 = (int)0;
          int _10265 = _3319;
          for (int _3350 = _10264; _3350 < _10265; ++_3350)
          {
            {
              int _10266 = (int)0;
              int _10267 = _3308;
              for (int _3351 = _10266; _3351 < _10267; ++_3351)
              {
                {
                  _ptr__3327[safe_add( _3335,_3348 )] = 2;
                  _ptr__3326[safe_add( _3336,_3348 )] = _ptr__3305[safe_add( _3314,_3351 )];
                  ++ _3348;
                  int _10268 = _ptr__3303[safe_add( _3316,_3351 )];
                  int _10269 = _ptr__3303[safe_add( safe_add( _3316,_3351 ),(int)1 )];
                  for (int _3352 = _10268; _3352 < _10269; ++_3352)
                  {
                    {
                      _ptr__3327[safe_add( _3335,_3348 )] = _ptr__3303[safe_add( _3317,_3352 )];
                      _ptr__3326[safe_add( _3336,_3348 )] = _ptr__3305[safe_add( _3315,_3352 )];
                      ++ _3348;
                    }
                  }
                  _ptr__3327[safe_add( _3335,_3348 )] = 3;
                  ++ _3348;
                  _ptr__3327[safe_add( _3335,_3348 )] = 1;
                  _ptr__3326[safe_add( _3336,_3348 )] = _ptr__3324[safe_add( _3323,_3350 )];
                  ++ _3348;
                  _ptr__3327[safe_add( _3335,_3348 )] = 5;
                  ++ _3348;
                  _ptr__3327[safe_add( safe_add( _3334,_3349 ),(int)1 )] = _3348;
                  ++ _3349;
                }
              }
            }
          }
        }
      }
    }
  }
  _3302->clear();
}
std::string mosek::fusion::ExprMulParamScalarExpr :: toString() { return mosek::fusion::p_ExprMulParamScalarExpr::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulParamScalarExpr::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulParamScalarExpr("))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulParamScalarExpr::destroy(){e.reset();p.reset();}void mosek::fusion::ExprMulParamScalarExpr::destroy() { mosek::fusion::p_ExprMulParamScalarExpr::_get_impl(this)->destroy(); }mosek::fusion::ExprMulParamScalar::ExprMulParamScalar(mosek::fusion::p_ExprMulParamScalar *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulParamScalar()" << this << std::endl; */ }mosek::fusion::ExprMulParamScalar::~ExprMulParamScalar() {  /* std::cout << "~ExprMulParamScalar()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulParamScalar::p_ExprMulParamScalar  (::mosek::fusion::ExprMulParamScalar * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulParamScalar::t mosek::fusion::p_ExprMulParamScalar::_new_ExprMulParamScalar  (monty::rc_ptr< ::mosek::fusion::Parameter > _3353,    monty::rc_ptr< ::mosek::fusion::Expression > _3354){ return new mosek::fusion::ExprMulParamScalar(_3353,_3354); }mosek::fusion::ExprMulParamScalar::ExprMulParamScalar  (monty::rc_ptr< ::mosek::fusion::Parameter > _3353,    monty::rc_ptr< ::mosek::fusion::Expression > _3354) :    ExprMulParamScalar(new mosek::fusion::p_ExprMulParamScalar(this)){ mosek::fusion::p_ExprMulParamScalar::_get_impl(this)->_initialize(_3353,_3354); }void mosek::fusion::p_ExprMulParamScalar::_initialize  (monty::rc_ptr< ::mosek::fusion::Parameter > _3353,    monty::rc_ptr< ::mosek::fusion::Expression > _3354){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_3354->getShape());
    mosek::fusion::p_ExprMulParamScalar::_get_impl(::mosek::fusion::ExprMulParamScalar::t(_pubthis))->p = _3353;
    mosek::fusion::p_ExprMulParamScalar::_get_impl(::mosek::fusion::ExprMulParamScalar::t(_pubthis))->e = _3354;
    if ((_3353->getND() != (int)0))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
  }
}void mosek::fusion::ExprMulParamScalar :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3355,monty::rc_ptr< ::mosek::fusion::WorkStack > _3356,monty::rc_ptr< ::mosek::fusion::WorkStack > _3357) { mosek::fusion::p_ExprMulParamScalar::_get_impl(this)->eval(_3355,_3356,_3357); }void mosek::fusion::p_ExprMulParamScalar::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3355,monty::rc_ptr< ::mosek::fusion::WorkStack > _3356,monty::rc_ptr< ::mosek::fusion::WorkStack > _3357){
  e->eval(_3356,_3355,_3357);
  _3356->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _3358 = mosek::fusion::p_WorkStack::_get_impl(_3356)->i32;
  _checked_ptr_1<int> _ptr__3358(_3358 ? _3358->raw() : nullptr,_3358 ? _3358->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3359 = mosek::fusion::p_WorkStack::_get_impl(_3356)->i64;
  _checked_ptr_1<long long> _ptr__3359(_3359 ? _3359->raw() : nullptr,_3359 ? _3359->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3360 = mosek::fusion::p_WorkStack::_get_impl(_3356)->f64;
  _checked_ptr_1<double> _ptr__3360(_3360 ? _3360->raw() : nullptr,_3360 ? _3360->size(0) : 0);
  int _3361 = mosek::fusion::p_WorkStack::_get_impl(_3356)->nd;
  int _3362 = mosek::fusion::p_WorkStack::_get_impl(_3356)->nelem;
  int _3363 = mosek::fusion::p_WorkStack::_get_impl(_3356)->nnz;
  bool _3364 = mosek::fusion::p_WorkStack::_get_impl(_3356)->hassp;
  int _3365 = mosek::fusion::p_WorkStack::_get_impl(_3356)->ptr_base;
  int _3366 = mosek::fusion::p_WorkStack::_get_impl(_3356)->ncodeatom;
  int _3367 = mosek::fusion::p_WorkStack::_get_impl(_3356)->shape_base;
  int _3368 = mosek::fusion::p_WorkStack::_get_impl(_3356)->sp_base;
  int _3369 = mosek::fusion::p_WorkStack::_get_impl(_3356)->nidxs_base;
  int _3370 = mosek::fusion::p_WorkStack::_get_impl(_3356)->cof_base;
  int _3371 = mosek::fusion::p_WorkStack::_get_impl(_3356)->cconst_base;
  int _3372 = mosek::fusion::p_WorkStack::_get_impl(_3356)->codeptr_base;
  int _3373 = mosek::fusion::p_WorkStack::_get_impl(_3356)->code_base;
  int _3374 = _3361;
  int _3375 = _3362;
  int _3376 = _3363;
  bool _3377 = (p->getNumNonzero() < p->getSize());
  int _10270;
  bool _10271 = (_3366 == (int)0);
  if (_10271)
  {
    _10270 = safe_mul( _3363,(int)3 );
  }
  else
  {
    _10270 = safe_add( safe_mul( _3363,(int)4 ),_3366 );
  }
  int _3378 = _10270;
  _3355->alloc_expr(_3374,_3375,_3376,_3377,_3378);
  std::shared_ptr< monty::ndarray< long long,1 > > _3379 = mosek::fusion::p_WorkStack::_get_impl(_3355)->i64;
  _checked_ptr_1<long long> _ptr__3379(_3379 ? _3379->raw() : nullptr,_3379 ? _3379->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3380 = mosek::fusion::p_WorkStack::_get_impl(_3355)->f64;
  _checked_ptr_1<double> _ptr__3380(_3380 ? _3380->raw() : nullptr,_3380 ? _3380->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3381 = mosek::fusion::p_WorkStack::_get_impl(_3355)->i32;
  _checked_ptr_1<int> _ptr__3381(_3381 ? _3381->raw() : nullptr,_3381 ? _3381->size(0) : 0);
  int _3382 = mosek::fusion::p_WorkStack::_get_impl(_3355)->ptr_base;
  int _3383 = mosek::fusion::p_WorkStack::_get_impl(_3355)->nidxs_base;
  int _3384 = mosek::fusion::p_WorkStack::_get_impl(_3355)->sp_base;
  int _3385 = mosek::fusion::p_WorkStack::_get_impl(_3355)->cof_base;
  bool _3386 = mosek::fusion::p_WorkStack::_get_impl(_3355)->hassp;
  int _3387 = mosek::fusion::p_WorkStack::_get_impl(_3355)->shape_base;
  int _3388 = mosek::fusion::p_WorkStack::_get_impl(_3355)->codeptr_base;
  int _3389 = mosek::fusion::p_WorkStack::_get_impl(_3355)->code_base;
  int _3390 = mosek::fusion::p_WorkStack::_get_impl(_3355)->cconst_base;
  int _3391 = p->getIndex((int)0);
  {
    int _10272 = (int)0;
    int _10273 = _3376;
    for (int _3392 = _10272; _3392 < _10273; ++_3392)
    {
      {
        _ptr__3380[safe_add( _3385,_3392 )] = 0.0;
      }
    }
    int _10274 = (int)0;
    int _10275 = safe_add( _3375,(int)1 );
    for (int _3393 = _10274; _3393 < _10275; ++_3393)
    {
      {
        _ptr__3381[safe_add( _3382,_3393 )] = _ptr__3358[safe_add( _3365,_3393 )];
      }
    }
    int _10276 = (int)0;
    int _10277 = _3374;
    for (int _3394 = _10276; _3394 < _10277; ++_3394)
    {
      {
        _ptr__3381[safe_add( _3387,_3394 )] = _ptr__3358[safe_add( _3367,_3394 )];
      }
    }
    int _10278 = (int)0;
    int _10279 = _3363;
    for (int _3395 = _10278; _3395 < _10279; ++_3395)
    {
      {
        _ptr__3379[safe_add( _3383,_3395 )] = _ptr__3359[safe_add( _3369,_3395 )];
      }
    }
    if (_3386)
    {
      {
        int _10280 = (int)0;
        int _10281 = _3375;
        for (int _3396 = _10280; _3396 < _10281; ++_3396)
        {
          {
            _ptr__3379[safe_add( _3384,_3396 )] = _ptr__3359[safe_add( _3368,_3396 )];
          }
        }
      }
    }
    {}
    int _3397 = (int)0;
    if ((_3378 > (int)0))
    {
      {
        _ptr__3381[_3388] = (int)0;
      }
    }
    {}
    int _10282 = (int)0;
    int _10283 = _3363;
    for (int _3398 = _10282; _3398 < _10283; ++_3398)
    {
      {
        _ptr__3381[safe_add( _3389,_3397 )] = 2;
        _ptr__3380[safe_add( _3390,_3397 )] = _ptr__3360[safe_add( _3370,_3398 )];
        ++ _3397;
        if ((_3366 > (int)0))
        {
          {
            int _10284 = _ptr__3358[safe_add( _3372,_3398 )];
            int _10285 = _ptr__3358[safe_add( safe_add( _3372,_3398 ),(int)1 )];
            for (int _3399 = _10284; _3399 < _10285; ++_3399)
            {
              {
                _ptr__3381[safe_add( _3389,_3397 )] = _ptr__3358[safe_add( _3373,_3399 )];
                _ptr__3380[safe_add( _3390,_3397 )] = _ptr__3360[safe_add( _3371,_3399 )];
                ++ _3397;
              }
            }
            _ptr__3381[safe_add( _3389,_3397 )] = 3;
            ++ _3397;
          }
        }
        {}
        _ptr__3381[safe_add( _3389,_3397 )] = 1;
        _ptr__3380[safe_add( _3390,_3397 )] = _3391;
        ++ _3397;
        _ptr__3381[safe_add( _3389,_3397 )] = 5;
        ++ _3397;
        _ptr__3381[safe_add( safe_add( _3388,_3398 ),(int)1 )] = _3397;
      }
    }
  }
  _3357->clear();
}
std::string mosek::fusion::ExprMulParamScalar :: toString() { return mosek::fusion::p_ExprMulParamScalar::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulParamScalar::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulParamScalar("))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulParamScalar::destroy(){e.reset();p.reset();}void mosek::fusion::ExprMulParamScalar::destroy() { mosek::fusion::p_ExprMulParamScalar::_get_impl(this)->destroy(); }mosek::fusion::ExprMulParamDiagLeft::ExprMulParamDiagLeft(mosek::fusion::p_ExprMulParamDiagLeft *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulParamDiagLeft()" << this << std::endl; */ }mosek::fusion::ExprMulParamDiagLeft::~ExprMulParamDiagLeft() {  /* std::cout << "~ExprMulParamDiagLeft()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulParamDiagLeft::p_ExprMulParamDiagLeft  (::mosek::fusion::ExprMulParamDiagLeft * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulParamDiagLeft::t mosek::fusion::p_ExprMulParamDiagLeft::_new_ExprMulParamDiagLeft  (monty::rc_ptr< ::mosek::fusion::Parameter > _3400,    monty::rc_ptr< ::mosek::fusion::Expression > _3401){ return new mosek::fusion::ExprMulParamDiagLeft(_3400,_3401); }mosek::fusion::ExprMulParamDiagLeft::ExprMulParamDiagLeft  (monty::rc_ptr< ::mosek::fusion::Parameter > _3400,    monty::rc_ptr< ::mosek::fusion::Expression > _3401) :    ExprMulParamDiagLeft(new mosek::fusion::p_ExprMulParamDiagLeft(this)){ mosek::fusion::p_ExprMulParamDiagLeft::_get_impl(this)->_initialize(_3400,_3401); }void mosek::fusion::p_ExprMulParamDiagLeft::_initialize  (monty::rc_ptr< ::mosek::fusion::Parameter > _3400,    monty::rc_ptr< ::mosek::fusion::Expression > _3401){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3401->getDim((int)1))}));
    mosek::fusion::p_ExprMulParamDiagLeft::_get_impl(::mosek::fusion::ExprMulParamDiagLeft::t(_pubthis))->p = _3400;
    mosek::fusion::p_ExprMulParamDiagLeft::_get_impl(::mosek::fusion::ExprMulParamDiagLeft::t(_pubthis))->e = _3401;
    if (((_3400->getND() != (int)2) || (_3401->getND() != (int)2)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
    if (((_3400->getDim((int)1) != _3401->getDim((int)0)) || (_3400->getDim((int)0) != _3401->getDim((int)1))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
  }
}void mosek::fusion::ExprMulParamDiagLeft :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3402,monty::rc_ptr< ::mosek::fusion::WorkStack > _3403,monty::rc_ptr< ::mosek::fusion::WorkStack > _3404) { mosek::fusion::p_ExprMulParamDiagLeft::_get_impl(this)->eval(_3402,_3403,_3404); }void mosek::fusion::p_ExprMulParamDiagLeft::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3402,monty::rc_ptr< ::mosek::fusion::WorkStack > _3403,monty::rc_ptr< ::mosek::fusion::WorkStack > _3404){
  e->eval(_3403,_3402,_3404);
  _3403->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _3405 = mosek::fusion::p_WorkStack::_get_impl(_3403)->i32;
  _checked_ptr_1<int> _ptr__3405(_3405 ? _3405->raw() : nullptr,_3405 ? _3405->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3406 = mosek::fusion::p_WorkStack::_get_impl(_3403)->i64;
  _checked_ptr_1<long long> _ptr__3406(_3406 ? _3406->raw() : nullptr,_3406 ? _3406->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3407 = mosek::fusion::p_WorkStack::_get_impl(_3403)->f64;
  _checked_ptr_1<double> _ptr__3407(_3407 ? _3407->raw() : nullptr,_3407 ? _3407->size(0) : 0);
  int _3408 = mosek::fusion::p_WorkStack::_get_impl(_3403)->nd;
  int _3409 = mosek::fusion::p_WorkStack::_get_impl(_3403)->nelem;
  int _3410 = mosek::fusion::p_WorkStack::_get_impl(_3403)->nnz;
  bool _3411 = mosek::fusion::p_WorkStack::_get_impl(_3403)->hassp;
  int _3412 = mosek::fusion::p_WorkStack::_get_impl(_3403)->ptr_base;
  int _3413 = mosek::fusion::p_WorkStack::_get_impl(_3403)->ncodeatom;
  int _3414 = mosek::fusion::p_WorkStack::_get_impl(_3403)->shape_base;
  int _3415 = mosek::fusion::p_WorkStack::_get_impl(_3403)->sp_base;
  int _3416 = mosek::fusion::p_WorkStack::_get_impl(_3403)->nidxs_base;
  int _3417 = mosek::fusion::p_WorkStack::_get_impl(_3403)->cof_base;
  int _3418 = mosek::fusion::p_WorkStack::_get_impl(_3403)->cconst_base;
  int _3419 = mosek::fusion::p_WorkStack::_get_impl(_3403)->codeptr_base;
  int _3420 = mosek::fusion::p_WorkStack::_get_impl(_3403)->code_base;
  if (((_3408 != (int)2) || ((_ptr__3405[_3414] != p->getDim((int)1)) || (_ptr__3405[safe_add( _3414,(int)1 )] != p->getDim((int)0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
    }
  }
  {}
  int _3421 = p->getNumNonzero();
  int _3422 = _3404->alloci64(_3421);
  std::shared_ptr< monty::ndarray< long long,1 > > _3423 = mosek::fusion::p_WorkStack::_get_impl(_3404)->i64;
  _checked_ptr_1<long long> _ptr__3423(_3423 ? _3423->raw() : nullptr,_3423 ? _3423->size(0) : 0);
  p->getSp(_3423,_3422);
  int _3424 = p->getDim((int)0);
  int _3425 = p->getDim((int)1);
  int _3426 = _ptr__3405[_3414];
  int _3427 = _ptr__3405[safe_add( _3414,(int)1 )];
  int _3428 = _3404->alloci32(p->getNumNonzero());
  std::shared_ptr< monty::ndarray< int,1 > > _3429 = mosek::fusion::p_WorkStack::_get_impl(_3404)->i32;
  _checked_ptr_1<int> _ptr__3429(_3429 ? _3429->raw() : nullptr,_3429 ? _3429->size(0) : 0);
  p->getAllIndexes(_3429,_3428);
  if (_3411)
  {
    {
      int _3430 = _3404->alloci32(_3409);
      int _3431 = _3404->alloci32(safe_add( _3427,(int)1 ));
      std::shared_ptr< monty::ndarray< int,1 > > _3432 = mosek::fusion::p_WorkStack::_get_impl(_3404)->i32;
      _checked_ptr_1<int> _ptr__3432(_3432 ? _3432->raw() : nullptr,_3432 ? _3432->size(0) : 0);
      int _10286 = (int)0;
      int _10287 = safe_add( _3427,(int)1 );
      for (int _3433 = _10286; _3433 < _10287; ++_3433)
      {
        {
          _ptr__3432[safe_add( _3431,_3433 )] = (int)0;
        }
      }
      int _10288 = (int)0;
      int _10289 = _3409;
      for (int _3434 = _10288; _3434 < _10289; ++_3434)
      {
        {
          ++ _ptr__3432[safe_add( safe_add( _3431,(_ptr__3406[safe_add( _3415,_3434 )] % _3427) ),(int)1 )];
        }
      }
      int _10290 = (int)0;
      int _10291 = _3427;
      for (int _3435 = _10290; _3435 < _10291; ++_3435)
      {
        {
          _ptr__3432[safe_add( safe_add( _3431,_3435 ),(int)1 )] += _ptr__3432[safe_add( _3431,_3435 )];
        }
      }
      int _10292 = (int)0;
      int _10293 = _3409;
      for (int _3436 = _10292; _3436 < _10293; ++_3436)
      {
        {
          long long _3437 = (_ptr__3406[safe_add( _3415,_3436 )] % _3427);
          _ptr__3432[safe_add( _3430,_ptr__3432[safe_add( _3431,_3437 )] )] = _3436;
          ++ _ptr__3432[safe_add( _3431,_3437 )];
        }
      }
      int _3438 = (int)0;
      int _3439 = (int)0;
      int _3440 = (int)0;
      {
        int _3441 = (int)0;
        int _3442 = (int)0;
        while ( ((_3442 < _3421) && (_3441 < _3409)) )
        {
          {
            int _3443 = _ptr__3432[safe_add( _3430,_3441 )];
            long long _3444 = (_ptr__3423[safe_add( _3422,_3442 )] / _3425);
            long long _3445 = (_ptr__3406[safe_add( _3415,_3443 )] % _3427);
            if ((_3444 < _3445))
            {
              {
                while ( ((_3442 < _3421) && (_ptr__3423[safe_add( _3422,_3442 )] < safe_mul( safe_add( _3444,(int)1 ),_3425 ))) )
                {
                  {
                    ++ _3442;
                  }
                }
              }
            }
            else if((_3445 < _3444))
            {
              {
                while ( ((_3441 < _3421) && ((_ptr__3406[safe_add( _3415,_ptr__3432[safe_add( _3430,_3441 )] )] % _3427) == _3445)) )
                {
                  {
                    ++ _3441;
                  }
                }
              }
            }
            else
            {
              {
                int _3446 = _3441;
                int _3447 = _3442;
                while ( ((_3442 < _3421) && (_ptr__3423[safe_add( _3422,_3442 )] < safe_mul( safe_add( _3444,(int)1 ),_3425 ))) )
                {
                  {
                    ++ _3442;
                  }
                }
                while ( ((_3441 < _3421) && ((_ptr__3406[safe_add( _3415,_ptr__3432[safe_add( _3430,_3441 )] )] % _3427) == _3445)) )
                {
                  {
                    ++ _3441;
                  }
                }
                bool _3448 = false;
                while ( ((_3447 < _3442) && (_3446 < _3441)) )
                {
                  {
                    long long _3449 = (_ptr__3423[safe_add( _3422,_3447 )] % _3425);
                    int _3450 = _ptr__3432[safe_add( _3430,_3446 )];
                    long long _3451 = (_ptr__3406[safe_add( _3415,_3450 )] / _3427);
                    if ((_3449 < _3451))
                    {
                      {
                        ++ _3447;
                      }
                    }
                    else if((_3449 > _3451))
                    {
                      {
                        ++ _3446;
                      }
                    }
                    else
                    {
                      {
                        _3439 += (_ptr__3405[safe_add( safe_add( _3412,_3450 ),(int)1 )] - _ptr__3405[safe_add( _3412,_3450 )]);
                        _3448 = true;
                        int _3452 = (_ptr__3405[safe_add( safe_add( _3412,_3450 ),(int)1 )] - _ptr__3405[safe_add( _3412,_3450 )]);
                        int _10294;
                        bool _10295 = (_3413 > (int)0);
                        if (_10295)
                        {
                          _10294 = safe_add( (_ptr__3405[safe_add( _3419,_ptr__3405[safe_add( safe_add( _3412,_3450 ),(int)1 )] )] - _ptr__3405[safe_add( _3419,_ptr__3405[safe_add( _3412,_3450 )] )]),safe_mul( (int)4,_3452 ) );
                        }
                        else
                        {
                          _10294 = safe_mul( (int)3,_3452 );
                        }
                        _3440 += _10294;
                        ++ _3447;
                        ++ _3446;
                      }
                    }
                  }
                }
                if (_3448)
                {
                  {
                    ++ _3438;
                  }
                }
                {}
              }
            }
          }
        }
      }
      int _3453 = (int)1;
      bool _3454 = (_3438 < _3424);
      _3402->alloc_expr(_3453,_3438,_3439,_3454,_3440);
      int _3455 = mosek::fusion::p_WorkStack::_get_impl(_3402)->ptr_base;
      int _3456 = mosek::fusion::p_WorkStack::_get_impl(_3402)->nidxs_base;
      int _10296;
      bool _10297 = _3454;
      if (_10297)
      {
        _10296 = mosek::fusion::p_WorkStack::_get_impl(_3402)->sp_base;
      }
      else
      {
        _10296 = _3402->alloci64(_3438);
      }
      int _3457 = _10296;
      int _3458 = mosek::fusion::p_WorkStack::_get_impl(_3402)->cof_base;
      bool _3459 = mosek::fusion::p_WorkStack::_get_impl(_3402)->hassp;
      int _3460 = mosek::fusion::p_WorkStack::_get_impl(_3402)->shape_base;
      int _3461 = mosek::fusion::p_WorkStack::_get_impl(_3402)->codeptr_base;
      int _3462 = mosek::fusion::p_WorkStack::_get_impl(_3402)->code_base;
      int _3463 = mosek::fusion::p_WorkStack::_get_impl(_3402)->cconst_base;
      std::shared_ptr< monty::ndarray< long long,1 > > _3464 = mosek::fusion::p_WorkStack::_get_impl(_3402)->i64;
      _checked_ptr_1<long long> _ptr__3464(_3464 ? _3464->raw() : nullptr,_3464 ? _3464->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3465 = mosek::fusion::p_WorkStack::_get_impl(_3402)->f64;
      _checked_ptr_1<double> _ptr__3465(_3465 ? _3465->raw() : nullptr,_3465 ? _3465->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _3466 = mosek::fusion::p_WorkStack::_get_impl(_3402)->i32;
      _checked_ptr_1<int> _ptr__3466(_3466 ? _3466->raw() : nullptr,_3466 ? _3466->size(0) : 0);
      if ((_3438 > (int)0))
      {
        {
          _ptr__3466[_3455] = (int)0;
          if ((_3439 > (int)0))
          {
            {
              _ptr__3466[_3461] = (int)0;
            }
          }
          {}
          _ptr__3466[_3460] = (int)_3424;
          int _3467 = (int)0;
          int _3468 = (int)0;
          int _3469 = (int)0;
          int _3470 = (int)0;
          int _3471 = (int)0;
          while ( ((_3471 < _3421) && (_3470 < _3409)) )
          {
            {
              int _3472 = _ptr__3432[safe_add( _3430,_3470 )];
              long long _3473 = (_ptr__3423[safe_add( _3422,_3471 )] / _3425);
              long long _3474 = (_ptr__3406[safe_add( _3415,_3472 )] % _3427);
              if ((_3473 < _3474))
              {
                {
                  while ( ((_3471 < _3421) && (_ptr__3423[safe_add( _3422,_3471 )] < safe_mul( safe_add( _3473,(int)1 ),_3425 ))) )
                  {
                    {
                      ++ _3471;
                    }
                  }
                }
              }
              else if((_3474 < _3473))
              {
                {
                  while ( ((_3470 < _3421) && ((_ptr__3406[safe_add( _3415,_ptr__3432[safe_add( _3430,_3470 )] )] % _3427) == _3474)) )
                  {
                    {
                      ++ _3470;
                    }
                  }
                }
              }
              else
              {
                {
                  int _3475 = _3470;
                  int _3476 = _3471;
                  while ( ((_3471 < _3421) && (_ptr__3423[safe_add( _3422,_3471 )] < safe_mul( safe_add( _3473,(int)1 ),_3425 ))) )
                  {
                    {
                      ++ _3471;
                    }
                  }
                  while ( ((_3470 < _3421) && ((_ptr__3406[safe_add( _3415,_ptr__3432[safe_add( _3430,_3470 )] )] % _3427) == _3474)) )
                  {
                    {
                      ++ _3470;
                    }
                  }
                  int _3477 = (int)0;
                  while ( ((_3476 < _3471) && (_3475 < _3470)) )
                  {
                    {
                      long long _3478 = (_ptr__3423[safe_add( _3422,_3476 )] % _3425);
                      int _3479 = _ptr__3432[safe_add( _3430,_3475 )];
                      long long _3480 = (_ptr__3406[safe_add( _3415,_3479 )] / _3427);
                      if ((_3478 < _3480))
                      {
                        {
                          ++ _3476;
                        }
                      }
                      else if((_3478 > _3480))
                      {
                        {
                          ++ _3475;
                        }
                      }
                      else
                      {
                        {
                          int _10298 = _ptr__3405[safe_add( _3412,_3479 )];
                          int _10299 = _ptr__3405[safe_add( safe_add( _3412,_3479 ),(int)1 )];
                          for (int _3481 = _10298; _3481 < _10299; ++_3481)
                          {
                            {
                              _ptr__3465[safe_add( _3458,_3469 )] = 0.0;
                              _ptr__3464[safe_add( _3456,_3469 )] = _ptr__3406[safe_add( _3416,_3481 )];
                              _ptr__3466[safe_add( _3462,_3467 )] = 2;
                              _ptr__3465[safe_add( _3463,_3467 )] = _ptr__3407[safe_add( _3417,_3481 )];
                              ++ _3467;
                              if ((_3413 > (int)0))
                              {
                                {
                                  int _10300 = _ptr__3405[safe_add( _3419,_3481 )];
                                  int _10301 = _ptr__3405[safe_add( safe_add( _3419,_3481 ),(int)1 )];
                                  for (int _3482 = _10300; _3482 < _10301; ++_3482)
                                  {
                                    {
                                      _ptr__3466[safe_add( _3462,_3467 )] = _ptr__3405[safe_add( _3420,_3482 )];
                                      _ptr__3465[safe_add( _3463,_3467 )] = _ptr__3407[safe_add( _3418,_3482 )];
                                      ++ _3467;
                                    }
                                  }
                                  _ptr__3466[safe_add( _3462,_3467 )] = 3;
                                  ++ _3467;
                                }
                              }
                              {}
                              _ptr__3466[safe_add( _3462,_3467 )] = 1;
                              _ptr__3465[safe_add( _3463,_3467 )] = _ptr__3432[safe_add( _3428,_3476 )];
                              ++ _3467;
                              _ptr__3466[safe_add( _3462,_3467 )] = 5;
                              ++ _3467;
                              _ptr__3466[safe_add( safe_add( _3461,_3469 ),(int)1 )] = _3467;
                              ++ _3469;
                            }
                          }
                          ++ _3476;
                          ++ _3475;
                          ++ _3477;
                        }
                      }
                    }
                  }
                  if ((_3477 > (int)0))
                  {
                    {
                      _ptr__3464[safe_add( _3457,_3468 )] = _3473;
                      _ptr__3466[safe_add( safe_add( _3455,_3468 ),(int)1 )] = _3469;
                      ++ _3468;
                    }
                  }
                  {}
                }
              }
            }
          }
        }
      }
      {}
      if ((!_3459))
      {
        {
          _3402->popi64(_3438);
        }
      }
      {}
      _3404->clear();
    }
  }
  else
  {
    {
      int _3483 = (int)0;
      int _3484 = (int)0;
      int _3485 = (int)0;
      std::shared_ptr< monty::ndarray< int,1 > > _3486 = mosek::fusion::p_WorkStack::_get_impl(_3404)->i32;
      _checked_ptr_1<int> _ptr__3486(_3486 ? _3486->raw() : nullptr,_3486 ? _3486->size(0) : 0);
      {
        int _3487 = (int)0;
        while ( (_3487 < _3421) )
        {
          {
            long long _3488 = (_ptr__3423[safe_add( _3422,_3487 )] / _3425);
            long long _3489 = safe_mul( safe_add( _3488,(int)1 ),_3425 );
            bool _3490 = false;
            while ( ((_3487 < _3421) && (_ptr__3423[safe_add( _3422,_3487 )] < _3489)) )
            {
              {
                long long _3491 = (_ptr__3423[safe_add( _3422,_3487 )] % _3425);
                long long _3492 = safe_add( safe_mul( _3491,_3427 ),_3488 );
                int _3493 = (_ptr__3405[safe_add( safe_add( _3412,_3492 ),(int)1 )] - _ptr__3405[safe_add( _3412,_3492 )]);
                _3484 += _3493;
                _3490 = true;
                int _10302;
                bool _10303 = (_3413 > (int)0);
                if (_10303)
                {
                  _10302 = safe_add( (_ptr__3405[safe_add( _3419,_ptr__3405[safe_add( safe_add( _3412,_3492 ),(int)1 )] )] - _ptr__3405[safe_add( _3419,_ptr__3405[safe_add( _3412,_3492 )] )]),safe_mul( _3493,(int)4 ) );
                }
                else
                {
                  _10302 = safe_mul( _3493,(int)3 );
                }
                _3485 += _10302;
                ++ _3487;
              }
            }
            if (_3490)
            {
              {
                ++ _3483;
              }
            }
            {}
          }
        }
      }
      int _3494 = (int)1;
      bool _3495 = (_3483 < _3424);
      _3402->alloc_expr(_3494,_3483,_3484,_3495,_3485);
      int _3496 = mosek::fusion::p_WorkStack::_get_impl(_3402)->ptr_base;
      int _3497 = mosek::fusion::p_WorkStack::_get_impl(_3402)->nidxs_base;
      int _10304;
      bool _10305 = _3495;
      if (_10305)
      {
        _10304 = mosek::fusion::p_WorkStack::_get_impl(_3402)->sp_base;
      }
      else
      {
        _10304 = _3402->alloci64(_3483);
      }
      int _3498 = _10304;
      int _3499 = mosek::fusion::p_WorkStack::_get_impl(_3402)->cof_base;
      bool _3500 = mosek::fusion::p_WorkStack::_get_impl(_3402)->hassp;
      int _3501 = mosek::fusion::p_WorkStack::_get_impl(_3402)->shape_base;
      int _3502 = mosek::fusion::p_WorkStack::_get_impl(_3402)->codeptr_base;
      int _3503 = mosek::fusion::p_WorkStack::_get_impl(_3402)->code_base;
      int _3504 = mosek::fusion::p_WorkStack::_get_impl(_3402)->cconst_base;
      std::shared_ptr< monty::ndarray< long long,1 > > _3505 = mosek::fusion::p_WorkStack::_get_impl(_3402)->i64;
      _checked_ptr_1<long long> _ptr__3505(_3505 ? _3505->raw() : nullptr,_3505 ? _3505->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3506 = mosek::fusion::p_WorkStack::_get_impl(_3402)->f64;
      _checked_ptr_1<double> _ptr__3506(_3506 ? _3506->raw() : nullptr,_3506 ? _3506->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _3507 = mosek::fusion::p_WorkStack::_get_impl(_3402)->i32;
      _checked_ptr_1<int> _ptr__3507(_3507 ? _3507->raw() : nullptr,_3507 ? _3507->size(0) : 0);
      {
        _ptr__3507[_3496] = (int)0;
        if ((_3485 > (int)0))
        {
          {
            _ptr__3507[_3502] = (int)0;
          }
        }
        {}
        _ptr__3507[_3501] = (int)_3424;
        int _3508 = (int)0;
        int _3509 = (int)0;
        int _3510 = (int)0;
        int _3511 = (int)0;
        while ( (_3511 < _3421) )
        {
          {
            long long _3512 = (_ptr__3423[safe_add( _3422,_3511 )] / _3425);
            long long _3513 = safe_mul( safe_add( _3512,(int)1 ),_3425 );
            int _3514 = (int)0;
            while ( ((_3511 < _3421) && (_ptr__3423[safe_add( _3422,_3511 )] < _3513)) )
            {
              {
                long long _3515 = (_ptr__3423[safe_add( _3422,_3511 )] % _3425);
                long long _3516 = safe_add( safe_mul( _3515,_3427 ),_3512 );
                int _10306 = _ptr__3405[safe_add( _3412,_3516 )];
                int _10307 = _ptr__3405[safe_add( safe_add( _3412,_3516 ),(int)1 )];
                for (int _3517 = _10306; _3517 < _10307; ++_3517)
                {
                  {
                    _ptr__3505[safe_add( _3497,_3510 )] = _ptr__3406[safe_add( _3416,_3517 )];
                    _ptr__3506[safe_add( _3499,_3510 )] = 0.0;
                    _ptr__3507[safe_add( _3503,_3508 )] = 2;
                    _ptr__3506[safe_add( _3504,_3508 )] = _ptr__3407[safe_add( _3417,_3517 )];
                    ++ _3508;
                    if ((_3413 > (int)0))
                    {
                      {
                        int _10308 = _ptr__3405[safe_add( _3419,_3517 )];
                        int _10309 = _ptr__3405[safe_add( safe_add( _3419,_3517 ),(int)1 )];
                        for (int _3518 = _10308; _3518 < _10309; ++_3518)
                        {
                          {
                            _ptr__3507[safe_add( _3503,_3508 )] = _ptr__3405[safe_add( _3420,_3518 )];
                            _ptr__3506[safe_add( _3504,_3508 )] = _ptr__3407[safe_add( _3418,_3518 )];
                            ++ _3508;
                          }
                        }
                        _ptr__3507[safe_add( _3503,_3508 )] = 3;
                        ++ _3508;
                      }
                    }
                    {}
                    _ptr__3507[safe_add( _3503,_3508 )] = 1;
                    _ptr__3506[safe_add( _3504,_3508 )] = _ptr__3486[safe_add( _3428,_3511 )];
                    ++ _3508;
                    _ptr__3507[safe_add( _3503,_3508 )] = 5;
                    ++ _3508;
                    _ptr__3507[safe_add( safe_add( _3502,_3510 ),(int)1 )] = _3508;
                    ++ _3510;
                  }
                }
                ++ _3514;
                ++ _3511;
              }
            }
            if ((_3514 > (int)0))
            {
              {
                _ptr__3505[safe_add( _3498,_3509 )] = _3512;
                _ptr__3507[safe_add( safe_add( _3496,_3509 ),(int)1 )] = _3510;
                ++ _3509;
              }
            }
            {}
          }
        }
      }
      if ((!_3500))
      {
        {
          _3402->popi64(_3483);
        }
      }
      {}
      _3404->clear();
    }
  }
}
std::string mosek::fusion::ExprMulParamDiagLeft :: toString() { return mosek::fusion::p_ExprMulParamDiagLeft::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulParamDiagLeft::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulParamDiagLeft("))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulParamDiagLeft::destroy(){e.reset();p.reset();}void mosek::fusion::ExprMulParamDiagLeft::destroy() { mosek::fusion::p_ExprMulParamDiagLeft::_get_impl(this)->destroy(); }mosek::fusion::ExprMulParamDiagRight::ExprMulParamDiagRight(mosek::fusion::p_ExprMulParamDiagRight *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulParamDiagRight()" << this << std::endl; */ }mosek::fusion::ExprMulParamDiagRight::~ExprMulParamDiagRight() {  /* std::cout << "~ExprMulParamDiagRight()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulParamDiagRight::p_ExprMulParamDiagRight  (::mosek::fusion::ExprMulParamDiagRight * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulParamDiagRight::t mosek::fusion::p_ExprMulParamDiagRight::_new_ExprMulParamDiagRight  (monty::rc_ptr< ::mosek::fusion::Expression > _3519,    monty::rc_ptr< ::mosek::fusion::Parameter > _3520){ return new mosek::fusion::ExprMulParamDiagRight(_3519,_3520); }mosek::fusion::ExprMulParamDiagRight::ExprMulParamDiagRight  (monty::rc_ptr< ::mosek::fusion::Expression > _3519,    monty::rc_ptr< ::mosek::fusion::Parameter > _3520) :    ExprMulParamDiagRight(new mosek::fusion::p_ExprMulParamDiagRight(this)){ mosek::fusion::p_ExprMulParamDiagRight::_get_impl(this)->_initialize(_3519,_3520); }void mosek::fusion::p_ExprMulParamDiagRight::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _3519,    monty::rc_ptr< ::mosek::fusion::Parameter > _3520){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3519->getDim((int)0))}));
    mosek::fusion::p_ExprMulParamDiagRight::_get_impl(::mosek::fusion::ExprMulParamDiagRight::t(_pubthis))->p = _3520;
    mosek::fusion::p_ExprMulParamDiagRight::_get_impl(::mosek::fusion::ExprMulParamDiagRight::t(_pubthis))->e = _3519;
    if (((_3520->getND() != (int)2) || (_3519->getND() != (int)2)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
    if (((_3520->getDim((int)1) != _3519->getDim((int)0)) || (_3520->getDim((int)0) != _3519->getDim((int)1))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
  }
}void mosek::fusion::ExprMulParamDiagRight :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3521,monty::rc_ptr< ::mosek::fusion::WorkStack > _3522,monty::rc_ptr< ::mosek::fusion::WorkStack > _3523) { mosek::fusion::p_ExprMulParamDiagRight::_get_impl(this)->eval(_3521,_3522,_3523); }void mosek::fusion::p_ExprMulParamDiagRight::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3521,monty::rc_ptr< ::mosek::fusion::WorkStack > _3522,monty::rc_ptr< ::mosek::fusion::WorkStack > _3523){
  e->eval(_3522,_3521,_3523);
  _3522->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _3524 = mosek::fusion::p_WorkStack::_get_impl(_3522)->i32;
  _checked_ptr_1<int> _ptr__3524(_3524 ? _3524->raw() : nullptr,_3524 ? _3524->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3525 = mosek::fusion::p_WorkStack::_get_impl(_3522)->i64;
  _checked_ptr_1<long long> _ptr__3525(_3525 ? _3525->raw() : nullptr,_3525 ? _3525->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3526 = mosek::fusion::p_WorkStack::_get_impl(_3522)->f64;
  _checked_ptr_1<double> _ptr__3526(_3526 ? _3526->raw() : nullptr,_3526 ? _3526->size(0) : 0);
  int _3527 = mosek::fusion::p_WorkStack::_get_impl(_3522)->nd;
  int _3528 = mosek::fusion::p_WorkStack::_get_impl(_3522)->nelem;
  int _3529 = mosek::fusion::p_WorkStack::_get_impl(_3522)->nnz;
  bool _3530 = mosek::fusion::p_WorkStack::_get_impl(_3522)->hassp;
  int _3531 = mosek::fusion::p_WorkStack::_get_impl(_3522)->ptr_base;
  int _3532 = mosek::fusion::p_WorkStack::_get_impl(_3522)->ncodeatom;
  int _3533 = mosek::fusion::p_WorkStack::_get_impl(_3522)->shape_base;
  int _3534 = mosek::fusion::p_WorkStack::_get_impl(_3522)->sp_base;
  int _3535 = mosek::fusion::p_WorkStack::_get_impl(_3522)->nidxs_base;
  int _3536 = mosek::fusion::p_WorkStack::_get_impl(_3522)->cof_base;
  int _3537 = mosek::fusion::p_WorkStack::_get_impl(_3522)->cconst_base;
  int _3538 = mosek::fusion::p_WorkStack::_get_impl(_3522)->codeptr_base;
  int _3539 = mosek::fusion::p_WorkStack::_get_impl(_3522)->code_base;
  if (((_3527 != (int)2) || ((_ptr__3524[_3533] != p->getDim((int)1)) || (_ptr__3524[safe_add( _3533,(int)1 )] != p->getDim((int)0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
    }
  }
  {}
  int _3540 = p->getNumNonzero();
  int _3541 = _3523->alloci64(_3540);
  std::shared_ptr< monty::ndarray< long long,1 > > _3542 = mosek::fusion::p_WorkStack::_get_impl(_3523)->i64;
  _checked_ptr_1<long long> _ptr__3542(_3542 ? _3542->raw() : nullptr,_3542 ? _3542->size(0) : 0);
  int _3543 = _3523->alloci32(p->getNumNonzero());
  std::shared_ptr< monty::ndarray< int,1 > > _3544 = mosek::fusion::p_WorkStack::_get_impl(_3523)->i32;
  _checked_ptr_1<int> _ptr__3544(_3544 ? _3544->raw() : nullptr,_3544 ? _3544->size(0) : 0);
  p->getAllIndexes(_3544,_3543);
  p->getSp(_3542,_3541);
  int _3545 = p->getDim((int)0);
  int _3546 = p->getDim((int)1);
  int _3547 = _ptr__3524[_3533];
  int _3548 = _ptr__3524[safe_add( _3533,(int)1 )];
  int _3549 = _3523->alloci32(_3540);
  int _3550 = _3523->alloci32(safe_add( _3546,(int)1 ));
  std::shared_ptr< monty::ndarray< int,1 > > _3551 = mosek::fusion::p_WorkStack::_get_impl(_3523)->i32;
  _checked_ptr_1<int> _ptr__3551(_3551 ? _3551->raw() : nullptr,_3551 ? _3551->size(0) : 0);
  int _10310 = (int)0;
  int _10311 = safe_add( _3546,(int)1 );
  for (int _3552 = _10310; _3552 < _10311; ++_3552)
  {
    {
      _ptr__3551[safe_add( _3550,_3552 )] = (int)0;
    }
  }
  int _10312 = (int)0;
  int _10313 = _3540;
  for (int _3553 = _10312; _3553 < _10313; ++_3553)
  {
    {
      ++ _ptr__3551[safe_add( safe_add( _3550,(_ptr__3542[safe_add( _3541,_3553 )] % _3546) ),(int)1 )];
    }
  }
  int _10314 = (int)1;
  int _10315 = _3546;
  for (int _3554 = _10314; _3554 < _10315; ++_3554)
  {
    {
      _ptr__3551[safe_add( _3550,_3554 )] += _ptr__3551[(safe_add( _3550,_3554 ) - (int)1)];
    }
  }
  int _10316 = (int)0;
  int _10317 = _3540;
  for (int _3555 = _10316; _3555 < _10317; ++_3555)
  {
    {
      long long _3556 = (_ptr__3542[safe_add( _3541,_3555 )] % _3546);
      _ptr__3551[safe_add( _3549,_ptr__3551[safe_add( _3550,_3556 )] )] = _3555;
      ++ _ptr__3551[safe_add( _3550,_3556 )];
    }
  }
  if (_3530)
  {
    {
      int _3557 = (int)0;
      int _3558 = (int)0;
      int _3559 = (int)0;
      int _3560 = (int)0;
      int _3561 = (int)0;
      while ( ((_3561 < _3528) && (_3560 < _3540)) )
      {
        {
          long long _3562 = (_ptr__3525[safe_add( _3534,_3561 )] / _3548);
          long long _3563 = (_ptr__3542[safe_add( _3541,_ptr__3551[safe_add( _3549,_3560 )] )] % _3546);
          if ((_3562 < _3563))
          {
            {
              ++ _3561;
            }
          }
          else if((_3562 > _3563))
          {
            {
              ++ _3560;
            }
          }
          else
          {
            {
              int _3564 = _3561;
              ++ _3561;
              int _3565 = _3560;
              ++ _3560;
              while ( ((_3561 < _3528) && ((_ptr__3525[safe_add( _3534,_3561 )] / _3548) == _3562)) )
              {
                {
                  ++ _3561;
                }
              }
              while ( ((_3560 < _3540) && ((_ptr__3542[safe_add( _3541,_ptr__3551[safe_add( _3549,_3560 )] )] % _3546) == _3563)) )
              {
                {
                  ++ _3560;
                }
              }
              int _3566 = _3565;
              int _3567 = _3564;
              bool _3568 = false;
              while ( ((_3567 < _3561) && (_3566 < _3560)) )
              {
                {
                  long long _3569 = (_ptr__3525[safe_add( _3534,_3567 )] % _3548);
                  long long _3570 = (_ptr__3542[safe_add( _3541,_ptr__3551[safe_add( _3549,_3566 )] )] / _3546);
                  if ((_3569 < _3570))
                  {
                    {
                      ++ _3567;
                    }
                  }
                  else if((_3569 > _3570))
                  {
                    {
                      ++ _3566;
                    }
                  }
                  else
                  {
                    {
                      _3568 = true;
                      int _3571 = (_ptr__3524[safe_add( safe_add( _3531,_3567 ),(int)1 )] - _ptr__3524[safe_add( _3531,_3567 )]);
                      _3559 += _3571;
                      int _10318;
                      bool _10319 = (_3532 > (int)0);
                      if (_10319)
                      {
                        _10318 = safe_add( (_ptr__3524[safe_add( _3538,_ptr__3524[safe_add( safe_add( _3531,_3567 ),(int)1 )] )] - _ptr__3524[safe_add( _3538,_ptr__3524[safe_add( _3531,_3567 )] )]),safe_mul( _3571,(int)4 ) );
                      }
                      else
                      {
                        _10318 = safe_mul( _3571,(int)3 );
                      }
                      _3557 += _10318;
                      ++ _3567;
                      ++ _3566;
                    }
                  }
                }
              }
              if (_3568)
              {
                {
                  ++ _3558;
                }
              }
              {}
            }
          }
        }
      }
      int _3572 = (int)1;
      bool _3573 = (_3558 < _3547);
      _3521->alloc_expr(_3572,_3558,_3559,_3573,_3557);
      int _3574 = mosek::fusion::p_WorkStack::_get_impl(_3521)->ptr_base;
      int _3575 = mosek::fusion::p_WorkStack::_get_impl(_3521)->nidxs_base;
      int _10320;
      bool _10321 = _3573;
      if (_10321)
      {
        _10320 = mosek::fusion::p_WorkStack::_get_impl(_3521)->sp_base;
      }
      else
      {
        _10320 = _3521->alloci64(_3558);
      }
      int _3576 = _10320;
      int _3577 = mosek::fusion::p_WorkStack::_get_impl(_3521)->cof_base;
      bool _3578 = mosek::fusion::p_WorkStack::_get_impl(_3521)->hassp;
      int _3579 = mosek::fusion::p_WorkStack::_get_impl(_3521)->shape_base;
      int _3580 = mosek::fusion::p_WorkStack::_get_impl(_3521)->codeptr_base;
      int _3581 = mosek::fusion::p_WorkStack::_get_impl(_3521)->code_base;
      int _3582 = mosek::fusion::p_WorkStack::_get_impl(_3521)->cconst_base;
      std::shared_ptr< monty::ndarray< long long,1 > > _3583 = mosek::fusion::p_WorkStack::_get_impl(_3521)->i64;
      _checked_ptr_1<long long> _ptr__3583(_3583 ? _3583->raw() : nullptr,_3583 ? _3583->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3584 = mosek::fusion::p_WorkStack::_get_impl(_3521)->f64;
      _checked_ptr_1<double> _ptr__3584(_3584 ? _3584->raw() : nullptr,_3584 ? _3584->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _3585 = mosek::fusion::p_WorkStack::_get_impl(_3521)->i32;
      _checked_ptr_1<int> _ptr__3585(_3585 ? _3585->raw() : nullptr,_3585 ? _3585->size(0) : 0);
      if ((_3558 > (int)0))
      {
        {
          _ptr__3585[_3574] = (int)0;
          if ((_3557 > (int)0))
          {
            {
              _ptr__3585[_3580] = (int)0;
            }
          }
          {}
          _ptr__3585[_3579] = (int)_3547;
          int _3586 = (int)0;
          int _3587 = (int)0;
          int _3588 = (int)0;
          int _3589 = (int)0;
          int _3590 = (int)0;
          while ( ((_3590 < _3528) && (_3589 < _3540)) )
          {
            {
              long long _3591 = (_ptr__3525[safe_add( _3534,_3590 )] / _3548);
              long long _3592 = (_ptr__3542[safe_add( _3541,_ptr__3551[safe_add( _3549,_3589 )] )] % _3546);
              if ((_3591 < _3592))
              {
                {
                  while ( ((_3590 < _3528) && ((_ptr__3525[safe_add( _3534,_3590 )] / _3548) == _3591)) )
                  {
                    {
                      ++ _3590;
                    }
                  }
                }
              }
              else if((_3591 > _3592))
              {
                {
                  while ( ((_3589 < _3540) && ((_ptr__3542[safe_add( _3541,_ptr__3551[safe_add( _3549,_3589 )] )] % _3546) == _3592)) )
                  {
                    {
                      ++ _3589;
                    }
                  }
                }
              }
              else
              {
                {
                  int _3593 = _3590;
                  ++ _3590;
                  int _3594 = _3589;
                  ++ _3589;
                  while ( ((_3590 < _3528) && ((_ptr__3525[safe_add( _3534,_3590 )] / _3548) == _3591)) )
                  {
                    {
                      ++ _3590;
                    }
                  }
                  while ( ((_3589 < _3540) && ((_ptr__3542[safe_add( _3541,_ptr__3551[safe_add( _3549,_3589 )] )] % _3546) == _3592)) )
                  {
                    {
                      ++ _3589;
                    }
                  }
                  int _3595 = _3594;
                  int _3596 = _3593;
                  int _3597 = (int)0;
                  while ( ((_3596 < _3590) && (_3595 < _3589)) )
                  {
                    {
                      long long _3598 = (_ptr__3525[safe_add( _3534,_3596 )] % _3548);
                      long long _3599 = (_ptr__3542[safe_add( _3541,_ptr__3551[safe_add( _3549,_3595 )] )] / _3546);
                      if ((_3598 < _3599))
                      {
                        {
                          ++ _3596;
                        }
                      }
                      else if((_3598 > _3599))
                      {
                        {
                          ++ _3595;
                        }
                      }
                      else
                      {
                        {
                          int _10322 = _ptr__3524[safe_add( _3531,_3596 )];
                          int _10323 = _ptr__3524[safe_add( safe_add( _3531,_3596 ),(int)1 )];
                          for (int _3600 = _10322; _3600 < _10323; ++_3600)
                          {
                            {
                              _ptr__3583[safe_add( _3575,_3588 )] = _ptr__3525[safe_add( _3535,_3600 )];
                              _ptr__3584[safe_add( _3577,_3588 )] = 0.0;
                              _ptr__3585[safe_add( _3581,_3586 )] = 2;
                              _ptr__3584[safe_add( _3582,_3586 )] = _ptr__3526[safe_add( _3536,_3600 )];
                              ++ _3586;
                              if ((_3532 > (int)0))
                              {
                                {
                                  int _10324 = _ptr__3524[safe_add( _3538,_3600 )];
                                  int _10325 = _ptr__3524[safe_add( safe_add( _3538,_3600 ),(int)1 )];
                                  for (int _3601 = _10324; _3601 < _10325; ++_3601)
                                  {
                                    {
                                      _ptr__3585[safe_add( _3581,_3586 )] = _ptr__3524[safe_add( _3539,_3601 )];
                                      _ptr__3584[safe_add( _3582,_3586 )] = _ptr__3526[safe_add( _3537,_3601 )];
                                      ++ _3586;
                                    }
                                  }
                                  _ptr__3585[safe_add( _3581,_3586 )] = 3;
                                  ++ _3586;
                                }
                              }
                              {}
                              _ptr__3585[safe_add( _3581,_3586 )] = 1;
                              _ptr__3584[safe_add( _3582,_3586 )] = _ptr__3551[safe_add( _3543,_ptr__3551[safe_add( _3549,_3595 )] )];
                              ++ _3586;
                              _ptr__3585[safe_add( _3581,_3586 )] = 5;
                              ++ _3586;
                              _ptr__3585[safe_add( safe_add( _3580,_3588 ),(int)1 )] = _3586;
                              ++ _3588;
                            }
                          }
                          ++ _3597;
                          ++ _3596;
                          ++ _3595;
                        }
                      }
                    }
                  }
                  if ((_3597 > (int)0))
                  {
                    {
                      _ptr__3583[safe_add( _3576,_3587 )] = _3591;
                      _ptr__3585[safe_add( safe_add( _3574,_3587 ),(int)1 )] = _3588;
                      ++ _3587;
                    }
                  }
                  {}
                }
              }
            }
          }
          if ((_3558 > _ptr__3585[_3579]))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid shape"));
            }
          }
          {}
          if ((_3587 != _3558))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid num elements"));
            }
          }
          {}
          if ((_3588 != _3588))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid num nonzeros"));
            }
          }
          {}
        }
      }
      {}
      if ((!_3578))
      {
        {
          _3521->popi64(_3558);
        }
      }
      {}
      _3523->clear();
    }
  }
  else
  {
    {
      int _3602 = (int)0;
      int _3603 = (int)0;
      int _3604 = (int)0;
      int _3605 = (int)0;
      while ( (_3605 < _3540) )
      {
        {
          long long _3606 = (_ptr__3542[safe_add( _3541,_ptr__3551[safe_add( _3549,_3605 )] )] % _3546);
          int _3607 = _3605;
          ++ _3605;
          while ( ((_3605 < _3540) && ((_ptr__3542[safe_add( _3541,_ptr__3551[safe_add( _3549,_3605 )] )] % _3546) == _3606)) )
          {
            {
              ++ _3605;
            }
          }
          int _10326 = _3607;
          int _10327 = _3605;
          for (int _3608 = _10326; _3608 < _10327; ++_3608)
          {
            {
              long long _3609 = (_ptr__3542[safe_add( _3541,_ptr__3551[safe_add( _3549,_3605 )] )] / _3546);
              long long _3610 = safe_add( safe_mul( _3606,_3548 ),_3609 );
              int _3611 = (_ptr__3524[safe_add( safe_add( _3531,_3610 ),(int)1 )] - _ptr__3524[safe_add( _3531,_3610 )]);
              _3604 += _3611;
              int _10328;
              bool _10329 = (_3532 > (int)0);
              if (_10329)
              {
                _10328 = safe_add( (_ptr__3524[safe_add( _3538,_ptr__3524[safe_add( safe_add( _3531,_3610 ),(int)1 )] )] - _ptr__3524[safe_add( _3538,_ptr__3524[safe_add( _3531,_3610 )] )]),safe_mul( _3611,(int)4 ) );
              }
              else
              {
                _10328 = safe_mul( _3611,(int)3 );
              }
              _3602 += _10328;
            }
          }
          ++ _3603;
        }
      }
      int _3612 = (int)1;
      bool _3613 = (_3603 < _3547);
      _3521->alloc_expr(_3612,_3603,_3604,_3613,_3602);
      int _3614 = mosek::fusion::p_WorkStack::_get_impl(_3521)->ptr_base;
      int _3615 = mosek::fusion::p_WorkStack::_get_impl(_3521)->nidxs_base;
      int _10330;
      bool _10331 = _3613;
      if (_10331)
      {
        _10330 = mosek::fusion::p_WorkStack::_get_impl(_3521)->sp_base;
      }
      else
      {
        _10330 = _3521->alloci64(_3603);
      }
      int _3616 = _10330;
      int _3617 = mosek::fusion::p_WorkStack::_get_impl(_3521)->cof_base;
      bool _3618 = mosek::fusion::p_WorkStack::_get_impl(_3521)->hassp;
      int _3619 = mosek::fusion::p_WorkStack::_get_impl(_3521)->shape_base;
      int _3620 = mosek::fusion::p_WorkStack::_get_impl(_3521)->codeptr_base;
      int _3621 = mosek::fusion::p_WorkStack::_get_impl(_3521)->code_base;
      int _3622 = mosek::fusion::p_WorkStack::_get_impl(_3521)->cconst_base;
      std::shared_ptr< monty::ndarray< long long,1 > > _3623 = mosek::fusion::p_WorkStack::_get_impl(_3521)->i64;
      _checked_ptr_1<long long> _ptr__3623(_3623 ? _3623->raw() : nullptr,_3623 ? _3623->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3624 = mosek::fusion::p_WorkStack::_get_impl(_3521)->f64;
      _checked_ptr_1<double> _ptr__3624(_3624 ? _3624->raw() : nullptr,_3624 ? _3624->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _3625 = mosek::fusion::p_WorkStack::_get_impl(_3521)->i32;
      _checked_ptr_1<int> _ptr__3625(_3625 ? _3625->raw() : nullptr,_3625 ? _3625->size(0) : 0);
      {
        _ptr__3625[_3614] = (int)0;
        if ((_3602 > (int)0))
        {
          {
            _ptr__3625[_3620] = (int)0;
          }
        }
        {}
        _ptr__3625[_3619] = (int)_3547;
        int _3626 = (int)0;
        int _3627 = (int)0;
        int _3628 = (int)0;
        int _3629 = (int)0;
        while ( (_3629 < _3540) )
        {
          {
            long long _3630 = (_ptr__3542[safe_add( _3541,_ptr__3551[safe_add( _3549,_3629 )] )] % _3546);
            int _3631 = _3629;
            ++ _3629;
            while ( ((_3629 < _3540) && ((_ptr__3542[safe_add( _3541,_ptr__3551[safe_add( _3549,_3629 )] )] % _3546) == _3630)) )
            {
              {
                ++ _3629;
              }
            }
            int _10332 = _3631;
            int _10333 = _3629;
            for (int _3632 = _10332; _3632 < _10333; ++_3632)
            {
              {
                long long _3633 = (_ptr__3542[safe_add( _3541,_ptr__3551[safe_add( _3549,_3632 )] )] / _3546);
                long long _3634 = safe_add( safe_mul( _3630,_3548 ),_3633 );
                int _10334 = _ptr__3524[safe_add( _3531,_3634 )];
                int _10335 = _ptr__3524[safe_add( safe_add( _3531,_3634 ),(int)1 )];
                for (int _3635 = _10334; _3635 < _10335; ++_3635)
                {
                  {
                    _ptr__3623[safe_add( _3615,_3628 )] = _ptr__3525[safe_add( _3535,_3635 )];
                    _ptr__3624[safe_add( _3617,_3628 )] = 0.0;
                    _ptr__3625[safe_add( _3621,_3626 )] = 2;
                    _ptr__3624[safe_add( _3622,_3626 )] = _ptr__3526[safe_add( _3536,_3635 )];
                    ++ _3626;
                    if ((_3532 > (int)0))
                    {
                      {
                        int _10336 = _ptr__3524[safe_add( _3538,_3635 )];
                        int _10337 = _ptr__3524[safe_add( safe_add( _3538,_3635 ),(int)1 )];
                        for (int _3636 = _10336; _3636 < _10337; ++_3636)
                        {
                          {
                            _ptr__3625[safe_add( _3621,_3626 )] = _ptr__3524[safe_add( _3539,_3636 )];
                            _ptr__3624[safe_add( _3622,_3626 )] = _ptr__3526[safe_add( _3537,_3636 )];
                            ++ _3626;
                          }
                        }
                        _ptr__3625[safe_add( _3621,_3626 )] = 3;
                        ++ _3626;
                      }
                    }
                    {}
                    _ptr__3625[safe_add( _3621,_3626 )] = 1;
                    _ptr__3624[safe_add( _3622,_3626 )] = _ptr__3551[safe_add( _3543,_ptr__3551[safe_add( _3549,_3632 )] )];
                    ++ _3626;
                    _ptr__3625[safe_add( _3621,_3626 )] = 5;
                    ++ _3626;
                    _ptr__3625[safe_add( safe_add( _3620,_3628 ),(int)1 )] = _3626;
                    ++ _3628;
                  }
                }
              }
            }
            _ptr__3623[safe_add( _3616,_3627 )] = _3630;
            _ptr__3625[safe_add( safe_add( _3614,_3627 ),(int)1 )] = _3628;
            ++ _3627;
          }
        }
        if ((_3603 > _ptr__3625[_3619]))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid shape"));
          }
        }
        {}
        if ((_3627 != _3603))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid num elements"));
          }
        }
        {}
        if ((_3628 != _3604))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid num nonzeros"));
          }
        }
        {}
      }
      if ((!_3618))
      {
        {
          _3521->popi64(_3603);
        }
      }
      {}
      _3523->clear();
    }
  }
}
std::string mosek::fusion::ExprMulParamDiagRight :: toString() { return mosek::fusion::p_ExprMulParamDiagRight::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulParamDiagRight::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulParamDiagRight("))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulParamDiagRight::destroy(){e.reset();p.reset();}void mosek::fusion::ExprMulParamDiagRight::destroy() { mosek::fusion::p_ExprMulParamDiagRight::_get_impl(this)->destroy(); }mosek::fusion::ExprDotParam::ExprDotParam(mosek::fusion::p_ExprDotParam *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprDotParam()" << this << std::endl; */ }mosek::fusion::ExprDotParam::~ExprDotParam() {  /* std::cout << "~ExprDotParam()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprDotParam::p_ExprDotParam  (::mosek::fusion::ExprDotParam * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprDotParam::t mosek::fusion::p_ExprDotParam::_new_ExprDotParam  (monty::rc_ptr< ::mosek::fusion::Parameter > _3637,    monty::rc_ptr< ::mosek::fusion::Expression > _3638){ return new mosek::fusion::ExprDotParam(_3637,_3638); }mosek::fusion::ExprDotParam::ExprDotParam  (monty::rc_ptr< ::mosek::fusion::Parameter > _3637,    monty::rc_ptr< ::mosek::fusion::Expression > _3638) :    ExprDotParam(new mosek::fusion::p_ExprDotParam(this)){ mosek::fusion::p_ExprDotParam::_get_impl(this)->_initialize(_3637,_3638); }void mosek::fusion::p_ExprDotParam::_initialize  (monty::rc_ptr< ::mosek::fusion::Parameter > _3637,    monty::rc_ptr< ::mosek::fusion::Expression > _3638){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))));
    mosek::fusion::p_ExprDotParam::_get_impl(::mosek::fusion::ExprDotParam::t(_pubthis))->p = _3637;
    mosek::fusion::p_ExprDotParam::_get_impl(::mosek::fusion::ExprDotParam::t(_pubthis))->e = _3638;
    if ((_3637->getND() != _3638->getND()))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    {}
    int _10338 = (int)0;
    int _10339 = _3637->getND();
    for (int _3639 = _10338; _3639 < _10339; ++_3639)
    {
      {
        if ((_3637->getDim(_3639) != _3638->getDim(_3639)))
        {
          {
            throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
          }
        }
        {}
      }
    }
  }
}void mosek::fusion::ExprDotParam :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3640,monty::rc_ptr< ::mosek::fusion::WorkStack > _3641,monty::rc_ptr< ::mosek::fusion::WorkStack > _3642) { mosek::fusion::p_ExprDotParam::_get_impl(this)->eval(_3640,_3641,_3642); }void mosek::fusion::p_ExprDotParam::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3640,monty::rc_ptr< ::mosek::fusion::WorkStack > _3641,monty::rc_ptr< ::mosek::fusion::WorkStack > _3642){
  e->eval(_3641,_3640,_3642);
  _3641->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _3643 = mosek::fusion::p_WorkStack::_get_impl(_3641)->i32;
  _checked_ptr_1<int> _ptr__3643(_3643 ? _3643->raw() : nullptr,_3643 ? _3643->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3644 = mosek::fusion::p_WorkStack::_get_impl(_3641)->i64;
  _checked_ptr_1<long long> _ptr__3644(_3644 ? _3644->raw() : nullptr,_3644 ? _3644->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3645 = mosek::fusion::p_WorkStack::_get_impl(_3641)->f64;
  _checked_ptr_1<double> _ptr__3645(_3645 ? _3645->raw() : nullptr,_3645 ? _3645->size(0) : 0);
  int _3646 = mosek::fusion::p_WorkStack::_get_impl(_3641)->nd;
  int _3647 = mosek::fusion::p_WorkStack::_get_impl(_3641)->nelem;
  int _3648 = mosek::fusion::p_WorkStack::_get_impl(_3641)->nnz;
  bool _3649 = mosek::fusion::p_WorkStack::_get_impl(_3641)->hassp;
  int _3650 = mosek::fusion::p_WorkStack::_get_impl(_3641)->ptr_base;
  int _3651 = mosek::fusion::p_WorkStack::_get_impl(_3641)->ncodeatom;
  int _3652 = mosek::fusion::p_WorkStack::_get_impl(_3641)->shape_base;
  int _3653 = mosek::fusion::p_WorkStack::_get_impl(_3641)->sp_base;
  int _3654 = mosek::fusion::p_WorkStack::_get_impl(_3641)->nidxs_base;
  int _3655 = mosek::fusion::p_WorkStack::_get_impl(_3641)->cof_base;
  int _3656 = mosek::fusion::p_WorkStack::_get_impl(_3641)->cconst_base;
  int _3657 = mosek::fusion::p_WorkStack::_get_impl(_3641)->codeptr_base;
  int _3658 = mosek::fusion::p_WorkStack::_get_impl(_3641)->code_base;
  int _3659 = p->getNumNonzero();
  int _3660 = _3642->alloci64(_3659);
  p->getSp(mosek::fusion::p_WorkStack::_get_impl(_3642)->i64,_3660);
  int _3661 = _3642->alloci32(p->getNumNonzero());
  std::shared_ptr< monty::ndarray< int,1 > > _3662 = mosek::fusion::p_WorkStack::_get_impl(_3642)->i32;
  _checked_ptr_1<int> _ptr__3662(_3662 ? _3662->raw() : nullptr,_3662 ? _3662->size(0) : 0);
  p->getAllIndexes(_3662,_3661);
  std::shared_ptr< monty::ndarray< long long,1 > > _3663 = mosek::fusion::p_WorkStack::_get_impl(_3642)->i64;
  _checked_ptr_1<long long> _ptr__3663(_3663 ? _3663->raw() : nullptr,_3663 ? _3663->size(0) : 0);
  int _3664 = (int)0;
  int _3665 = (int)1;
  int _3666 = (int)0;
  if (_3649)
  {
    {
      int _3667 = (int)0;
      int _3668 = (int)0;
      while ( ((_3667 < _3647) && (_3668 < _3659)) )
      {
        {
          if ((_ptr__3644[safe_add( _3653,_3667 )] < _ptr__3663[safe_add( _3660,_3668 )]))
          {
            {
              ++ _3667;
            }
          }
          else if((_ptr__3644[safe_add( _3653,_3667 )] > _ptr__3663[safe_add( _3660,_3668 )]))
          {
            {
              ++ _3668;
            }
          }
          else
          {
            {
              int _3669 = (_ptr__3643[safe_add( safe_add( _3650,_3667 ),(int)1 )] - _ptr__3643[safe_add( _3650,_3667 )]);
              _3664 += _3669;
              int _10340;
              bool _10341 = (_3651 > (int)0);
              if (_10341)
              {
                _10340 = safe_add( (_ptr__3643[safe_add( _3657,_ptr__3643[safe_add( safe_add( _3650,_3667 ),(int)1 )] )] - _ptr__3643[safe_add( _3657,_ptr__3643[safe_add( _3650,_3667 )] )]),safe_mul( (int)4,_3669 ) );
              }
              else
              {
                _10340 = safe_mul( (int)3,_3669 );
              }
              _3666 += _10340;
              ++ _3667;
              ++ _3668;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int _10342 = (int)0;
      int _10343 = _3659;
      for (int _3670 = _10342; _3670 < _10343; ++_3670)
      {
        {
          _3664 += (_ptr__3643[safe_add( safe_add( _3650,_ptr__3663[safe_add( _3660,_3670 )] ),(int)1 )] - _ptr__3643[safe_add( _3650,_ptr__3663[safe_add( _3660,_3670 )] )]);
        }
      }
      if ((_3651 > (int)0))
      {
        {
          int _10344 = (int)0;
          int _10345 = _3659;
          for (int _3671 = _10344; _3671 < _10345; ++_3671)
          {
            {
              _3666 += safe_add( (_ptr__3643[safe_add( _3657,_ptr__3643[safe_add( safe_add( _3650,_ptr__3663[safe_add( _3660,_3671 )] ),(int)1 )] )] - _ptr__3643[safe_add( _3657,_ptr__3643[safe_add( _3650,_ptr__3663[safe_add( _3660,_3671 )] )] )]),safe_mul( (int)4,(_ptr__3643[safe_add( safe_add( _3650,_ptr__3663[safe_add( _3660,_3671 )] ),(int)1 )] - _ptr__3643[safe_add( _3650,_ptr__3663[safe_add( _3660,_3671 )] )]) ) );
            }
          }
        }
      }
      else
      {
        {
          int _10346 = (int)0;
          int _10347 = _3659;
          for (int _3672 = _10346; _3672 < _10347; ++_3672)
          {
            {
              _3666 += safe_mul( (int)3,(_ptr__3643[safe_add( safe_add( _3650,_ptr__3663[safe_add( _3660,_3672 )] ),(int)1 )] - _ptr__3643[safe_add( _3650,_ptr__3663[safe_add( _3660,_3672 )] )]) );
            }
          }
        }
      }
    }
  }
  long long _3673 = (int)1;
  int _10348 = (int)0;
  int _10349 = _3646;
  for (int _3674 = _10348; _3674 < _10349; ++_3674)
  {
    {
      _3673 *= _ptr__3643[safe_add( _3652,_3674 )];
    }
  }
  _3640->alloc_expr((int)0,_3665,_3664,false,_3666);
  int _3675 = mosek::fusion::p_WorkStack::_get_impl(_3640)->ptr_base;
  int _3676 = mosek::fusion::p_WorkStack::_get_impl(_3640)->nidxs_base;
  int _3677 = mosek::fusion::p_WorkStack::_get_impl(_3640)->cof_base;
  bool _3678 = mosek::fusion::p_WorkStack::_get_impl(_3640)->hassp;
  int _3679 = mosek::fusion::p_WorkStack::_get_impl(_3640)->shape_base;
  int _3680 = mosek::fusion::p_WorkStack::_get_impl(_3640)->codeptr_base;
  int _3681 = mosek::fusion::p_WorkStack::_get_impl(_3640)->code_base;
  int _3682 = mosek::fusion::p_WorkStack::_get_impl(_3640)->cconst_base;
  std::shared_ptr< monty::ndarray< long long,1 > > _3683 = mosek::fusion::p_WorkStack::_get_impl(_3640)->i64;
  _checked_ptr_1<long long> _ptr__3683(_3683 ? _3683->raw() : nullptr,_3683 ? _3683->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3684 = mosek::fusion::p_WorkStack::_get_impl(_3640)->f64;
  _checked_ptr_1<double> _ptr__3684(_3684 ? _3684->raw() : nullptr,_3684 ? _3684->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3685 = mosek::fusion::p_WorkStack::_get_impl(_3640)->i32;
  _checked_ptr_1<int> _ptr__3685(_3685 ? _3685->raw() : nullptr,_3685 ? _3685->size(0) : 0);
  _ptr__3685[_3675] = (int)0;
  _ptr__3685[safe_add( _3675,(int)1 )] = _3664;
  if ((_3666 > (int)0))
  {
    {
      _ptr__3685[_3680] = (int)0;
    }
  }
  {}
  if (_3649)
  {
    {
      int _3686 = (int)0;
      int _3687 = (int)0;
      int _3688 = (int)0;
      int _3689 = (int)0;
      int _3690 = (int)0;
      while ( ((_3689 < _3647) && (_3690 < _3659)) )
      {
        {
          if ((_ptr__3644[safe_add( _3653,_3689 )] < _ptr__3663[safe_add( _3660,_3690 )]))
          {
            {
              ++ _3689;
            }
          }
          else if((_ptr__3644[safe_add( _3653,_3689 )] > _ptr__3663[safe_add( _3660,_3690 )]))
          {
            {
              ++ _3690;
            }
          }
          else
          {
            {
              int _10350 = _ptr__3643[safe_add( _3650,_3689 )];
              int _10351 = _ptr__3643[safe_add( safe_add( _3650,_3689 ),(int)1 )];
              for (int _3691 = _10350; _3691 < _10351; ++_3691)
              {
                {
                  _ptr__3683[safe_add( _3676,_3687 )] = _ptr__3644[safe_add( _3654,_3691 )];
                  _ptr__3684[safe_add( _3677,_3687 )] = 0.0;
                  _ptr__3685[safe_add( _3681,_3686 )] = 2;
                  _ptr__3684[safe_add( _3682,_3686 )] = _ptr__3645[safe_add( _3655,_3691 )];
                  ++ _3686;
                  if ((_3651 > (int)0))
                  {
                    {
                      int _10352 = _ptr__3643[safe_add( _3657,_3691 )];
                      int _10353 = _ptr__3643[safe_add( safe_add( _3657,_3691 ),(int)1 )];
                      for (int _3692 = _10352; _3692 < _10353; ++_3692)
                      {
                        {
                          _ptr__3685[safe_add( _3681,_3686 )] = _ptr__3643[safe_add( _3658,_3692 )];
                          _ptr__3684[safe_add( _3682,_3686 )] = _ptr__3645[safe_add( _3656,_3692 )];
                          ++ _3686;
                        }
                      }
                      _ptr__3685[safe_add( _3681,_3686 )] = 3;
                      ++ _3686;
                    }
                  }
                  {}
                  _ptr__3685[safe_add( _3681,_3686 )] = 1;
                  _ptr__3684[safe_add( _3682,_3686 )] = _ptr__3662[safe_add( _3661,_3690 )];
                  ++ _3686;
                  _ptr__3685[safe_add( _3681,_3686 )] = 5;
                  ++ _3686;
                  _ptr__3685[safe_add( safe_add( _3680,_3687 ),(int)1 )] = _3686;
                  ++ _3687;
                }
              }
              ++ _3689;
              ++ _3690;
            }
          }
        }
      }
      if ((_3688 != _3665))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: broken elmi"));
        }
      }
      {}
      if ((_3687 != _3664))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: broken nzi"));
        }
      }
      {}
      if ((_3686 != _3666))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: broken codei"));
        }
      }
      {}
    }
  }
  else
  {
    {
      int _3693 = (int)0;
      int _3694 = (int)0;
      int _10354 = (int)0;
      int _10355 = _3659;
      for (int _3695 = _10354; _3695 < _10355; ++_3695)
      {
        {
          int _3696 = _3695;
          long long _3697 = _ptr__3663[safe_add( _3660,_3695 )];
          int _10356 = _ptr__3643[safe_add( _3650,_3697 )];
          int _10357 = _ptr__3643[safe_add( safe_add( _3650,_3697 ),(int)1 )];
          for (int _3698 = _10356; _3698 < _10357; ++_3698)
          {
            {
              _ptr__3683[safe_add( _3676,_3694 )] = _ptr__3644[safe_add( _3654,_3698 )];
              _ptr__3684[safe_add( _3677,_3694 )] = 0.0;
              _ptr__3685[safe_add( _3681,_3693 )] = 2;
              _ptr__3684[safe_add( _3682,_3693 )] = _ptr__3645[safe_add( _3655,_3698 )];
              ++ _3693;
              if ((_3651 > (int)0))
              {
                {
                  int _10358 = _ptr__3643[safe_add( _3657,_3698 )];
                  int _10359 = _ptr__3643[safe_add( safe_add( _3657,_3698 ),(int)1 )];
                  for (int _3699 = _10358; _3699 < _10359; ++_3699)
                  {
                    {
                      _ptr__3685[safe_add( _3681,_3693 )] = _ptr__3643[safe_add( _3658,_3699 )];
                      _ptr__3684[safe_add( _3682,_3693 )] = _ptr__3645[safe_add( _3656,_3699 )];
                      ++ _3693;
                    }
                  }
                  _ptr__3685[safe_add( _3681,_3693 )] = 3;
                  ++ _3693;
                }
              }
              {}
              _ptr__3685[safe_add( _3681,_3693 )] = 1;
              _ptr__3684[safe_add( _3682,_3693 )] = _ptr__3662[safe_add( _3661,_3695 )];
              ++ _3693;
              _ptr__3685[safe_add( _3681,_3693 )] = 5;
              ++ _3693;
              _ptr__3685[safe_add( safe_add( _3680,_3694 ),(int)1 )] = _3693;
              ++ _3694;
            }
          }
        }
      }
      if ((_3694 != _3664))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: invalid nzi"));
        }
      }
      {}
      if ((_3693 != _3666))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: invalid codei"));
        }
      }
      {}
    }
  }
  _3642->clear();
}
std::string mosek::fusion::ExprDotParam :: toString() { return mosek::fusion::p_ExprDotParam::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprDotParam::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprDotParam("))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprDotParam::destroy(){e.reset();p.reset();}void mosek::fusion::ExprDotParam::destroy() { mosek::fusion::p_ExprDotParam::_get_impl(this)->destroy(); }mosek::fusion::ExprMulParamElem::ExprMulParamElem(mosek::fusion::p_ExprMulParamElem *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulParamElem()" << this << std::endl; */ }mosek::fusion::ExprMulParamElem::~ExprMulParamElem() {  /* std::cout << "~ExprMulParamElem()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulParamElem::p_ExprMulParamElem  (::mosek::fusion::ExprMulParamElem * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulParamElem::t mosek::fusion::p_ExprMulParamElem::_new_ExprMulParamElem  (monty::rc_ptr< ::mosek::fusion::Parameter > _3700,    monty::rc_ptr< ::mosek::fusion::Expression > _3701){ return new mosek::fusion::ExprMulParamElem(_3700,_3701); }mosek::fusion::ExprMulParamElem::ExprMulParamElem  (monty::rc_ptr< ::mosek::fusion::Parameter > _3700,    monty::rc_ptr< ::mosek::fusion::Expression > _3701) :    ExprMulParamElem(new mosek::fusion::p_ExprMulParamElem(this)){ mosek::fusion::p_ExprMulParamElem::_get_impl(this)->_initialize(_3700,_3701); }void mosek::fusion::p_ExprMulParamElem::_initialize  (monty::rc_ptr< ::mosek::fusion::Parameter > _3700,    monty::rc_ptr< ::mosek::fusion::Expression > _3701){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_3701->getShape());
    mosek::fusion::p_ExprMulParamElem::_get_impl(::mosek::fusion::ExprMulParamElem::t(_pubthis))->p = _3700;
    mosek::fusion::p_ExprMulParamElem::_get_impl(::mosek::fusion::ExprMulParamElem::t(_pubthis))->e = _3701;
    if ((_3700->getND() != _3701->getND()))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    {}
    int _10360 = (int)0;
    int _10361 = _3700->getND();
    for (int _3702 = _10360; _3702 < _10361; ++_3702)
    {
      {
        if ((_3700->getDim(_3702) != _3701->getDim(_3702)))
        {
          {
            throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
          }
        }
        {}
      }
    }
  }
}void mosek::fusion::ExprMulParamElem :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3703,monty::rc_ptr< ::mosek::fusion::WorkStack > _3704,monty::rc_ptr< ::mosek::fusion::WorkStack > _3705) { mosek::fusion::p_ExprMulParamElem::_get_impl(this)->eval(_3703,_3704,_3705); }void mosek::fusion::p_ExprMulParamElem::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3703,monty::rc_ptr< ::mosek::fusion::WorkStack > _3704,monty::rc_ptr< ::mosek::fusion::WorkStack > _3705){
  e->eval(_3704,_3703,_3705);
  _3704->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _3706 = mosek::fusion::p_WorkStack::_get_impl(_3704)->i32;
  _checked_ptr_1<int> _ptr__3706(_3706 ? _3706->raw() : nullptr,_3706 ? _3706->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3707 = mosek::fusion::p_WorkStack::_get_impl(_3704)->i64;
  _checked_ptr_1<long long> _ptr__3707(_3707 ? _3707->raw() : nullptr,_3707 ? _3707->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3708 = mosek::fusion::p_WorkStack::_get_impl(_3704)->f64;
  _checked_ptr_1<double> _ptr__3708(_3708 ? _3708->raw() : nullptr,_3708 ? _3708->size(0) : 0);
  int _3709 = mosek::fusion::p_WorkStack::_get_impl(_3704)->nd;
  int _3710 = mosek::fusion::p_WorkStack::_get_impl(_3704)->nelem;
  int _3711 = mosek::fusion::p_WorkStack::_get_impl(_3704)->nnz;
  bool _3712 = mosek::fusion::p_WorkStack::_get_impl(_3704)->hassp;
  int _3713 = mosek::fusion::p_WorkStack::_get_impl(_3704)->ptr_base;
  int _3714 = mosek::fusion::p_WorkStack::_get_impl(_3704)->ncodeatom;
  int _3715 = mosek::fusion::p_WorkStack::_get_impl(_3704)->shape_base;
  int _3716 = mosek::fusion::p_WorkStack::_get_impl(_3704)->sp_base;
  int _3717 = mosek::fusion::p_WorkStack::_get_impl(_3704)->nidxs_base;
  int _3718 = mosek::fusion::p_WorkStack::_get_impl(_3704)->cof_base;
  int _3719 = mosek::fusion::p_WorkStack::_get_impl(_3704)->cconst_base;
  int _3720 = mosek::fusion::p_WorkStack::_get_impl(_3704)->codeptr_base;
  int _3721 = mosek::fusion::p_WorkStack::_get_impl(_3704)->code_base;
  int _3722 = p->getNumNonzero();
  int _3723 = _3705->alloci64(_3722);
  p->getSp(mosek::fusion::p_WorkStack::_get_impl(_3705)->i64,_3723);
  int _3724 = _3705->alloci32(p->getNumNonzero());
  std::shared_ptr< monty::ndarray< int,1 > > _3725 = mosek::fusion::p_WorkStack::_get_impl(_3705)->i32;
  _checked_ptr_1<int> _ptr__3725(_3725 ? _3725->raw() : nullptr,_3725 ? _3725->size(0) : 0);
  p->getAllIndexes(_3725,_3724);
  std::shared_ptr< monty::ndarray< long long,1 > > _3726 = mosek::fusion::p_WorkStack::_get_impl(_3705)->i64;
  _checked_ptr_1<long long> _ptr__3726(_3726 ? _3726->raw() : nullptr,_3726 ? _3726->size(0) : 0);
  int _3727 = _3709;
  int _3728 = (int)0;
  int _3729 = (int)0;
  int _3730 = (int)0;
  if (_3712)
  {
    {
      int _3731 = (int)0;
      int _3732 = (int)0;
      while ( ((_3731 < _3710) && (_3732 < _3722)) )
      {
        {
          if ((_ptr__3707[safe_add( _3716,_3731 )] < _ptr__3726[safe_add( _3723,_3732 )]))
          {
            {
              ++ _3731;
            }
          }
          else if((_ptr__3707[safe_add( _3716,_3731 )] > _ptr__3726[safe_add( _3723,_3732 )]))
          {
            {
              ++ _3732;
            }
          }
          else
          {
            {
              int _3733 = (_ptr__3706[safe_add( safe_add( _3713,_3731 ),(int)1 )] - _ptr__3706[safe_add( _3713,_3731 )]);
              _3728 += _3733;
              int _10362;
              bool _10363 = (_3714 > (int)0);
              if (_10363)
              {
                _10362 = safe_add( (_ptr__3706[safe_add( _3720,_ptr__3706[safe_add( safe_add( _3713,_3731 ),(int)1 )] )] - _ptr__3706[safe_add( _3720,_ptr__3706[safe_add( _3713,_3731 )] )]),safe_mul( (int)4,_3733 ) );
              }
              else
              {
                _10362 = safe_mul( (int)3,_3733 );
              }
              _3730 += _10362;
              _3729 += (int)1;
              ++ _3731;
              ++ _3732;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      _3729 = _3722;
      int _10364 = (int)0;
      int _10365 = _3722;
      for (int _3734 = _10364; _3734 < _10365; ++_3734)
      {
        {
          _3728 += (_ptr__3706[safe_add( safe_add( _3713,_ptr__3726[safe_add( _3723,_3734 )] ),(int)1 )] - _ptr__3706[safe_add( _3713,_ptr__3726[safe_add( _3723,_3734 )] )]);
        }
      }
      if ((_3714 > (int)0))
      {
        {
          int _10366 = (int)0;
          int _10367 = _3722;
          for (int _3735 = _10366; _3735 < _10367; ++_3735)
          {
            {
              _3730 += safe_add( (_ptr__3706[safe_add( _3720,_ptr__3706[safe_add( safe_add( _3713,_ptr__3726[safe_add( _3723,_3735 )] ),(int)1 )] )] - _ptr__3706[safe_add( _3720,_ptr__3706[safe_add( _3713,_ptr__3726[safe_add( _3723,_3735 )] )] )]),safe_mul( (int)4,(_ptr__3706[safe_add( safe_add( _3713,_ptr__3726[safe_add( _3723,_3735 )] ),(int)1 )] - _ptr__3706[safe_add( _3713,_ptr__3726[safe_add( _3723,_3735 )] )]) ) );
            }
          }
        }
      }
      else
      {
        {
          int _10368 = (int)0;
          int _10369 = _3722;
          for (int _3736 = _10368; _3736 < _10369; ++_3736)
          {
            {
              _3730 += safe_mul( (int)3,(_ptr__3706[safe_add( safe_add( _3713,_ptr__3726[safe_add( _3723,_3736 )] ),(int)1 )] - _ptr__3706[safe_add( _3713,_ptr__3726[safe_add( _3723,_3736 )] )]) );
            }
          }
        }
      }
    }
  }
  long long _3737 = (int)1;
  int _10370 = (int)0;
  int _10371 = _3709;
  for (int _3738 = _10370; _3738 < _10371; ++_3738)
  {
    {
      _3737 *= _ptr__3706[safe_add( _3715,_3738 )];
    }
  }
  bool _3739 = (_3729 < _3737);
  _3703->alloc_expr(_3727,_3729,_3728,_3739,_3730);
  int _3740 = mosek::fusion::p_WorkStack::_get_impl(_3703)->ptr_base;
  int _3741 = mosek::fusion::p_WorkStack::_get_impl(_3703)->nidxs_base;
  int _10372;
  bool _10373 = _3739;
  if (_10373)
  {
    _10372 = mosek::fusion::p_WorkStack::_get_impl(_3703)->sp_base;
  }
  else
  {
    _10372 = _3703->alloci64(_3729);
  }
  int _3742 = _10372;
  int _3743 = mosek::fusion::p_WorkStack::_get_impl(_3703)->cof_base;
  bool _3744 = mosek::fusion::p_WorkStack::_get_impl(_3703)->hassp;
  int _3745 = mosek::fusion::p_WorkStack::_get_impl(_3703)->shape_base;
  int _3746 = mosek::fusion::p_WorkStack::_get_impl(_3703)->codeptr_base;
  int _3747 = mosek::fusion::p_WorkStack::_get_impl(_3703)->code_base;
  int _3748 = mosek::fusion::p_WorkStack::_get_impl(_3703)->cconst_base;
  std::shared_ptr< monty::ndarray< long long,1 > > _3749 = mosek::fusion::p_WorkStack::_get_impl(_3703)->i64;
  _checked_ptr_1<long long> _ptr__3749(_3749 ? _3749->raw() : nullptr,_3749 ? _3749->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3750 = mosek::fusion::p_WorkStack::_get_impl(_3703)->f64;
  _checked_ptr_1<double> _ptr__3750(_3750 ? _3750->raw() : nullptr,_3750 ? _3750->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3751 = mosek::fusion::p_WorkStack::_get_impl(_3703)->i32;
  _checked_ptr_1<int> _ptr__3751(_3751 ? _3751->raw() : nullptr,_3751 ? _3751->size(0) : 0);
  int _10374 = (int)0;
  int _10375 = _3709;
  for (int _3752 = _10374; _3752 < _10375; ++_3752)
  {
    {
      _ptr__3751[safe_add( _3745,_3752 )] = _ptr__3706[safe_add( _3715,_3752 )];
    }
  }
  _ptr__3751[_3740] = (int)0;
  if ((_3730 > (int)0))
  {
    {
      _ptr__3751[_3746] = (int)0;
    }
  }
  {}
  if (_3712)
  {
    {
      int _3753 = (int)0;
      int _3754 = (int)0;
      int _3755 = (int)0;
      int _3756 = (int)0;
      int _3757 = (int)0;
      while ( ((_3756 < _3710) && (_3757 < _3722)) )
      {
        {
          if ((_ptr__3707[safe_add( _3716,_3756 )] < _ptr__3726[safe_add( _3723,_3757 )]))
          {
            {
              ++ _3756;
            }
          }
          else if((_ptr__3707[safe_add( _3716,_3756 )] > _ptr__3726[safe_add( _3723,_3757 )]))
          {
            {
              ++ _3757;
            }
          }
          else
          {
            {
              int _10376 = _ptr__3706[safe_add( _3713,_3756 )];
              int _10377 = _ptr__3706[safe_add( safe_add( _3713,_3756 ),(int)1 )];
              for (int _3758 = _10376; _3758 < _10377; ++_3758)
              {
                {
                  _ptr__3749[safe_add( _3741,_3754 )] = _ptr__3707[safe_add( _3717,_3758 )];
                  _ptr__3750[safe_add( _3743,_3754 )] = 0.0;
                  _ptr__3751[safe_add( _3747,_3753 )] = 2;
                  _ptr__3750[safe_add( _3748,_3753 )] = _ptr__3708[safe_add( _3718,_3758 )];
                  ++ _3753;
                  if ((_3714 > (int)0))
                  {
                    {
                      int _10378 = _ptr__3706[safe_add( _3720,_3758 )];
                      int _10379 = _ptr__3706[safe_add( safe_add( _3720,_3758 ),(int)1 )];
                      for (int _3759 = _10378; _3759 < _10379; ++_3759)
                      {
                        {
                          _ptr__3751[safe_add( _3747,_3753 )] = _ptr__3706[safe_add( _3721,_3759 )];
                          _ptr__3750[safe_add( _3748,_3753 )] = _ptr__3708[safe_add( _3719,_3759 )];
                          ++ _3753;
                        }
                      }
                      _ptr__3751[safe_add( _3747,_3753 )] = 3;
                      ++ _3753;
                    }
                  }
                  {}
                  _ptr__3751[safe_add( _3747,_3753 )] = 1;
                  _ptr__3750[safe_add( _3748,_3753 )] = _ptr__3725[safe_add( _3724,_3757 )];
                  ++ _3753;
                  _ptr__3751[safe_add( _3747,_3753 )] = 5;
                  ++ _3753;
                  _ptr__3751[safe_add( safe_add( _3746,_3754 ),(int)1 )] = _3753;
                  ++ _3754;
                }
              }
              _ptr__3749[safe_add( _3742,_3755 )] = _ptr__3707[safe_add( _3716,_3756 )];
              _ptr__3751[safe_add( safe_add( _3740,_3755 ),(int)1 )] = _3754;
              ++ _3755;
              ++ _3756;
              ++ _3757;
            }
          }
        }
      }
      if ((_3755 != _3729))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: broken elmi"));
        }
      }
      {}
      if ((_3754 != _3728))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: broken nzi"));
        }
      }
      {}
      if ((_3753 != _3730))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: broken codei"));
        }
      }
      {}
    }
  }
  else
  {
    {
      int _3760 = (int)0;
      int _3761 = (int)0;
      int _10380 = (int)0;
      int _10381 = _3722;
      for (int _3762 = _10380; _3762 < _10381; ++_3762)
      {
        {
          int _3763 = _3762;
          long long _3764 = _ptr__3726[safe_add( _3723,_3762 )];
          int _10382 = _ptr__3706[safe_add( _3713,_3764 )];
          int _10383 = _ptr__3706[safe_add( safe_add( _3713,_3764 ),(int)1 )];
          for (int _3765 = _10382; _3765 < _10383; ++_3765)
          {
            {
              _ptr__3749[safe_add( _3741,_3761 )] = _ptr__3707[safe_add( _3717,_3765 )];
              _ptr__3750[safe_add( _3743,_3761 )] = 0.0;
              _ptr__3751[safe_add( _3747,_3760 )] = 2;
              _ptr__3750[safe_add( _3748,_3760 )] = _ptr__3708[safe_add( _3718,_3765 )];
              ++ _3760;
              if ((_3714 > (int)0))
              {
                {
                  int _10384 = _ptr__3706[safe_add( _3720,_3765 )];
                  int _10385 = _ptr__3706[safe_add( safe_add( _3720,_3765 ),(int)1 )];
                  for (int _3766 = _10384; _3766 < _10385; ++_3766)
                  {
                    {
                      _ptr__3751[safe_add( _3747,_3760 )] = _ptr__3706[safe_add( _3721,_3766 )];
                      _ptr__3750[safe_add( _3748,_3760 )] = _ptr__3708[safe_add( _3719,_3766 )];
                      ++ _3760;
                    }
                  }
                  _ptr__3751[safe_add( _3747,_3760 )] = 3;
                  ++ _3760;
                }
              }
              {}
              _ptr__3751[safe_add( _3747,_3760 )] = 1;
              _ptr__3750[safe_add( _3748,_3760 )] = _ptr__3725[safe_add( _3724,_3762 )];
              ++ _3760;
              _ptr__3751[safe_add( _3747,_3760 )] = 5;
              ++ _3760;
              _ptr__3751[safe_add( safe_add( _3746,_3761 ),(int)1 )] = _3760;
              ++ _3761;
            }
          }
          _ptr__3749[safe_add( _3742,_3763 )] = _3764;
          _ptr__3751[safe_add( safe_add( _3740,_3763 ),(int)1 )] = _3761;
        }
      }
      if ((_3730 != _3760))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Invalid code list result"));
        }
      }
      {}
    }
  }
  if ((!_3744))
  {
    {
      _3703->popi64(_3729);
    }
  }
  {}
  _3705->clear();
}
std::string mosek::fusion::ExprMulParamElem :: toString() { return mosek::fusion::p_ExprMulParamElem::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulParamElem::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulParamElem("))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulParamElem::destroy(){e.reset();p.reset();}void mosek::fusion::ExprMulParamElem::destroy() { mosek::fusion::p_ExprMulParamElem::_get_impl(this)->destroy(); }mosek::fusion::ExprMulParamRight::ExprMulParamRight(mosek::fusion::p_ExprMulParamRight *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulParamRight()" << this << std::endl; */ }mosek::fusion::ExprMulParamRight::~ExprMulParamRight() {  /* std::cout << "~ExprMulParamRight()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulParamRight::p_ExprMulParamRight  (::mosek::fusion::ExprMulParamRight * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulParamRight::t mosek::fusion::p_ExprMulParamRight::_new_ExprMulParamRight  (monty::rc_ptr< ::mosek::fusion::Expression > _3767,    monty::rc_ptr< ::mosek::fusion::Parameter > _3768){ return new mosek::fusion::ExprMulParamRight(_3767,_3768); }mosek::fusion::ExprMulParamRight::ExprMulParamRight  (monty::rc_ptr< ::mosek::fusion::Expression > _3767,    monty::rc_ptr< ::mosek::fusion::Parameter > _3768) :    ExprMulParamRight(new mosek::fusion::p_ExprMulParamRight(this)){ mosek::fusion::p_ExprMulParamRight::_get_impl(this)->_initialize(_3767,_3768); }void mosek::fusion::p_ExprMulParamRight::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _3767,    monty::rc_ptr< ::mosek::fusion::Parameter > _3768){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3767->getDim((int)0)),(int)(_3768->getDim((int)1))}));
    mosek::fusion::p_ExprMulParamRight::_get_impl(::mosek::fusion::ExprMulParamRight::t(_pubthis))->p = _3768;
    mosek::fusion::p_ExprMulParamRight::_get_impl(::mosek::fusion::ExprMulParamRight::t(_pubthis))->e = _3767;
    if (((_3768->getND() != (int)2) || (_3767->getND() != (int)2)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
    if ((_3768->getDim((int)0) != _3767->getDim((int)1)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    {}
  }
}void mosek::fusion::ExprMulParamRight :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3769,monty::rc_ptr< ::mosek::fusion::WorkStack > _3770,monty::rc_ptr< ::mosek::fusion::WorkStack > _3771) { mosek::fusion::p_ExprMulParamRight::_get_impl(this)->eval(_3769,_3770,_3771); }void mosek::fusion::p_ExprMulParamRight::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3769,monty::rc_ptr< ::mosek::fusion::WorkStack > _3770,monty::rc_ptr< ::mosek::fusion::WorkStack > _3771){
  e->eval(_3770,_3769,_3771);
  _3770->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _3772 = mosek::fusion::p_WorkStack::_get_impl(_3770)->i32;
  _checked_ptr_1<int> _ptr__3772(_3772 ? _3772->raw() : nullptr,_3772 ? _3772->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3773 = mosek::fusion::p_WorkStack::_get_impl(_3770)->i64;
  _checked_ptr_1<long long> _ptr__3773(_3773 ? _3773->raw() : nullptr,_3773 ? _3773->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3774 = mosek::fusion::p_WorkStack::_get_impl(_3770)->f64;
  _checked_ptr_1<double> _ptr__3774(_3774 ? _3774->raw() : nullptr,_3774 ? _3774->size(0) : 0);
  int _3775 = mosek::fusion::p_WorkStack::_get_impl(_3770)->nd;
  int _3776 = mosek::fusion::p_WorkStack::_get_impl(_3770)->nelem;
  int _3777 = mosek::fusion::p_WorkStack::_get_impl(_3770)->nnz;
  bool _3778 = mosek::fusion::p_WorkStack::_get_impl(_3770)->hassp;
  int _3779 = mosek::fusion::p_WorkStack::_get_impl(_3770)->ptr_base;
  int _3780 = mosek::fusion::p_WorkStack::_get_impl(_3770)->ncodeatom;
  int _3781 = mosek::fusion::p_WorkStack::_get_impl(_3770)->shape_base;
  int _3782 = mosek::fusion::p_WorkStack::_get_impl(_3770)->sp_base;
  int _3783 = mosek::fusion::p_WorkStack::_get_impl(_3770)->nidxs_base;
  int _3784 = mosek::fusion::p_WorkStack::_get_impl(_3770)->cof_base;
  int _3785 = mosek::fusion::p_WorkStack::_get_impl(_3770)->cconst_base;
  int _3786 = mosek::fusion::p_WorkStack::_get_impl(_3770)->codeptr_base;
  int _3787 = mosek::fusion::p_WorkStack::_get_impl(_3770)->code_base;
  if (((_3775 != (int)2) || (p->getDim((int)0) != _ptr__3772[safe_add( _3781,(int)1 )])))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  int _3788 = _ptr__3772[_3781];
  int _3789 = _ptr__3772[safe_add( _3781,(int)1 )];
  int _3790 = p->getDim((int)0);
  int _3791 = p->getDim((int)1);
  int _3792 = p->getNumNonzero();
  int _3793 = _3771->alloci32(p->getNumNonzero());
  std::shared_ptr< monty::ndarray< int,1 > > _3794 = mosek::fusion::p_WorkStack::_get_impl(_3771)->i32;
  _checked_ptr_1<int> _ptr__3794(_3794 ? _3794->raw() : nullptr,_3794 ? _3794->size(0) : 0);
  p->getAllIndexes(_3794,_3793);
  int _3795 = _3771->alloci32(_3792);
  int _3796 = _3771->alloci64(_3792);
  p->getSp(mosek::fusion::p_WorkStack::_get_impl(_3771)->i64,_3796);
  {
    int _3797 = _3771->alloci32(safe_add( _3791,(int)1 ));
    std::shared_ptr< monty::ndarray< int,1 > > _3798 = mosek::fusion::p_WorkStack::_get_impl(_3771)->i32;
    _checked_ptr_1<int> _ptr__3798(_3798 ? _3798->raw() : nullptr,_3798 ? _3798->size(0) : 0);
    std::shared_ptr< monty::ndarray< long long,1 > > _3799 = mosek::fusion::p_WorkStack::_get_impl(_3771)->i64;
    _checked_ptr_1<long long> _ptr__3799(_3799 ? _3799->raw() : nullptr,_3799 ? _3799->size(0) : 0);
    int _10386 = (int)0;
    int _10387 = safe_add( _3791,(int)1 );
    for (int _3800 = _10386; _3800 < _10387; ++_3800)
    {
      {
        _ptr__3798[safe_add( _3797,_3800 )] = (int)0;
      }
    }
    int _10388 = (int)0;
    int _10389 = _3792;
    for (int _3801 = _10388; _3801 < _10389; ++_3801)
    {
      {
        ++ _ptr__3798[safe_add( safe_add( _3797,(_ptr__3799[safe_add( _3796,_3801 )] % _3791) ),(int)1 )];
      }
    }
    int _10390 = (int)0;
    int _10391 = _3791;
    for (int _3802 = _10390; _3802 < _10391; ++_3802)
    {
      {
        _ptr__3798[safe_add( safe_add( _3797,_3802 ),(int)1 )] += _ptr__3798[safe_add( _3797,_3802 )];
      }
    }
    int _10392 = (int)0;
    int _10393 = _3792;
    for (int _3803 = _10392; _3803 < _10393; ++_3803)
    {
      {
        _ptr__3798[safe_add( _3795,_ptr__3798[safe_add( _3797,(_ptr__3799[safe_add( _3796,_3803 )] % _3791) )] )] = _3803;
        ++ _ptr__3798[safe_add( _3797,(_ptr__3799[safe_add( _3796,_3803 )] % _3791) )];
      }
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _3804 = mosek::fusion::p_WorkStack::_get_impl(_3771)->i32;
  _checked_ptr_1<int> _ptr__3804(_3804 ? _3804->raw() : nullptr,_3804 ? _3804->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3805 = mosek::fusion::p_WorkStack::_get_impl(_3771)->i64;
  _checked_ptr_1<long long> _ptr__3805(_3805 ? _3805->raw() : nullptr,_3805 ? _3805->size(0) : 0);
  int _3806 = (int)0;
  int _3807 = (int)0;
  int _3808 = (int)0;
  if (((!p->isSparse()) && (!_3778)))
  {
    {
      _3808 = safe_mul( _3777,_3791 );
      _3807 = safe_mul( _3788,_3791 );
      int _10394;
      bool _10395 = (_3780 > (int)0);
      if (_10395)
      {
        _10394 = safe_mul( safe_add( _3780,safe_mul( _3777,(int)4 ) ),_3791 );
      }
      else
      {
        _10394 = safe_mul( safe_mul( _3777,_3791 ),(int)3 );
      }
      _3806 = _10394;
    }
  }
  else if((!_3778))
  {
    {
      int _3809 = (int)0;
      while ( (_3809 < _3792) )
      {
        {
          long long _3810 = (_ptr__3805[safe_add( _3796,_ptr__3804[safe_add( _3795,_3809 )] )] % _3791);
          int _3811 = _3809;
          while ( ((_3809 < _3792) && ((_ptr__3805[safe_add( _3796,_ptr__3804[safe_add( _3795,_3809 )] )] % _3791) == _3810)) )
          {
            {
              long long _3812 = (_ptr__3805[safe_add( _3796,_ptr__3804[safe_add( _3795,_3809 )] )] / _3791);
              int _10396 = (int)0;
              int _10397 = _3788;
              for (int _3813 = _10396; _3813 < _10397; ++_3813)
              {
                {
                  long long _3814 = safe_add( safe_mul( _3813,_3789 ),_3812 );
                  int _3815 = (_ptr__3772[safe_add( safe_add( _3779,_3814 ),(int)1 )] - _ptr__3772[safe_add( _3779,_3814 )]);
                  _3808 += _3815;
                  int _10398;
                  bool _10399 = (_3780 > (int)0);
                  if (_10399)
                  {
                    _10398 = safe_add( (_ptr__3772[safe_add( _3786,_ptr__3772[safe_add( safe_add( _3779,_3814 ),(int)1 )] )] - _ptr__3772[safe_add( _3786,_ptr__3772[safe_add( _3779,_3814 )] )]),safe_mul( _3815,(int)4 ) );
                  }
                  else
                  {
                    _10398 = safe_mul( _3815,(int)3 );
                  }
                  _3806 += _10398;
                }
              }
              ++ _3809;
            }
          }
          _3807 += _3788;
        }
      }
    }
  }
  else
  {
    {
      int _3816 = (int)0;
      while ( (_3816 < _3776) )
      {
        {
          long long _3817 = (_ptr__3773[safe_add( _3782,_3816 )] / _3789);
          int _3818 = _3816;
          long long _3819 = safe_mul( safe_add( _3817,(int)1 ),_3789 );
          while ( ((_3816 < _3776) && (_ptr__3773[safe_add( _3782,_3816 )] < _3819)) )
          {
            {
              ++ _3816;
            }
          }
          int _3820 = (int)0;
          while ( (_3820 < _3792) )
          {
            {
              long long _3821 = (_ptr__3805[safe_add( _3796,_ptr__3804[safe_add( _3795,_3820 )] )] % _3791);
              int _3822 = _3820;
              while ( ((_3820 < _3792) && (_3821 == (_ptr__3805[safe_add( _3796,_ptr__3804[safe_add( _3795,_3820 )] )] % _3791))) )
              {
                {
                  ++ _3820;
                }
              }
              int _3823 = (int)0;
              int _3824 = _3822;
              int _3825 = _3818;
              while ( ((_3825 < _3816) && (_3824 < _3820)) )
              {
                {
                  long long _3826 = (_ptr__3773[safe_add( _3782,_3825 )] % _3789);
                  long long _3827 = (_ptr__3805[safe_add( _3796,_ptr__3804[safe_add( _3795,_3824 )] )] / _3791);
                  if ((_3826 < _3827))
                  {
                    {
                      ++ _3825;
                    }
                  }
                  else if((_3826 > _3827))
                  {
                    {
                      ++ _3824;
                    }
                  }
                  else
                  {
                    {
                      int _3828 = (_ptr__3772[safe_add( safe_add( _3779,_3825 ),(int)1 )] - _ptr__3772[safe_add( _3779,_3825 )]);
                      _3808 += _3828;
                      int _10400;
                      bool _10401 = (_3780 > (int)0);
                      if (_10401)
                      {
                        _10400 = safe_add( (_ptr__3772[safe_add( _3786,_ptr__3772[safe_add( safe_add( _3779,_3825 ),(int)1 )] )] - _ptr__3772[safe_add( _3786,_ptr__3772[safe_add( _3779,_3825 )] )]),safe_mul( _3828,(int)4 ) );
                      }
                      else
                      {
                        _10400 = safe_mul( _3828,(int)3 );
                      }
                      _3806 += _10400;
                      ++ _3825;
                      ++ _3824;
                      ++ _3823;
                    }
                  }
                }
              }
              if ((_3823 > (int)0))
              {
                {
                  ++ _3807;
                }
              }
              {}
            }
          }
        }
      }
    }
  }
  int _3829 = (int)2;
  bool _3830 = (_3807 < safe_mul( _3791,_3788 ));
  _3769->alloc_expr(_3829,_3807,_3808,_3830,_3806);
  int _3831 = mosek::fusion::p_WorkStack::_get_impl(_3769)->ptr_base;
  int _3832 = mosek::fusion::p_WorkStack::_get_impl(_3769)->nidxs_base;
  int _10402;
  bool _10403 = _3830;
  if (_10403)
  {
    _10402 = mosek::fusion::p_WorkStack::_get_impl(_3769)->sp_base;
  }
  else
  {
    _10402 = _3769->alloci64(_3807);
  }
  int _3833 = _10402;
  int _3834 = mosek::fusion::p_WorkStack::_get_impl(_3769)->cof_base;
  bool _3835 = mosek::fusion::p_WorkStack::_get_impl(_3769)->hassp;
  int _3836 = mosek::fusion::p_WorkStack::_get_impl(_3769)->shape_base;
  int _3837 = mosek::fusion::p_WorkStack::_get_impl(_3769)->codeptr_base;
  int _3838 = mosek::fusion::p_WorkStack::_get_impl(_3769)->code_base;
  int _3839 = mosek::fusion::p_WorkStack::_get_impl(_3769)->cconst_base;
  std::shared_ptr< monty::ndarray< long long,1 > > _3840 = mosek::fusion::p_WorkStack::_get_impl(_3769)->i64;
  _checked_ptr_1<long long> _ptr__3840(_3840 ? _3840->raw() : nullptr,_3840 ? _3840->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3841 = mosek::fusion::p_WorkStack::_get_impl(_3769)->f64;
  _checked_ptr_1<double> _ptr__3841(_3841 ? _3841->raw() : nullptr,_3841 ? _3841->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3842 = mosek::fusion::p_WorkStack::_get_impl(_3769)->i32;
  _checked_ptr_1<int> _ptr__3842(_3842 ? _3842->raw() : nullptr,_3842 ? _3842->size(0) : 0);
  _ptr__3842[_3831] = (int)0;
  if ((_3806 > (int)0))
  {
    {
      _ptr__3842[_3837] = (int)0;
    }
  }
  {}
  _ptr__3842[_3836] = _3788;
  _ptr__3842[safe_add( _3836,(int)1 )] = _3791;
  int _3843 = (int)0;
  int _3844 = (int)0;
  int _3845 = (int)0;
  if ((!_3778))
  {
    {
      int _10404 = (int)0;
      int _10405 = _3788;
      for (int _3846 = _10404; _3846 < _10405; ++_3846)
      {
        {
          int _3847 = (int)0;
          while ( (_3847 < _3792) )
          {
            {
              int _3848 = _3847;
              long long _3849 = (_ptr__3805[safe_add( _3796,_ptr__3804[safe_add( _3795,_3847 )] )] % _3791);
              while ( ((_3847 < _3792) && (_3849 == (_ptr__3805[safe_add( _3796,_ptr__3804[safe_add( _3795,_3847 )] )] % _3791))) )
              {
                {
                  ++ _3847;
                }
              }
              int _3850 = _3848;
              while ( (_3850 < _3847) )
              {
                {
                  long long _3851 = (_ptr__3805[safe_add( _3796,_ptr__3804[safe_add( _3795,_3850 )] )] / _3791);
                  long long _3852 = safe_add( safe_mul( _3846,_3789 ),_3851 );
                  int _3853 = _ptr__3804[safe_add( _3793,_ptr__3804[safe_add( _3795,_3850 )] )];
                  int _10406 = _ptr__3772[safe_add( _3779,_3852 )];
                  int _10407 = _ptr__3772[safe_add( safe_add( _3779,_3852 ),(int)1 )];
                  for (int _3854 = _10406; _3854 < _10407; ++_3854)
                  {
                    {
                      _ptr__3840[safe_add( _3832,_3845 )] = _ptr__3773[safe_add( _3783,_3854 )];
                      _ptr__3841[safe_add( _3834,_3845 )] = (int)0;
                      _ptr__3842[safe_add( _3838,_3843 )] = 2;
                      _ptr__3841[safe_add( _3839,_3843 )] = _ptr__3774[safe_add( _3784,_3854 )];
                      ++ _3843;
                      if ((_3780 > (int)0))
                      {
                        {
                          int _10408 = _ptr__3772[safe_add( _3786,_3854 )];
                          int _10409 = _ptr__3772[safe_add( safe_add( _3786,_3854 ),(int)1 )];
                          for (int _3855 = _10408; _3855 < _10409; ++_3855)
                          {
                            {
                              _ptr__3842[safe_add( _3838,_3843 )] = _ptr__3772[safe_add( _3787,_3855 )];
                              _ptr__3841[safe_add( _3839,_3843 )] = _ptr__3774[safe_add( _3785,_3855 )];
                              ++ _3843;
                            }
                          }
                          _ptr__3842[safe_add( _3838,_3843 )] = 3;
                          ++ _3843;
                        }
                      }
                      {}
                      _ptr__3842[safe_add( _3838,_3843 )] = 1;
                      _ptr__3841[safe_add( _3839,_3843 )] = _3853;
                      ++ _3843;
                      _ptr__3842[safe_add( _3838,_3843 )] = 5;
                      ++ _3843;
                      _ptr__3842[safe_add( safe_add( _3837,_3845 ),(int)1 )] = _3843;
                      ++ _3845;
                    }
                  }
                  ++ _3850;
                }
              }
              _ptr__3842[safe_add( safe_add( _3831,_3844 ),(int)1 )] = _3845;
              _ptr__3840[safe_add( _3833,_3844 )] = safe_add( safe_mul( _3846,_3791 ),_3849 );
              ++ _3844;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int _3856 = (int)0;
      while ( (_3856 < _3776) )
      {
        {
          long long _3857 = (_ptr__3773[safe_add( _3782,_3856 )] / _3789);
          int _3858 = _3856;
          long long _3859 = safe_mul( safe_add( _3857,(int)1 ),_3789 );
          while ( ((_3856 < _3776) && (_ptr__3773[safe_add( _3782,_3856 )] < _3859)) )
          {
            {
              ++ _3856;
            }
          }
          int _3860 = (int)0;
          while ( (_3860 < _3792) )
          {
            {
              long long _3861 = (_ptr__3805[safe_add( _3796,_ptr__3804[safe_add( _3795,_3860 )] )] % _3791);
              int _3862 = _3860;
              while ( ((_3860 < _3792) && (_3861 == (_ptr__3805[safe_add( _3796,_ptr__3804[safe_add( _3795,_3860 )] )] % _3791))) )
              {
                {
                  ++ _3860;
                }
              }
              int _3863 = (int)0;
              int _3864 = _3862;
              int _3865 = _3858;
              while ( ((_3865 < _3856) && (_3864 < _3860)) )
              {
                {
                  long long _3866 = (_ptr__3773[safe_add( _3782,_3865 )] % _3789);
                  long long _3867 = (_ptr__3805[safe_add( _3796,_ptr__3804[safe_add( _3795,_3864 )] )] / _3791);
                  if ((_3866 < _3867))
                  {
                    {
                      ++ _3865;
                    }
                  }
                  else if((_3866 > _3867))
                  {
                    {
                      ++ _3864;
                    }
                  }
                  else
                  {
                    {
                      int _3868 = _ptr__3804[safe_add( _3793,_ptr__3804[safe_add( _3795,_3864 )] )];
                      int _10410 = _ptr__3772[safe_add( _3779,_3865 )];
                      int _10411 = _ptr__3772[safe_add( safe_add( _3779,_3865 ),(int)1 )];
                      for (int _3869 = _10410; _3869 < _10411; ++_3869)
                      {
                        {
                          _ptr__3840[safe_add( _3832,_3845 )] = _ptr__3773[safe_add( _3783,_3869 )];
                          _ptr__3841[safe_add( _3834,_3845 )] = (int)0;
                          _ptr__3842[safe_add( _3838,_3843 )] = 2;
                          _ptr__3841[safe_add( _3839,_3843 )] = _ptr__3774[safe_add( _3784,_3869 )];
                          ++ _3843;
                          if ((_3780 > (int)0))
                          {
                            {
                              int _10412 = _ptr__3772[safe_add( _3786,_3869 )];
                              int _10413 = _ptr__3772[safe_add( safe_add( _3786,_3869 ),(int)1 )];
                              for (int _3870 = _10412; _3870 < _10413; ++_3870)
                              {
                                {
                                  _ptr__3842[safe_add( _3838,_3843 )] = _ptr__3772[safe_add( _3787,_3870 )];
                                  _ptr__3841[safe_add( _3839,_3843 )] = _ptr__3774[safe_add( _3785,_3870 )];
                                  ++ _3843;
                                }
                              }
                              _ptr__3842[safe_add( _3838,_3843 )] = 3;
                              ++ _3843;
                            }
                          }
                          {}
                          _ptr__3842[safe_add( _3838,_3843 )] = 1;
                          _ptr__3841[safe_add( _3839,_3843 )] = _3868;
                          ++ _3843;
                          _ptr__3842[safe_add( _3838,_3843 )] = 5;
                          ++ _3843;
                          _ptr__3842[safe_add( safe_add( _3837,_3845 ),(int)1 )] = _3843;
                          ++ _3845;
                        }
                      }
                      ++ _3865;
                      ++ _3864;
                      ++ _3863;
                    }
                  }
                }
              }
              if ((_3863 > (int)0))
              {
                {
                  _ptr__3842[safe_add( safe_add( _3831,_3844 ),(int)1 )] = _3845;
                  _ptr__3840[safe_add( _3833,_3844 )] = safe_add( safe_mul( _3857,_3791 ),_3861 );
                  ++ _3844;
                }
              }
              {}
            }
          }
        }
      }
    }
  }
  if ((!_3835))
  {
    {
      _3769->popi64(_3807);
    }
  }
  {}
  if ((_3844 != _3807))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("broken elmi"));
    }
  }
  {}
  if ((_3845 != _3808))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("broken nzi"));
    }
  }
  {}
  if ((_3843 != _3806))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("broken codei"));
    }
  }
  {}
  _3771->clear();
}
std::string mosek::fusion::ExprMulParamRight :: toString() { return mosek::fusion::p_ExprMulParamRight::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulParamRight::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulParamRight("))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulParamRight::destroy(){e.reset();p.reset();}void mosek::fusion::ExprMulParamRight::destroy() { mosek::fusion::p_ExprMulParamRight::_get_impl(this)->destroy(); }mosek::fusion::ExprMulParamLeft::ExprMulParamLeft(mosek::fusion::p_ExprMulParamLeft *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulParamLeft()" << this << std::endl; */ }mosek::fusion::ExprMulParamLeft::~ExprMulParamLeft() {  /* std::cout << "~ExprMulParamLeft()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulParamLeft::p_ExprMulParamLeft  (::mosek::fusion::ExprMulParamLeft * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulParamLeft::t mosek::fusion::p_ExprMulParamLeft::_new_ExprMulParamLeft  (monty::rc_ptr< ::mosek::fusion::Parameter > _3871,    monty::rc_ptr< ::mosek::fusion::Expression > _3872){ return new mosek::fusion::ExprMulParamLeft(_3871,_3872); }mosek::fusion::ExprMulParamLeft::ExprMulParamLeft  (monty::rc_ptr< ::mosek::fusion::Parameter > _3871,    monty::rc_ptr< ::mosek::fusion::Expression > _3872) :    ExprMulParamLeft(new mosek::fusion::p_ExprMulParamLeft(this)){ mosek::fusion::p_ExprMulParamLeft::_get_impl(this)->_initialize(_3871,_3872); }void mosek::fusion::p_ExprMulParamLeft::_initialize  (monty::rc_ptr< ::mosek::fusion::Parameter > _3871,    monty::rc_ptr< ::mosek::fusion::Expression > _3872){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3871->getDim((int)0)),(int)(_3872->getDim((int)1))}));
    mosek::fusion::p_ExprMulParamLeft::_get_impl(::mosek::fusion::ExprMulParamLeft::t(_pubthis))->p = _3871;
    mosek::fusion::p_ExprMulParamLeft::_get_impl(::mosek::fusion::ExprMulParamLeft::t(_pubthis))->e = _3872;
    if (((_3871->getND() != (int)2) || (_3872->getND() != (int)2)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
    if ((_3871->getDim((int)1) != _3872->getDim((int)0)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    {}
  }
}void mosek::fusion::ExprMulParamLeft :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3873,monty::rc_ptr< ::mosek::fusion::WorkStack > _3874,monty::rc_ptr< ::mosek::fusion::WorkStack > _3875) { mosek::fusion::p_ExprMulParamLeft::_get_impl(this)->eval(_3873,_3874,_3875); }void mosek::fusion::p_ExprMulParamLeft::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3873,monty::rc_ptr< ::mosek::fusion::WorkStack > _3874,monty::rc_ptr< ::mosek::fusion::WorkStack > _3875){
  e->eval(_3874,_3873,_3875);
  _3874->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _3876 = mosek::fusion::p_WorkStack::_get_impl(_3874)->i32;
  _checked_ptr_1<int> _ptr__3876(_3876 ? _3876->raw() : nullptr,_3876 ? _3876->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3877 = mosek::fusion::p_WorkStack::_get_impl(_3874)->i64;
  _checked_ptr_1<long long> _ptr__3877(_3877 ? _3877->raw() : nullptr,_3877 ? _3877->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3878 = mosek::fusion::p_WorkStack::_get_impl(_3874)->f64;
  _checked_ptr_1<double> _ptr__3878(_3878 ? _3878->raw() : nullptr,_3878 ? _3878->size(0) : 0);
  int _3879 = mosek::fusion::p_WorkStack::_get_impl(_3874)->nd;
  int _3880 = mosek::fusion::p_WorkStack::_get_impl(_3874)->nelem;
  int _3881 = mosek::fusion::p_WorkStack::_get_impl(_3874)->nnz;
  bool _3882 = mosek::fusion::p_WorkStack::_get_impl(_3874)->hassp;
  int _3883 = mosek::fusion::p_WorkStack::_get_impl(_3874)->ncodeatom;
  int _3884 = mosek::fusion::p_WorkStack::_get_impl(_3874)->ptr_base;
  int _3885 = mosek::fusion::p_WorkStack::_get_impl(_3874)->code_base;
  int _3886 = mosek::fusion::p_WorkStack::_get_impl(_3874)->cconst_base;
  int _3887 = mosek::fusion::p_WorkStack::_get_impl(_3874)->codeptr_base;
  int _3888 = mosek::fusion::p_WorkStack::_get_impl(_3874)->shape_base;
  int _3889 = mosek::fusion::p_WorkStack::_get_impl(_3874)->sp_base;
  int _3890 = mosek::fusion::p_WorkStack::_get_impl(_3874)->nidxs_base;
  int _3891 = mosek::fusion::p_WorkStack::_get_impl(_3874)->cof_base;
  int _3892 = mosek::fusion::p_WorkStack::_get_impl(_3874)->cconst_base;
  if (((_3879 != (int)2) || (_ptr__3876[_3888] != p->getDim((int)1))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  int _3893 = p->getDim((int)0);
  int _3894 = p->getDim((int)1);
  int _3895 = _ptr__3876[_3888];
  int _3896 = _ptr__3876[safe_add( _3888,(int)1 )];
  int _3897 = p->getNumNonzero();
  int _3898 = _3875->alloci32(p->getNumNonzero());
  std::shared_ptr< monty::ndarray< int,1 > > _3899 = mosek::fusion::p_WorkStack::_get_impl(_3875)->i32;
  _checked_ptr_1<int> _ptr__3899(_3899 ? _3899->raw() : nullptr,_3899 ? _3899->size(0) : 0);
  p->getAllIndexes(_3899,_3898);
  if (((!_3882) && (!p->isSparse())))
  {
    {
      int _3900 = (int)2;
      int _3901 = safe_mul( _3896,p->getDim((int)0) );
      int _3902 = safe_mul( _3881,p->getDim((int)0) );
      int _10414;
      bool _10415 = (_3883 > (int)0);
      if (_10415)
      {
        _10414 = safe_add( safe_mul( p->getDim((int)0),_3883 ),safe_mul( (int)4,_3902 ) );
      }
      else
      {
        _10414 = safe_mul( (int)3,_3902 );
      }
      int _3903 = _10414;
      bool _3904 = false;
      _3873->alloc_expr(_3900,_3901,_3902,_3904,_3903);
      std::shared_ptr< monty::ndarray< long long,1 > > _3905 = mosek::fusion::p_WorkStack::_get_impl(_3873)->i64;
      _checked_ptr_1<long long> _ptr__3905(_3905 ? _3905->raw() : nullptr,_3905 ? _3905->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3906 = mosek::fusion::p_WorkStack::_get_impl(_3873)->f64;
      _checked_ptr_1<double> _ptr__3906(_3906 ? _3906->raw() : nullptr,_3906 ? _3906->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _3907 = mosek::fusion::p_WorkStack::_get_impl(_3873)->i32;
      _checked_ptr_1<int> _ptr__3907(_3907 ? _3907->raw() : nullptr,_3907 ? _3907->size(0) : 0);
      int _3908 = mosek::fusion::p_WorkStack::_get_impl(_3873)->ptr_base;
      int _3909 = mosek::fusion::p_WorkStack::_get_impl(_3873)->nidxs_base;
      int _3910 = mosek::fusion::p_WorkStack::_get_impl(_3873)->cof_base;
      int _3911 = mosek::fusion::p_WorkStack::_get_impl(_3873)->code_base;
      int _3912 = mosek::fusion::p_WorkStack::_get_impl(_3873)->codeptr_base;
      int _3913 = mosek::fusion::p_WorkStack::_get_impl(_3873)->cconst_base;
      bool _3914 = mosek::fusion::p_WorkStack::_get_impl(_3873)->hassp;
      int _3915 = mosek::fusion::p_WorkStack::_get_impl(_3873)->shape_base;
      _ptr__3907[_3915] = _3893;
      _ptr__3907[safe_add( _3915,(int)1 )] = _3896;
      {
        _ptr__3907[_3908] = (int)0;
        _ptr__3907[_3912] = (int)0;
        int _3916 = (int)0;
        int _3917 = (int)0;
        int _3918 = (int)0;
        int _10416 = (int)0;
        int _10417 = p->getDim((int)0);
        for (int _3919 = _10416; _3919 < _10417; ++_3919)
        {
          {
            int _10418 = (int)0;
            int _10419 = e->getDim((int)1);
            for (int _3920 = _10418; _3920 < _10419; ++_3920)
            {
              {
                int _10420 = (int)0;
                int _10421 = p->getDim((int)1);
                for (int _3921 = _10420; _3921 < _10421; ++_3921)
                {
                  {
                    int _10422 = _ptr__3876[safe_add( safe_add( _3884,safe_mul( _3921,_3896 ) ),_3920 )];
                    int _10423 = _ptr__3876[safe_add( safe_add( safe_add( _3884,safe_mul( _3921,_3896 ) ),_3920 ),(int)1 )];
                    for (int _3922 = _10422; _3922 < _10423; ++_3922)
                    {
                      {
                        _ptr__3905[safe_add( _3909,_3916 )] = _ptr__3877[safe_add( _3890,_3922 )];
                        _ptr__3906[safe_add( _3910,_3916 )] = 0.0;
                        _ptr__3907[safe_add( _3911,_3918 )] = 2;
                        _ptr__3906[safe_add( _3913,_3918 )] = _ptr__3878[safe_add( _3891,_3922 )];
                        ++ _3918;
                        if ((_3883 > (int)0))
                        {
                          {
                            int _10424 = _ptr__3876[safe_add( _3887,_3922 )];
                            int _10425 = _ptr__3876[safe_add( safe_add( _3887,_3922 ),(int)1 )];
                            for (int _3923 = _10424; _3923 < _10425; ++_3923)
                            {
                              {
                                _ptr__3907[safe_add( _3911,_3918 )] = _ptr__3876[safe_add( _3885,_3923 )];
                                _ptr__3906[safe_add( _3913,_3918 )] = _ptr__3878[safe_add( _3886,_3923 )];
                                ++ _3918;
                              }
                            }
                            _ptr__3907[safe_add( _3911,_3918 )] = 3;
                            ++ _3918;
                          }
                        }
                        {}
                        _ptr__3907[safe_add( _3911,_3918 )] = 1;
                        _ptr__3906[safe_add( _3913,_3918 )] = _ptr__3899[safe_add( safe_add( _3898,safe_mul( _3919,_3894 ) ),_3921 )];
                        ++ _3918;
                        _ptr__3907[safe_add( _3911,_3918 )] = 5;
                        ++ _3918;
                        _ptr__3907[safe_add( safe_add( _3912,_3916 ),(int)1 )] = _3918;
                        ++ _3916;
                      }
                    }
                  }
                }
                _ptr__3907[safe_add( safe_add( _3908,_3917 ),(int)1 )] = _3916;
                ++ _3917;
              }
            }
          }
        }
        if ((_3918 != _3903))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect a-code length"));
          }
        }
        {}
        if ((_3916 != _3902))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect nnz length"));
          }
        }
        {}
        if ((_3917 != _3901))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect nelem length"));
          }
        }
        {}
        int _10426 = (int)0;
        int _10427 = _3901;
        for (int _3924 = _10426; _3924 < _10427; ++_3924)
        {
          {
            if ((_ptr__3907[safe_add( _3908,_3924 )] > _ptr__3907[safe_add( safe_add( _3908,_3924 ),(int)1 )]))
            {
              {
                throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect ptr indexes"));
              }
            }
            {}
          }
        }
      }
    }
  }
  else if((!_3882))
  {
    {
      int _3925 = _3880;
      int _3926 = _3897;
      int _3927 = _3875->alloci64(_3926);
      std::shared_ptr< monty::ndarray< long long,1 > > _3928 = mosek::fusion::p_WorkStack::_get_impl(_3875)->i64;
      _checked_ptr_1<long long> _ptr__3928(_3928 ? _3928->raw() : nullptr,_3928 ? _3928->size(0) : 0);
      p->getSp(_3928,_3927);
      int _3929 = (int)0;
      int _3930 = (int)0;
      int _3931 = (int)0;
      {
        int _3932 = (int)0;
        while ( (_3932 < _3897) )
        {
          {
            int _3933 = (int)(_ptr__3928[safe_add( _3927,_3932 )] / _3894);
            int _3934 = _3932;
            ++ _3932;
            while ( ((_3932 < _3897) && (_ptr__3928[safe_add( _3927,_3932 )] < safe_mul( safe_add( _3933,(int)1 ),_3894 ))) )
            {
              {
                ++ _3932;
              }
            }
            int _3935 = _3932;
            int _10428 = (int)0;
            int _10429 = _3896;
            for (int _3936 = _10428; _3936 < _10429; ++_3936)
            {
              {
                int _10430 = _3934;
                int _10431 = _3935;
                for (int _3937 = _10430; _3937 < _10431; ++_3937)
                {
                  {
                    long long _3938 = safe_add( safe_mul( (_ptr__3928[safe_add( _3927,_3937 )] % _3894),_3896 ),_3936 );
                    int _3939 = (_ptr__3876[safe_add( safe_add( _3884,_3938 ),(int)1 )] - _ptr__3876[safe_add( _3884,_3938 )]);
                    _3930 += _3939;
                    if ((_3883 > (int)0))
                    {
                      {
                        _3931 += safe_add( (_ptr__3876[safe_add( _3887,_ptr__3876[safe_add( safe_add( _3884,_3938 ),(int)1 )] )] - _ptr__3876[safe_add( _3887,_ptr__3876[safe_add( _3884,_3938 )] )]),safe_mul( (int)4,_3939 ) );
                      }
                    }
                    else
                    {
                      {
                        _3931 += safe_mul( (int)3,_3939 );
                      }
                    }
                  }
                }
                ++ _3929;
              }
            }
          }
        }
      }
      bool _3940 = (_3929 < safe_mul( _3893,_3896 ));
      int _3941 = (int)2;
      _3873->alloc_expr(_3941,_3929,_3930,_3940,_3931);
      int _3942 = mosek::fusion::p_WorkStack::_get_impl(_3873)->ptr_base;
      int _3943 = mosek::fusion::p_WorkStack::_get_impl(_3873)->nidxs_base;
      int _10432;
      bool _10433 = _3940;
      if (_10433)
      {
        _10432 = mosek::fusion::p_WorkStack::_get_impl(_3873)->sp_base;
      }
      else
      {
        _10432 = _3873->alloci64(_3929);
      }
      int _3944 = _10432;
      int _3945 = mosek::fusion::p_WorkStack::_get_impl(_3873)->cof_base;
      bool _3946 = mosek::fusion::p_WorkStack::_get_impl(_3873)->hassp;
      int _3947 = mosek::fusion::p_WorkStack::_get_impl(_3873)->shape_base;
      int _3948 = mosek::fusion::p_WorkStack::_get_impl(_3873)->codeptr_base;
      int _3949 = mosek::fusion::p_WorkStack::_get_impl(_3873)->code_base;
      int _3950 = mosek::fusion::p_WorkStack::_get_impl(_3873)->cconst_base;
      std::shared_ptr< monty::ndarray< long long,1 > > _3951 = mosek::fusion::p_WorkStack::_get_impl(_3873)->i64;
      _checked_ptr_1<long long> _ptr__3951(_3951 ? _3951->raw() : nullptr,_3951 ? _3951->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3952 = mosek::fusion::p_WorkStack::_get_impl(_3873)->f64;
      _checked_ptr_1<double> _ptr__3952(_3952 ? _3952->raw() : nullptr,_3952 ? _3952->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _3953 = mosek::fusion::p_WorkStack::_get_impl(_3873)->i32;
      _checked_ptr_1<int> _ptr__3953(_3953 ? _3953->raw() : nullptr,_3953 ? _3953->size(0) : 0);
      _ptr__3953[_3947] = _3893;
      _ptr__3953[safe_add( _3947,(int)1 )] = _3896;
      {
        int _3954 = (int)0;
        int _3955 = (int)0;
        int _3956 = (int)0;
        if ((_3931 > (int)0))
        {
          {
            _ptr__3953[_3948] = (int)0;
          }
        }
        {}
        _ptr__3953[_3942] = (int)0;
        int _10434 = (int)0;
        int _10435 = _3930;
        for (int _3957 = _10434; _3957 < _10435; ++_3957)
        {
          {
            _ptr__3952[safe_add( _3945,_3957 )] = 0.0;
          }
        }
        int _3958 = (int)0;
        while ( (_3958 < _3897) )
        {
          {
            int _3959 = (int)(_ptr__3928[safe_add( _3927,_3958 )] / _3894);
            int _3960 = _3958;
            ++ _3958;
            while ( ((_3958 < _3897) && (_ptr__3928[safe_add( _3927,_3958 )] < safe_mul( safe_add( _3959,(int)1 ),_3894 ))) )
            {
              {
                ++ _3958;
              }
            }
            int _3961 = _3958;
            int _10436 = (int)0;
            int _10437 = _3896;
            for (int _3962 = _10436; _3962 < _10437; ++_3962)
            {
              {
                int _10438 = _3960;
                int _10439 = _3961;
                for (int _3963 = _10438; _3963 < _10439; ++_3963)
                {
                  {
                    long long _3964 = safe_add( safe_mul( (_ptr__3928[safe_add( _3927,_3963 )] % _3894),_3896 ),_3962 );
                    int _10440 = _ptr__3876[safe_add( _3884,_3964 )];
                    int _10441 = _ptr__3876[safe_add( safe_add( _3884,_3964 ),(int)1 )];
                    for (int _3965 = _10440; _3965 < _10441; ++_3965)
                    {
                      {
                        _ptr__3951[safe_add( _3943,_3954 )] = _ptr__3877[safe_add( _3890,_3965 )];
                        _ptr__3953[safe_add( _3949,_3956 )] = 2;
                        _ptr__3952[safe_add( _3950,_3956 )] = _ptr__3878[safe_add( _3891,_3965 )];
                        ++ _3956;
                        if ((_3883 > (int)0))
                        {
                          {
                            int _10442 = _ptr__3876[safe_add( _3887,_3965 )];
                            int _10443 = _ptr__3876[safe_add( safe_add( _3887,_3965 ),(int)1 )];
                            for (int _3966 = _10442; _3966 < _10443; ++_3966)
                            {
                              {
                                _ptr__3953[safe_add( _3949,_3956 )] = _ptr__3876[safe_add( _3885,_3966 )];
                                _ptr__3952[safe_add( _3950,_3956 )] = _ptr__3878[safe_add( _3886,_3966 )];
                                ++ _3956;
                              }
                            }
                            _ptr__3953[safe_add( _3949,_3956 )] = 3;
                            ++ _3956;
                          }
                        }
                        {}
                        _ptr__3953[safe_add( _3949,_3956 )] = 1;
                        _ptr__3952[safe_add( _3950,_3956 )] = _ptr__3899[safe_add( _3898,_3963 )];
                        ++ _3956;
                        _ptr__3953[safe_add( _3949,_3956 )] = 5;
                        ++ _3956;
                        _ptr__3953[safe_add( safe_add( _3948,_3954 ),(int)1 )] = _3956;
                        ++ _3954;
                      }
                    }
                  }
                }
                _ptr__3953[safe_add( safe_add( _3942,_3955 ),(int)1 )] = _3954;
                _ptr__3951[safe_add( _3944,_3955 )] = safe_add( safe_mul( (long long)_3959,_3896 ),_3962 );
                ++ _3955;
              }
            }
          }
        }
        if ((_3956 != _3931))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect code list"));
          }
        }
        {}
        if ((_3954 != _3930))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect nnz length"));
          }
        }
        {}
        if ((_3955 != _3929))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect nelem length"));
          }
        }
        {}
        if ((_ptr__3953[safe_add( _3942,_3929 )] != _3930))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect ptr"));
          }
        }
        {}
      }
      if ((!_3946))
      {
        {
          _3873->popi64(_3929);
        }
      }
      {}
      _3875->clear();
    }
  }
  else
  {
    {
      int _3967 = _3880;
      int _3968 = _3875->alloci32(_3967);
      int _3969 = p->getNumNonzero();
      int _3970 = _3875->alloci64(_3969);
      int _3971 = _3875->alloci32(safe_add( _ptr__3876[safe_add( _3888,(int)1 )],(int)1 ));
      std::shared_ptr< monty::ndarray< int,1 > > _3972 = mosek::fusion::p_WorkStack::_get_impl(_3875)->i32;
      _checked_ptr_1<int> _ptr__3972(_3972 ? _3972->raw() : nullptr,_3972 ? _3972->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _3973 = mosek::fusion::p_WorkStack::_get_impl(_3875)->i64;
      _checked_ptr_1<long long> _ptr__3973(_3973 ? _3973->raw() : nullptr,_3973 ? _3973->size(0) : 0);
      p->getSp(_3973,_3970);
      {
        int _3974 = _ptr__3876[safe_add( _3888,(int)1 )];
        int _10444 = (int)0;
        int _10445 = safe_add( _ptr__3876[safe_add( _3888,(int)1 )],(int)1 );
        for (int _3975 = _10444; _3975 < _10445; ++_3975)
        {
          {
            _ptr__3972[safe_add( _3971,_3975 )] = (int)0;
          }
        }
        int _10446 = (int)0;
        int _10447 = _3880;
        for (int _3976 = _10446; _3976 < _10447; ++_3976)
        {
          {
            ++ _ptr__3972[safe_add( safe_add( _3971,(_ptr__3877[safe_add( _3889,_3976 )] % _3974) ),(int)1 )];
          }
        }
        int _10448 = (int)0;
        int _10449 = _3974;
        for (int _3977 = _10448; _3977 < _10449; ++_3977)
        {
          {
            _ptr__3972[safe_add( safe_add( _3971,_3977 ),(int)1 )] += _ptr__3972[safe_add( _3971,_3977 )];
          }
        }
        int _10450 = (int)0;
        int _10451 = _3880;
        for (int _3978 = _10450; _3978 < _10451; ++_3978)
        {
          {
            _ptr__3972[safe_add( _3968,_ptr__3972[safe_add( _3971,(_ptr__3877[safe_add( _3889,_3978 )] % _3974) )] )] = _3978;
            ++ _ptr__3972[safe_add( _3971,(_ptr__3877[safe_add( _3889,_3978 )] % _3974) )];
          }
        }
      }
      int _3979 = (int)0;
      int _3980 = (int)0;
      int _3981 = (int)0;
      int _3982 = _ptr__3876[safe_add( _3888,(int)1 )];
      int _3983 = _ptr__3876[_3888];
      int _3984 = p->getDim((int)1);
      int _3985 = p->getDim((int)0);
      {
        int _3986 = (int)0;
        while ( (_3986 < _3969) )
        {
          {
            int _3987 = _3986;
            long long _3988 = (_ptr__3973[safe_add( _3970,_3986 )] / _3984);
            while ( ((_3986 < _3969) && (_ptr__3973[safe_add( _3970,_3986 )] < safe_mul( safe_add( _3988,(int)1 ),_3984 ))) )
            {
              {
                ++ _3986;
              }
            }
            int _3989 = (int)0;
            while ( (_3989 < _3880) )
            {
              {
                int _3990 = _3989;
                long long _3991 = (_ptr__3877[safe_add( _3889,_ptr__3972[safe_add( _3968,_3989 )] )] % _3982);
                ++ _3989;
                while ( ((_3989 < _3880) && ((_ptr__3877[safe_add( _3889,_ptr__3972[safe_add( _3968,_3989 )] )] % _3982) == _3991)) )
                {
                  {
                    ++ _3989;
                  }
                }
                int _3992 = _3990;
                int _3993 = _3987;
                bool _3994 = false;
                int _3995 = (int)0;
                while ( ((_3993 < _3986) && (_3992 < _3989)) )
                {
                  {
                    int _3996 = _ptr__3972[safe_add( _3968,_3992 )];
                    if (((_ptr__3973[safe_add( _3970,_3993 )] % _3984) < (_ptr__3877[safe_add( _3889,_3996 )] / _3982)))
                    {
                      {
                        ++ _3993;
                      }
                    }
                    else if(((_ptr__3973[safe_add( _3970,_3993 )] % _3984) > (_ptr__3877[safe_add( _3889,_3996 )] / _3982)))
                    {
                      {
                        ++ _3992;
                      }
                    }
                    else
                    {
                      {
                        int _3997 = (_ptr__3876[safe_add( safe_add( _3884,_3996 ),(int)1 )] - _ptr__3876[safe_add( _3884,_3996 )]);
                        _3980 += _3997;
                        int _10452;
                        bool _10453 = (_3883 > (int)0);
                        if (_10453)
                        {
                          _10452 = safe_add( (_ptr__3876[safe_add( _3887,_ptr__3876[safe_add( safe_add( _3884,_3996 ),(int)1 )] )] - _ptr__3876[safe_add( _3887,_ptr__3876[safe_add( _3884,_3996 )] )]),safe_mul( (int)4,_3997 ) );
                        }
                        else
                        {
                          _10452 = safe_mul( (int)3,_3997 );
                        }
                        _3981 += _10452;
                        ++ _3992;
                        ++ _3993;
                        ++ _3995;
                      }
                    }
                  }
                }
                if ((_3995 > (int)0))
                {
                  {
                    ++ _3979;
                  }
                }
                {}
              }
            }
          }
        }
      }
      int _3998 = (int)2;
      bool _3999 = (_3979 < safe_mul( _3985,_3982 ));
      _3873->alloc_expr(_3998,_3979,_3980,_3999,_3981);
      int _4000 = mosek::fusion::p_WorkStack::_get_impl(_3873)->ptr_base;
      int _4001 = mosek::fusion::p_WorkStack::_get_impl(_3873)->nidxs_base;
      int _10454;
      bool _10455 = _3999;
      if (_10455)
      {
        _10454 = mosek::fusion::p_WorkStack::_get_impl(_3873)->sp_base;
      }
      else
      {
        _10454 = _3873->alloci64(_3979);
      }
      int _4002 = _10454;
      int _4003 = mosek::fusion::p_WorkStack::_get_impl(_3873)->cof_base;
      int _4004 = mosek::fusion::p_WorkStack::_get_impl(_3873)->shape_base;
      int _4005 = mosek::fusion::p_WorkStack::_get_impl(_3873)->codeptr_base;
      int _4006 = mosek::fusion::p_WorkStack::_get_impl(_3873)->code_base;
      int _4007 = mosek::fusion::p_WorkStack::_get_impl(_3873)->cconst_base;
      std::shared_ptr< monty::ndarray< long long,1 > > _4008 = mosek::fusion::p_WorkStack::_get_impl(_3873)->i64;
      _checked_ptr_1<long long> _ptr__4008(_4008 ? _4008->raw() : nullptr,_4008 ? _4008->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4009 = mosek::fusion::p_WorkStack::_get_impl(_3873)->f64;
      _checked_ptr_1<double> _ptr__4009(_4009 ? _4009->raw() : nullptr,_4009 ? _4009->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4010 = mosek::fusion::p_WorkStack::_get_impl(_3873)->i32;
      _checked_ptr_1<int> _ptr__4010(_4010 ? _4010->raw() : nullptr,_4010 ? _4010->size(0) : 0);
      int _10456 = (int)0;
      int _10457 = safe_add( _3979,(int)1 );
      for (int _4011 = _10456; _4011 < _10457; ++_4011)
      {
        {
          _ptr__4010[safe_add( _4000,_4011 )] = (-(int)9999);
        }
      }
      {
        _ptr__4010[_4000] = (int)0;
        if ((_3981 > (int)0))
        {
          {
            _ptr__4010[_4005] = (int)0;
          }
        }
        {}
        _ptr__4010[_4004] = _3985;
        _ptr__4010[safe_add( _4004,(int)1 )] = _3982;
        int _4012 = (int)0;
        int _4013 = (int)0;
        int _4014 = (int)0;
        int _10458 = (int)0;
        int _10459 = _3980;
        for (int _4015 = _10458; _4015 < _10459; ++_4015)
        {
          {
            _ptr__4009[safe_add( _4003,_4015 )] = 0.0;
          }
        }
        int _4016 = (int)0;
        while ( (_4016 < _3969) )
        {
          {
            int _4017 = _4016;
            long long _4018 = (_ptr__3973[safe_add( _3970,_4016 )] / _3984);
            while ( ((_4016 < _3969) && (_ptr__3973[safe_add( _3970,_4016 )] < safe_mul( safe_add( _4018,(int)1 ),_3984 ))) )
            {
              {
                ++ _4016;
              }
            }
            int _4019 = (int)0;
            while ( (_4019 < _3880) )
            {
              {
                int _4020 = _4019;
                long long _4021 = (_ptr__3877[safe_add( _3889,_ptr__3972[safe_add( _3968,_4019 )] )] % _3982);
                ++ _4019;
                while ( ((_4019 < _3880) && ((_ptr__3877[safe_add( _3889,_ptr__3972[safe_add( _3968,_4019 )] )] % _3982) == _4021)) )
                {
                  {
                    ++ _4019;
                  }
                }
                int _4022 = _4020;
                int _4023 = _4017;
                int _4024 = (int)0;
                while ( ((_4023 < _4016) && (_4022 < _4019)) )
                {
                  {
                    int _4025 = _ptr__3972[safe_add( _3968,_4022 )];
                    if (((_ptr__3973[safe_add( _3970,_4023 )] % _3984) < (_ptr__3877[safe_add( _3889,_4025 )] / _3982)))
                    {
                      {
                        ++ _4023;
                      }
                    }
                    else if(((_ptr__3973[safe_add( _3970,_4023 )] % _3984) > (_ptr__3877[safe_add( _3889,_4025 )] / _3982)))
                    {
                      {
                        ++ _4022;
                      }
                    }
                    else
                    {
                      {
                        int _10460 = _ptr__3876[safe_add( _3884,_4025 )];
                        int _10461 = _ptr__3876[safe_add( safe_add( _3884,_4025 ),(int)1 )];
                        for (int _4026 = _10460; _4026 < _10461; ++_4026)
                        {
                          {
                            _ptr__4008[safe_add( _4001,_4012 )] = _ptr__3877[safe_add( _3890,_4026 )];
                            _ptr__4010[safe_add( _4006,_4014 )] = 2;
                            _ptr__4009[safe_add( _4007,_4014 )] = _ptr__3878[safe_add( _3891,_4026 )];
                            ++ _4014;
                            if ((_3883 > (int)0))
                            {
                              {
                                int _10462 = _ptr__3876[safe_add( _3887,_4026 )];
                                int _10463 = _ptr__3876[safe_add( safe_add( _3887,_4026 ),(int)1 )];
                                for (int _4027 = _10462; _4027 < _10463; ++_4027)
                                {
                                  {
                                    _ptr__4010[safe_add( _4006,_4014 )] = _ptr__3876[safe_add( _3885,_4027 )];
                                    _ptr__4009[safe_add( _4007,_4014 )] = _ptr__3878[safe_add( _3886,_4027 )];
                                    ++ _4014;
                                  }
                                }
                                _ptr__4010[safe_add( _4006,_4014 )] = 3;
                                ++ _4014;
                              }
                            }
                            {}
                            _ptr__4010[safe_add( _4006,_4014 )] = 1;
                            _ptr__4009[safe_add( _4007,_4014 )] = _ptr__3972[safe_add( _3898,_4023 )];
                            ++ _4014;
                            _ptr__4010[safe_add( _4006,_4014 )] = 5;
                            ++ _4014;
                            _ptr__4010[safe_add( safe_add( _4005,_4012 ),(int)1 )] = _4014;
                            ++ _4012;
                          }
                        }
                        ++ _4024;
                        ++ _4023;
                        ++ _4022;
                      }
                    }
                  }
                }
                if ((_4024 > (int)0))
                {
                  {
                    _ptr__4008[safe_add( _4002,_4013 )] = safe_add( safe_mul( _4018,_3982 ),_4021 );
                    _ptr__4010[safe_add( safe_add( _4000,_4013 ),(int)1 )] = _4012;
                    ++ _4013;
                  }
                }
                {}
              }
            }
          }
        }
        if ((_4014 != _3981))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect a-code length"));
          }
        }
        {}
        if ((_4012 != _3980))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect nnz length"));
          }
        }
        {}
        if ((_4013 != _3979))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect nelem length"));
          }
        }
        {}
        if ((_ptr__4010[safe_add( _4000,_4013 )] != _3980))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect ptr"));
          }
        }
        {}
      }
      if ((!_3999))
      {
        {
          _3873->popi64(_3979);
        }
      }
      {}
    }
  }
  _3875->clear();
}
std::string mosek::fusion::ExprMulParamLeft :: toString() { return mosek::fusion::p_ExprMulParamLeft::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulParamLeft::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulParamLeft("))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulParamLeft::destroy(){e.reset();p.reset();}void mosek::fusion::ExprMulParamLeft::destroy() { mosek::fusion::p_ExprMulParamLeft::_get_impl(this)->destroy(); }mosek::fusion::ParameterImpl::ParameterImpl(mosek::fusion::p_ParameterImpl *_impl) : _impl(_impl) { /*std::cout << "ParameterImpl() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::ParameterImpl::~ParameterImpl() { delete _impl; _impl = nullptr; }mosek::fusion::p_ParameterImpl::p_ParameterImpl  (::mosek::fusion::ParameterImpl * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::ParameterImpl::t mosek::fusion::p_ParameterImpl::_new_ParameterImpl  (monty::rc_ptr< ::mosek::fusion::ParameterImpl > _4028,    monty::rc_ptr< ::mosek::fusion::Model > _4029){ return new mosek::fusion::ParameterImpl(_4028,_4029); }mosek::fusion::ParameterImpl::ParameterImpl  (monty::rc_ptr< ::mosek::fusion::ParameterImpl > _4028,    monty::rc_ptr< ::mosek::fusion::Model > _4029) :    ParameterImpl(new mosek::fusion::p_ParameterImpl(this)){ mosek::fusion::p_ParameterImpl::_get_impl(this)->_initialize(_4028,_4029); }void mosek::fusion::p_ParameterImpl::_initialize  (monty::rc_ptr< ::mosek::fusion::ParameterImpl > _4028,    monty::rc_ptr< ::mosek::fusion::Model > _4029){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->model = _4029;
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->shape = mosek::fusion::p_ParameterImpl::_get_impl(_4028)->shape;
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->sp = mosek::fusion::p_ParameterImpl::_get_impl(_4028)->sp;
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->size = mosek::fusion::p_ParameterImpl::_get_impl(_4028)->size;
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->nidxs = mosek::fusion::p_ParameterImpl::_get_impl(_4028)->nidxs;
  }
}mosek::fusion::ParameterImpl::t mosek::fusion::p_ParameterImpl::_new_ParameterImpl  (monty::rc_ptr< ::mosek::fusion::Model > _4030,    std::shared_ptr< monty::ndarray< int,1 > > _4031,    std::shared_ptr< monty::ndarray< long long,1 > > _4032,    std::shared_ptr< monty::ndarray< int,1 > > _4033){ return new mosek::fusion::ParameterImpl(_4030,_4031,_4032,_4033); }mosek::fusion::ParameterImpl::ParameterImpl  (monty::rc_ptr< ::mosek::fusion::Model > _4030,    std::shared_ptr< monty::ndarray< int,1 > > _4031,    std::shared_ptr< monty::ndarray< long long,1 > > _4032,    std::shared_ptr< monty::ndarray< int,1 > > _4033) :    ParameterImpl(new mosek::fusion::p_ParameterImpl(this)){ mosek::fusion::p_ParameterImpl::_get_impl(this)->_initialize(_4030,_4031,_4032,_4033); }void mosek::fusion::p_ParameterImpl::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _4030,    std::shared_ptr< monty::ndarray< int,1 > > _4031,    std::shared_ptr< monty::ndarray< long long,1 > > _4032,    std::shared_ptr< monty::ndarray< int,1 > > _4033){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__4031(_4031 ? _4031->raw() : nullptr, _4031 ? _4031->size(0) : 0);
    _checked_ptr_1<long long> _ptr__4032(_4032 ? _4032->raw() : nullptr, _4032 ? _4032->size(0) : 0);
    _checked_ptr_1<int> _ptr__4033(_4033 ? _4033->raw() : nullptr, _4033 ? _4033->size(0) : 0);
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->model = _4030;
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->shape = ::mosek::fusion::Utils::Tools::arraycopy(_4031);
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->sp = _4032;
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->size = ::mosek::fusion::p_Set::size(_4031);
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->nidxs = ::mosek::fusion::Utils::Tools::arraycopy(_4033);
  }
}monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__clone(monty::rc_ptr< ::mosek::fusion::Model > _4034) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__clone(_4034); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::clone(monty::rc_ptr< ::mosek::fusion::Model > _4034) { return __mosek_2fusion_2ParameterImpl__clone(_4034); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::__mosek_2fusion_2Parameter__clone(monty::rc_ptr< ::mosek::fusion::Model > _4034) { return __mosek_2fusion_2ParameterImpl__clone(_4034); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__clone(monty::rc_ptr< ::mosek::fusion::Model > _4034){
  return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(::mosek::fusion::ParameterImpl::t(_pubthis),_4034)).as<::mosek::fusion::Parameter>();
}
std::string mosek::fusion::ParameterImpl :: toString() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->toString(); }std::string mosek::fusion::p_ParameterImpl::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4035 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Parameter(("));
  if (((int)((shape)->size(0)) > (int)0))
  {
    {
      _4035->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
      int _10464 = (int)1;
      int _10465 = (int)((shape)->size(0));
      for (int _4036 = _10464; _4036 < _10465; ++_4036)
      {
        {
          _4035->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_4036)));
        }
      }
    }
  }
  {}
  _4035->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  if ((NULL != sp.get()))
  {
    {
      _4035->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",sparse"));
    }
  }
  {}
  _4035->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _4035->toString();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__pick(std::shared_ptr< monty::ndarray< int,2 > > _4037) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__pick(_4037); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::pick(std::shared_ptr< monty::ndarray< int,2 > > _4037) { return __mosek_2fusion_2ParameterImpl__pick(_4037); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int,2 > > _4037) { return __mosek_2fusion_2ParameterImpl__pick(_4037); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__pick(std::shared_ptr< monty::ndarray< int,2 > > _4037){
  throw ::mosek::fusion::UnimplementedError(std::string ("Not implemented"));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__pick(std::shared_ptr< monty::ndarray< int,1 > > _4038) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__pick(_4038); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::pick(std::shared_ptr< monty::ndarray< int,1 > > _4038) { return __mosek_2fusion_2ParameterImpl__pick(_4038); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int,1 > > _4038) { return __mosek_2fusion_2ParameterImpl__pick(_4038); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__pick(std::shared_ptr< monty::ndarray< int,1 > > _4038){
  _checked_ptr_1<int> _ptr__4038(_4038 ? _4038->raw() : nullptr, _4038 ? _4038->size(0) : 0);
  throw ::mosek::fusion::UnimplementedError(std::string ("Not implemented"));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__index(std::shared_ptr< monty::ndarray< int,1 > > _4039) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__index(_4039); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::index(std::shared_ptr< monty::ndarray< int,1 > > _4039) { return __mosek_2fusion_2ParameterImpl__index(_4039); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::__mosek_2fusion_2Expression__index(std::shared_ptr< monty::ndarray< int,1 > > _4039) { return __mosek_2fusion_2ParameterImpl__index(_4039); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__index(std::shared_ptr< monty::ndarray< int,1 > > _4039){
  _checked_ptr_1<int> _ptr__4039(_4039 ? _4039->raw() : nullptr, _4039 ? _4039->size(0) : 0);
  if (((int)((shape)->size(0)) != (int)((_4039)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Index has incorrect dimension"));
    }
  }
  else
  {
    {
      int _10466 = (int)0;
      int _10467 = (int)((_4039)->size(0));
      for (int _4040 = _10466; _4040 < _10467; ++_4040)
      {
        {
          if (((_ptr__4039[_4040] < (int)0) || (_ptr__4039[_4040] >= ((*shape)(_4040)))))
          {
            {
              throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));
            }
          }
          {}
        }
      }
    }
  }
  if ((NULL == sp.get()))
  {
    {
      int _4041 = (int)((_4039)->size(0));
      long long _4042 = _ptr__4039[(_4041 - (int)1)];
      int _10468 = (int)1;
      int _10469 = _4041;
      for (int _4043 = _10468; _4043 < _10469; ++_4043)
      {
        {
          _4042 = safe_add( safe_mul( _4042,((*shape)((_4041 - _4043))) ),_ptr__4039[((_4041 - _4043) - (int)1)] );
        }
      }
      return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(((*nidxs)(_4042)))}))).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      int _4044 = (int)((_4039)->size(0));
      long long _4045 = _ptr__4039[(_4044 - (int)1)];
      int _10470 = (int)1;
      int _10471 = _4044;
      for (int _4046 = _10470; _4046 < _10471; ++_4046)
      {
        {
          _4045 = safe_add( safe_mul( _4045,((*shape)((_4044 - _4046))) ),_ptr__4039[((_4044 - _4046) - (int)1)] );
        }
      }
      int _4047 = (int)0;
      while ( ((_4047 < (int)((sp)->size(0))) && (((*sp)(_4047)) < _4045)) )
      {
        {
          ++ _4047;
        }
      }
      if (((_4047 < (int)((sp)->size(0))) && (((*sp)(_4047)) == _4045)))
      {
        {
          return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(((*nidxs)(_4047)))}))).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))))).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__index(int _4048) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__index(_4048); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::index(int _4048) { return __mosek_2fusion_2ParameterImpl__index(_4048); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::__mosek_2fusion_2Expression__index(int _4048) { return __mosek_2fusion_2ParameterImpl__index(_4048); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__index(int _4048){
  if (((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Index has incorrect dimension"));
    }
  }
  else if(((_4048 < (int)0) || (_4048 >= ((*shape)((int)0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));
    }
  }
  {}
  if ((NULL == sp.get()))
  {
    {
      return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(((*nidxs)(_4048)))}))).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      int _4049 = (int)0;
      while ( ((_4049 < (int)((sp)->size(0))) && (((*sp)(_4049)) < _4048)) )
      {
        {
          ++ _4049;
        }
      }
      if (((_4049 < (int)((sp)->size(0))) && (((*sp)(_4049)) == _4048)))
      {
        {
          return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(((*nidxs)(_4049)))}))).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))))).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
}
void mosek::fusion::ParameterImpl :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4050,monty::rc_ptr< ::mosek::fusion::WorkStack > _4051,monty::rc_ptr< ::mosek::fusion::WorkStack > _4052) { mosek::fusion::p_ParameterImpl::_get_impl(this)->eval(_4050,_4051,_4052); }void mosek::fusion::p_ParameterImpl::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4050,monty::rc_ptr< ::mosek::fusion::WorkStack > _4051,monty::rc_ptr< ::mosek::fusion::WorkStack > _4052){
  int _4053 = (int)((shape)->size(0));
  int _4054 = (int)((nidxs)->size(0));
  bool _4055 = (NULL != sp.get());
  _4050->alloc_expr(_4053,_4054,(int)((nidxs)->size(0)),_4055,(int)((nidxs)->size(0)));
  std::shared_ptr< monty::ndarray< int,1 > > _4056 = mosek::fusion::p_WorkStack::_get_impl(_4050)->i32;
  _checked_ptr_1<int> _ptr__4056(_4056 ? _4056->raw() : nullptr,_4056 ? _4056->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4057 = mosek::fusion::p_WorkStack::_get_impl(_4050)->i64;
  _checked_ptr_1<long long> _ptr__4057(_4057 ? _4057->raw() : nullptr,_4057 ? _4057->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4058 = mosek::fusion::p_WorkStack::_get_impl(_4050)->f64;
  _checked_ptr_1<double> _ptr__4058(_4058 ? _4058->raw() : nullptr,_4058 ? _4058->size(0) : 0);
  int _4059 = mosek::fusion::p_WorkStack::_get_impl(_4050)->ptr_base;
  int _4060 = mosek::fusion::p_WorkStack::_get_impl(_4050)->nidxs_base;
  int _4061 = mosek::fusion::p_WorkStack::_get_impl(_4050)->cof_base;
  int _4062 = mosek::fusion::p_WorkStack::_get_impl(_4050)->shape_base;
  int _4063 = mosek::fusion::p_WorkStack::_get_impl(_4050)->codeptr_base;
  int _4064 = mosek::fusion::p_WorkStack::_get_impl(_4050)->code_base;
  int _4065 = mosek::fusion::p_WorkStack::_get_impl(_4050)->cconst_base;
  int _4066 = mosek::fusion::p_WorkStack::_get_impl(_4050)->sp_base;
  {
    _ptr__4056[_4059] = (int)0;
    int _10472 = (int)0;
    int _10473 = _4053;
    for (int _4067 = _10472; _4067 < _10473; ++_4067)
    {
      {
        _ptr__4056[safe_add( _4062,_4067 )] = ((*shape)(_4067));
      }
    }
    int _10474 = (int)0;
    int _10475 = _4054;
    for (int _4068 = _10474; _4068 < _10475; ++_4068)
    {
      {
        _ptr__4057[safe_add( _4060,_4068 )] = (int)0;
      }
    }
    int _10476 = (int)0;
    int _10477 = _4054;
    for (int _4069 = _10476; _4069 < _10477; ++_4069)
    {
      {
        _ptr__4058[safe_add( _4061,_4069 )] = 0.0;
      }
    }
    int _10478 = (int)0;
    int _10479 = safe_add( _4054,(int)1 );
    for (int _4070 = _10478; _4070 < _10479; ++_4070)
    {
      {
        _ptr__4056[safe_add( _4059,_4070 )] = _4070;
      }
    }
    if ((_4054 > (int)0))
    {
      {
        int _10480 = (int)0;
        int _10481 = safe_add( _4054,(int)1 );
        for (int _4071 = _10480; _4071 < _10481; ++_4071)
        {
          {
            _ptr__4056[safe_add( _4063,_4071 )] = _4071;
          }
        }
      }
    }
    {}
    if (_4055)
    {
      {
        int _10482 = (int)0;
        int _10483 = _4054;
        for (int _4072 = _10482; _4072 < _10483; ++_4072)
        {
          {
            _ptr__4057[safe_add( _4066,_4072 )] = ((*sp)(_4072));
          }
        }
      }
    }
    {}
    int _10484 = (int)0;
    int _10485 = _4054;
    for (int _4073 = _10484; _4073 < _10485; ++_4073)
    {
      {
        _ptr__4056[safe_add( _4064,_4073 )] = (int)1;
        _ptr__4058[safe_add( _4065,_4073 )] = ((*nidxs)(_4073));
      }
    }
  }
}
void mosek::fusion::ParameterImpl :: getSp(std::shared_ptr< monty::ndarray< long long,1 > > _4074,int _4075) { mosek::fusion::p_ParameterImpl::_get_impl(this)->getSp(_4074,_4075); }void mosek::fusion::p_ParameterImpl::getSp(std::shared_ptr< monty::ndarray< long long,1 > > _4074,int _4075){
  _checked_ptr_1<long long> _ptr__4074(_4074 ? _4074->raw() : nullptr, _4074 ? _4074->size(0) : 0);
  if ((NULL != sp.get()))
  {
    {
      int _10486 = (int)0;
      int _10487 = (int)((sp)->size(0));
      for (int _4076 = _10486; _4076 < _10487; ++_4076)
      {
        {
          _ptr__4074[safe_add( _4076,_4075 )] = ((*sp)(_4076));
        }
      }
    }
  }
  else
  {
    {
      int _10488 = (int)0;
      int _10489 = (int)((nidxs)->size(0));
      for (int _4077 = _10488; _4077 < _10489; ++_4077)
      {
        {
          _ptr__4074[safe_add( _4077,_4075 )] = _4077;
        }
      }
    }
  }
}
bool mosek::fusion::ParameterImpl :: isSparse() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->isSparse(); }bool mosek::fusion::p_ParameterImpl::isSparse(){
  return (NULL != sp.get());
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__slice(std::shared_ptr< monty::ndarray< int,1 > > _4078,std::shared_ptr< monty::ndarray< int,1 > > _4079) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__slice(_4078,_4079); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::slice(std::shared_ptr< monty::ndarray< int,1 > > _4078,std::shared_ptr< monty::ndarray< int,1 > > _4079) { return __mosek_2fusion_2ParameterImpl__slice(_4078,_4079); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::__mosek_2fusion_2Parameter__slice(std::shared_ptr< monty::ndarray< int,1 > > _4078,std::shared_ptr< monty::ndarray< int,1 > > _4079) { return __mosek_2fusion_2ParameterImpl__slice(_4078,_4079); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__slice(std::shared_ptr< monty::ndarray< int,1 > > _4078,std::shared_ptr< monty::ndarray< int,1 > > _4079){
  _checked_ptr_1<int> _ptr__4078(_4078 ? _4078->raw() : nullptr, _4078 ? _4078->size(0) : 0);
  _checked_ptr_1<int> _ptr__4079(_4079 ? _4079->raw() : nullptr, _4079 ? _4079->size(0) : 0);
  if ((((int)((_4078)->size(0)) != (int)((_4079)->size(0))) || ((int)((_4078)->size(0)) != (int)((shape)->size(0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid index dimension"));
    }
  }
  {}
  int _4080 = (int)((_4078)->size(0));
  int _10490 = (int)0;
  int _10491 = _4080;
  for (int _4081 = _10490; _4081 < _10491; ++_4081)
  {
    {
      if (((_ptr__4078[_4081] < (int)0) || ((_ptr__4078[_4081] >= _ptr__4079[_4081]) || (_ptr__4079[_4081] > ((*shape)(_4081))))))
      {
        {
          throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _4082 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4080)));
  _checked_ptr_1<long long> _ptr__4082(_4082 ? _4082->raw() : nullptr,_4082 ? _4082->size(0) : 0);
  _ptr__4082[(_4080 - (int)1)] = (int)1;
  int _10492 = (int)1;
  int _10493 = _4080;
  for (int _4083 = _10492; _4083 < _10493; ++_4083)
  {
    {
      _ptr__4082[((_4080 - _4083) - (int)1)] = safe_mul( _ptr__4082[(_4080 - _4083)],((*shape)(_4083)) );
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _4084 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4080)));
  _checked_ptr_1<int> _ptr__4084(_4084 ? _4084->raw() : nullptr,_4084 ? _4084->size(0) : 0);
  std::vector<int> _10494;
  for (int _4086 = (int)0, _10495 = _4080; _4086 < _10495 ; ++_4086)
  {
    _10494.push_back((_ptr__4079[_4086] - _ptr__4078[_4086]));
  }
  auto _10496 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10494.size()),_10494.begin(),_10494.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _4085 = _10496;
  _checked_ptr_1<int> _ptr__4085(_4085 ? _4085->raw() : nullptr,_4085 ? _4085->size(0) : 0);
  if ((NULL == sp.get()))
  {
    {
      int _4087 = (int)1;
      int _10497 = (int)0;
      int _10498 = _4080;
      for (int _4088 = _10497; _4088 < _10498; ++_4088)
      {
        {
          _4087 *= _ptr__4085[_4088];
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _4089 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4087)));
      _checked_ptr_1<int> _ptr__4089(_4089 ? _4089->raw() : nullptr,_4089 ? _4089->size(0) : 0);
      int _4090 = (int)0;
      int _10499 = (int)0;
      int _10500 = (int)((nidxs)->size(0));
      for (int _4091 = _10499; _4091 < _10500; ++_4091)
      {
        {
          int _10501 = (int)0;
          int _10502 = _4080;
          for (int _4092 = _10501; _4092 < _10502; ++_4092)
          {
            {
              _ptr__4084[_4092] = (int)((_4091 / _ptr__4082[_4092]) % ((*shape)(_4092)));
            }
          }
          bool _4093 = true;
          int _10503 = (int)0;
          int _10504 = _4080;
          for (int _4094 = _10503; _4094 < _10504; ++_4094)
          {
            {
              _4093 = (_4093 && ((_ptr__4078[_4094] <= _ptr__4084[_4094]) && (_ptr__4084[_4094] < _ptr__4079[_4094])));
            }
          }
          if (_4093)
          {
            {
              _ptr__4089[_4090] = ((*nidxs)(_4091));
              ++ _4090;
            }
          }
          {}
        }
      }
      return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,_4085,nullptr,_4089)).as<::mosek::fusion::Parameter>();
    }
  }
  else
  {
    {
      int _4095 = (int)0;
      int _10505 = (int)0;
      int _10506 = (int)((nidxs)->size(0));
      for (int _4096 = _10505; _4096 < _10506; ++_4096)
      {
        {
          int _10507 = (int)0;
          int _10508 = _4080;
          for (int _4097 = _10507; _4097 < _10508; ++_4097)
          {
            {
              _ptr__4084[_4097] = (int)((((*sp)(_4096)) / _ptr__4082[_4097]) % ((*shape)(_4097)));
            }
          }
          bool _4098 = true;
          int _10509 = (int)0;
          int _10510 = _4080;
          for (int _4099 = _10509; _4099 < _10510; ++_4099)
          {
            {
              _4098 = (_4098 && ((_ptr__4078[_4099] <= _ptr__4084[_4099]) && (_ptr__4084[_4099] < _ptr__4079[_4099])));
            }
          }
          if (_4098)
          {
            {
              ++ _4095;
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _4100 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4095)));
      _checked_ptr_1<int> _ptr__4100(_4100 ? _4100->raw() : nullptr,_4100 ? _4100->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4101 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4095)));
      _checked_ptr_1<long long> _ptr__4101(_4101 ? _4101->raw() : nullptr,_4101 ? _4101->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4102 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4080)));
      _checked_ptr_1<long long> _ptr__4102(_4102 ? _4102->raw() : nullptr,_4102 ? _4102->size(0) : 0);
      _ptr__4102[(_4080 - (int)1)] = (int)1;
      int _10511 = (int)1;
      int _10512 = _4080;
      for (int _4103 = _10511; _4103 < _10512; ++_4103)
      {
        {
          _ptr__4102[((_4080 - _4103) - (int)1)] = safe_mul( _ptr__4102[(_4080 - _4103)],_ptr__4085[_4103] );
        }
      }
      int _4104 = (int)0;
      int _10513 = (int)0;
      int _10514 = (int)((nidxs)->size(0));
      for (int _4105 = _10513; _4105 < _10514; ++_4105)
      {
        {
          int _10515 = (int)0;
          int _10516 = _4080;
          for (int _4106 = _10515; _4106 < _10516; ++_4106)
          {
            {
              _ptr__4084[_4105] = (int)((((*sp)(_4105)) / _ptr__4082[_4106]) % ((*shape)(_4106)));
            }
          }
          bool _4107 = true;
          int _10517 = (int)0;
          int _10518 = _4080;
          for (int _4108 = _10517; _4108 < _10518; ++_4108)
          {
            {
              _4107 = (_4107 && ((_ptr__4078[_4108] <= _ptr__4084[_4108]) && (_ptr__4084[_4108] < _ptr__4079[_4108])));
            }
          }
          if (_4107)
          {
            {
              long long _4109 = (long long)0;
              int _10519 = (int)0;
              int _10520 = _4080;
              for (int _4110 = _10519; _4110 < _10520; ++_4110)
              {
                {
                  _4109 += safe_mul( (_ptr__4084[_4110] - _ptr__4078[_4110]),_ptr__4102[_4110] );
                }
              }
              _ptr__4101[_4104] = _4109;
              _ptr__4100[_4104] = ((*nidxs)(_4105));
              ++ _4104;
            }
          }
          {}
        }
      }
      return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,_4085,_4101,_4100)).as<::mosek::fusion::Parameter>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__slice(int _4111,int _4112) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__slice(_4111,_4112); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::slice(int _4111,int _4112) { return __mosek_2fusion_2ParameterImpl__slice(_4111,_4112); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::__mosek_2fusion_2Parameter__slice(int _4111,int _4112) { return __mosek_2fusion_2ParameterImpl__slice(_4111,_4112); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__slice(int _4111,int _4112){
  if (((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid index dimension"));
    }
  }
  {}
  if (((_4111 < (int)0) || ((_4112 >= _4112) || (_4112 > size))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  if ((NULL == sp.get()))
  {
    {
      std::vector<int> _10521;
      for (int _4113 = _4111, _10522 = _4112; _4113 < _10522 ; ++_4113)
      {
        _10521.push_back(((*nidxs)(_4113)));
      }
      auto _10523 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10521.size()),_10521.begin(),_10521.end()));
      return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0),(int)((_4112 - _4111))}),nullptr,_10523)).as<::mosek::fusion::Parameter>();
    }
  }
  else
  {
    {
      int _4114 = (int)0;
      int _10524 = (int)0;
      int _10525 = (int)((sp)->size(0));
      for (int _4115 = _10524; _4115 < _10525; ++_4115)
      {
        {
          if (((_4111 <= ((*sp)(_4115))) && (((*sp)(_4115)) < _4112)))
          {
            {
              ++ _4114;
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _4116 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4114)));
      _checked_ptr_1<int> _ptr__4116(_4116 ? _4116->raw() : nullptr,_4116 ? _4116->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4117 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4114)));
      _checked_ptr_1<long long> _ptr__4117(_4117 ? _4117->raw() : nullptr,_4117 ? _4117->size(0) : 0);
      int _4118 = (int)0;
      int _10526 = (int)0;
      int _10527 = (int)((sp)->size(0));
      for (int _4119 = _10526; _4119 < _10527; ++_4119)
      {
        {
          if (((_4111 <= ((*sp)(_4119))) && (((*sp)(_4119)) < _4112)))
          {
            {
              _ptr__4116[_4118] = ((*nidxs)(_4119));
              _ptr__4117[_4118] = (((*sp)(_4118)) - _4111);
              ++ _4118;
            }
          }
          {}
        }
      }
      return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0),(int)((_4112 - _4111))}),_4117,_4116)).as<::mosek::fusion::Parameter>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__reshape(std::shared_ptr< monty::ndarray< int,1 > > _4120) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__reshape(_4120); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::reshape(std::shared_ptr< monty::ndarray< int,1 > > _4120) { return __mosek_2fusion_2ParameterImpl__reshape(_4120); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::__mosek_2fusion_2Parameter__reshape(std::shared_ptr< monty::ndarray< int,1 > > _4120) { return __mosek_2fusion_2ParameterImpl__reshape(_4120); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__reshape(std::shared_ptr< monty::ndarray< int,1 > > _4120){
  _checked_ptr_1<int> _ptr__4120(_4120 ? _4120->raw() : nullptr, _4120 ? _4120->size(0) : 0);
  if ((::mosek::fusion::p_Set::size(_4120) != ::mosek::fusion::p_Set::size(shape)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Incompatible shape for resize"));
    }
  }
  {}
  return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,_4120,sp,nidxs)).as<::mosek::fusion::Parameter>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__asExpr() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__asExpr(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::asExpr() { return __mosek_2fusion_2ParameterImpl__asExpr(); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::__mosek_2fusion_2Parameter__asExpr() { return __mosek_2fusion_2ParameterImpl__asExpr(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__asExpr(){
  return (::mosek::fusion::p_ExprParameter::_new_ExprParameter((::mosek::fusion::ParameterImpl::t(_pubthis)).as<::mosek::fusion::Parameter>())).as<::mosek::fusion::Expression>();
}
long long mosek::fusion::ParameterImpl :: getSize() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->getSize(); }long long mosek::fusion::p_ParameterImpl::getSize(){
  return ::mosek::fusion::p_Set::size(shape);
}
int mosek::fusion::ParameterImpl :: getNumNonzero() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->getNumNonzero(); }int mosek::fusion::p_ParameterImpl::getNumNonzero(){
  return (int)((nidxs)->size(0));
}
int mosek::fusion::ParameterImpl :: getND() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->getND(); }int mosek::fusion::p_ParameterImpl::getND(){
  return (int)((shape)->size(0));
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ParameterImpl :: getShape() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->getShape(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ParameterImpl::getShape(){
  return ::mosek::fusion::Utils::Tools::arraycopy(shape);
}
int mosek::fusion::ParameterImpl :: getDim(int _4121) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->getDim(_4121); }int mosek::fusion::p_ParameterImpl::getDim(int _4121){
  return ((*shape)(_4121));
}
void mosek::fusion::ParameterImpl :: getAllIndexes(std::shared_ptr< monty::ndarray< int,1 > > _4122,int _4123) { mosek::fusion::p_ParameterImpl::_get_impl(this)->getAllIndexes(_4122,_4123); }void mosek::fusion::p_ParameterImpl::getAllIndexes(std::shared_ptr< monty::ndarray< int,1 > > _4122,int _4123){
  _checked_ptr_1<int> _ptr__4122(_4122 ? _4122->raw() : nullptr, _4122 ? _4122->size(0) : 0);
  int _10528 = (int)0;
  int _10529 = (int)((nidxs)->size(0));
  for (int _4124 = _10528; _4124 < _10529; ++_4124)
  {
    {
      _ptr__4122[safe_add( _4123,_4124 )] = ((*nidxs)(_4124));
    }
  }
}
int mosek::fusion::ParameterImpl :: getIndex(int _4125) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->getIndex(_4125); }int mosek::fusion::p_ParameterImpl::getIndex(int _4125){
  return ((*nidxs)(_4125));
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::ParameterImpl :: getValue() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->getValue(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_ParameterImpl::getValue(){
  return mosek::fusion::p_Model::_get_impl(model.get())->getParameterValue(nidxs);
}
void mosek::fusion::ParameterImpl :: setValue(std::shared_ptr< monty::ndarray< double,2 > > _4126) { mosek::fusion::p_ParameterImpl::_get_impl(this)->setValue(_4126); }void mosek::fusion::p_ParameterImpl::setValue(std::shared_ptr< monty::ndarray< double,2 > > _4126){
  if (((_pubthis->getND() != (int)2) || (((int)((_4126)->size(0)) != ((*shape)((int)0))) || ((int)((_4126)->size(1)) != ((*shape)((int)1))))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching value shape"));
    }
  }
  {}
  if ((NULL == sp.get()))
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _4127 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( ((*shape)((int)0)),((*shape)((int)1)) ))));
      _checked_ptr_1<double> _ptr__4127(_4127 ? _4127->raw() : nullptr,_4127 ? _4127->size(0) : 0);
      int _10530 = (int)0;
      int _10531 = ((*shape)((int)0));
      for (int _4128 = _10530; _4128 < _10531; ++_4128)
      {
        {
          int _10532 = (int)0;
          int _10533 = ((*shape)((int)1));
          for (int _4129 = _10532; _4129 < _10533; ++_4129)
          {
            {
              _ptr__4127[safe_add( safe_mul( _4128,((*shape)((int)1)) ),_4129 )] = ((*_4126)(_4128,_4129));
            }
          }
        }
      }
      mosek::fusion::p_Model::_get_impl(model.get())->setParameterValue(nidxs,_4127);
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _4130 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((sp)->size(0)))));
      _checked_ptr_1<double> _ptr__4130(_4130 ? _4130->raw() : nullptr,_4130 ? _4130->size(0) : 0);
      int _10534 = (int)0;
      int _10535 = (int)((sp)->size(0));
      for (int _4131 = _10534; _4131 < _10535; ++_4131)
      {
        {
          _ptr__4130[_4131] = ((*_4126)((((*sp)(_4131)) / ((*shape)((int)1))),(((*sp)(_4131)) % ((*shape)((int)1)))));
        }
      }
      mosek::fusion::p_Model::_get_impl(model.get())->setParameterValue(nidxs,_4130);
    }
  }
}
void mosek::fusion::ParameterImpl :: setValue(std::shared_ptr< monty::ndarray< double,1 > > _4132) { mosek::fusion::p_ParameterImpl::_get_impl(this)->setValue(_4132); }void mosek::fusion::p_ParameterImpl::setValue(std::shared_ptr< monty::ndarray< double,1 > > _4132){
  _checked_ptr_1<double> _ptr__4132(_4132 ? _4132->raw() : nullptr, _4132 ? _4132->size(0) : 0);
  if ((NULL == sp.get()))
  {
    {
      if (((int)((_4132)->size(0)) != (int)((nidxs)->size(0))))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Length of value array is incorrect"));
        }
      }
      else
      {
        {
          mosek::fusion::p_Model::_get_impl(model.get())->setParameterValue(nidxs,_4132);
        }
      }
    }
  }
  else
  {
    {
      if (((int)((_4132)->size(0)) != _pubthis->getSize()))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Length of value array is incorrect"));
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< double,1 > > _4133 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((nidxs)->size(0)))));
          _checked_ptr_1<double> _ptr__4133(_4133 ? _4133->raw() : nullptr,_4133 ? _4133->size(0) : 0);
          int _10536 = (int)0;
          int _10537 = (int)((nidxs)->size(0));
          for (int _4134 = _10536; _4134 < _10537; ++_4134)
          {
            {
              _ptr__4133[_4134] = _ptr__4132[((*sp)(_4134))];
            }
          }
          mosek::fusion::p_Model::_get_impl(model.get())->setParameterValue(nidxs,_4133);
        }
      }
    }
  }
}
void mosek::fusion::ParameterImpl :: setValue(double _4135) { mosek::fusion::p_ParameterImpl::_get_impl(this)->setValue(_4135); }void mosek::fusion::p_ParameterImpl::setValue(double _4135){
  std::shared_ptr< monty::ndarray< double,1 > > _4136 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(size)));
  _checked_ptr_1<double> _ptr__4136(_4136 ? _4136->raw() : nullptr,_4136 ? _4136->size(0) : 0);
  int _10538 = (int)0;
  long long _10539 = size;
  for (long long _4137 = _10538; _4137 < _10539; ++_4137)
  {
    {
      _ptr__4136[_4137] = _4135;
    }
  }
  mosek::fusion::p_Model::_get_impl(model.get())->setParameterValue(nidxs,_4136);
}
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__getModel() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__getModel(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::ParameterImpl::getModel() { return __mosek_2fusion_2ParameterImpl__getModel(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::ParameterImpl::__mosek_2fusion_2Parameter__getModel() { return __mosek_2fusion_2ParameterImpl__getModel(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__getModel(){
  return model;
}
void mosek::fusion::p_ParameterImpl::destroy(){nidxs.reset();sp.reset();shape.reset();model.reset();}void mosek::fusion::ParameterImpl::destroy() { mosek::fusion::p_ParameterImpl::_get_impl(this)->destroy(); }monty::rc_ptr< mosek::fusion::Parameter > mosek::fusion::Parameter::clone(monty::rc_ptr< ::mosek::fusion::Model > _4138) { return __mosek_2fusion_2Parameter__clone(_4138); }
monty::rc_ptr< mosek::fusion::Model > mosek::fusion::Parameter::getModel() { return __mosek_2fusion_2Parameter__getModel(); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Parameter::__mosek_2fusion_2Expression__slice(std::shared_ptr< monty::ndarray< int,1 > > _4145,std::shared_ptr< monty::ndarray< int,1 > > _4146) { return __mosek_2fusion_2Parameter__slice(_4145,_4146); }
monty::rc_ptr< mosek::fusion::Parameter > mosek::fusion::Parameter::slice(std::shared_ptr< monty::ndarray< int,1 > > _4145,std::shared_ptr< monty::ndarray< int,1 > > _4146) { return __mosek_2fusion_2Parameter__slice(_4145,_4146); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Parameter::__mosek_2fusion_2Expression__slice(int _4147,int _4148) { return __mosek_2fusion_2Parameter__slice(_4147,_4148); }
monty::rc_ptr< mosek::fusion::Parameter > mosek::fusion::Parameter::slice(int _4147,int _4148) { return __mosek_2fusion_2Parameter__slice(_4147,_4148); }
monty::rc_ptr< mosek::fusion::Parameter > mosek::fusion::Parameter::reshape(std::shared_ptr< monty::ndarray< int,1 > > _4149) { return __mosek_2fusion_2Parameter__reshape(_4149); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Parameter::asExpr() { return __mosek_2fusion_2Parameter__asExpr(); }
mosek::fusion::ExprOptimizeCode::ExprOptimizeCode(mosek::fusion::p_ExprOptimizeCode *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprOptimizeCode()" << this << std::endl; */ }mosek::fusion::ExprOptimizeCode::~ExprOptimizeCode() {  /* std::cout << "~ExprOptimizeCode()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprOptimizeCode::p_ExprOptimizeCode  (::mosek::fusion::ExprOptimizeCode * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprOptimizeCode::t mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode  (monty::rc_ptr< ::mosek::fusion::Expression > _4153){ return new mosek::fusion::ExprOptimizeCode(_4153); }mosek::fusion::ExprOptimizeCode::ExprOptimizeCode  (monty::rc_ptr< ::mosek::fusion::Expression > _4153) :    ExprOptimizeCode(new mosek::fusion::p_ExprOptimizeCode(this)){ mosek::fusion::p_ExprOptimizeCode::_get_impl(this)->_initialize(_4153); }void mosek::fusion::p_ExprOptimizeCode::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4153){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_4153->getShape());
    mosek::fusion::p_ExprOptimizeCode::_get_impl(::mosek::fusion::ExprOptimizeCode::t(_pubthis))->expr = _4153;
  }
}void mosek::fusion::p_ExprOptimizeCode::compress_code(monty::rc_ptr< ::mosek::fusion::WorkStack > _4154,int _4155,std::shared_ptr< monty::ndarray< int,1 > > _4156,int _4157,std::shared_ptr< monty::ndarray< int,1 > > _4158,int _4159,std::shared_ptr< monty::ndarray< double,1 > > _4160,int _4161,std::shared_ptr< monty::ndarray< double,1 > > _4162,int _4163,int _4164,int _4165,int _4166){
  _checked_ptr_1<int> _ptr__4156(_4156 ? _4156->raw() : nullptr, _4156 ? _4156->size(0) : 0);
  _checked_ptr_1<int> _ptr__4158(_4158 ? _4158->raw() : nullptr, _4158 ? _4158->size(0) : 0);
  _checked_ptr_1<double> _ptr__4160(_4160 ? _4160->raw() : nullptr, _4160 ? _4160->size(0) : 0);
  _checked_ptr_1<double> _ptr__4162(_4162 ? _4162->raw() : nullptr, _4162 ? _4162->size(0) : 0);
  int _4167 = _ptr__4158[safe_add( _4159,_4155 )];
  int _4168 = _4154->alloci32(safe_add( _4167,(int)2 ));
  int _4169 = (int)0;
  int _4170 = _4154->alloci32(safe_add( _4167,(int)2 ));
  int _4171 = _4154->alloci32(safe_add( _4167,(int)3 ));
  int _4172 = _4154->allocf64(safe_add( _4167,(int)2 ));
  int _4173 = _4154->alloci32(safe_add( _4167,(int)2 ));
  int _4174 = (int)0;
  int _4175 = (-(int)1);
  std::shared_ptr< monty::ndarray< int,1 > > _4176 = mosek::fusion::p_WorkStack::_get_impl(_4154)->i32;
  _checked_ptr_1<int> _ptr__4176(_4176 ? _4176->raw() : nullptr,_4176 ? _4176->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4177 = mosek::fusion::p_WorkStack::_get_impl(_4154)->f64;
  _checked_ptr_1<double> _ptr__4177(_4177 ? _4177->raw() : nullptr,_4177 ? _4177->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _4178 = _4176;
  _checked_ptr_1<int> _ptr__4178(_4178 ? _4178->raw() : nullptr,_4178 ? _4178->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4179 = _4177;
  _checked_ptr_1<double> _ptr__4179(_4179 ? _4179->raw() : nullptr,_4179 ? _4179->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _4180 = _4176;
  _checked_ptr_1<int> _ptr__4180(_4180 ? _4180->raw() : nullptr,_4180 ? _4180->size(0) : 0);
  int _4181 = mosek::fusion::p_WorkStack::_get_impl(_4154)->pi32;
  int _4182 = mosek::fusion::p_WorkStack::_get_impl(_4154)->pi64;
  int _4183 = mosek::fusion::p_WorkStack::_get_impl(_4154)->pf64;
  _ptr__4180[_4166] = (int)0;
  int _4184 = (int)0;
  int _10540 = (int)0;
  int _10541 = _4155;
  for (int _4185 = _10540; _4185 < _10541; ++_4185)
  {
    {
      int _4186 = _ptr__4158[safe_add( safe_add( _4159,_4185 ),(int)1 )];
      int _4187 = _ptr__4158[safe_add( _4159,_4185 )];
      if ((_4175 < (int)0))
      {
        {
          _4169 = (int)0;
          _4174 = (int)0;
          _ptr__4176[_4171] = (int)0;
          int _10542 = (int)0;
          int _10543 = (_4186 - _4187);
          for (int _4188 = _10542; _4188 < _10543; ++_4188)
          {
            {
              _ptr__4178[safe_add( _4173,_4188 )] = (-(int)9999);
            }
          }
          int _10544 = _4187;
          int _10545 = _4186;
          for (int _4189 = _10544; _4189 < _10545; ++_4189)
          {
            {
              int _4190 = _ptr__4156[safe_add( _4157,_4189 )];
              double _4191 = _ptr__4162[safe_add( _4163,_4189 )];
              if ((_4190 == 0))
              {
                {
                }
              }
              else if((_4190 == 2))
              {
                {
                  _ptr__4178[safe_add( _4173,_4174 )] = 2;
                  _ptr__4177[safe_add( _4172,_4174 )] = _4191;
                  _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = _ptr__4176[safe_add( _4171,_4174 )];
                  _ptr__4176[safe_add( _4168,_4169 )] = _4174;
                  ++ _4169;
                  ++ _4174;
                }
              }
              else if((_4190 == 1))
              {
                {
                  _ptr__4176[safe_add( _4173,_4174 )] = _4190;
                  _ptr__4177[safe_add( _4172,_4174 )] = _4191;
                  _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = _ptr__4176[safe_add( _4171,_4174 )];
                  _ptr__4176[safe_add( _4168,_4169 )] = _4174;
                  ++ _4169;
                  ++ _4174;
                }
              }
              else if((_4190 == 3))
              {
                {
                  if ((_4169 >= (int)2))
                  {
                    {
                      int _4192 = _ptr__4176[(safe_add( _4168,_4169 ) - (int)1)];
                      -- _4169;
                      int _4193 = _ptr__4176[(safe_add( _4168,_4169 ) - (int)1)];
                      -- _4169;
                      if (((_ptr__4176[safe_add( _4173,_4193 )] == 2) && (_ptr__4176[safe_add( _4173,_4192 )] == 2)))
                      {
                        {
                          _ptr__4176[safe_add( _4173,_4174 )] = 2;
                          _ptr__4177[safe_add( _4172,_4174 )] = (_ptr__4177[safe_add( _4172,_4193 )] + _ptr__4177[safe_add( _4172,_4192 )]);
                          _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = _ptr__4176[safe_add( _4171,_4174 )];
                          _ptr__4176[safe_add( _4168,_4169 )] = _4174;
                          ++ _4169;
                          ++ _4174;
                        }
                      }
                      else if(((_ptr__4176[safe_add( _4173,_4193 )] == 2) && ((_ptr__4177[safe_add( _4172,_4193 )] <= 0.0) && (_ptr__4177[safe_add( _4172,_4193 )] >= 0.0))))
                      {
                        {
                          _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = _ptr__4176[safe_add( _4171,_4174 )];
                          _ptr__4177[safe_add( _4172,_4174 )] = 0.0;
                          _ptr__4176[safe_add( _4168,_4169 )] = _4192;
                          ++ _4169;
                          ++ _4174;
                        }
                      }
                      else if(((_ptr__4176[safe_add( _4173,_4192 )] == 2) && ((_ptr__4177[safe_add( _4172,_4192 )] <= 0.0) && (_ptr__4177[safe_add( _4172,_4192 )] >= 0.0))))
                      {
                        {
                          _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = _ptr__4176[safe_add( _4171,_4174 )];
                          _ptr__4176[safe_add( _4168,_4169 )] = _4193;
                          ++ _4169;
                          ++ _4174;
                        }
                      }
                      else
                      {
                        {
                          _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = safe_add( _ptr__4176[safe_add( _4171,_4174 )],(int)2 );
                          _ptr__4176[safe_add( _4170,_ptr__4176[safe_add( _4171,_4174 )] )] = _4193;
                          _ptr__4176[safe_add( safe_add( _4170,_ptr__4176[safe_add( _4171,_4174 )] ),(int)1 )] = _4192;
                          _ptr__4176[safe_add( _4173,_4174 )] = _4190;
                          _ptr__4177[safe_add( _4172,_4174 )] = _4191;
                          _ptr__4176[safe_add( _4168,_4169 )] = _4174;
                          ++ _4169;
                          ++ _4174;
                        }
                      }
                    }
                  }
                  else
                  {
                    {
                      _4175 = _4189;
                    }
                  }
                }
              }
              else if((_4190 == 5))
              {
                {
                  if ((_4169 >= (int)2))
                  {
                    {
                      int _4194 = _ptr__4176[(safe_add( _4168,_4169 ) - (int)1)];
                      -- _4169;
                      int _4195 = _ptr__4176[(safe_add( _4168,_4169 ) - (int)1)];
                      -- _4169;
                      if (((_ptr__4176[safe_add( _4173,_4195 )] == 2) && (_ptr__4176[safe_add( _4173,_4194 )] == 2)))
                      {
                        {
                          _ptr__4176[safe_add( _4173,_4174 )] = 2;
                          _ptr__4177[safe_add( _4172,_4174 )] = (_ptr__4177[safe_add( _4172,_4195 )] * _ptr__4177[safe_add( _4172,_4194 )]);
                          _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = _ptr__4176[safe_add( _4171,_4174 )];
                          _ptr__4176[safe_add( _4168,_4169 )] = _4174;
                          ++ _4169;
                          ++ _4174;
                        }
                      }
                      else if(((_ptr__4176[safe_add( _4173,_4195 )] == 2) && ((_ptr__4177[safe_add( _4172,_4195 )] <= 0.0) && (_ptr__4177[safe_add( _4172,_4195 )] >= 0.0))))
                      {
                        {
                          _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = _ptr__4176[safe_add( _4171,_4174 )];
                          _ptr__4176[safe_add( _4173,_4174 )] = 2;
                          _ptr__4177[safe_add( _4172,_4174 )] = 0.0;
                          _ptr__4176[safe_add( _4168,_4169 )] = _4174;
                          ++ _4169;
                          ++ _4174;
                        }
                      }
                      else if(((_ptr__4176[safe_add( _4173,_4194 )] == 2) && ((_ptr__4177[safe_add( _4172,_4194 )] <= 0.0) && (_ptr__4177[safe_add( _4172,_4194 )] >= 0.0))))
                      {
                        {
                          _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = _ptr__4176[safe_add( _4171,_4174 )];
                          _ptr__4176[safe_add( _4173,_4174 )] = 2;
                          _ptr__4177[safe_add( _4172,_4174 )] = 0.0;
                          _ptr__4176[safe_add( _4168,_4169 )] = _4174;
                          ++ _4169;
                          ++ _4174;
                        }
                      }
                      else if(((_ptr__4176[safe_add( _4173,_4194 )] == 2) && ((_ptr__4177[safe_add( _4172,_4194 )] <= 1.0) && (_ptr__4177[safe_add( _4172,_4194 )] >= 1.0))))
                      {
                        {
                          _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = safe_add( _ptr__4176[safe_add( _4171,_4174 )],(int)1 );
                          _ptr__4176[safe_add( _4168,_4169 )] = _4195;
                          ++ _4169;
                          ++ _4174;
                        }
                      }
                      else if(((_ptr__4176[safe_add( _4173,_4195 )] == 2) && ((_ptr__4177[safe_add( _4172,_4195 )] <= 1.0) && (_ptr__4177[safe_add( _4172,_4195 )] >= 1.0))))
                      {
                        {
                          _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = safe_add( _ptr__4176[safe_add( _4171,_4174 )],(int)1 );
                          _ptr__4176[safe_add( _4168,_4169 )] = _4194;
                          ++ _4169;
                          ++ _4174;
                        }
                      }
                      else
                      {
                        {
                          _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = safe_add( _ptr__4176[safe_add( _4171,_4174 )],(int)2 );
                          _ptr__4176[safe_add( _4170,_ptr__4176[safe_add( _4171,_4174 )] )] = _4195;
                          _ptr__4176[safe_add( safe_add( _4170,_ptr__4176[safe_add( _4171,_4174 )] ),(int)1 )] = _4194;
                          _ptr__4176[safe_add( _4173,_4174 )] = 5;
                          _ptr__4177[safe_add( _4172,_4174 )] = _4191;
                          _ptr__4176[safe_add( _4168,_4169 )] = _4174;
                          ++ _4169;
                          ++ _4174;
                        }
                      }
                    }
                  }
                  else
                  {
                    {
                      _4175 = _4189;
                    }
                  }
                }
              }
              else if((_4190 == 4))
              {
                {
                  if ((_4169 >= (int)1))
                  {
                    {
                      int _4196 = _ptr__4176[(safe_add( _4168,_4169 ) - (int)1)];
                      -- _4169;
                      if ((_ptr__4176[safe_add( _4173,_4196 )] == 2))
                      {
                        {
                          _ptr__4176[safe_add( _4173,_4174 )] = 2;
                          _ptr__4177[safe_add( _4172,_4174 )] = (-_ptr__4177[safe_add( _4172,_4196 )]);
                          _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = _ptr__4176[safe_add( _4171,_4174 )];
                          _ptr__4176[safe_add( _4168,_4169 )] = _4174;
                          ++ _4169;
                          ++ _4174;
                        }
                      }
                      else
                      {
                        {
                          _ptr__4176[safe_add( _4173,_4174 )] = _ptr__4156[safe_add( _4157,_4189 )];
                          _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = safe_add( _ptr__4176[safe_add( _4171,_4174 )],(int)1 );
                          _ptr__4176[safe_add( _4170,_ptr__4176[safe_add( _4171,_4174 )] )] = _4196;
                          _ptr__4176[safe_add( _4168,_4169 )] = _4174;
                          ++ _4169;
                          ++ _4174;
                        }
                      }
                    }
                  }
                  else
                  {
                    {
                      _4175 = _4189;
                    }
                  }
                }
              }
              else if((_4190 == 6))
              {
                {
                  if ((_4169 >= (int)1))
                  {
                    {
                      int _4197 = _ptr__4176[(safe_add( _4168,_4169 ) - (int)1)];
                      -- _4169;
                      if ((_ptr__4176[safe_add( _4173,_4197 )] == 2))
                      {
                        {
                          _ptr__4176[safe_add( _4173,_4174 )] = 2;
                          _ptr__4177[safe_add( _4172,_4174 )] = (1.0 / _ptr__4177[safe_add( _4172,_4197 )]);
                          _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = _ptr__4176[safe_add( _4171,_4174 )];
                          _ptr__4176[safe_add( _4168,_4169 )] = _4174;
                          ++ _4169;
                          ++ _4174;
                        }
                      }
                      else
                      {
                        {
                          _ptr__4176[safe_add( _4173,_4174 )] = _ptr__4156[safe_add( _4157,_4189 )];
                          _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = safe_add( _ptr__4176[safe_add( _4171,_4174 )],(int)1 );
                          _ptr__4176[safe_add( _4170,_ptr__4176[safe_add( _4171,_4174 )] )] = _4197;
                          _ptr__4176[safe_add( _4168,_4169 )] = _4174;
                          ++ _4169;
                          ++ _4174;
                        }
                      }
                    }
                  }
                  else
                  {
                    {
                      _4175 = _4189;
                    }
                  }
                }
              }
              else if((_4190 == 8))
              {
                {
                  int _4198 = (int)_4191;
                  if ((_4198 < (int)0))
                  {
                    {
                      _4175 = _4189;
                    }
                  }
                  else if((_4198 > _4169))
                  {
                    {
                      _4175 = _4189;
                    }
                  }
                  else if((_4198 == (int)0))
                  {
                    {
                      _ptr__4176[safe_add( _4173,_4174 )] = 2;
                      _ptr__4177[safe_add( _4172,_4174 )] = 0.0;
                      _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = _ptr__4176[safe_add( _4171,_4174 )];
                      _ptr__4176[safe_add( _4168,_4169 )] = _4174;
                      ++ _4169;
                      ++ _4174;
                    }
                  }
                  else if((_4198 == (int)1))
                  {
                    {
                      _ptr__4176[safe_add( _4173,_4174 )] = (int)0;
                      _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = _ptr__4176[safe_add( _4171,_4174 )];
                      _ptr__4176[safe_add( _4168,_4169 )] = _4174;
                      ++ _4169;
                      ++ _4174;
                    }
                  }
                  else
                  {
                    {
                      std::vector<int> _10546;
                      for (int _4200 = (int)0, _10547 = _4198; _4200 < _10547 ; ++_4200)
                      {
                        _10546.push_back(_ptr__4176[((safe_add( _4168,_4169 ) - (int)1) - _4200)]);
                      }
                      auto _10548 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10546.size()),_10546.begin(),_10546.end()));
                      std::shared_ptr< monty::ndarray< int,1 > > _4199 = _10548;
                      _checked_ptr_1<int> _ptr__4199(_4199 ? _4199->raw() : nullptr,_4199 ? _4199->size(0) : 0);
                      _4169 -= _4198;
                      {
                        int _4201 = (_4198 - (int)1);
                        int _4202 = (int)0;
                        while ( (_4202 < _4201) )
                        {
                          {
                            while ( ((_4202 < _4201) && (_ptr__4176[safe_add( _4173,_ptr__4199[_4202] )] == 2)) )
                            {
                              {
                                ++ _4202;
                              }
                            }
                            while ( ((_4202 < _4201) && (_ptr__4176[safe_add( _4173,_ptr__4199[_4201] )] != 2)) )
                            {
                              {
                                -- _4201;
                              }
                            }
                            if ((_4202 < _4201))
                            {
                              {
                                int _4203 = _ptr__4199[_4202];
                                _ptr__4199[_4202] = _ptr__4199[_4201];
                                _ptr__4199[_4201] = _4203;
                                ++ _4202;
                                -- _4201;
                              }
                            }
                            {}
                          }
                        }
                        double _4204 = 0.0;
                        int _4205 = (int)0;
                        while ( ((_4205 < _4198) && (_ptr__4176[safe_add( _4173,_ptr__4199[_4205] )] == 2)) )
                        {
                          {
                            _4204 += _ptr__4177[safe_add( _4172,_ptr__4199[_4205] )];
                            ++ _4205;
                          }
                        }
                        int _10549;
                        bool _10550 = (_4205 > (int)0);
                        if (_10550)
                        {
                          _10549 = safe_add( (_4198 - _4205),(int)1 );
                        }
                        else
                        {
                          _10549 = _4198;
                        }
                        int _4206 = _10549;
                        int _4207 = (int)0;
                        if ((_4205 < (int)2))
                        {
                          {
                            int _10551 = (int)0;
                            int _10552 = _4198;
                            for (int _4208 = _10551; _4208 < _10552; ++_4208)
                            {
                              {
                                _ptr__4176[safe_add( safe_add( _4170,_ptr__4176[safe_add( _4171,_4174 )] ),_4208 )] = _ptr__4199[_4208];
                              }
                            }
                            _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = safe_add( _ptr__4176[safe_add( _4171,_4174 )],_4198 );
                            _ptr__4176[safe_add( _4173,_4174 )] = 8;
                            _ptr__4177[safe_add( _4172,_4174 )] = _4198;
                            _ptr__4176[safe_add( _4168,_4169 )] = _4174;
                            ++ _4169;
                            ++ _4174;
                          }
                        }
                        else
                        {
                          {
                            _ptr__4176[safe_add( _4173,_4174 )] = 2;
                            _ptr__4177[safe_add( _4172,_4174 )] = _4204;
                            _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = _ptr__4176[safe_add( _4171,_4174 )];
                            ++ _4174;
                            if ((_4205 == _4198))
                            {
                              {
                                _ptr__4176[safe_add( _4168,_4169 )] = (_4174 - (int)1);
                                ++ _4169;
                              }
                            }
                            else
                            {
                              {
                                _ptr__4176[safe_add( _4170,_ptr__4176[safe_add( _4171,_4174 )] )] = (_4174 - (int)1);
                                int _10553 = _4205;
                                int _10554 = _4198;
                                for (int _4209 = _10553; _4209 < _10554; ++_4209)
                                {
                                  {
                                    _ptr__4176[safe_add( (safe_add( safe_add( _4170,_ptr__4176[safe_add( _4171,_4174 )] ),_4209 ) - _4205),(int)1 )] = _ptr__4199[_4209];
                                  }
                                }
                                _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = safe_add( _ptr__4176[safe_add( _4171,_4174 )],_4206 );
                                _ptr__4176[safe_add( _4173,_4174 )] = 8;
                                _ptr__4177[safe_add( _4172,_4174 )] = _4206;
                                _ptr__4176[safe_add( _4168,_4169 )] = _4174;
                                ++ _4169;
                                ++ _4174;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              else
              {
                {
                  _4175 = _4189;
                }
              }
            }
          }
        }
      }
      {}
      if (((_4175 < (int)0) && (_4169 != (int)1)))
      {
        {
          _4175 = _4174;
        }
      }
      {}
      if ((_4175 < (int)0))
      {
        {
          int _4210 = _4184;
          int _4211 = _4210;
          if ((_ptr__4176[safe_add( _4173,_ptr__4176[(safe_add( _4168,_4169 ) - (int)1)] )] == 2))
          {
            {
              _ptr__4160[safe_add( _4161,_4185 )] += _ptr__4177[safe_add( _4172,_ptr__4176[(safe_add( _4168,_4169 ) - (int)1)] )];
              _ptr__4178[safe_add( _4164,_4211 )] = 10;
              _ptr__4179[safe_add( _4165,_4211 )] = 0.0;
              ++ _4211;
            }
          }
          else
          {
            {
              if (((_ptr__4160[safe_add( _4161,_4185 )] < (int)0) || ((int)0 < _ptr__4160[safe_add( _4161,_4185 )])))
              {
                {
                  _ptr__4178[safe_add( _4164,_4211 )] = 3;
                  ++ _4211;
                  _ptr__4178[safe_add( _4164,_4211 )] = 2;
                  _ptr__4179[safe_add( _4165,_4211 )] = _ptr__4160[safe_add( _4161,_4185 )];
                  ++ _4211;
                  _ptr__4160[safe_add( _4161,_4185 )] = (int)0;
                }
              }
              {}
              while ( (_4169 > (int)0) )
              {
                {
                  int _4212 = _ptr__4176[(safe_add( _4168,_4169 ) - (int)1)];
                  -- _4169;
                  int _4213 = _ptr__4176[safe_add( _4173,_4212 )];
                  double _4214 = _ptr__4177[safe_add( _4172,_4212 )];
                  _ptr__4178[safe_add( _4164,_4211 )] = _4213;
                  _ptr__4179[safe_add( _4165,_4211 )] = _4214;
                  ++ _4211;
                  int _10555 = _ptr__4176[safe_add( _4171,_4212 )];
                  int _10556 = _ptr__4176[safe_add( safe_add( _4171,_4212 ),(int)1 )];
                  for (int _4215 = _10555; _4215 < _10556; ++_4215)
                  {
                    {
                      _ptr__4176[safe_add( _4168,_4169 )] = _ptr__4176[safe_add( _4170,_4215 )];
                      ++ _4169;
                    }
                  }
                }
              }
              int _4216 = _4211;
              -- _4216;
              while ( (_4210 < _4216) )
              {
                {
                  int _4217 = _ptr__4178[safe_add( _4164,_4210 )];
                  double _4218 = _ptr__4179[safe_add( _4165,_4210 )];
                  _ptr__4178[safe_add( _4164,_4210 )] = _ptr__4178[safe_add( _4164,_4216 )];
                  _ptr__4179[safe_add( _4165,_4210 )] = _ptr__4179[safe_add( _4165,_4216 )];
                  _ptr__4178[safe_add( _4164,_4216 )] = _4217;
                  _ptr__4179[safe_add( _4165,_4216 )] = _4218;
                  ++ _4210;
                  -- _4216;
                }
              }
            }
          }
          _ptr__4180[safe_add( safe_add( _4166,_4185 ),(int)1 )] = _4211;
          _4184 = _4211;
        }
      }
      {}
    }
  }
  mosek::fusion::p_WorkStack::_get_impl(_4154)->pi32 = _4181;
  mosek::fusion::p_WorkStack::_get_impl(_4154)->pi64 = _4182;
  mosek::fusion::p_WorkStack::_get_impl(_4154)->pf64 = _4183;
  if ((_4175 >= (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal error: Invalid parameterization code list"));
    }
  }
  {}
}
void mosek::fusion::ExprOptimizeCode :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4219,monty::rc_ptr< ::mosek::fusion::WorkStack > _4220,monty::rc_ptr< ::mosek::fusion::WorkStack > _4221) { mosek::fusion::p_ExprOptimizeCode::_get_impl(this)->eval(_4219,_4220,_4221); }void mosek::fusion::p_ExprOptimizeCode::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4219,monty::rc_ptr< ::mosek::fusion::WorkStack > _4220,monty::rc_ptr< ::mosek::fusion::WorkStack > _4221){
  expr->eval(_4220,_4219,_4221);
  _4220->pop_expr();
  int _4222 = mosek::fusion::p_WorkStack::_get_impl(_4220)->nd;
  int _4223 = mosek::fusion::p_WorkStack::_get_impl(_4220)->shape_base;
  int _4224 = mosek::fusion::p_WorkStack::_get_impl(_4220)->nelem;
  int _4225 = mosek::fusion::p_WorkStack::_get_impl(_4220)->nnz;
  bool _4226 = mosek::fusion::p_WorkStack::_get_impl(_4220)->hassp;
  int _4227 = mosek::fusion::p_WorkStack::_get_impl(_4220)->ncodeatom;
  int _4228 = mosek::fusion::p_WorkStack::_get_impl(_4220)->ptr_base;
  int _4229 = mosek::fusion::p_WorkStack::_get_impl(_4220)->sp_base;
  int _4230 = mosek::fusion::p_WorkStack::_get_impl(_4220)->nidxs_base;
  int _4231 = mosek::fusion::p_WorkStack::_get_impl(_4220)->cof_base;
  int _4232 = mosek::fusion::p_WorkStack::_get_impl(_4220)->code_base;
  int _4233 = mosek::fusion::p_WorkStack::_get_impl(_4220)->codeptr_base;
  int _4234 = mosek::fusion::p_WorkStack::_get_impl(_4220)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4235 = mosek::fusion::p_WorkStack::_get_impl(_4220)->i32;
  _checked_ptr_1<int> _ptr__4235(_4235 ? _4235->raw() : nullptr,_4235 ? _4235->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4236 = mosek::fusion::p_WorkStack::_get_impl(_4220)->i64;
  _checked_ptr_1<long long> _ptr__4236(_4236 ? _4236->raw() : nullptr,_4236 ? _4236->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4237 = mosek::fusion::p_WorkStack::_get_impl(_4220)->f64;
  _checked_ptr_1<double> _ptr__4237(_4237 ? _4237->raw() : nullptr,_4237 ? _4237->size(0) : 0);
  if ((_4227 == (int)0))
  {
    {
      _4219->alloc_expr(_4222,_4224,_4225,_4226,(int)0);
      int _4238 = mosek::fusion::p_WorkStack::_get_impl(_4219)->ptr_base;
      int _4239 = mosek::fusion::p_WorkStack::_get_impl(_4219)->sp_base;
      int _4240 = mosek::fusion::p_WorkStack::_get_impl(_4219)->nidxs_base;
      int _4241 = mosek::fusion::p_WorkStack::_get_impl(_4219)->cof_base;
      int _4242 = mosek::fusion::p_WorkStack::_get_impl(_4219)->shape_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4243 = mosek::fusion::p_WorkStack::_get_impl(_4219)->i32;
      _checked_ptr_1<int> _ptr__4243(_4243 ? _4243->raw() : nullptr,_4243 ? _4243->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4244 = mosek::fusion::p_WorkStack::_get_impl(_4219)->i64;
      _checked_ptr_1<long long> _ptr__4244(_4244 ? _4244->raw() : nullptr,_4244 ? _4244->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4245 = mosek::fusion::p_WorkStack::_get_impl(_4219)->f64;
      _checked_ptr_1<double> _ptr__4245(_4245 ? _4245->raw() : nullptr,_4245 ? _4245->size(0) : 0);
      int _10557 = (int)0;
      int _10558 = safe_add( _4224,(int)1 );
      for (int _4246 = _10557; _4246 < _10558; ++_4246)
      {
        {
          _ptr__4243[safe_add( _4238,_4246 )] = _ptr__4235[safe_add( _4228,_4246 )];
        }
      }
      int _10559 = (int)0;
      int _10560 = _4222;
      for (int _4247 = _10559; _4247 < _10560; ++_4247)
      {
        {
          _ptr__4243[safe_add( _4242,_4247 )] = _ptr__4235[safe_add( _4223,_4247 )];
        }
      }
      int _10561 = (int)0;
      int _10562 = _4225;
      for (int _4248 = _10561; _4248 < _10562; ++_4248)
      {
        {
          _ptr__4244[safe_add( _4240,_4248 )] = _ptr__4236[safe_add( _4230,_4248 )];
        }
      }
      int _10563 = (int)0;
      int _10564 = _4225;
      for (int _4249 = _10563; _4249 < _10564; ++_4249)
      {
        {
          _ptr__4245[safe_add( _4241,_4249 )] = _ptr__4237[safe_add( _4231,_4249 )];
        }
      }
      if (_4226)
      {
        {
          int _10565 = (int)0;
          int _10566 = _4224;
          for (int _4250 = _10565; _4250 < _10566; ++_4250)
          {
            {
              _ptr__4244[safe_add( _4239,_4250 )] = _ptr__4236[safe_add( _4229,_4250 )];
            }
          }
        }
      }
      {}
    }
  }
  else
  {
    {
      int _4251 = _4221->alloci32(safe_add( _4227,safe_mul( _4225,(int)2 ) ));
      int _4252 = _4221->alloci32(safe_add( _4225,(int)1 ));
      int _4253 = _4221->allocf64(safe_add( _4227,safe_mul( _4225,(int)2 ) ));
      ::mosek::fusion::p_ExprOptimizeCode::compress_code(_4221,_4225,_4235,_4232,_4235,_4233,_4237,_4231,_4237,_4234,_4251,_4253,_4252);
      std::shared_ptr< monty::ndarray< int,1 > > _4254 = mosek::fusion::p_WorkStack::_get_impl(_4221)->i32;
      _checked_ptr_1<int> _ptr__4254(_4254 ? _4254->raw() : nullptr,_4254 ? _4254->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4255 = mosek::fusion::p_WorkStack::_get_impl(_4221)->f64;
      _checked_ptr_1<double> _ptr__4255(_4255 ? _4255->raw() : nullptr,_4255 ? _4255->size(0) : 0);
      int _4256 = (int)0;
      int _4257 = (int)0;
      int _4258 = (int)0;
      int _10567 = (int)0;
      int _10568 = _4224;
      for (int _4259 = _10567; _4259 < _10568; ++_4259)
      {
        {
          int _4260 = (int)0;
          int _10569 = _ptr__4235[safe_add( _4228,_4259 )];
          int _10570 = _ptr__4235[safe_add( safe_add( _4228,_4259 ),(int)1 )];
          for (int _4261 = _10569; _4261 < _10570; ++_4261)
          {
            {
              if (((_ptr__4237[safe_add( _4231,_4261 )] < (int)0) || ((int)0 < _ptr__4237[safe_add( _4231,_4261 )])))
              {
                {
                  ++ _4257;
                  ++ _4260;
                  ++ _4256;
                }
              }
              else
              {
                {
                  if (((_ptr__4254[safe_add( safe_add( _4252,_4261 ),(int)1 )] - _ptr__4254[safe_add( _4252,_4261 )]) > (int)1))
                  {
                    {
                      ++ _4257;
                      ++ _4260;
                      _4256 += (_ptr__4254[safe_add( safe_add( _4252,_4261 ),(int)1 )] - _ptr__4254[safe_add( _4252,_4261 )]);
                    }
                  }
                  else
                  {
                    {
                      if ((_ptr__4254[safe_add( _4251,_ptr__4254[safe_add( _4252,_4261 )] )] != 10))
                      {
                        {
                          ++ _4257;
                          ++ _4260;
                          ++ _4256;
                        }
                      }
                      {}
                    }
                  }
                }
              }
            }
          }
          if ((_4260 > (int)0))
          {
            {
              ++ _4258;
            }
          }
          {}
        }
      }
      bool _4262 = false;
      {
        long long _4263 = (long long)1;
        int _10571 = (int)0;
        int _10572 = _4222;
        for (int _4264 = _10571; _4264 < _10572; ++_4264)
        {
          {
            _4263 *= _ptr__4235[safe_add( _4223,_4264 )];
          }
        }
        _4262 = (_4263 > _4258);
      }
      _4219->alloc_expr(_4222,_4258,_4257,_4262,_4256);
      int _4265 = mosek::fusion::p_WorkStack::_get_impl(_4219)->ptr_base;
      int _4266 = mosek::fusion::p_WorkStack::_get_impl(_4219)->sp_base;
      int _4267 = mosek::fusion::p_WorkStack::_get_impl(_4219)->shape_base;
      int _4268 = mosek::fusion::p_WorkStack::_get_impl(_4219)->nidxs_base;
      int _4269 = mosek::fusion::p_WorkStack::_get_impl(_4219)->cof_base;
      int _4270 = mosek::fusion::p_WorkStack::_get_impl(_4219)->code_base;
      int _4271 = mosek::fusion::p_WorkStack::_get_impl(_4219)->codeptr_base;
      int _4272 = mosek::fusion::p_WorkStack::_get_impl(_4219)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4273 = mosek::fusion::p_WorkStack::_get_impl(_4219)->i32;
      _checked_ptr_1<int> _ptr__4273(_4273 ? _4273->raw() : nullptr,_4273 ? _4273->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4274 = mosek::fusion::p_WorkStack::_get_impl(_4219)->i64;
      _checked_ptr_1<long long> _ptr__4274(_4274 ? _4274->raw() : nullptr,_4274 ? _4274->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4275 = mosek::fusion::p_WorkStack::_get_impl(_4219)->f64;
      _checked_ptr_1<double> _ptr__4275(_4275 ? _4275->raw() : nullptr,_4275 ? _4275->size(0) : 0);
      int _10573 = (int)0;
      int _10574 = _4222;
      for (int _4276 = _10573; _4276 < _10574; ++_4276)
      {
        {
          _ptr__4273[safe_add( _4267,_4276 )] = _ptr__4235[safe_add( _4223,_4276 )];
        }
      }
      if ((_4256 == (int)0))
      {
        {
          int _10575 = (int)0;
          int _10576 = _4225;
          for (int _4277 = _10575; _4277 < _10576; ++_4277)
          {
            {
              _ptr__4274[safe_add( _4268,_4277 )] = _ptr__4236[safe_add( _4230,_4277 )];
            }
          }
          int _10577 = (int)0;
          int _10578 = _4225;
          for (int _4278 = _10577; _4278 < _10578; ++_4278)
          {
            {
              _ptr__4275[safe_add( _4269,_4278 )] = _ptr__4237[safe_add( _4231,_4278 )];
            }
          }
          int _10579 = (int)0;
          int _10580 = safe_add( _4224,(int)1 );
          for (int _4279 = _10579; _4279 < _10580; ++_4279)
          {
            {
              _ptr__4273[safe_add( _4265,_4279 )] = _ptr__4273[safe_add( _4228,_4279 )];
            }
          }
          if (_4226)
          {
            {
              int _10581 = (int)0;
              int _10582 = _4224;
              for (int _4280 = _10581; _4280 < _10582; ++_4280)
              {
                {
                  _ptr__4274[safe_add( _4266,_4280 )] = _ptr__4274[safe_add( _4229,_4280 )];
                }
              }
            }
          }
          {}
        }
      }
      else
      {
        {
          int _4281 = (int)0;
          int _4282 = (int)0;
          int _4283 = (int)0;
          _ptr__4273[_4265] = (int)0;
          if ((_4256 > (int)0))
          {
            {
              _ptr__4273[_4271] = (int)0;
            }
          }
          {}
          int _10583 = (int)0;
          int _10584 = _4224;
          for (int _4284 = _10583; _4284 < _10584; ++_4284)
          {
            {
              int _4285 = (int)0;
              int _10585 = _ptr__4235[safe_add( _4228,_4284 )];
              int _10586 = _ptr__4235[safe_add( safe_add( _4228,_4284 ),(int)1 )];
              for (int _4286 = _10585; _4286 < _10586; ++_4286)
              {
                {
                  if (((_ptr__4237[safe_add( _4231,_4286 )] < (int)0) || ((int)0 < _ptr__4237[safe_add( _4231,_4286 )])))
                  {
                    {
                      _ptr__4274[safe_add( _4268,_4283 )] = _ptr__4236[safe_add( _4230,_4286 )];
                      _ptr__4275[safe_add( _4269,_4283 )] = _ptr__4237[safe_add( _4231,_4286 )];
                      _ptr__4273[safe_add( _4270,_4281 )] = _ptr__4254[safe_add( _4251,_ptr__4254[safe_add( _4252,_4286 )] )];
                      _ptr__4275[safe_add( _4272,_4281 )] = _ptr__4255[safe_add( _4253,_ptr__4254[safe_add( _4252,_4286 )] )];
                      ++ _4281;
                      _ptr__4273[safe_add( safe_add( _4271,_4283 ),(int)1 )] = _4281;
                      ++ _4283;
                      ++ _4285;
                    }
                  }
                  else
                  {
                    {
                      if ((((_ptr__4254[safe_add( safe_add( _4252,_4286 ),(int)1 )] - _ptr__4254[safe_add( _4252,_4286 )]) > (int)1) || (_ptr__4254[safe_add( _4251,_ptr__4254[safe_add( _4252,_4286 )] )] != 10)))
                      {
                        {
                          _ptr__4274[safe_add( _4268,_4283 )] = _ptr__4236[safe_add( _4230,_4286 )];
                          _ptr__4275[safe_add( _4269,_4283 )] = 0.0;
                          int _10587 = _ptr__4254[safe_add( _4252,_4286 )];
                          int _10588 = _ptr__4254[safe_add( safe_add( _4252,_4286 ),(int)1 )];
                          for (int _4287 = _10587; _4287 < _10588; ++_4287)
                          {
                            {
                              _ptr__4273[safe_add( _4270,_4281 )] = _ptr__4254[safe_add( _4251,_4287 )];
                              _ptr__4275[safe_add( _4272,_4281 )] = _ptr__4255[safe_add( _4253,_4287 )];
                              ++ _4281;
                            }
                          }
                          _ptr__4273[safe_add( safe_add( _4271,_4283 ),(int)1 )] = _4281;
                          ++ _4283;
                          ++ _4285;
                        }
                      }
                      {}
                    }
                  }
                }
              }
              if ((_4285 > (int)0))
              {
                {
                  _ptr__4273[safe_add( safe_add( _4265,_4282 ),(int)1 )] = _4283;
                  if (_4262)
                  {
                    {
                      _ptr__4274[safe_add( _4266,_4282 )] = _ptr__4236[safe_add( _4229,_4284 )];
                    }
                  }
                  {}
                  ++ _4282;
                }
              }
              {}
            }
          }
          if ((_4282 != _4258))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect result nelem"));
            }
          }
          {}
          if ((_4283 != _4257))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect result nnz"));
            }
          }
          {}
          if ((_4281 != _4256))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect result num code atoms"));
            }
          }
          {}
          if ((_4256 > (int)0))
          {
            {
              if ((_ptr__4273[safe_add( _4271,_4257 )] != _4256))
              {
                {
                  throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect codeptr"));
                }
              }
              {}
            }
          }
          {}
        }
      }
    }
  }
}
std::string mosek::fusion::ExprOptimizeCode :: toString() { return mosek::fusion::p_ExprOptimizeCode::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprOptimizeCode::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprOptimizeCode("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprOptimizeCode::destroy(){expr.reset();}void mosek::fusion::ExprOptimizeCode::destroy() { mosek::fusion::p_ExprOptimizeCode::_get_impl(this)->destroy(); }mosek::fusion::ExprCompress::ExprCompress(mosek::fusion::p_ExprCompress *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprCompress()" << this << std::endl; */ }mosek::fusion::ExprCompress::~ExprCompress() {  /* std::cout << "~ExprCompress()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprCompress::p_ExprCompress  (::mosek::fusion::ExprCompress * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprCompress::t mosek::fusion::p_ExprCompress::_new_ExprCompress  (monty::rc_ptr< ::mosek::fusion::Expression > _4288){ return new mosek::fusion::ExprCompress(_4288); }mosek::fusion::ExprCompress::ExprCompress  (monty::rc_ptr< ::mosek::fusion::Expression > _4288) :    ExprCompress(new mosek::fusion::p_ExprCompress(this)){ mosek::fusion::p_ExprCompress::_get_impl(this)->_initialize(_4288); }void mosek::fusion::p_ExprCompress::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4288){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_4288->getShape());
    mosek::fusion::p_ExprCompress::_get_impl(::mosek::fusion::ExprCompress::t(_pubthis))->expr = _4288;
  }
}void mosek::fusion::ExprCompress::arg_sort  ( monty::rc_ptr< ::mosek::fusion::WorkStack > _4289,    monty::rc_ptr< ::mosek::fusion::WorkStack > _4290,    int _4291,    int _4292,    int _4293,    int _4294,    int _4295) { mosek::fusion::p_ExprCompress::arg_sort(_4289,_4290,_4291,_4292,_4293,_4294,_4295); }void mosek::fusion::p_ExprCompress::arg_sort(monty::rc_ptr< ::mosek::fusion::WorkStack > _4289,monty::rc_ptr< ::mosek::fusion::WorkStack > _4290,int _4291,int _4292,int _4293,int _4294,int _4295){
  int _4296 = (int)0;
  std::shared_ptr< monty::ndarray< int,1 > > _4297 = mosek::fusion::p_WorkStack::_get_impl(_4289)->i32;
  _checked_ptr_1<int> _ptr__4297(_4297 ? _4297->raw() : nullptr,_4297 ? _4297->size(0) : 0);
  int _10589 = (int)0;
  int _10590 = _4292;
  for (int _4298 = _10589; _4298 < _10590; ++_4298)
  {
    {
      if (((_ptr__4297[safe_add( safe_add( _4294,_4298 ),(int)1 )] - _ptr__4297[safe_add( _4294,_4298 )]) > _4296))
      {
        {
          _4296 = (_ptr__4297[safe_add( safe_add( _4294,_4298 ),(int)1 )] - _ptr__4297[safe_add( _4294,_4298 )]);
        }
      }
      {}
    }
  }
  int _10591;
  bool _10592 = (_4296 > (int)2);
  if (_10592)
  {
    _10591 = _4290->alloci32(safe_mul( _4296,(int)2 ));
  }
  else
  {
    _10591 = (int)99999;
  }
  int _4299 = _10591;
  std::shared_ptr< monty::ndarray< int,1 > > _4300 = mosek::fusion::p_WorkStack::_get_impl(_4290)->i32;
  _checked_ptr_1<int> _ptr__4300(_4300 ? _4300->raw() : nullptr,_4300 ? _4300->size(0) : 0);
  _4297 = mosek::fusion::p_WorkStack::_get_impl(_4289)->i32;
  _ptr__4297.update(_4297 ? _4297->raw() : nullptr, _4297 ? _4297->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4301 = mosek::fusion::p_WorkStack::_get_impl(_4289)->i64;
  _checked_ptr_1<long long> _ptr__4301(_4301 ? _4301->raw() : nullptr,_4301 ? _4301->size(0) : 0);
  int _10593 = (int)0;
  int _10594 = _4292;
  for (int _4302 = _10593; _4302 < _10594; ++_4302)
  {
    {
      int _4303 = _ptr__4297[safe_add( _4294,_4302 )];
      int _4304 = _ptr__4297[safe_add( safe_add( _4294,_4302 ),(int)1 )];
      int _4305 = (_4304 - _4303);
      if ((_4305 == (int)0))
      {
        {
        }
      }
      else if((_4305 == (int)1))
      {
        {
          _ptr__4300[safe_add( _4291,_4303 )] = _4303;
        }
      }
      else if((_4305 == (int)2))
      {
        {
          if ((_ptr__4301[safe_add( _4295,_4303 )] <= _ptr__4301[safe_add( safe_add( _4295,_4303 ),(int)1 )]))
          {
            {
              _ptr__4300[safe_add( _4291,_4303 )] = _4303;
              _ptr__4300[safe_add( safe_add( _4291,_4303 ),(int)1 )] = safe_add( _4303,(int)1 );
            }
          }
          else
          {
            {
              _ptr__4300[safe_add( _4291,_4303 )] = safe_add( _4303,(int)1 );
              _ptr__4300[safe_add( safe_add( _4291,_4303 ),(int)1 )] = _4303;
            }
          }
        }
      }
      else
      {
        {
          long long _4306 = _ptr__4301[safe_add( _4295,_4303 )];
          long long _4307 = _ptr__4301[safe_add( _4295,_4303 )];
          bool _4308 = false;
          int _10595 = safe_add( _4303,(int)1 );
          int _10596 = _4304;
          for (int _4309 = _10595; _4309 < _10596; ++_4309)
          {
            {
              _4308 = (_4308 && (_ptr__4301[(safe_add( _4295,_4309 ) - (int)1)] <= _ptr__4301[safe_add( _4295,_4309 )]));
              if ((_4306 > _ptr__4301[safe_add( _4295,_4309 )]))
              {
                {
                  _4306 = _ptr__4301[safe_add( _4295,_4309 )];
                }
              }
              {}
              if ((_4307 < _ptr__4301[safe_add( _4295,_4309 )]))
              {
                {
                  _4307 = _ptr__4301[safe_add( _4295,_4309 )];
                }
              }
              {}
            }
          }
          if (_4308)
          {
            {
              int _10597 = _4303;
              int _10598 = _4304;
              for (int _4310 = _10597; _4310 < _10598; ++_4310)
              {
                {
                  _ptr__4300[safe_add( _4291,_4310 )] = _4310;
                }
              }
            }
          }
          else if((safe_add( (_4307 - _4306),(int)1 ) <= _4305))
          {
            {
              long long _4311 = safe_add( (_4307 - _4306),(int)1 );
              int _10599 = (int)0;
              long long _10600 = safe_add( _4311,(int)1 );
              for (long long _4312 = _10599; _4312 < _10600; ++_4312)
              {
                {
                  _ptr__4300[safe_add( _4299,_4312 )] = (int)0;
                }
              }
              int _10601 = _4303;
              int _10602 = _4304;
              for (int _4313 = _10601; _4313 < _10602; ++_4313)
              {
                {
                  ++ _ptr__4300[safe_add( (safe_add( _4299,_ptr__4301[safe_add( _4295,_4313 )] ) - _4306),(int)1 )];
                }
              }
              int _10603 = (int)0;
              long long _10604 = _4311;
              for (long long _4314 = _10603; _4314 < _10604; ++_4314)
              {
                {
                  _ptr__4300[safe_add( safe_add( _4299,_4314 ),(int)1 )] += _ptr__4300[safe_add( _4299,_4314 )];
                }
              }
              int _10605 = _4303;
              int _10606 = _4304;
              for (int _4315 = _10605; _4315 < _10606; ++_4315)
              {
                {
                  _ptr__4300[safe_add( safe_add( _4291,_4303 ),_ptr__4300[(safe_add( _4299,_ptr__4301[safe_add( _4295,_4315 )] ) - _4306)] )] = _4315;
                  ++ _ptr__4300[(safe_add( _4299,_ptr__4301[safe_add( _4295,_4315 )] ) - _4306)];
                }
              }
            }
          }
          else
          {
            {
              int _4316 = (int)1;
              int _4317 = _4299;
              int _4318 = safe_add( _4299,_4305 );
              int _10607 = (int)0;
              int _10608 = _4305;
              for (int _4319 = _10607; _4319 < _10608; ++_4319)
              {
                {
                  _ptr__4300[safe_add( _4317,_4319 )] = _4319;
                }
              }
              while ( (_4316 < _4305) )
              {
                {
                  int _4320 = safe_mul( _4316,(int)2 );
                  int _4321 = (_4305 / _4320);
                  if ((safe_add( safe_mul( _4321,_4320 ),_4316 ) < _4305))
                  {
                    {
                      ++ _4321;
                    }
                  }
                  {}
                  int _4322 = (int)0;
                  int _10609 = (int)0;
                  int _10610 = _4321;
                  for (int _4323 = _10609; _4323 < _10610; ++_4323)
                  {
                    {
                      int _4324 = safe_mul( _4323,_4320 );
                      int _4325 = safe_add( _4324,_4316 );
                      int _4326 = _4325;
                      int _4327 = safe_add( _4326,_4316 );
                      if ((_4327 > _4305))
                      {
                        {
                          _4327 = _4305;
                        }
                      }
                      {}
                      while ( ((_4324 < _4325) && (_4326 < _4327)) )
                      {
                        {
                          if ((_ptr__4301[safe_add( safe_add( _4295,_ptr__4300[safe_add( _4317,_4324 )] ),_4303 )] <= _ptr__4301[safe_add( safe_add( _4295,_ptr__4300[safe_add( _4317,_4326 )] ),_4303 )]))
                          {
                            {
                              _ptr__4300[safe_add( _4318,_4322 )] = _ptr__4300[safe_add( _4317,_4324 )];
                              ++ _4322;
                              ++ _4324;
                            }
                          }
                          else
                          {
                            {
                              _ptr__4300[safe_add( _4318,_4322 )] = _ptr__4300[safe_add( _4317,_4326 )];
                              ++ _4322;
                              ++ _4326;
                            }
                          }
                        }
                      }
                      while ( (_4324 < _4325) )
                      {
                        {
                          _ptr__4300[safe_add( _4318,_4322 )] = _ptr__4300[safe_add( _4317,_4324 )];
                          ++ _4322;
                          ++ _4324;
                        }
                      }
                      while ( (_4326 < _4327) )
                      {
                        {
                          _ptr__4300[safe_add( _4318,_4322 )] = _ptr__4300[safe_add( _4317,_4326 )];
                          ++ _4322;
                          ++ _4326;
                        }
                      }
                    }
                  }
                  if ((safe_mul( _4321,_4320 ) < _4305))
                  {
                    {
                      int _4328 = safe_mul( _4321,_4320 );
                      while ( (_4328 < _4305) )
                      {
                        {
                          _ptr__4300[safe_add( _4318,_4322 )] = _ptr__4300[safe_add( _4317,_4328 )];
                          ++ _4328;
                          ++ _4322;
                        }
                      }
                    }
                  }
                  {}
                  int _4329 = _4317;
                  _4317 = _4318;
                  _4318 = _4329;
                  _4316 *= (int)2;
                }
              }
              int _10611 = (int)0;
              int _10612 = _4305;
              for (int _4330 = _10611; _4330 < _10612; ++_4330)
              {
                {
                  _ptr__4300[safe_add( safe_add( _4291,_4303 ),_4330 )] = safe_add( _ptr__4300[safe_add( _4317,_4330 )],_4303 );
                }
              }
            }
          }
        }
      }
    }
  }
}
void mosek::fusion::ExprCompress::merge_sort  ( int _4331,    int _4332,    int _4333,    int _4334,    int _4335,    int _4336,    std::shared_ptr< monty::ndarray< int,1 > > _4337,    std::shared_ptr< monty::ndarray< long long,1 > > _4338) { mosek::fusion::p_ExprCompress::merge_sort(_4331,_4332,_4333,_4334,_4335,_4336,_4337,_4338); }void mosek::fusion::p_ExprCompress::merge_sort(int _4331,int _4332,int _4333,int _4334,int _4335,int _4336,std::shared_ptr< monty::ndarray< int,1 > > _4337,std::shared_ptr< monty::ndarray< long long,1 > > _4338){
  _checked_ptr_1<int> _ptr__4337(_4337 ? _4337->raw() : nullptr, _4337 ? _4337->size(0) : 0);
  _checked_ptr_1<long long> _ptr__4338(_4338 ? _4338->raw() : nullptr, _4338 ? _4338->size(0) : 0);
  int _4339 = _4331;
  int _4340 = _4332;
  int _10613 = (int)0;
  int _10614 = _4334;
  for (int _4341 = _10613; _4341 < _10614; ++_4341)
  {
    {
      _ptr__4337[safe_add( _4339,_4341 )] = _4341;
    }
  }
  int _10615 = (int)0;
  int _10616 = _4333;
  for (int _4342 = _10615; _4342 < _10616; ++_4342)
  {
    {
      _4339 = _4331;
      _4340 = _4332;
      int _4343 = _ptr__4337[safe_add( safe_add( _4335,_4342 ),(int)1 )];
      int _4344 = _ptr__4337[safe_add( _4335,_4342 )];
      if ((safe_add( _4344,(int)1 ) < _4343))
      {
        {
          int _4345 = (_4343 - _4344);
          int _4346 = (int)0;
          while ( (_4345 > (int)1) )
          {
            {
              ++ _4346;
              _4345 /= (int)2;
            }
          }
          _4345 = (_4343 - _4344);
          int _4347 = (int)1;
          int _10617 = (int)0;
          int _10618 = safe_add( _4346,(int)1 );
          for (int _4348 = _10617; _4348 < _10618; ++_4348)
          {
            {
              int _4349 = ((safe_add( _4345,_4347 ) - (int)1) / _4347);
              int _4350 = (_4349 / (int)2);
              int _4351 = _4344;
              int _10619 = (int)0;
              int _10620 = _4350;
              for (int _4352 = _10619; _4352 < _10620; ++_4352)
              {
                {
                  int _4353 = safe_mul( safe_mul( _4352,_4347 ),(int)2 );
                  int _10621;
                  bool _10622 = (safe_add( safe_add( _4344,_4353 ),safe_mul( (int)2,_4347 ) ) < _4343);
                  if (_10622)
                  {
                    _10621 = safe_add( safe_add( _4344,_4353 ),safe_mul( (int)2,_4347 ) );
                  }
                  else
                  {
                    _10621 = _4343;
                  }
                  int _4354 = _10621;
                  int _4355 = safe_add( safe_add( _4344,_4353 ),_4347 );
                  int _4356 = safe_add( safe_add( _4344,_4353 ),_4347 );
                  int _4357 = safe_add( _4344,_4353 );
                  while ( ((_4357 < _4356) && (_4355 < _4354)) )
                  {
                    {
                      if ((_ptr__4338[safe_add( _4336,_ptr__4337[safe_add( _4339,_4357 )] )] <= _ptr__4338[safe_add( _4336,_ptr__4337[safe_add( _4339,_4355 )] )]))
                      {
                        {
                          _ptr__4337[safe_add( _4340,_4351 )] = _ptr__4337[safe_add( _4339,_4357 )];
                          ++ _4351;
                          ++ _4357;
                        }
                      }
                      else
                      {
                        {
                          _ptr__4337[safe_add( _4340,_4351 )] = _ptr__4337[safe_add( _4339,_4355 )];
                          ++ _4351;
                          ++ _4355;
                        }
                      }
                    }
                  }
                  while ( (_4357 < _4356) )
                  {
                    {
                      _ptr__4337[safe_add( _4340,_4351 )] = _ptr__4337[safe_add( _4339,_4357 )];
                      ++ _4351;
                      ++ _4357;
                    }
                  }
                  while ( (_4355 < _4354) )
                  {
                    {
                      _ptr__4337[safe_add( _4340,_4351 )] = _ptr__4337[safe_add( _4339,_4355 )];
                      ++ _4351;
                      ++ _4355;
                    }
                  }
                }
              }
              int _10623 = _4351;
              int _10624 = _4343;
              for (int _4358 = _10623; _4358 < _10624; ++_4358)
              {
                {
                  _ptr__4337[safe_add( _4340,_4358 )] = _ptr__4337[safe_add( _4339,_4358 )];
                }
              }
              int _4359 = _4339;
              _4339 = _4340;
              _4340 = _4359;
              _4347 *= (int)2;
            }
          }
        }
      }
      {}
      int _10625 = _4344;
      int _10626 = _4343;
      for (int _4360 = _10625; _4360 < _10626; ++_4360)
      {
        {
          _ptr__4337[safe_add( _4331,_4360 )] = _ptr__4337[safe_add( _4339,_4360 )];
        }
      }
    }
  }
}
void mosek::fusion::ExprCompress :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4361,monty::rc_ptr< ::mosek::fusion::WorkStack > _4362,monty::rc_ptr< ::mosek::fusion::WorkStack > _4363) { mosek::fusion::p_ExprCompress::_get_impl(this)->eval(_4361,_4362,_4363); }void mosek::fusion::p_ExprCompress::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4361,monty::rc_ptr< ::mosek::fusion::WorkStack > _4362,monty::rc_ptr< ::mosek::fusion::WorkStack > _4363){
  expr->eval(_4362,_4361,_4363);
  _4362->pop_expr();
  int _4364 = mosek::fusion::p_WorkStack::_get_impl(_4362)->nd;
  int _4365 = mosek::fusion::p_WorkStack::_get_impl(_4362)->shape_base;
  int _4366 = mosek::fusion::p_WorkStack::_get_impl(_4362)->nelem;
  int _4367 = mosek::fusion::p_WorkStack::_get_impl(_4362)->nnz;
  bool _4368 = mosek::fusion::p_WorkStack::_get_impl(_4362)->hassp;
  int _4369 = mosek::fusion::p_WorkStack::_get_impl(_4362)->ncodeatom;
  int _4370 = mosek::fusion::p_WorkStack::_get_impl(_4362)->ptr_base;
  int _4371 = mosek::fusion::p_WorkStack::_get_impl(_4362)->sp_base;
  int _4372 = mosek::fusion::p_WorkStack::_get_impl(_4362)->nidxs_base;
  int _4373 = mosek::fusion::p_WorkStack::_get_impl(_4362)->cof_base;
  int _4374 = mosek::fusion::p_WorkStack::_get_impl(_4362)->code_base;
  int _4375 = mosek::fusion::p_WorkStack::_get_impl(_4362)->codeptr_base;
  int _4376 = mosek::fusion::p_WorkStack::_get_impl(_4362)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4377 = mosek::fusion::p_WorkStack::_get_impl(_4362)->i32;
  _checked_ptr_1<int> _ptr__4377(_4377 ? _4377->raw() : nullptr,_4377 ? _4377->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4378 = mosek::fusion::p_WorkStack::_get_impl(_4362)->i64;
  _checked_ptr_1<long long> _ptr__4378(_4378 ? _4378->raw() : nullptr,_4378 ? _4378->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4379 = mosek::fusion::p_WorkStack::_get_impl(_4362)->f64;
  _checked_ptr_1<double> _ptr__4379(_4379 ? _4379->raw() : nullptr,_4379 ? _4379->size(0) : 0);
  bool _4380 = true;
  {
    std::shared_ptr< monty::ndarray< int,1 > > _4381 = mosek::fusion::p_WorkStack::_get_impl(_4363)->i32;
    _checked_ptr_1<int> _ptr__4381(_4381 ? _4381->raw() : nullptr,_4381 ? _4381->size(0) : 0);
    std::shared_ptr< monty::ndarray< long long,1 > > _4382 = mosek::fusion::p_WorkStack::_get_impl(_4363)->i64;
    _checked_ptr_1<long long> _ptr__4382(_4382 ? _4382->raw() : nullptr,_4382 ? _4382->size(0) : 0);
    std::shared_ptr< monty::ndarray< double,1 > > _4383 = mosek::fusion::p_WorkStack::_get_impl(_4363)->f64;
    _checked_ptr_1<double> _ptr__4383(_4383 ? _4383->raw() : nullptr,_4383 ? _4383->size(0) : 0);
    int _10627 = (int)0;
    int _10628 = _4366;
    for (int _4384 = _10627; _4384 < _10628; ++_4384)
    {
      {
        int _10629 = _ptr__4377[safe_add( _4370,_4384 )];
        int _10630 = (_ptr__4377[safe_add( safe_add( _4370,_4384 ),(int)1 )] - (int)1);
        for (int _4385 = _10629; _4385 < _10630; ++_4385)
        {
          {
            _4380 = (_4380 && (_ptr__4378[safe_add( _4372,_4385 )] < _ptr__4378[safe_add( safe_add( _4372,_4385 ),(int)1 )]));
          }
        }
      }
    }
    if (_4380)
    {
      {
        if ((_4369 > (int)0))
        {
          {
            int _10631 = (int)0;
            int _10632 = _4367;
            for (int _4386 = _10631; _4386 < _10632; ++_4386)
            {
              {
                _4380 = (_4380 && ((!((_ptr__4379[safe_add( _4373,_4386 )] >= 0.0) && (0.0 >= _ptr__4379[safe_add( _4373,_4386 )]))) || (((_ptr__4377[safe_add( safe_add( _4375,_4386 ),(int)1 )] - _ptr__4377[safe_add( _4375,_4386 )]) == (int)0) || (!(((_ptr__4377[safe_add( safe_add( _4375,_4386 ),(int)1 )] - _ptr__4377[safe_add( _4375,_4386 )]) == (int)1) && ((_ptr__4377[safe_add( _4374,_ptr__4377[safe_add( _4375,_4386 )] )] == 2) && (!((_ptr__4379[safe_add( _4376,_ptr__4377[safe_add( _4375,_4386 )] )] <= 0.0) && (_ptr__4379[safe_add( _4376,_ptr__4377[safe_add( _4375,_4386 )] )] >= 0.0)))))))));
              }
            }
          }
        }
        else
        {
          {
            int _10633 = (int)0;
            int _10634 = _4367;
            for (int _4387 = _10633; _4387 < _10634; ++_4387)
            {
              {
                _4380 = (_4380 && (!((_ptr__4379[safe_add( _4373,_4387 )] <= 0.0) && (0.0 <= _ptr__4379[safe_add( _4373,_4387 )]))));
              }
            }
          }
        }
      }
    }
    {}
  }
  if (_4380)
  {
    {
      _4361->alloc_expr(_4364,_4366,_4367,_4368,_4369);
      int _4388 = mosek::fusion::p_WorkStack::_get_impl(_4361)->ptr_base;
      int _4389 = mosek::fusion::p_WorkStack::_get_impl(_4361)->nidxs_base;
      int _4390 = mosek::fusion::p_WorkStack::_get_impl(_4361)->sp_base;
      int _4391 = mosek::fusion::p_WorkStack::_get_impl(_4361)->cof_base;
      int _4392 = mosek::fusion::p_WorkStack::_get_impl(_4361)->shape_base;
      int _4393 = mosek::fusion::p_WorkStack::_get_impl(_4361)->code_base;
      int _4394 = mosek::fusion::p_WorkStack::_get_impl(_4361)->codeptr_base;
      int _4395 = mosek::fusion::p_WorkStack::_get_impl(_4361)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4396 = mosek::fusion::p_WorkStack::_get_impl(_4361)->i32;
      _checked_ptr_1<int> _ptr__4396(_4396 ? _4396->raw() : nullptr,_4396 ? _4396->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4397 = mosek::fusion::p_WorkStack::_get_impl(_4361)->i64;
      _checked_ptr_1<long long> _ptr__4397(_4397 ? _4397->raw() : nullptr,_4397 ? _4397->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4398 = mosek::fusion::p_WorkStack::_get_impl(_4361)->f64;
      _checked_ptr_1<double> _ptr__4398(_4398 ? _4398->raw() : nullptr,_4398 ? _4398->size(0) : 0);
      {
        int _10635 = (int)0;
        int _10636 = _4364;
        for (int _4399 = _10635; _4399 < _10636; ++_4399)
        {
          {
            _ptr__4396[safe_add( _4392,_4399 )] = _ptr__4377[safe_add( _4365,_4399 )];
          }
        }
        int _10637 = (int)0;
        int _10638 = safe_add( _4366,(int)1 );
        for (int _4400 = _10637; _4400 < _10638; ++_4400)
        {
          {
            _ptr__4396[safe_add( _4388,_4400 )] = _ptr__4377[safe_add( _4370,_4400 )];
          }
        }
        int _10639 = (int)0;
        int _10640 = _4367;
        for (int _4401 = _10639; _4401 < _10640; ++_4401)
        {
          {
            _ptr__4397[safe_add( _4389,_4401 )] = _ptr__4378[safe_add( _4372,_4401 )];
          }
        }
        int _10641 = (int)0;
        int _10642 = _4367;
        for (int _4402 = _10641; _4402 < _10642; ++_4402)
        {
          {
            _ptr__4398[safe_add( _4391,_4402 )] = _ptr__4379[safe_add( _4373,_4402 )];
          }
        }
        if (_4368)
        {
          {
            int _10643 = (int)0;
            int _10644 = _4366;
            for (int _4403 = _10643; _4403 < _10644; ++_4403)
            {
              {
                _ptr__4397[safe_add( _4390,_4403 )] = _ptr__4378[safe_add( _4371,_4403 )];
              }
            }
          }
        }
        {}
        if ((_4369 > (int)0))
        {
          {
            int _10645 = (int)0;
            int _10646 = _4369;
            for (int _4404 = _10645; _4404 < _10646; ++_4404)
            {
              {
                _ptr__4396[safe_add( _4393,_4404 )] = _ptr__4377[safe_add( _4374,_4404 )];
              }
            }
            int _10647 = (int)0;
            int _10648 = _4369;
            for (int _4405 = _10647; _4405 < _10648; ++_4405)
            {
              {
                _ptr__4398[safe_add( _4395,_4405 )] = _ptr__4379[safe_add( _4376,_4405 )];
              }
            }
            int _10649 = (int)0;
            int _10650 = safe_add( _4367,(int)1 );
            for (int _4406 = _10649; _4406 < _10650; ++_4406)
            {
              {
                _ptr__4396[safe_add( _4394,_4406 )] = _ptr__4377[safe_add( _4375,_4406 )];
              }
            }
          }
        }
        {}
      }
      if ((_4369 > (int)0))
      {
        {
          if ((_ptr__4396[safe_add( _4394,_4367 )] != _4369))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect codeptr"));
            }
          }
          {}
        }
      }
      {}
    }
  }
  else
  {
    {
      int _4407 = _4363->alloci32(_4367);
      ::mosek::fusion::p_ExprCompress::arg_sort(_4362,_4363,_4407,_4366,_4367,_4370,_4372);
      std::shared_ptr< monty::ndarray< int,1 > > _4408 = mosek::fusion::p_WorkStack::_get_impl(_4363)->i32;
      _checked_ptr_1<int> _ptr__4408(_4408 ? _4408->raw() : nullptr,_4408 ? _4408->size(0) : 0);
      int _4409 = (int)0;
      int _4410 = _4369;
      {
        std::shared_ptr< monty::ndarray< int,1 > > _4411 = mosek::fusion::p_WorkStack::_get_impl(_4361)->i32;
        _checked_ptr_1<int> _ptr__4411(_4411 ? _4411->raw() : nullptr,_4411 ? _4411->size(0) : 0);
        int _10651 = (int)0;
        int _10652 = _4366;
        for (int _4412 = _10651; _4412 < _10652; ++_4412)
        {
          {
            int _4413 = _ptr__4377[safe_add( safe_add( _4370,_4412 ),(int)1 )];
            int _4414 = _ptr__4377[safe_add( _4370,_4412 )];
            if ((_4414 < _4413))
            {
              {
                int _4415 = _4414;
                while ( (_4415 < _4413) )
                {
                  {
                    double _4416 = 0.0;
                    bool _4417 = false;
                    long long _4418 = _ptr__4378[safe_add( _4372,_ptr__4408[safe_add( _4407,_4415 )] )];
                    int _4419 = _4415;
                    while ( ((_4415 < _4413) && (_ptr__4378[safe_add( _4372,_ptr__4408[safe_add( _4407,_4415 )] )] == _4418)) )
                    {
                      {
                        double _4420 = _ptr__4379[safe_add( _4373,_ptr__4408[safe_add( _4407,_4415 )] )];
                        _4417 = (_4417 || (!((_4420 <= 0.0) && (_4420 >= 0.0))));
                        _4416 += _4420;
                        ++ _4415;
                      }
                    }
                    if ((_4417 || (_4369 > (int)0)))
                    {
                      {
                        ++ _4409;
                        if (((safe_add( _4419,(int)1 ) < _4415) && (_4369 > (int)0)))
                        {
                          {
                            _4410 += (int)1;
                          }
                        }
                        {}
                      }
                    }
                    {}
                  }
                }
              }
            }
            {}
          }
        }
      }
      _4361->alloc_expr(_4364,_4366,_4409,_4368,_4410);
      int _4421 = mosek::fusion::p_WorkStack::_get_impl(_4361)->nidxs_base;
      int _4422 = mosek::fusion::p_WorkStack::_get_impl(_4361)->shape_base;
      int _4423 = mosek::fusion::p_WorkStack::_get_impl(_4361)->sp_base;
      int _4424 = mosek::fusion::p_WorkStack::_get_impl(_4361)->cof_base;
      int _4425 = mosek::fusion::p_WorkStack::_get_impl(_4361)->ptr_base;
      int _4426 = mosek::fusion::p_WorkStack::_get_impl(_4361)->code_base;
      int _4427 = mosek::fusion::p_WorkStack::_get_impl(_4361)->codeptr_base;
      int _4428 = mosek::fusion::p_WorkStack::_get_impl(_4361)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4429 = mosek::fusion::p_WorkStack::_get_impl(_4361)->i32;
      _checked_ptr_1<int> _ptr__4429(_4429 ? _4429->raw() : nullptr,_4429 ? _4429->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4430 = mosek::fusion::p_WorkStack::_get_impl(_4361)->i64;
      _checked_ptr_1<long long> _ptr__4430(_4430 ? _4430->raw() : nullptr,_4430 ? _4430->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4431 = mosek::fusion::p_WorkStack::_get_impl(_4361)->f64;
      _checked_ptr_1<double> _ptr__4431(_4431 ? _4431->raw() : nullptr,_4431 ? _4431->size(0) : 0);
      {
        int _10653 = (int)0;
        int _10654 = _4364;
        for (int _4432 = _10653; _4432 < _10654; ++_4432)
        {
          {
            _ptr__4429[safe_add( _4422,_4432 )] = _ptr__4377[safe_add( _4365,_4432 )];
          }
        }
        if (_4368)
        {
          {
            int _10655 = (int)0;
            int _10656 = _4366;
            for (int _4433 = _10655; _4433 < _10656; ++_4433)
            {
              {
                _ptr__4430[safe_add( _4423,_4433 )] = _ptr__4378[safe_add( _4371,_4433 )];
              }
            }
          }
        }
        {}
        int _4434 = (int)0;
        int _4435 = (int)0;
        {
          _ptr__4429[_4425] = (int)0;
          if ((_4410 > (int)0))
          {
            {
              _ptr__4429[_4427] = (int)0;
            }
          }
          {}
          int _10657 = (int)0;
          int _10658 = _4366;
          for (int _4436 = _10657; _4436 < _10658; ++_4436)
          {
            {
              int _4437 = _ptr__4377[safe_add( safe_add( _4370,_4436 ),(int)1 )];
              int _4438 = _ptr__4377[safe_add( _4370,_4436 )];
              if ((_4438 < _4437))
              {
                {
                  int _4439 = _4438;
                  int _4440 = _4439;
                  while ( (_4439 < _4437) )
                  {
                    {
                      double _4441 = 0.0;
                      bool _4442 = false;
                      int _4443 = safe_add( _4439,(int)1 );
                      int _4444 = _4439;
                      long long _4445 = _ptr__4378[safe_add( _4372,_ptr__4408[safe_add( _4407,_4444 )] )];
                      while ( ((_4443 < _4437) && (_ptr__4378[safe_add( _4372,_ptr__4408[safe_add( _4407,_4443 )] )] == _4445)) )
                      {
                        {
                          ++ _4443;
                        }
                      }
                      if ((_4369 > (int)0))
                      {
                        {
                          while ( (_4439 < _4443) )
                          {
                            {
                              double _4446 = _ptr__4379[safe_add( _4373,_ptr__4408[safe_add( _4407,_4439 )] )];
                              _4442 = (_4442 || (!((_4446 <= 0.0) && (_4446 >= 0.0))));
                              _4441 += _4446;
                              int _10659 = _ptr__4377[safe_add( _4375,_ptr__4408[safe_add( _4407,_4439 )] )];
                              int _10660 = _ptr__4377[safe_add( safe_add( _4375,_ptr__4408[safe_add( _4407,_4439 )] ),(int)1 )];
                              for (int _4447 = _10659; _4447 < _10660; ++_4447)
                              {
                                {
                                  _ptr__4429[safe_add( _4426,_4435 )] = _ptr__4377[safe_add( _4374,_4447 )];
                                  _ptr__4431[safe_add( _4428,_4435 )] = _ptr__4379[safe_add( _4376,_4447 )];
                                  ++ _4435;
                                }
                              }
                              ++ _4439;
                            }
                          }
                          if (((_4443 - _4444) > (int)1))
                          {
                            {
                              _ptr__4429[safe_add( _4426,_4435 )] = 8;
                              _ptr__4431[safe_add( _4428,_4435 )] = (_4443 - _4444);
                              ++ _4435;
                            }
                          }
                          {}
                          _ptr__4429[safe_add( safe_add( _4427,_4434 ),(int)1 )] = _4435;
                          _ptr__4430[safe_add( _4421,_4434 )] = _4445;
                          _ptr__4431[safe_add( _4424,_4434 )] = _4441;
                          ++ _4434;
                        }
                      }
                      else
                      {
                        {
                          while ( (_4439 < _4443) )
                          {
                            {
                              double _4448 = _ptr__4379[safe_add( _4373,_ptr__4408[safe_add( _4407,_4439 )] )];
                              _4442 = (_4442 || (!((_4448 <= 0.0) && (_4448 >= 0.0))));
                              _4441 += _4448;
                              ++ _4439;
                            }
                          }
                          if (_4442)
                          {
                            {
                              _ptr__4430[safe_add( _4421,_4434 )] = _4445;
                              _ptr__4431[safe_add( _4424,_4434 )] = _4441;
                              ++ _4434;
                            }
                          }
                          {}
                        }
                      }
                    }
                  }
                }
              }
              {}
              _ptr__4429[safe_add( safe_add( _4425,_4436 ),(int)1 )] = _4434;
            }
          }
        }
        if ((_4410 != _4435))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid ncodeatom"));
          }
        }
        {}
        if ((_4434 != _4409))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid nnz"));
          }
        }
        {}
        if ((_4409 != _ptr__4429[safe_add( _4425,_4366 )]))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid ptr"));
          }
        }
        {}
      }
      if ((_4410 > (int)0))
      {
        {
          if ((_ptr__4429[safe_add( _4427,_4409 )] != _4410))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect codeptr"));
            }
          }
          {}
        }
      }
      {}
    }
  }
  _4363->clear();
}
std::string mosek::fusion::ExprCompress :: toString() { return mosek::fusion::p_ExprCompress::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprCompress::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprCompress("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprCompress::destroy(){expr.reset();}void mosek::fusion::ExprCompress::destroy() { mosek::fusion::p_ExprCompress::_get_impl(this)->destroy(); }mosek::fusion::ExprConst::ExprConst(mosek::fusion::p_ExprConst *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprConst()" << this << std::endl; */ }mosek::fusion::ExprConst::~ExprConst() {  /* std::cout << "~ExprConst()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprConst::p_ExprConst  (::mosek::fusion::ExprConst * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprConst::t mosek::fusion::p_ExprConst::_new_ExprConst  (std::shared_ptr< monty::ndarray< int,1 > > _4449,    std::shared_ptr< monty::ndarray< long long,1 > > _4450,    std::shared_ptr< monty::ndarray< double,1 > > _4451){ return new mosek::fusion::ExprConst(_4449,_4450,_4451); }mosek::fusion::ExprConst::ExprConst  (std::shared_ptr< monty::ndarray< int,1 > > _4449,    std::shared_ptr< monty::ndarray< long long,1 > > _4450,    std::shared_ptr< monty::ndarray< double,1 > > _4451) :    ExprConst(new mosek::fusion::p_ExprConst(this)){ mosek::fusion::p_ExprConst::_get_impl(this)->_initialize(_4449,_4450,_4451); }void mosek::fusion::p_ExprConst::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _4449,    std::shared_ptr< monty::ndarray< long long,1 > > _4450,    std::shared_ptr< monty::ndarray< double,1 > > _4451){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__4449(_4449 ? _4449->raw() : nullptr, _4449 ? _4449->size(0) : 0);
    _checked_ptr_1<long long> _ptr__4450(_4450 ? _4450->raw() : nullptr, _4450 ? _4450->size(0) : 0);
    _checked_ptr_1<double> _ptr__4451(_4451 ? _4451->raw() : nullptr, _4451 ? _4451->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_4449);
    mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->bfix = ::mosek::fusion::Utils::Tools::arraycopy(_4451);
    std::shared_ptr< monty::ndarray< long long,1 > > _10661;
    bool _10662 = (NULL != _4450.get());
    if (_10662)
    {
      _10661 = ::mosek::fusion::Utils::Tools::arraycopy(_4450);
    }
    else
    {
      _10661 = nullptr;
    }
    mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->sparsity = _10661;
    ::mosek::fusion::p_ExprConst::validate(_4449,_4451,_4450);
  }
}mosek::fusion::ExprConst::t mosek::fusion::p_ExprConst::_new_ExprConst  (std::shared_ptr< monty::ndarray< int,1 > > _4452,    std::shared_ptr< monty::ndarray< long long,1 > > _4453,    double _4454){ return new mosek::fusion::ExprConst(_4452,_4453,_4454); }mosek::fusion::ExprConst::ExprConst  (std::shared_ptr< monty::ndarray< int,1 > > _4452,    std::shared_ptr< monty::ndarray< long long,1 > > _4453,    double _4454) :    ExprConst(new mosek::fusion::p_ExprConst(this)){ mosek::fusion::p_ExprConst::_get_impl(this)->_initialize(_4452,_4453,_4454); }void mosek::fusion::p_ExprConst::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _4452,    std::shared_ptr< monty::ndarray< long long,1 > > _4453,    double _4454){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__4452(_4452 ? _4452->raw() : nullptr, _4452 ? _4452->size(0) : 0);
    _checked_ptr_1<long long> _ptr__4453(_4453 ? _4453->raw() : nullptr, _4453 ? _4453->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_4452);
    long long _10663;
    bool _10664 = (NULL == _4453.get());
    if (_10664)
    {
      _10663 = ::mosek::fusion::p_Set::size(_4452);
    }
    else
    {
      _10663 = (int)((_4453)->size(0));
    }
    long long _4455 = _10663;
    std::vector<double> _10665;
    for (long long _4456 = (int)0, _10666 = _4455; _4456 < _10666 ; ++_4456)
    {
      _10665.push_back(_4454);
    }
    auto _10667 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10665.size()),_10665.begin(),_10665.end()));
    mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->bfix = _10667;
    std::shared_ptr< monty::ndarray< long long,1 > > _10668;
    bool _10669 = (NULL != _4453.get());
    if (_10669)
    {
      _10668 = ::mosek::fusion::Utils::Tools::arraycopy(_4453);
    }
    else
    {
      _10668 = nullptr;
    }
    mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->sparsity = _10668;
    ::mosek::fusion::p_ExprConst::validate(_4452,mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->bfix,_4453);
  }
}void mosek::fusion::ExprConst :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4457,monty::rc_ptr< ::mosek::fusion::WorkStack > _4458,monty::rc_ptr< ::mosek::fusion::WorkStack > _4459) { mosek::fusion::p_ExprConst::_get_impl(this)->eval(_4457,_4458,_4459); }void mosek::fusion::p_ExprConst::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4457,monty::rc_ptr< ::mosek::fusion::WorkStack > _4458,monty::rc_ptr< ::mosek::fusion::WorkStack > _4459){
  std::shared_ptr< monty::ndarray< int,1 > > _4460 = _pubthis->getShape();
  _checked_ptr_1<int> _ptr__4460(_4460 ? _4460->raw() : nullptr,_4460 ? _4460->size(0) : 0);
  int _4461 = (int)((_4460)->size(0));
  int _4462 = (int)0;
  int _10670 = (int)0;
  int _10671 = (int)((bfix)->size(0));
  for (int _4463 = _10670; _4463 < _10671; ++_4463)
  {
    {
      if ((!((((*bfix)(_4463)) <= 0.0) && (((*bfix)(_4463)) >= 0.0))))
      {
        {
          ++ _4462;
        }
      }
      {}
    }
  }
  int _4464 = (int)((bfix)->size(0));
  bool _4465 = ((NULL != sparsity.get()) && ((int)((sparsity)->size(0)) < ::mosek::fusion::p_Set::size(_4460)));
  _4457->alloc_expr(_4461,_4464,_4462,_4465,(int)0);
  int _4466 = mosek::fusion::p_WorkStack::_get_impl(_4457)->shape_base;
  int _4467 = mosek::fusion::p_WorkStack::_get_impl(_4457)->ptr_base;
  int _4468 = mosek::fusion::p_WorkStack::_get_impl(_4457)->sp_base;
  int _4469 = mosek::fusion::p_WorkStack::_get_impl(_4457)->nidxs_base;
  int _4470 = mosek::fusion::p_WorkStack::_get_impl(_4457)->cof_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4471 = mosek::fusion::p_WorkStack::_get_impl(_4457)->i32;
  _checked_ptr_1<int> _ptr__4471(_4471 ? _4471->raw() : nullptr,_4471 ? _4471->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4472 = mosek::fusion::p_WorkStack::_get_impl(_4457)->i64;
  _checked_ptr_1<long long> _ptr__4472(_4472 ? _4472->raw() : nullptr,_4472 ? _4472->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4473 = mosek::fusion::p_WorkStack::_get_impl(_4457)->f64;
  _checked_ptr_1<double> _ptr__4473(_4473 ? _4473->raw() : nullptr,_4473 ? _4473->size(0) : 0);
  int _10672 = (int)0;
  int _10673 = _4461;
  for (int _4474 = _10672; _4474 < _10673; ++_4474)
  {
    {
      _ptr__4471[safe_add( _4466,_4474 )] = _ptr__4460[_4474];
    }
  }
  int _4475 = (int)0;
  _ptr__4471[_4467] = (int)0;
  if (_4465)
  {
    {
      int _10674 = (int)0;
      int _10675 = _4464;
      for (int _4476 = _10674; _4476 < _10675; ++_4476)
      {
        {
          _ptr__4472[safe_add( _4468,_4476 )] = ((*sparsity)(_4476));
        }
      }
    }
  }
  {}
  int _10676 = (int)0;
  int _10677 = _4464;
  for (int _4477 = _10676; _4477 < _10677; ++_4477)
  {
    {
      if ((!((((*bfix)(_4477)) <= 0.0) && (((*bfix)(_4477)) >= 0.0))))
      {
        {
          _ptr__4472[safe_add( _4469,_4475 )] = (int)0;
          _ptr__4473[safe_add( _4470,_4475 )] = ((*bfix)(_4477));
          ++ _4475;
        }
      }
      {}
      _ptr__4471[safe_add( safe_add( _4467,_4477 ),(int)1 )] = _4475;
    }
  }
}
void mosek::fusion::p_ExprConst::validate(std::shared_ptr< monty::ndarray< int,1 > > _4478,std::shared_ptr< monty::ndarray< double,1 > > _4479,std::shared_ptr< monty::ndarray< long long,1 > > _4480){
  _checked_ptr_1<int> _ptr__4478(_4478 ? _4478->raw() : nullptr, _4478 ? _4478->size(0) : 0);
  _checked_ptr_1<double> _ptr__4479(_4479 ? _4479->raw() : nullptr, _4479 ? _4479->size(0) : 0);
  _checked_ptr_1<long long> _ptr__4480(_4480 ? _4480->raw() : nullptr, _4480 ? _4480->size(0) : 0);
  long long _4481 = ::mosek::fusion::p_Set::size(_4478);
  if ((NULL != _4480.get()))
  {
    {
      if (((int)((_4480)->size(0)) != (int)((_4479)->size(0))))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Mismatching data lengths"));
        }
      }
      {}
      bool _4482 = false;
      int _10678 = (int)0;
      int _10679 = (int)((_4480)->size(0));
      for (int _4483 = _10678; _4483 < _10679; ++_4483)
      {
        {
          if (((_ptr__4480[_4483] < (int)0) || (_ptr__4480[_4483] >= _4481)))
          {
            {
              _4482 = true;
            }
          }
          {}
        }
      }
      if (_4482)
      {
        {
          throw ::mosek::fusion::IndexError(std::string ("Invalid sparsity index"));
        }
      }
      {}
    }
  }
  else
  {
    {
      if (((int)((_4479)->size(0)) != _4481))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Mismatching data length"));
        }
      }
      {}
    }
  }
}
std::string mosek::fusion::ExprConst :: toString() { return mosek::fusion::p_ExprConst::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprConst::toString(){
  return std::string ("ExprConst()");
}
void mosek::fusion::p_ExprConst::destroy(){sparsity.reset();bfix.reset();}void mosek::fusion::ExprConst::destroy() { mosek::fusion::p_ExprConst::_get_impl(this)->destroy(); }mosek::fusion::ExprPick::ExprPick(mosek::fusion::p_ExprPick *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprPick()" << this << std::endl; */ }mosek::fusion::ExprPick::~ExprPick() {  /* std::cout << "~ExprPick()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprPick::p_ExprPick  (::mosek::fusion::ExprPick * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprPick::t mosek::fusion::p_ExprPick::_new_ExprPick  (monty::rc_ptr< ::mosek::fusion::Expression > _4484,    std::shared_ptr< monty::ndarray< int,2 > > _4485){ return new mosek::fusion::ExprPick(_4484,_4485); }mosek::fusion::ExprPick::ExprPick  (monty::rc_ptr< ::mosek::fusion::Expression > _4484,    std::shared_ptr< monty::ndarray< int,2 > > _4485) :    ExprPick(new mosek::fusion::p_ExprPick(this)){ mosek::fusion::p_ExprPick::_get_impl(this)->_initialize(_4484,_4485); }void mosek::fusion::p_ExprPick::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4484,    std::shared_ptr< monty::ndarray< int,2 > > _4485){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_4485)->size(0)))}));
    std::shared_ptr< monty::ndarray< int,1 > > _4486 = _4484->getShape();
    _checked_ptr_1<int> _ptr__4486(_4486 ? _4486->raw() : nullptr,_4486 ? _4486->size(0) : 0);
    int _4487 = (int)((_4486)->size(0));
    mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->expr = _4484;
    mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_4485)->size(0)))));
    std::shared_ptr< monty::ndarray< long long,1 > > _4488 = mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs;
    _checked_ptr_1<long long> _ptr__4488(_4488 ? _4488->raw() : nullptr,_4488 ? _4488->size(0) : 0);
    if (((int)((_4485)->size(1)) != _4487))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and index dimensions"));
      }
    }
    {}
    bool _4489 = false;
    int _10680 = (int)0;
    int _10681 = (int)((_4485)->size(0));
    for (int _4490 = _10680; _4490 < _10681; ++_4490)
    {
      {
        int _10682 = (int)0;
        int _10683 = _4487;
        for (int _4491 = _10682; _4491 < _10683; ++_4491)
        {
          {
            if (((((*_4485)(_4490,_4491)) < (int)0) || (((*_4485)(_4490,_4491)) >= _ptr__4486[_4491])))
            {
              {
                _4489 = true;
              }
            }
            {}
          }
        }
      }
    }
    if (_4489)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Pick index out of bounds"));
      }
    }
    {}
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _4492 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4487)));
      _checked_ptr_1<long long> _ptr__4492(_4492 ? _4492->raw() : nullptr,_4492 ? _4492->size(0) : 0);
      _ptr__4492[(_4487 - (int)1)] = (int)1;
      int _10684 = (int)1;
      int _10685 = _4487;
      for (int _4493 = _10684; _4493 < _10685; ++_4493)
      {
        {
          _ptr__4492[((_4487 - _4493) - (int)1)] = safe_mul( _ptr__4492[(_4487 - _4493)],_ptr__4486[(_4487 - _4493)] );
        }
      }
      int _10686 = (int)0;
      int _10687 = (int)((_4485)->size(0));
      for (int _4494 = _10686; _4494 < _10687; ++_4494)
      {
        {
          long long _4495 = (long long)0;
          int _10688 = (int)0;
          int _10689 = _4487;
          for (int _4496 = _10688; _4496 < _10689; ++_4496)
          {
            {
              _4495 += safe_mul( _ptr__4492[_4496],((*_4485)(_4494,_4496)) );
            }
          }
          _ptr__4488[_4494] = _4495;
        }
      }
    }
  }
}mosek::fusion::ExprPick::t mosek::fusion::p_ExprPick::_new_ExprPick  (monty::rc_ptr< ::mosek::fusion::Expression > _4497,    std::shared_ptr< monty::ndarray< long long,1 > > _4498){ return new mosek::fusion::ExprPick(_4497,_4498); }mosek::fusion::ExprPick::ExprPick  (monty::rc_ptr< ::mosek::fusion::Expression > _4497,    std::shared_ptr< monty::ndarray< long long,1 > > _4498) :    ExprPick(new mosek::fusion::p_ExprPick(this)){ mosek::fusion::p_ExprPick::_get_impl(this)->_initialize(_4497,_4498); }void mosek::fusion::p_ExprPick::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4497,    std::shared_ptr< monty::ndarray< long long,1 > > _4498){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__4498(_4498 ? _4498->raw() : nullptr, _4498 ? _4498->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_4498)->size(0)))}));
    mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->expr = _4497;
    std::shared_ptr< monty::ndarray< int,1 > > _4499 = _4497->getShape();
    _checked_ptr_1<int> _ptr__4499(_4499 ? _4499->raw() : nullptr,_4499 ? _4499->size(0) : 0);
    long long _4500 = ::mosek::fusion::p_Set::size(_4499);
    bool _4501 = false;
    int _10690 = (int)0;
    int _10691 = (int)((_4498)->size(0));
    for (int _4502 = _10690; _4502 < _10691; ++_4502)
    {
      {
        if (((_ptr__4498[_4502] < (int)0) || (_ptr__4498[_4502] >= _4500)))
        {
          {
            _4501 = true;
          }
        }
        {}
      }
    }
    if (_4501)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Pick index out of bounds"));
      }
    }
    {}
    mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs = ::mosek::fusion::Utils::Tools::arraycopy(_4498);
  }
}void mosek::fusion::ExprPick :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4503,monty::rc_ptr< ::mosek::fusion::WorkStack > _4504,monty::rc_ptr< ::mosek::fusion::WorkStack > _4505) { mosek::fusion::p_ExprPick::_get_impl(this)->eval(_4503,_4504,_4505); }void mosek::fusion::p_ExprPick::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4503,monty::rc_ptr< ::mosek::fusion::WorkStack > _4504,monty::rc_ptr< ::mosek::fusion::WorkStack > _4505){
  expr->eval(_4504,_4503,_4505);
  _4504->pop_expr();
  int _4506 = mosek::fusion::p_WorkStack::_get_impl(_4504)->nd;
  int _4507 = mosek::fusion::p_WorkStack::_get_impl(_4504)->shape_base;
  int _4508 = mosek::fusion::p_WorkStack::_get_impl(_4504)->nelem;
  int _4509 = mosek::fusion::p_WorkStack::_get_impl(_4504)->nnz;
  int _4510 = mosek::fusion::p_WorkStack::_get_impl(_4504)->ncodeatom;
  bool _4511 = mosek::fusion::p_WorkStack::_get_impl(_4504)->hassp;
  int _4512 = mosek::fusion::p_WorkStack::_get_impl(_4504)->ptr_base;
  int _4513 = mosek::fusion::p_WorkStack::_get_impl(_4504)->sp_base;
  int _4514 = mosek::fusion::p_WorkStack::_get_impl(_4504)->nidxs_base;
  int _4515 = mosek::fusion::p_WorkStack::_get_impl(_4504)->cof_base;
  int _4516 = mosek::fusion::p_WorkStack::_get_impl(_4504)->code_base;
  int _4517 = mosek::fusion::p_WorkStack::_get_impl(_4504)->codeptr_base;
  int _4518 = mosek::fusion::p_WorkStack::_get_impl(_4504)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4519 = mosek::fusion::p_WorkStack::_get_impl(_4504)->i32;
  _checked_ptr_1<int> _ptr__4519(_4519 ? _4519->raw() : nullptr,_4519 ? _4519->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4520 = mosek::fusion::p_WorkStack::_get_impl(_4504)->i64;
  _checked_ptr_1<long long> _ptr__4520(_4520 ? _4520->raw() : nullptr,_4520 ? _4520->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4521 = mosek::fusion::p_WorkStack::_get_impl(_4504)->f64;
  _checked_ptr_1<double> _ptr__4521(_4521 ? _4521->raw() : nullptr,_4521 ? _4521->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4522 = mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs;
  _checked_ptr_1<long long> _ptr__4522(_4522 ? _4522->raw() : nullptr,_4522 ? _4522->size(0) : 0);
  if ((!_4511))
  {
    {
      int _4523 = (int)((_4522)->size(0));
      int _4524 = (int)1;
      int _4525 = (int)0;
      int _4526 = (int)0;
      int _10692 = (int)0;
      int _10693 = (int)((_4522)->size(0));
      for (int _4527 = _10692; _4527 < _10693; ++_4527)
      {
        {
          _4525 += (_ptr__4519[safe_add( safe_add( _4512,_ptr__4522[_4527] ),(int)1 )] - _ptr__4519[safe_add( _4512,_ptr__4522[_4527] )]);
          if ((_4510 > (int)0))
          {
            {
              _4526 += (_ptr__4519[safe_add( _4517,_ptr__4519[safe_add( safe_add( _4512,_ptr__4522[_4527] ),(int)1 )] )] - _ptr__4519[safe_add( _4517,_ptr__4519[safe_add( _4512,_ptr__4522[_4527] )] )]);
            }
          }
          {}
        }
      }
      _4503->alloc_expr(_4524,_4523,_4525,false,_4526);
      int _4528 = mosek::fusion::p_WorkStack::_get_impl(_4503)->cof_base;
      int _4529 = mosek::fusion::p_WorkStack::_get_impl(_4503)->nidxs_base;
      int _4530 = mosek::fusion::p_WorkStack::_get_impl(_4503)->ptr_base;
      int _4531 = mosek::fusion::p_WorkStack::_get_impl(_4503)->shape_base;
      int _4532 = mosek::fusion::p_WorkStack::_get_impl(_4503)->code_base;
      int _4533 = mosek::fusion::p_WorkStack::_get_impl(_4503)->codeptr_base;
      int _4534 = mosek::fusion::p_WorkStack::_get_impl(_4503)->cconst_base;
      {
      }
      std::shared_ptr< monty::ndarray< int,1 > > _4535 = mosek::fusion::p_WorkStack::_get_impl(_4503)->i32;
      _checked_ptr_1<int> _ptr__4535(_4535 ? _4535->raw() : nullptr,_4535 ? _4535->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4536 = mosek::fusion::p_WorkStack::_get_impl(_4503)->i64;
      _checked_ptr_1<long long> _ptr__4536(_4536 ? _4536->raw() : nullptr,_4536 ? _4536->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4537 = mosek::fusion::p_WorkStack::_get_impl(_4503)->f64;
      _checked_ptr_1<double> _ptr__4537(_4537 ? _4537->raw() : nullptr,_4537 ? _4537->size(0) : 0);
      _ptr__4535[_4531] = (int)((_4522)->size(0));
      int _4538 = (int)0;
      int _4539 = (int)0;
      _ptr__4535[_4530] = (int)0;
      int _10694 = (int)0;
      int _10695 = (int)((_4522)->size(0));
      for (int _4540 = _10694; _4540 < _10695; ++_4540)
      {
        {
          int _10696 = _ptr__4519[safe_add( _4512,_ptr__4522[_4540] )];
          int _10697 = _ptr__4519[safe_add( safe_add( _4512,_ptr__4522[_4540] ),(int)1 )];
          for (int _4541 = _10696; _4541 < _10697; ++_4541)
          {
            {
              _ptr__4536[safe_add( _4529,_4539 )] = _ptr__4520[safe_add( _4514,_4541 )];
              _ptr__4537[safe_add( _4528,_4539 )] = _ptr__4521[safe_add( _4515,_4541 )];
              if ((_4510 > (int)0))
              {
                {
                  int _10698 = _ptr__4519[safe_add( _4517,_4541 )];
                  int _10699 = _ptr__4519[safe_add( safe_add( _4517,_4541 ),(int)1 )];
                  for (int _4542 = _10698; _4542 < _10699; ++_4542)
                  {
                    {
                      _ptr__4535[safe_add( _4532,_4538 )] = _ptr__4519[safe_add( _4516,_4542 )];
                      _ptr__4537[safe_add( _4534,_4538 )] = _ptr__4521[safe_add( _4518,_4542 )];
                      ++ _4538;
                    }
                  }
                  _ptr__4535[safe_add( safe_add( _4533,_4539 ),(int)1 )] = _4538;
                }
              }
              {}
              ++ _4539;
            }
          }
          _ptr__4535[safe_add( safe_add( _4530,_4540 ),(int)1 )] = _4539;
        }
      }
    }
  }
  else
  {
    {
      int _4543 = (int)1;
      int _4544 = (int)((_4522)->size(0));
      int _4545 = (int)0;
      int _4546 = (int)0;
      std::shared_ptr< monty::ndarray< long long,1 > > _4547 = mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs;
      _checked_ptr_1<long long> _ptr__4547(_4547 ? _4547->raw() : nullptr,_4547 ? _4547->size(0) : 0);
      int _4548 = _4505->alloci32((int)((_4547)->size(0)));
      std::shared_ptr< monty::ndarray< int,1 > > _4549 = mosek::fusion::p_WorkStack::_get_impl(_4505)->i32;
      _checked_ptr_1<int> _ptr__4549(_4549 ? _4549->raw() : nullptr,_4549 ? _4549->size(0) : 0);
      int _10700 = (int)0;
      int _10701 = (int)((_4547)->size(0));
      for (int _4550 = _10700; _4550 < _10701; ++_4550)
      {
        {
          int _4551 = _4508;
          int _4552 = (int)0;
          while ( (_4552 < (_4551 - (int)1)) )
          {
            {
              int _4553 = (safe_add( safe_add( _4551,_4552 ),(int)1 ) / (int)2);
              if ((_ptr__4520[safe_add( _4513,_4553 )] >= _ptr__4547[_4550]))
              {
                {
                  _4551 = _4553;
                }
              }
              else
              {
                {
                  _4552 = _4553;
                }
              }
            }
          }
          ++ _4552;
          if (((_4552 < _4508) && (_ptr__4520[safe_add( _4513,_4552 )] == _ptr__4547[_4550])))
          {
            {
              _ptr__4549[safe_add( _4548,_4550 )] = _4552;
              _4545 += (_ptr__4519[safe_add( safe_add( _4512,_4552 ),(int)1 )] - _ptr__4519[safe_add( _4512,_4552 )]);
              if ((_4510 > (int)0))
              {
                {
                  _4546 += (_ptr__4519[safe_add( _4517,_ptr__4519[safe_add( safe_add( _4512,_ptr__4547[_4550] ),(int)1 )] )] - _ptr__4519[safe_add( _4517,_ptr__4519[safe_add( _4512,_ptr__4547[_4550] )] )]);
                }
              }
              {}
            }
          }
          else
          {
            {
              _ptr__4549[safe_add( _4548,_4550 )] = (-(int)1);
            }
          }
        }
      }
      _4503->alloc_expr(_4543,_4544,_4545,false,_4546);
      int _4554 = mosek::fusion::p_WorkStack::_get_impl(_4503)->ptr_base;
      int _4555 = mosek::fusion::p_WorkStack::_get_impl(_4503)->nidxs_base;
      int _4556 = mosek::fusion::p_WorkStack::_get_impl(_4503)->cof_base;
      int _4557 = mosek::fusion::p_WorkStack::_get_impl(_4503)->shape_base;
      int _4558 = mosek::fusion::p_WorkStack::_get_impl(_4503)->code_base;
      int _4559 = mosek::fusion::p_WorkStack::_get_impl(_4503)->codeptr_base;
      int _4560 = mosek::fusion::p_WorkStack::_get_impl(_4503)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4561 = mosek::fusion::p_WorkStack::_get_impl(_4503)->i32;
      _checked_ptr_1<int> _ptr__4561(_4561 ? _4561->raw() : nullptr,_4561 ? _4561->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4562 = mosek::fusion::p_WorkStack::_get_impl(_4503)->i64;
      _checked_ptr_1<long long> _ptr__4562(_4562 ? _4562->raw() : nullptr,_4562 ? _4562->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4563 = mosek::fusion::p_WorkStack::_get_impl(_4503)->f64;
      _checked_ptr_1<double> _ptr__4563(_4563 ? _4563->raw() : nullptr,_4563 ? _4563->size(0) : 0);
      _ptr__4561[_4557] = (int)((_4547)->size(0));
      _ptr__4561[_4554] = (int)0;
      int _4564 = (int)0;
      int _4565 = (int)0;
      int _10702 = (int)0;
      int _10703 = (int)((_4547)->size(0));
      for (int _4566 = _10702; _4566 < _10703; ++_4566)
      {
        {
          if ((_ptr__4549[safe_add( _4548,_4566 )] >= (int)0))
          {
            {
              int _4567 = _ptr__4549[safe_add( _4548,_4566 )];
              int _10704 = _ptr__4519[safe_add( _4512,_4567 )];
              int _10705 = _ptr__4519[safe_add( safe_add( _4512,_4567 ),(int)1 )];
              for (int _4568 = _10704; _4568 < _10705; ++_4568)
              {
                {
                  _ptr__4562[safe_add( _4555,_4565 )] = _ptr__4520[safe_add( _4514,_4568 )];
                  _ptr__4563[safe_add( _4556,_4565 )] = _ptr__4521[safe_add( _4515,_4568 )];
                  if ((_4510 > (int)0))
                  {
                    {
                      int _10706 = _ptr__4519[safe_add( _4517,_4568 )];
                      int _10707 = _ptr__4519[safe_add( safe_add( _4517,_4568 ),(int)1 )];
                      for (int _4569 = _10706; _4569 < _10707; ++_4569)
                      {
                        {
                          _ptr__4561[safe_add( _4558,_4564 )] = _ptr__4519[safe_add( _4516,_4569 )];
                          _ptr__4563[safe_add( _4560,_4564 )] = _ptr__4521[safe_add( _4518,_4569 )];
                          ++ _4564;
                        }
                      }
                      _ptr__4561[safe_add( safe_add( _4559,_4565 ),(int)1 )] = _4564;
                    }
                  }
                  {}
                  ++ _4565;
                }
              }
            }
          }
          {}
          _ptr__4561[safe_add( safe_add( _4554,_4566 ),(int)1 )] = _4565;
        }
      }
    }
  }
}
std::string mosek::fusion::ExprPick :: toString() { return mosek::fusion::p_ExprPick::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprPick::toString(){
  return std::string ("ExprPick()");
}
void mosek::fusion::p_ExprPick::destroy(){idxs.reset();expr.reset();}void mosek::fusion::ExprPick::destroy() { mosek::fusion::p_ExprPick::_get_impl(this)->destroy(); }mosek::fusion::ExprSlice::ExprSlice(mosek::fusion::p_ExprSlice *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprSlice()" << this << std::endl; */ }mosek::fusion::ExprSlice::~ExprSlice() {  /* std::cout << "~ExprSlice()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprSlice::p_ExprSlice  (::mosek::fusion::ExprSlice * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprSlice::t mosek::fusion::p_ExprSlice::_new_ExprSlice  (monty::rc_ptr< ::mosek::fusion::Expression > _4570,    std::shared_ptr< monty::ndarray< int,1 > > _4571,    std::shared_ptr< monty::ndarray< int,1 > > _4572){ return new mosek::fusion::ExprSlice(_4570,_4571,_4572); }mosek::fusion::ExprSlice::ExprSlice  (monty::rc_ptr< ::mosek::fusion::Expression > _4570,    std::shared_ptr< monty::ndarray< int,1 > > _4571,    std::shared_ptr< monty::ndarray< int,1 > > _4572) :    ExprSlice(new mosek::fusion::p_ExprSlice(this)){ mosek::fusion::p_ExprSlice::_get_impl(this)->_initialize(_4570,_4571,_4572); }void mosek::fusion::p_ExprSlice::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4570,    std::shared_ptr< monty::ndarray< int,1 > > _4571,    std::shared_ptr< monty::ndarray< int,1 > > _4572){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__4571(_4571 ? _4571->raw() : nullptr, _4571 ? _4571->size(0) : 0);
    _checked_ptr_1<int> _ptr__4572(_4572 ? _4572->raw() : nullptr, _4572 ? _4572->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprSlice::makeShape(_4570->getShape(),_4571,_4572));
    mosek::fusion::p_ExprSlice::_get_impl(::mosek::fusion::ExprSlice::t(_pubthis))->expr = _4570;
    mosek::fusion::p_ExprSlice::_get_impl(::mosek::fusion::ExprSlice::t(_pubthis))->first = _4571;
    mosek::fusion::p_ExprSlice::_get_impl(::mosek::fusion::ExprSlice::t(_pubthis))->last = _4572;
  }
}void mosek::fusion::ExprSlice :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4573,monty::rc_ptr< ::mosek::fusion::WorkStack > _4574,monty::rc_ptr< ::mosek::fusion::WorkStack > _4575) { mosek::fusion::p_ExprSlice::_get_impl(this)->eval(_4573,_4574,_4575); }void mosek::fusion::p_ExprSlice::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4573,monty::rc_ptr< ::mosek::fusion::WorkStack > _4574,monty::rc_ptr< ::mosek::fusion::WorkStack > _4575){
  expr->eval(_4574,_4573,_4575);
  _4574->pop_expr();
  int _4576 = mosek::fusion::p_WorkStack::_get_impl(_4574)->nd;
  int _4577 = mosek::fusion::p_WorkStack::_get_impl(_4574)->nelem;
  int _4578 = mosek::fusion::p_WorkStack::_get_impl(_4574)->nnz;
  int _4579 = mosek::fusion::p_WorkStack::_get_impl(_4574)->ncodeatom;
  bool _4580 = mosek::fusion::p_WorkStack::_get_impl(_4574)->hassp;
  int _4581 = mosek::fusion::p_WorkStack::_get_impl(_4574)->shape_base;
  int _4582 = mosek::fusion::p_WorkStack::_get_impl(_4574)->ptr_base;
  int _4583 = mosek::fusion::p_WorkStack::_get_impl(_4574)->sp_base;
  int _4584 = mosek::fusion::p_WorkStack::_get_impl(_4574)->nidxs_base;
  int _4585 = mosek::fusion::p_WorkStack::_get_impl(_4574)->cof_base;
  int _4586 = mosek::fusion::p_WorkStack::_get_impl(_4574)->code_base;
  int _4587 = mosek::fusion::p_WorkStack::_get_impl(_4574)->codeptr_base;
  int _4588 = mosek::fusion::p_WorkStack::_get_impl(_4574)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4589 = mosek::fusion::p_WorkStack::_get_impl(_4574)->i32;
  _checked_ptr_1<int> _ptr__4589(_4589 ? _4589->raw() : nullptr,_4589 ? _4589->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4590 = mosek::fusion::p_WorkStack::_get_impl(_4574)->i64;
  _checked_ptr_1<long long> _ptr__4590(_4590 ? _4590->raw() : nullptr,_4590 ? _4590->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4591 = mosek::fusion::p_WorkStack::_get_impl(_4574)->f64;
  _checked_ptr_1<double> _ptr__4591(_4591 ? _4591->raw() : nullptr,_4591 ? _4591->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4592 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4576)));
  _checked_ptr_1<long long> _ptr__4592(_4592 ? _4592->raw() : nullptr,_4592 ? _4592->size(0) : 0);
  _ptr__4592[(_4576 - (int)1)] = (int)1;
  int _10708 = (int)1;
  int _10709 = _4576;
  for (int _4593 = _10708; _4593 < _10709; ++_4593)
  {
    {
      _ptr__4592[((_4576 - _4593) - (int)1)] = safe_mul( _ptr__4592[(_4576 - _4593)],_ptr__4589[(safe_add( _4581,_4576 ) - _4593)] );
    }
  }
  int _4594 = (int)0;
  int _4595 = (int)0;
  int _4596 = (int)0;
  if (_4580)
  {
    {
      int _10710 = (int)0;
      int _10711 = _4577;
      for (int _4597 = _10710; _4597 < _10711; ++_4597)
      {
        {
          bool _4598 = true;
          int _10712 = (int)0;
          int _10713 = _4576;
          for (int _4599 = _10712; _4599 < _10713; ++_4599)
          {
            {
              long long _4600 = ((_ptr__4590[safe_add( _4583,_4597 )] / _ptr__4592[_4599]) % _ptr__4589[safe_add( _4581,_4599 )]);
              _4598 = (_4598 && ((_4600 >= ((*first)(_4599))) && (_4600 < ((*last)(_4599)))));
            }
          }
          if (_4598)
          {
            {
              _4596 += (_ptr__4589[safe_add( safe_add( _4582,_4597 ),(int)1 )] - _ptr__4589[safe_add( _4582,_4597 )]);
              if ((_4579 > (int)0))
              {
                {
                  _4594 += (_ptr__4589[safe_add( _4587,_ptr__4589[safe_add( safe_add( _4582,_4597 ),(int)1 )] )] - _ptr__4589[safe_add( _4587,_ptr__4589[safe_add( _4582,_4597 )] )]);
                }
              }
              {}
              ++ _4595;
            }
          }
          {}
        }
      }
    }
  }
  else
  {
    {
      _4595 = (int)1;
      int _10714 = (int)0;
      int _10715 = _4576;
      for (int _4601 = _10714; _4601 < _10715; ++_4601)
      {
        {
          _4595 *= (((*last)(_4601)) - ((*first)(_4601)));
        }
      }
      int _10716 = (int)0;
      int _10717 = _4577;
      for (int _4602 = _10716; _4602 < _10717; ++_4602)
      {
        {
          bool _4603 = true;
          int _10718 = (int)0;
          int _10719 = _4576;
          for (int _4604 = _10718; _4604 < _10719; ++_4604)
          {
            {
              long long _4605 = ((_4602 / _ptr__4592[_4604]) % _ptr__4589[safe_add( _4581,_4604 )]);
              _4603 = (_4603 && ((_4605 >= ((*first)(_4604))) && (_4605 < ((*last)(_4604)))));
            }
          }
          if (_4603)
          {
            {
              _4596 += (_ptr__4589[safe_add( safe_add( _4582,_4602 ),(int)1 )] - _ptr__4589[safe_add( _4582,_4602 )]);
              if ((_4579 > (int)0))
              {
                {
                  _4594 += (_ptr__4589[safe_add( _4587,_ptr__4589[safe_add( safe_add( _4582,_4602 ),(int)1 )] )] - _ptr__4589[safe_add( _4587,_ptr__4589[safe_add( _4582,_4602 )] )]);
                }
              }
              {}
            }
          }
          {}
        }
      }
    }
  }
  std::vector<int> _10720;
  for (int _4607 = (int)0, _10721 = _4576; _4607 < _10721 ; ++_4607)
  {
    _10720.push_back((((*last)(_4607)) - ((*first)(_4607))));
  }
  auto _10722 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10720.size()),_10720.begin(),_10720.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _4606 = _10722;
  _checked_ptr_1<int> _ptr__4606(_4606 ? _4606->raw() : nullptr,_4606 ? _4606->size(0) : 0);
  bool _4608 = (_4595 < ::mosek::fusion::p_Set::size(_4606));
  _4573->alloc_expr(_4576,_4595,_4596,_4608,_4594);
  int _4609 = mosek::fusion::p_WorkStack::_get_impl(_4573)->shape_base;
  int _4610 = mosek::fusion::p_WorkStack::_get_impl(_4573)->cof_base;
  int _4611 = mosek::fusion::p_WorkStack::_get_impl(_4573)->nidxs_base;
  int _10723;
  bool _10724 = _4608;
  if (_10724)
  {
    _10723 = mosek::fusion::p_WorkStack::_get_impl(_4573)->sp_base;
  }
  else
  {
    _10723 = _4573->alloci64(_4595);
  }
  int _4612 = _10723;
  int _4613 = mosek::fusion::p_WorkStack::_get_impl(_4573)->ptr_base;
  int _4614 = mosek::fusion::p_WorkStack::_get_impl(_4573)->code_base;
  int _4615 = mosek::fusion::p_WorkStack::_get_impl(_4573)->codeptr_base;
  int _4616 = mosek::fusion::p_WorkStack::_get_impl(_4573)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4617 = mosek::fusion::p_WorkStack::_get_impl(_4573)->i32;
  _checked_ptr_1<int> _ptr__4617(_4617 ? _4617->raw() : nullptr,_4617 ? _4617->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4618 = mosek::fusion::p_WorkStack::_get_impl(_4573)->i64;
  _checked_ptr_1<long long> _ptr__4618(_4618 ? _4618->raw() : nullptr,_4618 ? _4618->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4619 = mosek::fusion::p_WorkStack::_get_impl(_4573)->f64;
  _checked_ptr_1<double> _ptr__4619(_4619 ? _4619->raw() : nullptr,_4619 ? _4619->size(0) : 0);
  int _10725 = (int)0;
  int _10726 = _4576;
  for (int _4620 = _10725; _4620 < _10726; ++_4620)
  {
    {
      _ptr__4617[safe_add( _4609,_4620 )] = _ptr__4606[_4620];
    }
  }
  _ptr__4617[_4613] = (int)0;
  if ((_4579 > (int)0))
  {
    {
      _ptr__4617[_4615] = (int)0;
    }
  }
  {}
  std::shared_ptr< monty::ndarray< long long,1 > > _4621 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4576)));
  _checked_ptr_1<long long> _ptr__4621(_4621 ? _4621->raw() : nullptr,_4621 ? _4621->size(0) : 0);
  _ptr__4621[(_4576 - (int)1)] = (int)1;
  int _10727 = (int)1;
  int _10728 = _4576;
  for (int _4622 = _10727; _4622 < _10728; ++_4622)
  {
    {
      _ptr__4621[((_4576 - _4622) - (int)1)] = safe_mul( _ptr__4621[(_4576 - _4622)],_ptr__4606[(_4576 - _4622)] );
    }
  }
  int _4623 = (int)0;
  int _4624 = (int)0;
  int _4625 = (int)0;
  if (_4580)
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _4626 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4576)));
      _checked_ptr_1<int> _ptr__4626(_4626 ? _4626->raw() : nullptr,_4626 ? _4626->size(0) : 0);
      int _10729 = (int)0;
      int _10730 = _4577;
      for (int _4627 = _10729; _4627 < _10730; ++_4627)
      {
        {
          bool _4628 = true;
          int _10731 = (int)0;
          int _10732 = _4576;
          for (int _4629 = _10731; _4629 < _10732; ++_4629)
          {
            {
              _ptr__4626[_4629] = (int)((_ptr__4590[safe_add( _4583,_4627 )] / _ptr__4592[_4629]) % _ptr__4589[safe_add( _4581,_4629 )]);
              _4628 = (_4628 && ((_ptr__4626[_4629] >= ((*first)(_4629))) && (_ptr__4626[_4629] < ((*last)(_4629)))));
            }
          }
          if (_4628)
          {
            {
              int _10733 = _ptr__4589[safe_add( _4582,_4627 )];
              int _10734 = _ptr__4589[safe_add( safe_add( _4582,_4627 ),(int)1 )];
              for (int _4630 = _10733; _4630 < _10734; ++_4630)
              {
                {
                  _ptr__4618[safe_add( _4611,_4625 )] = _ptr__4590[safe_add( _4584,_4630 )];
                  _ptr__4619[safe_add( _4610,_4625 )] = _ptr__4591[safe_add( _4585,_4630 )];
                  if ((_4579 > (int)0))
                  {
                    {
                      int _10735 = _ptr__4589[safe_add( _4587,_4630 )];
                      int _10736 = _ptr__4589[safe_add( safe_add( _4587,_4630 ),(int)1 )];
                      for (int _4631 = _10735; _4631 < _10736; ++_4631)
                      {
                        {
                          _ptr__4617[safe_add( _4614,_4623 )] = _ptr__4589[safe_add( _4586,_4631 )];
                          _ptr__4619[safe_add( _4616,_4623 )] = _ptr__4591[safe_add( _4588,_4631 )];
                          ++ _4623;
                        }
                      }
                      _ptr__4617[safe_add( safe_add( _4615,_4625 ),(int)1 )] = _4623;
                    }
                  }
                  {}
                  ++ _4625;
                }
              }
              long long _4632 = (long long)0;
              int _10737 = (int)0;
              int _10738 = _4576;
              for (int _4633 = _10737; _4633 < _10738; ++_4633)
              {
                {
                  _4632 += safe_mul( _ptr__4621[_4633],(_ptr__4626[_4633] - ((*first)(_4633))) );
                }
              }
              _ptr__4618[safe_add( _4612,_4624 )] = _4632;
              _ptr__4617[safe_add( safe_add( _4613,_4624 ),(int)1 )] = _4625;
              ++ _4624;
            }
          }
          {}
        }
      }
    }
  }
  else
  {
    {
      int _10739 = (int)0;
      int _10740 = _4577;
      for (int _4634 = _10739; _4634 < _10740; ++_4634)
      {
        {
          bool _4635 = true;
          int _10741 = (int)0;
          int _10742 = _4576;
          for (int _4636 = _10741; _4636 < _10742; ++_4636)
          {
            {
              long long _4637 = ((_4634 / _ptr__4592[_4636]) % _ptr__4589[safe_add( _4581,_4636 )]);
              _4635 = (_4635 && ((_4637 >= ((*first)(_4636))) && (_4637 < ((*last)(_4636)))));
            }
          }
          if (_4635)
          {
            {
              int _10743 = _ptr__4589[safe_add( _4582,_4634 )];
              int _10744 = _ptr__4589[safe_add( safe_add( _4582,_4634 ),(int)1 )];
              for (int _4638 = _10743; _4638 < _10744; ++_4638)
              {
                {
                  _ptr__4618[safe_add( _4611,_4625 )] = _ptr__4590[safe_add( _4584,_4638 )];
                  _ptr__4619[safe_add( _4610,_4625 )] = _ptr__4591[safe_add( _4585,_4638 )];
                  if ((_4579 > (int)0))
                  {
                    {
                      int _10745 = _ptr__4589[safe_add( _4587,_4638 )];
                      int _10746 = _ptr__4589[safe_add( safe_add( _4587,_4638 ),(int)1 )];
                      for (int _4639 = _10745; _4639 < _10746; ++_4639)
                      {
                        {
                          _ptr__4617[safe_add( _4614,_4623 )] = _ptr__4589[safe_add( _4586,_4639 )];
                          _ptr__4619[safe_add( _4616,_4623 )] = _ptr__4591[safe_add( _4588,_4639 )];
                          ++ _4623;
                        }
                      }
                      _ptr__4617[safe_add( safe_add( _4615,_4625 ),(int)1 )] = _4623;
                    }
                  }
                  {}
                  ++ _4625;
                }
              }
              _ptr__4617[safe_add( safe_add( _4613,_4624 ),(int)1 )] = _4625;
              ++ _4624;
            }
          }
          {}
        }
      }
    }
  }
  if ((!_4608))
  {
    {
      _4573->popi64(_4595);
    }
  }
  {}
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprSlice::makeShape(std::shared_ptr< monty::ndarray< int,1 > > _4640,std::shared_ptr< monty::ndarray< int,1 > > _4641,std::shared_ptr< monty::ndarray< int,1 > > _4642){
  _checked_ptr_1<int> _ptr__4640(_4640 ? _4640->raw() : nullptr, _4640 ? _4640->size(0) : 0);
  _checked_ptr_1<int> _ptr__4641(_4641 ? _4641->raw() : nullptr, _4641 ? _4641->size(0) : 0);
  _checked_ptr_1<int> _ptr__4642(_4642 ? _4642->raw() : nullptr, _4642 ? _4642->size(0) : 0);
  if ((((int)((_4640)->size(0)) != (int)((_4641)->size(0))) || ((int)((_4640)->size(0)) != (int)((_4642)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid or mismatching index lengths"));
    }
  }
  {}
  int _10747 = (int)0;
  int _10748 = (int)((_4640)->size(0));
  for (int _4643 = _10747; _4643 < _10748; ++_4643)
  {
    {
      if (((_ptr__4641[_4643] < (int)0) || ((_ptr__4642[_4643] < _ptr__4641[_4643]) || (_ptr__4642[_4643] > _ptr__4640[_4643]))))
      {
        {
          throw ::mosek::fusion::IndexError(std::string ("Slice is out of bounds"));
        }
      }
      {}
    }
  }
  std::vector<int> _10749;
  for (int _4644 = (int)0, _10750 = (int)((_4640)->size(0)); _4644 < _10750 ; ++_4644)
  {
    _10749.push_back((_ptr__4642[_4644] - _ptr__4641[_4644]));
  }
  auto _10751 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10749.size()),_10749.begin(),_10749.end()));
  return _10751;
}
std::string mosek::fusion::ExprSlice :: toString() { return mosek::fusion::p_ExprSlice::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprSlice::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4645 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprSlice(["))->__mosek_2fusion_2Utils_2StringBuffer__a(((*first)((int)0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (":"))->__mosek_2fusion_2Utils_2StringBuffer__a(((*last)((int)0)));
  int _10752 = (int)1;
  int _10753 = (int)((first)->size(0));
  for (int _4646 = _10752; _4646 < _10753; ++_4646)
  {
    {
      _4645->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*first)(_4646)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (":"))->__mosek_2fusion_2Utils_2StringBuffer__a(((*last)(_4646)));
    }
  }
  _4645->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("],"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _4645->toString();
}
void mosek::fusion::p_ExprSlice::destroy(){last.reset();first.reset();expr.reset();}void mosek::fusion::ExprSlice::destroy() { mosek::fusion::p_ExprSlice::_get_impl(this)->destroy(); }mosek::fusion::ExprPermuteDims::ExprPermuteDims(mosek::fusion::p_ExprPermuteDims *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprPermuteDims()" << this << std::endl; */ }mosek::fusion::ExprPermuteDims::~ExprPermuteDims() {  /* std::cout << "~ExprPermuteDims()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprPermuteDims::p_ExprPermuteDims  (::mosek::fusion::ExprPermuteDims * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprPermuteDims::t mosek::fusion::p_ExprPermuteDims::_new_ExprPermuteDims  (std::shared_ptr< monty::ndarray< int,1 > > _4647,    monty::rc_ptr< ::mosek::fusion::Expression > _4648){ return new mosek::fusion::ExprPermuteDims(_4647,_4648); }mosek::fusion::ExprPermuteDims::ExprPermuteDims  (std::shared_ptr< monty::ndarray< int,1 > > _4647,    monty::rc_ptr< ::mosek::fusion::Expression > _4648) :    ExprPermuteDims(new mosek::fusion::p_ExprPermuteDims(this)){ mosek::fusion::p_ExprPermuteDims::_get_impl(this)->_initialize(_4647,_4648); }void mosek::fusion::p_ExprPermuteDims::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _4647,    monty::rc_ptr< ::mosek::fusion::Expression > _4648){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__4647(_4647 ? _4647->raw() : nullptr, _4647 ? _4647->size(0) : 0);
    mosek::fusion::p_ExprPermuteDims::_initialize(_4647,_4648,(int)1);
    std::shared_ptr< monty::ndarray< int,1 > > _4649 = _4648->getShape();
    _checked_ptr_1<int> _ptr__4649(_4649 ? _4649->raw() : nullptr,_4649 ? _4649->size(0) : 0);
    if (((int)((_4647)->size(0)) != (int)((_4649)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Invalid dimension permutation"));
      }
    }
    {}
    std::vector<int> _10754;
    for (int _4651 = (int)0, _10755 = (int)((_4647)->size(0)); _4651 < _10755 ; ++_4651)
    {
      _10754.push_back((int)0);
    }
    auto _10756 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10754.size()),_10754.begin(),_10754.end()));
    std::shared_ptr< monty::ndarray< int,1 > > _4650 = _10756;
    _checked_ptr_1<int> _ptr__4650(_4650 ? _4650->raw() : nullptr,_4650 ? _4650->size(0) : 0);
    int _10757 = (int)0;
    int _10758 = (int)((_4650)->size(0));
    for (int _4652 = _10757; _4652 < _10758; ++_4652)
    {
      {
        if (((_ptr__4647[_4652] < (int)0) || (_ptr__4647[_4652] > (int)((_4649)->size(0)))))
        {
          {
            throw ::mosek::fusion::LengthError(std::string ("Invalid dimension permutation"));
          }
        }
        {}
        ++ _ptr__4650[_ptr__4647[_4652]];
      }
    }
    int _10759 = (int)0;
    int _10760 = (int)((_4650)->size(0));
    for (int _4653 = _10759; _4653 < _10760; ++_4653)
    {
      {
        if (((_ptr__4650[_4653] < (int)1) || (_ptr__4650[_4653] > (int)1)))
        {
          {
            throw ::mosek::fusion::LengthError(std::string ("Invalid dimension permutation"));
          }
        }
        {}
      }
    }
  }
}mosek::fusion::ExprPermuteDims::t mosek::fusion::p_ExprPermuteDims::_new_ExprPermuteDims  (std::shared_ptr< monty::ndarray< int,1 > > _4654,    monty::rc_ptr< ::mosek::fusion::Expression > _4655,    int _4656){ return new mosek::fusion::ExprPermuteDims(_4654,_4655,_4656); }mosek::fusion::ExprPermuteDims::ExprPermuteDims  (std::shared_ptr< monty::ndarray< int,1 > > _4654,    monty::rc_ptr< ::mosek::fusion::Expression > _4655,    int _4656) :    ExprPermuteDims(new mosek::fusion::p_ExprPermuteDims(this)){ mosek::fusion::p_ExprPermuteDims::_get_impl(this)->_initialize(_4654,_4655,_4656); }void mosek::fusion::p_ExprPermuteDims::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _4654,    monty::rc_ptr< ::mosek::fusion::Expression > _4655,    int _4656){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__4654(_4654 ? _4654->raw() : nullptr, _4654 ? _4654->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprPermuteDims::computeshape(_4654,_4655->getShape()));
    mosek::fusion::p_ExprPermuteDims::_get_impl(::mosek::fusion::ExprPermuteDims::t(_pubthis))->expr = _4655;
    dperm = ::mosek::fusion::Utils::Tools::arraycopy(_4654);
  }
}void mosek::fusion::ExprPermuteDims :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4657,monty::rc_ptr< ::mosek::fusion::WorkStack > _4658,monty::rc_ptr< ::mosek::fusion::WorkStack > _4659) { mosek::fusion::p_ExprPermuteDims::_get_impl(this)->eval(_4657,_4658,_4659); }void mosek::fusion::p_ExprPermuteDims::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4657,monty::rc_ptr< ::mosek::fusion::WorkStack > _4658,monty::rc_ptr< ::mosek::fusion::WorkStack > _4659){
  expr->eval(_4658,_4657,_4659);
  _4658->pop_expr();
  int _4660 = mosek::fusion::p_WorkStack::_get_impl(_4658)->nd;
  int _4661 = mosek::fusion::p_WorkStack::_get_impl(_4658)->nelem;
  int _4662 = mosek::fusion::p_WorkStack::_get_impl(_4658)->nnz;
  int _4663 = mosek::fusion::p_WorkStack::_get_impl(_4658)->ncodeatom;
  bool _4664 = mosek::fusion::p_WorkStack::_get_impl(_4658)->hassp;
  int _4665 = mosek::fusion::p_WorkStack::_get_impl(_4658)->shape_base;
  std::shared_ptr< monty::ndarray< long long,1 > > _4666 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4660)));
  _checked_ptr_1<long long> _ptr__4666(_4666 ? _4666->raw() : nullptr,_4666 ? _4666->size(0) : 0);
  _ptr__4666[(_4660 - (int)1)] = (int)1;
  int _10761 = (int)1;
  int _10762 = _4660;
  for (int _4667 = _10761; _4667 < _10762; ++_4667)
  {
    {
      _ptr__4666[((_4660 - _4667) - (int)1)] = safe_mul( _ptr__4666[(_4660 - _4667)],((*mosek::fusion::p_WorkStack::_get_impl(_4658)->i32)((safe_add( _4665,_4660 ) - _4667))) );
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _4668 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4660)));
  _checked_ptr_1<int> _ptr__4668(_4668 ? _4668->raw() : nullptr,_4668 ? _4668->size(0) : 0);
  _ptr__4668[(_4660 - (int)1)] = (int)1;
  int _10763 = (int)1;
  int _10764 = _4660;
  for (int _4669 = _10763; _4669 < _10764; ++_4669)
  {
    {
      _ptr__4668[((_4660 - _4669) - (int)1)] = safe_mul( _ptr__4668[(_4660 - _4669)],((*mosek::fusion::p_WorkStack::_get_impl(_4658)->i32)(safe_add( _4665,((*dperm)((_4660 - _4669))) ))) );
    }
  }
  int _4670 = mosek::fusion::p_WorkStack::_get_impl(_4658)->ptr_base;
  int _4671 = mosek::fusion::p_WorkStack::_get_impl(_4658)->sp_base;
  int _4672 = mosek::fusion::p_WorkStack::_get_impl(_4658)->nidxs_base;
  int _4673 = mosek::fusion::p_WorkStack::_get_impl(_4658)->cof_base;
  int _4674 = mosek::fusion::p_WorkStack::_get_impl(_4658)->code_base;
  int _4675 = mosek::fusion::p_WorkStack::_get_impl(_4658)->codeptr_base;
  int _4676 = mosek::fusion::p_WorkStack::_get_impl(_4658)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4677 = mosek::fusion::p_WorkStack::_get_impl(_4658)->i32;
  _checked_ptr_1<int> _ptr__4677(_4677 ? _4677->raw() : nullptr,_4677 ? _4677->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4678 = mosek::fusion::p_WorkStack::_get_impl(_4658)->i64;
  _checked_ptr_1<long long> _ptr__4678(_4678 ? _4678->raw() : nullptr,_4678 ? _4678->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4679 = mosek::fusion::p_WorkStack::_get_impl(_4658)->f64;
  _checked_ptr_1<double> _ptr__4679(_4679 ? _4679->raw() : nullptr,_4679 ? _4679->size(0) : 0);
  _4657->alloc_expr(_4660,_4661,_4662,_4664,_4663);
  int _4680 = mosek::fusion::p_WorkStack::_get_impl(_4657)->ptr_base;
  int _4681 = mosek::fusion::p_WorkStack::_get_impl(_4657)->shape_base;
  int _4682 = mosek::fusion::p_WorkStack::_get_impl(_4657)->nidxs_base;
  int _4683 = mosek::fusion::p_WorkStack::_get_impl(_4657)->sp_base;
  int _4684 = mosek::fusion::p_WorkStack::_get_impl(_4657)->cof_base;
  int _4685 = mosek::fusion::p_WorkStack::_get_impl(_4657)->code_base;
  int _4686 = mosek::fusion::p_WorkStack::_get_impl(_4657)->codeptr_base;
  int _4687 = mosek::fusion::p_WorkStack::_get_impl(_4657)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4688 = mosek::fusion::p_WorkStack::_get_impl(_4657)->i32;
  _checked_ptr_1<int> _ptr__4688(_4688 ? _4688->raw() : nullptr,_4688 ? _4688->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4689 = mosek::fusion::p_WorkStack::_get_impl(_4657)->i64;
  _checked_ptr_1<long long> _ptr__4689(_4689 ? _4689->raw() : nullptr,_4689 ? _4689->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4690 = mosek::fusion::p_WorkStack::_get_impl(_4657)->f64;
  _checked_ptr_1<double> _ptr__4690(_4690 ? _4690->raw() : nullptr,_4690 ? _4690->size(0) : 0);
  int _10765 = (int)0;
  int _10766 = _4660;
  for (int _4691 = _10765; _4691 < _10766; ++_4691)
  {
    {
      _ptr__4688[safe_add( _4681,_4691 )] = _ptr__4677[safe_add( _4665,((*dperm)(_4691)) )];
    }
  }
  if (_4664)
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _4692 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4661)));
      _checked_ptr_1<long long> _ptr__4692(_4692 ? _4692->raw() : nullptr,_4692 ? _4692->size(0) : 0);
      {
        int _10767 = (int)0;
        int _10768 = _4661;
        for (int _4693 = _10767; _4693 < _10768; ++_4693)
        {
          {
            long long _4694 = (long long)0;
            int _10769 = (int)0;
            int _10770 = _4660;
            for (int _4695 = _10769; _4695 < _10770; ++_4695)
            {
              {
                _4694 += safe_mul( ((_ptr__4678[safe_add( _4671,_4693 )] / _ptr__4666[_4695]) % _ptr__4677[safe_add( _4665,_4695 )]),_ptr__4668[((*dperm)(_4695))] );
              }
            }
            _ptr__4692[_4693] = _4694;
          }
        }
      }
      std::vector<long long> _10771;
      for (int _4697 = (int)0, _10772 = _4661; _4697 < _10772 ; ++_4697)
      {
        _10771.push_back(_4697);
      }
      auto _10773 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_10771.size()),_10771.begin(),_10771.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _4696 = _10773;
      _checked_ptr_1<long long> _ptr__4696(_4696 ? _4696->raw() : nullptr,_4696 ? _4696->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_4696,_4692,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_4661));
      _ptr__4688[_4680] = (int)0;
      if ((_4663 > (int)0))
      {
        {
          _ptr__4688[_4686] = (int)0;
        }
      }
      {}
      int _4698 = (int)0;
      int _4699 = (int)0;
      int _4700 = (int)0;
      int _10774 = (int)0;
      int _10775 = _4661;
      for (int _4701 = _10774; _4701 < _10775; ++_4701)
      {
        {
          long long _4702 = _ptr__4696[_4701];
          int _10776 = _ptr__4677[safe_add( _4670,_4702 )];
          int _10777 = _ptr__4677[safe_add( safe_add( _4670,_4702 ),(int)1 )];
          for (int _4703 = _10776; _4703 < _10777; ++_4703)
          {
            {
              _ptr__4689[safe_add( _4682,_4700 )] = _ptr__4678[safe_add( _4672,_4703 )];
              _ptr__4690[safe_add( _4684,_4700 )] = _ptr__4679[safe_add( _4673,_4703 )];
              if ((_4663 > (int)0))
              {
                {
                  int _10778 = _ptr__4677[safe_add( _4675,_4703 )];
                  int _10779 = _ptr__4677[safe_add( safe_add( _4675,_4703 ),(int)1 )];
                  for (int _4704 = _10778; _4704 < _10779; ++_4704)
                  {
                    {
                      _ptr__4688[safe_add( _4685,_4698 )] = _ptr__4677[safe_add( _4674,_4704 )];
                      _ptr__4690[safe_add( _4687,_4698 )] = _ptr__4679[safe_add( _4676,_4704 )];
                      ++ _4698;
                    }
                  }
                  _ptr__4688[safe_add( safe_add( _4686,_4700 ),(int)1 )] = _4698;
                }
              }
              {}
              ++ _4700;
            }
          }
          _ptr__4689[safe_add( _4683,_4701 )] = _ptr__4692[_4702];
          ++ _4699;
          _ptr__4688[safe_add( safe_add( _4680,_4701 ),(int)1 )] = _4700;
        }
      }
    }
  }
  else
  {
    {
      _ptr__4688[_4680] = (int)0;
      if ((_4663 > (int)0))
      {
        {
          _ptr__4688[_4686] = (int)0;
        }
      }
      {}
      int _4705 = (int)0;
      int _4706 = (int)0;
      int _4707 = (int)0;
      int _10780 = (int)0;
      int _10781 = _4661;
      for (int _4708 = _10780; _4708 < _10781; ++_4708)
      {
        {
          long long _4709 = (long long)0;
          int _10782 = (int)0;
          int _10783 = _4660;
          for (int _4710 = _10782; _4710 < _10783; ++_4710)
          {
            {
              _4709 += safe_mul( ((_4708 / _ptr__4666[((*dperm)(_4710))]) % _ptr__4677[safe_add( _4665,((*dperm)(_4710)) )]),_ptr__4668[_4710] );
            }
          }
          int _10784 = _ptr__4677[safe_add( _4670,_4709 )];
          int _10785 = _ptr__4677[safe_add( safe_add( _4670,_4709 ),(int)1 )];
          for (int _4711 = _10784; _4711 < _10785; ++_4711)
          {
            {
              _ptr__4689[safe_add( _4682,_4707 )] = _ptr__4678[safe_add( _4672,_4711 )];
              _ptr__4690[safe_add( _4684,_4707 )] = _ptr__4679[safe_add( _4673,_4711 )];
              if ((_4663 > (int)0))
              {
                {
                  int _10786 = _ptr__4677[safe_add( _4675,_4711 )];
                  int _10787 = _ptr__4677[safe_add( safe_add( _4675,_4711 ),(int)1 )];
                  for (int _4712 = _10786; _4712 < _10787; ++_4712)
                  {
                    {
                      _ptr__4688[safe_add( _4685,_4705 )] = _ptr__4677[safe_add( _4674,_4712 )];
                      _ptr__4690[safe_add( _4687,_4705 )] = _ptr__4679[safe_add( _4676,_4712 )];
                      ++ _4705;
                    }
                  }
                  _ptr__4688[safe_add( safe_add( _4686,_4707 ),(int)1 )] = _4705;
                }
              }
              {}
              ++ _4707;
            }
          }
          ++ _4706;
          _ptr__4688[safe_add( _4680,_4706 )] = _4707;
        }
      }
    }
  }
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprPermuteDims::computeshape(std::shared_ptr< monty::ndarray< int,1 > > _4713,std::shared_ptr< monty::ndarray< int,1 > > _4714){
  _checked_ptr_1<int> _ptr__4713(_4713 ? _4713->raw() : nullptr, _4713 ? _4713->size(0) : 0);
  _checked_ptr_1<int> _ptr__4714(_4714 ? _4714->raw() : nullptr, _4714 ? _4714->size(0) : 0);
  std::vector<int> _10788;
  for (int _4715 = (int)0, _10789 = (int)((_4713)->size(0)); _4715 < _10789 ; ++_4715)
  {
    _10788.push_back(_ptr__4714[_ptr__4713[_4715]]);
  }
  auto _10790 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10788.size()),_10788.begin(),_10788.end()));
  return _10790;
}
void mosek::fusion::p_ExprPermuteDims::destroy(){dperm.reset();expr.reset();}void mosek::fusion::ExprPermuteDims::destroy() { mosek::fusion::p_ExprPermuteDims::_get_impl(this)->destroy(); }mosek::fusion::ExprTranspose::ExprTranspose(mosek::fusion::p_ExprTranspose *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprTranspose()" << this << std::endl; */ }mosek::fusion::ExprTranspose::~ExprTranspose() {  /* std::cout << "~ExprTranspose()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprTranspose::p_ExprTranspose  (::mosek::fusion::ExprTranspose * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprTranspose::t mosek::fusion::p_ExprTranspose::_new_ExprTranspose  (monty::rc_ptr< ::mosek::fusion::Expression > _4716){ return new mosek::fusion::ExprTranspose(_4716); }mosek::fusion::ExprTranspose::ExprTranspose  (monty::rc_ptr< ::mosek::fusion::Expression > _4716) :    ExprTranspose(new mosek::fusion::p_ExprTranspose(this)){ mosek::fusion::p_ExprTranspose::_get_impl(this)->_initialize(_4716); }void mosek::fusion::p_ExprTranspose::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4716){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprTranspose::transposeShape(_4716->getShape()));
    mosek::fusion::p_ExprTranspose::_get_impl(::mosek::fusion::ExprTranspose::t(_pubthis))->expr = _4716;
  }
}void mosek::fusion::ExprTranspose :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4717,monty::rc_ptr< ::mosek::fusion::WorkStack > _4718,monty::rc_ptr< ::mosek::fusion::WorkStack > _4719) { mosek::fusion::p_ExprTranspose::_get_impl(this)->eval(_4717,_4718,_4719); }void mosek::fusion::p_ExprTranspose::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4717,monty::rc_ptr< ::mosek::fusion::WorkStack > _4718,monty::rc_ptr< ::mosek::fusion::WorkStack > _4719){
  expr->eval(_4718,_4717,_4719);
  _4718->pop_expr();
  if ((mosek::fusion::p_WorkStack::_get_impl(_4718)->nd != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  else
  {
    {
      int _4720 = mosek::fusion::p_WorkStack::_get_impl(_4718)->shape_base;
      int _4721 = mosek::fusion::p_WorkStack::_get_impl(_4718)->nelem;
      int _4722 = mosek::fusion::p_WorkStack::_get_impl(_4718)->nnz;
      bool _4723 = mosek::fusion::p_WorkStack::_get_impl(_4718)->hassp;
      int _4724 = mosek::fusion::p_WorkStack::_get_impl(_4718)->ncodeatom;
      int _4725 = mosek::fusion::p_WorkStack::_get_impl(_4718)->ptr_base;
      int _4726 = mosek::fusion::p_WorkStack::_get_impl(_4718)->sp_base;
      int _4727 = mosek::fusion::p_WorkStack::_get_impl(_4718)->nidxs_base;
      int _4728 = mosek::fusion::p_WorkStack::_get_impl(_4718)->cof_base;
      int _4729 = mosek::fusion::p_WorkStack::_get_impl(_4718)->code_base;
      int _4730 = mosek::fusion::p_WorkStack::_get_impl(_4718)->codeptr_base;
      int _4731 = mosek::fusion::p_WorkStack::_get_impl(_4718)->cconst_base;
      int _4732 = ((*mosek::fusion::p_WorkStack::_get_impl(_4718)->i32)(_4720));
      int _4733 = ((*mosek::fusion::p_WorkStack::_get_impl(_4718)->i32)(safe_add( _4720,(int)1 )));
      std::shared_ptr< monty::ndarray< int,1 > > _4734 = mosek::fusion::p_WorkStack::_get_impl(_4718)->i32;
      _checked_ptr_1<int> _ptr__4734(_4734 ? _4734->raw() : nullptr,_4734 ? _4734->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4735 = mosek::fusion::p_WorkStack::_get_impl(_4718)->i64;
      _checked_ptr_1<long long> _ptr__4735(_4735 ? _4735->raw() : nullptr,_4735 ? _4735->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4736 = mosek::fusion::p_WorkStack::_get_impl(_4718)->f64;
      _checked_ptr_1<double> _ptr__4736(_4736 ? _4736->raw() : nullptr,_4736 ? _4736->size(0) : 0);
      _4717->alloc_expr((int)2,_4721,_4722,_4723,_4724);
      int _4737 = mosek::fusion::p_WorkStack::_get_impl(_4717)->ptr_base;
      int _4738 = mosek::fusion::p_WorkStack::_get_impl(_4717)->nidxs_base;
      int _4739 = mosek::fusion::p_WorkStack::_get_impl(_4717)->sp_base;
      int _4740 = mosek::fusion::p_WorkStack::_get_impl(_4717)->cof_base;
      int _4741 = mosek::fusion::p_WorkStack::_get_impl(_4717)->shape_base;
      int _4742 = mosek::fusion::p_WorkStack::_get_impl(_4717)->code_base;
      int _4743 = mosek::fusion::p_WorkStack::_get_impl(_4717)->codeptr_base;
      int _4744 = mosek::fusion::p_WorkStack::_get_impl(_4717)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4745 = mosek::fusion::p_WorkStack::_get_impl(_4717)->i32;
      _checked_ptr_1<int> _ptr__4745(_4745 ? _4745->raw() : nullptr,_4745 ? _4745->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4746 = mosek::fusion::p_WorkStack::_get_impl(_4717)->i64;
      _checked_ptr_1<long long> _ptr__4746(_4746 ? _4746->raw() : nullptr,_4746 ? _4746->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4747 = mosek::fusion::p_WorkStack::_get_impl(_4717)->f64;
      _checked_ptr_1<double> _ptr__4747(_4747 ? _4747->raw() : nullptr,_4747 ? _4747->size(0) : 0);
      _ptr__4745[_4741] = _4733;
      _ptr__4745[safe_add( _4741,(int)1 )] = _4732;
      _ptr__4745[_4737] = (int)0;
      if ((_4724 > (int)0))
      {
        {
          _ptr__4745[_4743] = (int)0;
        }
      }
      {}
      if (_4723)
      {
        {
          int _4748 = _4719->alloci32(_4721);
          int _4749 = _4719->alloci32(safe_add( _4733,(int)1 ));
          std::shared_ptr< monty::ndarray< int,1 > > _4750 = mosek::fusion::p_WorkStack::_get_impl(_4719)->i32;
          _checked_ptr_1<int> _ptr__4750(_4750 ? _4750->raw() : nullptr,_4750 ? _4750->size(0) : 0);
          {
            int _10791 = (int)0;
            int _10792 = safe_add( _4733,(int)1 );
            for (int _4751 = _10791; _4751 < _10792; ++_4751)
            {
              {
                _ptr__4750[safe_add( _4749,_4751 )] = (int)0;
              }
            }
            int _10793 = (int)0;
            int _10794 = _4721;
            for (int _4752 = _10793; _4752 < _10794; ++_4752)
            {
              {
                ++ _ptr__4750[safe_add( safe_add( _4749,(_ptr__4735[safe_add( _4726,_4752 )] % _4733) ),(int)1 )];
              }
            }
            int _10795 = (int)0;
            int _10796 = _4733;
            for (int _4753 = _10795; _4753 < _10796; ++_4753)
            {
              {
                _ptr__4750[safe_add( safe_add( _4749,_4753 ),(int)1 )] += _ptr__4750[safe_add( _4749,_4753 )];
              }
            }
            int _10797 = (int)0;
            int _10798 = _4721;
            for (int _4754 = _10797; _4754 < _10798; ++_4754)
            {
              {
                long long _4755 = (_ptr__4735[safe_add( _4726,_4754 )] % _4733);
                _ptr__4750[safe_add( _4748,_ptr__4750[safe_add( _4749,_4755 )] )] = _4754;
                ++ _ptr__4750[safe_add( _4749,_4755 )];
              }
            }
            _ptr__4745[_4737] = (int)0;
            int _4756 = (int)0;
            int _4757 = (int)0;
            int _10799 = (int)0;
            int _10800 = _4721;
            for (int _4758 = _10799; _4758 < _10800; ++_4758)
            {
              {
                int _4759 = _ptr__4750[safe_add( _4748,_4758 )];
                int _10801 = _ptr__4734[safe_add( _4725,_4759 )];
                int _10802 = _ptr__4734[safe_add( safe_add( _4725,_4759 ),(int)1 )];
                for (int _4760 = _10801; _4760 < _10802; ++_4760)
                {
                  {
                    _ptr__4746[safe_add( _4738,_4757 )] = _ptr__4735[safe_add( _4727,_4760 )];
                    _ptr__4747[safe_add( _4740,_4757 )] = _ptr__4736[safe_add( _4728,_4760 )];
                    if ((_4724 > (int)0))
                    {
                      {
                        int _10803 = _ptr__4734[safe_add( _4730,_4760 )];
                        int _10804 = _ptr__4734[safe_add( safe_add( _4730,_4760 ),(int)1 )];
                        for (int _4761 = _10803; _4761 < _10804; ++_4761)
                        {
                          {
                            _ptr__4745[safe_add( _4742,_4756 )] = _ptr__4734[safe_add( _4729,_4761 )];
                            _ptr__4747[safe_add( _4744,_4756 )] = _ptr__4736[safe_add( _4731,_4761 )];
                            ++ _4756;
                          }
                        }
                        _ptr__4745[safe_add( safe_add( _4743,_4757 ),(int)1 )] = _4756;
                      }
                    }
                    {}
                    ++ _4757;
                  }
                }
                long long _4762 = (_ptr__4735[safe_add( _4726,_4759 )] / _4733);
                long long _4763 = (_ptr__4735[safe_add( _4726,_4759 )] % _4733);
                _ptr__4745[safe_add( safe_add( _4737,_4758 ),(int)1 )] = _4757;
                _ptr__4746[safe_add( _4739,_4758 )] = safe_add( safe_mul( _4763,_4732 ),_4762 );
              }
            }
          }
        }
      }
      else
      {
        {
          _ptr__4745[_4737] = (int)0;
          int _4764 = (int)0;
          int _4765 = (int)0;
          int _4766 = (int)0;
          int _10805 = (int)0;
          int _10806 = _4733;
          for (int _4767 = _10805; _4767 < _10806; ++_4767)
          {
            {
              int _10807 = (int)0;
              int _10808 = _4732;
              for (int _4768 = _10807; _4768 < _10808; ++_4768)
              {
                {
                  int _4769 = safe_add( safe_mul( _4768,_4733 ),_4767 );
                  int _10809 = _ptr__4734[safe_add( _4725,_4769 )];
                  int _10810 = _ptr__4734[safe_add( safe_add( _4725,_4769 ),(int)1 )];
                  for (int _4770 = _10809; _4770 < _10810; ++_4770)
                  {
                    {
                      _ptr__4746[safe_add( _4738,_4765 )] = _ptr__4735[safe_add( _4727,_4770 )];
                      _ptr__4747[safe_add( _4740,_4765 )] = _ptr__4736[safe_add( _4728,_4770 )];
                      if ((_4724 > (int)0))
                      {
                        {
                          int _10811 = _ptr__4734[safe_add( _4730,_4770 )];
                          int _10812 = _ptr__4734[safe_add( safe_add( _4730,_4770 ),(int)1 )];
                          for (int _4771 = _10811; _4771 < _10812; ++_4771)
                          {
                            {
                              _ptr__4745[safe_add( _4742,_4764 )] = _ptr__4734[safe_add( _4729,_4771 )];
                              _ptr__4747[safe_add( _4744,_4764 )] = _ptr__4736[safe_add( _4731,_4771 )];
                              ++ _4764;
                            }
                          }
                          _ptr__4745[safe_add( safe_add( _4743,_4765 ),(int)1 )] = _4764;
                        }
                      }
                      {}
                      ++ _4765;
                    }
                  }
                  _ptr__4745[safe_add( safe_add( _4737,_4766 ),(int)1 )] = _4765;
                  ++ _4766;
                }
              }
            }
          }
        }
      }
      _4719->clear();
    }
  }
}
std::string mosek::fusion::ExprTranspose :: toString() { return mosek::fusion::p_ExprTranspose::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprTranspose::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprTranspose("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprTranspose::transposeShape(std::shared_ptr< monty::ndarray< int,1 > > _4772){
  _checked_ptr_1<int> _ptr__4772(_4772 ? _4772->raw() : nullptr, _4772 ? _4772->size(0) : 0);
  if (((int)((_4772)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  else
  {
    {
      return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__4772[(int)1]),(int)(_ptr__4772[(int)0])});
    }
  }
}
void mosek::fusion::p_ExprTranspose::destroy(){expr.reset();}void mosek::fusion::ExprTranspose::destroy() { mosek::fusion::p_ExprTranspose::_get_impl(this)->destroy(); }mosek::fusion::ExprRepeat::ExprRepeat(mosek::fusion::p_ExprRepeat *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprRepeat()" << this << std::endl; */ }mosek::fusion::ExprRepeat::~ExprRepeat() {  /* std::cout << "~ExprRepeat()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprRepeat::p_ExprRepeat  (::mosek::fusion::ExprRepeat * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprRepeat::t mosek::fusion::p_ExprRepeat::_new_ExprRepeat  (monty::rc_ptr< ::mosek::fusion::Expression > _4773,    int _4774,    int _4775){ return new mosek::fusion::ExprRepeat(_4773,_4774,_4775); }mosek::fusion::ExprRepeat::ExprRepeat  (monty::rc_ptr< ::mosek::fusion::Expression > _4773,    int _4774,    int _4775) :    ExprRepeat(new mosek::fusion::p_ExprRepeat(this)){ mosek::fusion::p_ExprRepeat::_get_impl(this)->_initialize(_4773,_4774,_4775); }void mosek::fusion::p_ExprRepeat::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4773,    int _4774,    int _4775){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprRepeat::getshape(_4773,_4774,_4775));
    mosek::fusion::p_ExprRepeat::_get_impl(::mosek::fusion::ExprRepeat::t(_pubthis))->expr = _4773;
    mosek::fusion::p_ExprRepeat::_get_impl(::mosek::fusion::ExprRepeat::t(_pubthis))->dim = _4774;
    mosek::fusion::p_ExprRepeat::_get_impl(::mosek::fusion::ExprRepeat::t(_pubthis))->n = _4775;
  }
}void mosek::fusion::ExprRepeat :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4776,monty::rc_ptr< ::mosek::fusion::WorkStack > _4777,monty::rc_ptr< ::mosek::fusion::WorkStack > _4778) { mosek::fusion::p_ExprRepeat::_get_impl(this)->eval(_4776,_4777,_4778); }void mosek::fusion::p_ExprRepeat::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4776,monty::rc_ptr< ::mosek::fusion::WorkStack > _4777,monty::rc_ptr< ::mosek::fusion::WorkStack > _4778){
  expr->eval(_4777,_4776,_4778);
  _4777->pop_expr();
  int _4779 = mosek::fusion::p_WorkStack::_get_impl(_4777)->nd;
  int _4780 = mosek::fusion::p_WorkStack::_get_impl(_4777)->shape_base;
  int _4781 = mosek::fusion::p_WorkStack::_get_impl(_4777)->nelem;
  int _4782 = mosek::fusion::p_WorkStack::_get_impl(_4777)->nnz;
  int _4783 = mosek::fusion::p_WorkStack::_get_impl(_4777)->ncodeatom;
  bool _4784 = mosek::fusion::p_WorkStack::_get_impl(_4777)->hassp;
  int _4785 = mosek::fusion::p_WorkStack::_get_impl(_4777)->ptr_base;
  int _4786 = mosek::fusion::p_WorkStack::_get_impl(_4777)->sp_base;
  int _4787 = mosek::fusion::p_WorkStack::_get_impl(_4777)->nidxs_base;
  int _4788 = mosek::fusion::p_WorkStack::_get_impl(_4777)->cof_base;
  int _4789 = mosek::fusion::p_WorkStack::_get_impl(_4777)->code_base;
  int _4790 = mosek::fusion::p_WorkStack::_get_impl(_4777)->codeptr_base;
  int _4791 = mosek::fusion::p_WorkStack::_get_impl(_4777)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4792 = mosek::fusion::p_WorkStack::_get_impl(_4777)->i32;
  _checked_ptr_1<int> _ptr__4792(_4792 ? _4792->raw() : nullptr,_4792 ? _4792->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4793 = mosek::fusion::p_WorkStack::_get_impl(_4777)->i64;
  _checked_ptr_1<long long> _ptr__4793(_4793 ? _4793->raw() : nullptr,_4793 ? _4793->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4794 = mosek::fusion::p_WorkStack::_get_impl(_4777)->f64;
  _checked_ptr_1<double> _ptr__4794(_4794 ? _4794->raw() : nullptr,_4794 ? _4794->size(0) : 0);
  int _10813;
  bool _10814 = (dim < _4779);
  if (_10814)
  {
    _10813 = _4779;
  }
  else
  {
    _10813 = safe_add( _4779,(int)1 );
  }
  int _4795 = _10813;
  int _4796 = safe_mul( _4781,n );
  int _4797 = safe_mul( _4782,n );
  int _4798 = safe_mul( _4783,n );
  _4776->alloc_expr(_4795,_4796,_4797,_4784,_4798);
  std::shared_ptr< monty::ndarray< int,1 > > _4799 = mosek::fusion::p_WorkStack::_get_impl(_4776)->i32;
  _checked_ptr_1<int> _ptr__4799(_4799 ? _4799->raw() : nullptr,_4799 ? _4799->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4800 = mosek::fusion::p_WorkStack::_get_impl(_4776)->i64;
  _checked_ptr_1<long long> _ptr__4800(_4800 ? _4800->raw() : nullptr,_4800 ? _4800->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4801 = mosek::fusion::p_WorkStack::_get_impl(_4776)->f64;
  _checked_ptr_1<double> _ptr__4801(_4801 ? _4801->raw() : nullptr,_4801 ? _4801->size(0) : 0);
  int _4802 = mosek::fusion::p_WorkStack::_get_impl(_4776)->shape_base;
  int _4803 = mosek::fusion::p_WorkStack::_get_impl(_4776)->ptr_base;
  int _4804 = mosek::fusion::p_WorkStack::_get_impl(_4776)->sp_base;
  int _4805 = mosek::fusion::p_WorkStack::_get_impl(_4776)->nidxs_base;
  int _4806 = mosek::fusion::p_WorkStack::_get_impl(_4776)->cof_base;
  int _4807 = mosek::fusion::p_WorkStack::_get_impl(_4776)->code_base;
  int _4808 = mosek::fusion::p_WorkStack::_get_impl(_4776)->codeptr_base;
  int _4809 = mosek::fusion::p_WorkStack::_get_impl(_4776)->cconst_base;
  int _4810 = (int)1;
  int _10815 = (int)0;
  int _10816 = dim;
  for (int _4811 = _10815; _4811 < _10816; ++_4811)
  {
    {
      _4810 *= _ptr__4792[safe_add( _4780,_4811 )];
    }
  }
  int _10817;
  bool _10818 = (dim < _4779);
  if (_10818)
  {
    _10817 = _ptr__4792[safe_add( _4780,dim )];
  }
  else
  {
    _10817 = (int)1;
  }
  int _4812 = _10817;
  int _4813 = safe_mul( n,_4812 );
  int _4814 = (int)1;
  int _10819 = safe_add( dim,(int)1 );
  int _10820 = _4779;
  for (int _4815 = _10819; _4815 < _10820; ++_4815)
  {
    {
      _4814 *= _ptr__4792[safe_add( _4780,_4815 )];
    }
  }
  {
    int _10821 = (int)0;
    int _10822 = _4779;
    for (int _4816 = _10821; _4816 < _10822; ++_4816)
    {
      {
        _ptr__4799[safe_add( _4802,_4816 )] = _ptr__4792[safe_add( _4780,_4816 )];
      }
    }
    _ptr__4799[safe_add( _4802,dim )] = _4813;
    _ptr__4799[_4803] = (int)0;
    if ((_4798 != (int)0))
    {
      {
        _ptr__4799[_4808] = (int)0;
      }
    }
    {}
    if (_4784)
    {
      {
        int _4817 = (int)0;
        int _4818 = (int)0;
        int _4819 = (int)0;
        int _4820 = (int)0;
        int _4821 = (int)0;
        while ( (_4819 < _4781) )
        {
          {
            long long _4822 = _ptr__4793[safe_add( _4786,_4819 )];
            long long _4823 = safe_add( (_4822 - (_4822 % safe_mul( _4812,_4814 ))),safe_mul( _4812,_4814 ) );
            int _4824 = _4819;
            ++ _4819;
            while ( ((_4819 < _4781) && (_ptr__4793[safe_add( _4786,_4819 )] < _4823)) )
            {
              {
                ++ _4819;
              }
            }
            int _4825 = _4819;
            int _10823 = (int)0;
            int _10824 = n;
            for (int _4826 = _10823; _4826 < _10824; ++_4826)
            {
              {
                int _10825 = _4824;
                int _10826 = _4825;
                for (int _4827 = _10825; _4827 < _10826; ++_4827)
                {
                  {
                    long long _4828 = (_ptr__4793[safe_add( _4786,_4827 )] / safe_mul( _4812,_4814 ));
                    long long _4829 = ((_ptr__4793[safe_add( _4786,_4827 )] / _4814) % _4812);
                    long long _4830 = (_ptr__4793[safe_add( _4786,_4827 )] % _4814);
                    int _10827 = _ptr__4792[safe_add( _4785,_4827 )];
                    int _10828 = _ptr__4792[safe_add( safe_add( _4785,_4827 ),(int)1 )];
                    for (int _4831 = _10827; _4831 < _10828; ++_4831)
                    {
                      {
                        _ptr__4800[safe_add( _4805,_4821 )] = _ptr__4793[safe_add( _4787,_4831 )];
                        _ptr__4801[safe_add( _4806,_4821 )] = _ptr__4794[safe_add( _4788,_4831 )];
                        if ((_4783 > (int)0))
                        {
                          {
                            int _10829 = _ptr__4792[safe_add( _4790,_4831 )];
                            int _10830 = _ptr__4792[safe_add( safe_add( _4790,_4831 ),(int)1 )];
                            for (int _4832 = _10829; _4832 < _10830; ++_4832)
                            {
                              {
                                _ptr__4799[safe_add( _4807,_4817 )] = _ptr__4792[safe_add( _4789,_4832 )];
                                _ptr__4801[safe_add( _4809,_4817 )] = _ptr__4794[safe_add( _4791,_4832 )];
                                ++ _4817;
                              }
                            }
                            _ptr__4799[safe_add( safe_add( _4808,_4821 ),(int)1 )] = _4817;
                          }
                        }
                        {}
                        ++ _4821;
                      }
                    }
                    _ptr__4799[safe_add( safe_add( _4803,_4820 ),(int)1 )] = _4821;
                    _ptr__4800[safe_add( _4804,_4820 )] = safe_add( safe_mul( safe_add( safe_add( safe_mul( _4828,_4813 ),safe_mul( _4826,_4812 ) ),_4829 ),_4814 ),_4830 );
                    ++ _4820;
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      {
        int _4833 = (int)0;
        int _4834 = (int)0;
        int _4835 = (int)0;
        int _4836 = (int)0;
        int _10831 = (int)0;
        int _10832 = _4810;
        for (int _4837 = _10831; _4837 < _10832; ++_4837)
        {
          {
            int _10833 = (int)0;
            int _10834 = n;
            for (int _4838 = _10833; _4838 < _10834; ++_4838)
            {
              {
                int _4839 = safe_mul( safe_mul( _4837,_4812 ),_4814 );
                int _10835 = (int)0;
                int _10836 = safe_mul( _4812,_4814 );
                for (int _4840 = _10835; _4840 < _10836; ++_4840)
                {
                  {
                    int _10837 = _ptr__4792[safe_add( _4785,_4839 )];
                    int _10838 = _ptr__4792[safe_add( safe_add( _4785,_4839 ),(int)1 )];
                    for (int _4841 = _10837; _4841 < _10838; ++_4841)
                    {
                      {
                        _ptr__4800[safe_add( _4805,_4835 )] = _ptr__4793[safe_add( _4787,_4841 )];
                        _ptr__4801[safe_add( _4806,_4835 )] = _ptr__4794[safe_add( _4788,_4841 )];
                        if ((_4783 > (int)0))
                        {
                          {
                            int _10839 = _ptr__4792[safe_add( _4790,_4841 )];
                            int _10840 = _ptr__4792[safe_add( safe_add( _4790,_4841 ),(int)1 )];
                            for (int _4842 = _10839; _4842 < _10840; ++_4842)
                            {
                              {
                                _ptr__4799[safe_add( _4807,_4833 )] = _ptr__4792[safe_add( _4789,_4842 )];
                                _ptr__4801[safe_add( _4809,_4833 )] = _ptr__4794[safe_add( _4791,_4842 )];
                                ++ _4833;
                              }
                            }
                            _ptr__4799[safe_add( safe_add( _4808,_4835 ),(int)1 )] = _4833;
                          }
                        }
                        {}
                        ++ _4835;
                      }
                    }
                    _ptr__4799[safe_add( safe_add( _4803,_4834 ),(int)1 )] = _4835;
                    ++ _4834;
                    ++ _4839;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprRepeat::getshape(monty::rc_ptr< ::mosek::fusion::Expression > _4843,int _4844,int _4845){
  std::shared_ptr< monty::ndarray< int,1 > > _4846 = _4843->getShape();
  _checked_ptr_1<int> _ptr__4846(_4846 ? _4846->raw() : nullptr,_4846 ? _4846->size(0) : 0);
  int _4847 = (int)((_4846)->size(0));
  if ((_4844 < _4847))
  {
    {
      _ptr__4846[_4844] *= _4845;
      return _4846;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _10841;
      bool _10842 = (_4844 == _4847);
      if (_10842)
      {
        _10841 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _4847,(int)1 ))));
      }
      else
      {
        _10841 = _4846;
      }
      std::shared_ptr< monty::ndarray< int,1 > > _4848 = _10841;
      _checked_ptr_1<int> _ptr__4848(_4848 ? _4848->raw() : nullptr,_4848 ? _4848->size(0) : 0);
      int _10843 = (int)0;
      int _10844 = _4847;
      for (int _4849 = _10843; _4849 < _10844; ++_4849)
      {
        {
          _ptr__4848[_4849] = _ptr__4846[_4849];
        }
      }
      _ptr__4848[_4844] = _4845;
      return _4848;
    }
  }
}
std::string mosek::fusion::ExprRepeat :: toString() { return mosek::fusion::p_ExprRepeat::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprRepeat::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprRepeat(dim="))->__mosek_2fusion_2Utils_2StringBuffer__a(dim)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprRepeat::destroy(){expr.reset();}void mosek::fusion::ExprRepeat::destroy() { mosek::fusion::p_ExprRepeat::_get_impl(this)->destroy(); }mosek::fusion::ExprStack::ExprStack(mosek::fusion::p_ExprStack *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprStack()" << this << std::endl; */ }mosek::fusion::ExprStack::~ExprStack() {  /* std::cout << "~ExprStack()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprStack::p_ExprStack  (::mosek::fusion::ExprStack * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprStack::t mosek::fusion::p_ExprStack::_new_ExprStack  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _4850,    int _4851){ return new mosek::fusion::ExprStack(_4850,_4851); }mosek::fusion::ExprStack::ExprStack  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _4850,    int _4851) :    ExprStack(new mosek::fusion::p_ExprStack(this)){ mosek::fusion::p_ExprStack::_get_impl(this)->_initialize(_4850,_4851); }void mosek::fusion::p_ExprStack::_initialize  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _4850,    int _4851){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprStack::getshape(_4850,_4851));
    std::vector<monty::rc_ptr< ::mosek::fusion::Expression >> _10845;
    for (int _4852 = (int)0, _10846 = (int)((_4850)->size(0)); _4852 < _10846 ; ++_4852)
    {
      _10845.push_back(((*_4850)(_4852)));
    }
    auto _10847 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_10845.size()),_10845.begin(),_10845.end()));
    mosek::fusion::p_ExprStack::_get_impl(::mosek::fusion::ExprStack::t(_pubthis))->exprs = _10847;
    mosek::fusion::p_ExprStack::_get_impl(::mosek::fusion::ExprStack::t(_pubthis))->dim = _4851;
  }
}void mosek::fusion::ExprStack :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4853,monty::rc_ptr< ::mosek::fusion::WorkStack > _4854,monty::rc_ptr< ::mosek::fusion::WorkStack > _4855) { mosek::fusion::p_ExprStack::_get_impl(this)->eval(_4853,_4854,_4855); }void mosek::fusion::p_ExprStack::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4853,monty::rc_ptr< ::mosek::fusion::WorkStack > _4854,monty::rc_ptr< ::mosek::fusion::WorkStack > _4855){
  int _4856 = (int)((exprs)->size(0));
  if ((_4856 == (int)1))
  {
    {
      ((*exprs)((int)0))->eval(_4853,_4854,_4855);
    }
  }
  else
  {
    {
      int _10848 = (int)0;
      int _10849 = _4856;
      for (int _4857 = _10848; _4857 < _10849; ++_4857)
      {
        {
          ((*exprs)(((_4856 - _4857) - (int)1)))->eval(_4854,_4853,_4855);
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _4858 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4856)));
      _checked_ptr_1<int> _ptr__4858(_4858 ? _4858->raw() : nullptr,_4858 ? _4858->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4859 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4856)));
      _checked_ptr_1<int> _ptr__4859(_4859 ? _4859->raw() : nullptr,_4859 ? _4859->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4860 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4856)));
      _checked_ptr_1<int> _ptr__4860(_4860 ? _4860->raw() : nullptr,_4860 ? _4860->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4861 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4856)));
      _checked_ptr_1<int> _ptr__4861(_4861 ? _4861->raw() : nullptr,_4861 ? _4861->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4862 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4856)));
      _checked_ptr_1<int> _ptr__4862(_4862 ? _4862->raw() : nullptr,_4862 ? _4862->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4863 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4856)));
      _checked_ptr_1<int> _ptr__4863(_4863 ? _4863->raw() : nullptr,_4863 ? _4863->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4864 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4856)));
      _checked_ptr_1<int> _ptr__4864(_4864 ? _4864->raw() : nullptr,_4864 ? _4864->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4865 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4856)));
      _checked_ptr_1<int> _ptr__4865(_4865 ? _4865->raw() : nullptr,_4865 ? _4865->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4866 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4856)));
      _checked_ptr_1<int> _ptr__4866(_4866 ? _4866->raw() : nullptr,_4866 ? _4866->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4867 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4856)));
      _checked_ptr_1<int> _ptr__4867(_4867 ? _4867->raw() : nullptr,_4867 ? _4867->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4868 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4856)));
      _checked_ptr_1<int> _ptr__4868(_4868 ? _4868->raw() : nullptr,_4868 ? _4868->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4869 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4856)));
      _checked_ptr_1<int> _ptr__4869(_4869 ? _4869->raw() : nullptr,_4869 ? _4869->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4870 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4856)));
      _checked_ptr_1<int> _ptr__4870(_4870 ? _4870->raw() : nullptr,_4870 ? _4870->size(0) : 0);
      int _10850 = (int)0;
      int _10851 = _4856;
      for (int _4871 = _10850; _4871 < _10851; ++_4871)
      {
        {
          _4854->pop_expr();
          _ptr__4858[_4871] = mosek::fusion::p_WorkStack::_get_impl(_4854)->nd;
          _ptr__4859[_4871] = mosek::fusion::p_WorkStack::_get_impl(_4854)->shape_base;
          _ptr__4860[_4871] = mosek::fusion::p_WorkStack::_get_impl(_4854)->nelem;
          _ptr__4861[_4871] = mosek::fusion::p_WorkStack::_get_impl(_4854)->nnz;
          _ptr__4862[_4871] = mosek::fusion::p_WorkStack::_get_impl(_4854)->ncodeatom;
          int _10852;
          bool _10853 = mosek::fusion::p_WorkStack::_get_impl(_4854)->hassp;
          if (_10853)
          {
            _10852 = (int)1;
          }
          else
          {
            _10852 = (int)0;
          }
          _ptr__4863[_4871] = _10852;
          _ptr__4864[_4871] = mosek::fusion::p_WorkStack::_get_impl(_4854)->ptr_base;
          _ptr__4866[_4871] = mosek::fusion::p_WorkStack::_get_impl(_4854)->sp_base;
          _ptr__4865[_4871] = mosek::fusion::p_WorkStack::_get_impl(_4854)->nidxs_base;
          _ptr__4867[_4871] = mosek::fusion::p_WorkStack::_get_impl(_4854)->cof_base;
          _ptr__4868[_4871] = mosek::fusion::p_WorkStack::_get_impl(_4854)->code_base;
          _ptr__4869[_4871] = mosek::fusion::p_WorkStack::_get_impl(_4854)->codeptr_base;
          _ptr__4870[_4871] = mosek::fusion::p_WorkStack::_get_impl(_4854)->cconst_base;
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _4872 = mosek::fusion::p_WorkStack::_get_impl(_4854)->i32;
      _checked_ptr_1<int> _ptr__4872(_4872 ? _4872->raw() : nullptr,_4872 ? _4872->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4873 = mosek::fusion::p_WorkStack::_get_impl(_4854)->i64;
      _checked_ptr_1<long long> _ptr__4873(_4873 ? _4873->raw() : nullptr,_4873 ? _4873->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4874 = mosek::fusion::p_WorkStack::_get_impl(_4854)->f64;
      _checked_ptr_1<double> _ptr__4874(_4874 ? _4874->raw() : nullptr,_4874 ? _4874->size(0) : 0);
      int _4875 = _ptr__4858[(int)0];
      int _4876 = _ptr__4859[(int)0];
      bool _4877 = (_ptr__4863[(int)0] == (int)0);
      bool _4878 = false;
      int _10854 = (int)1;
      int _10855 = _4856;
      for (int _4879 = _10854; _4879 < _10855; ++_4879)
      {
        {
          _4878 = (_4878 || ((dim != _4879) && (_ptr__4858[_4879] != _4875)));
          if ((!_4878))
          {
            {
              int _10856 = (int)0;
              int _10857 = dim;
              for (int _4880 = _10856; _4880 < _10857; ++_4880)
              {
                {
                  _4878 = (_4878 || (_ptr__4872[safe_add( _4876,_4880 )] != _ptr__4872[safe_add( _ptr__4859[_4879],_4880 )]));
                }
              }
            }
          }
          {}
          if ((!_4878))
          {
            {
              int _10858 = safe_add( dim,(int)1 );
              int _10859 = _4875;
              for (int _4881 = _10858; _4881 < _10859; ++_4881)
              {
                {
                  _4878 = (_4878 || (_ptr__4872[safe_add( _4876,_4881 )] != _ptr__4872[safe_add( _ptr__4859[_4879],_4881 )]));
                }
              }
            }
          }
          {}
          _4877 = (_4877 && ((int)0 == _ptr__4863[_4879]));
        }
      }
      if (_4878)
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression dimensions"));
        }
      }
      {}
      int _4882 = (int)0;
      if ((dim < _4875))
      {
        {
          int _10860 = (int)0;
          int _10861 = _4856;
          for (int _4883 = _10860; _4883 < _10861; ++_4883)
          {
            {
              _4882 += _ptr__4872[safe_add( _ptr__4859[_4883],dim )];
            }
          }
        }
      }
      else
      {
        {
          _4882 = _4856;
        }
      }
      int _10862;
      bool _10863 = (dim < _4875);
      if (_10863)
      {
        _10862 = _4875;
      }
      else
      {
        _10862 = safe_add( _4875,(int)1 );
      }
      int _4884 = _10862;
      if ((_4884 != _pubthis->getND()))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Mismatching dimensions"));
        }
      }
      {}
      int _4885 = (int)0;
      int _4886 = (int)0;
      int _4887 = (int)0;
      bool _4888 = false;
      {
        int _10864 = (int)0;
        int _10865 = _4856;
        for (int _4889 = _10864; _4889 < _10865; ++_4889)
        {
          {
            _4888 = (_4888 || (_ptr__4862[_4889] > (int)0));
          }
        }
        int _10866 = (int)0;
        int _10867 = _4856;
        for (int _4890 = _10866; _4890 < _10867; ++_4890)
        {
          {
            _4887 += _ptr__4861[_4890];
          }
        }
        int _10868 = (int)0;
        int _10869 = _4856;
        for (int _4891 = _10868; _4891 < _10869; ++_4891)
        {
          {
            _4886 += _ptr__4860[_4891];
          }
        }
        if (_4888)
        {
          {
            int _10870 = (int)0;
            int _10871 = _4856;
            for (int _4892 = _10870; _4892 < _10871; ++_4892)
            {
              {
                int _10872;
                bool _10873 = (_ptr__4862[_4892] > (int)0);
                if (_10873)
                {
                  _10872 = _ptr__4862[_4892];
                }
                else
                {
                  _10872 = _ptr__4861[_4892];
                }
                _4885 += _10872;
              }
            }
          }
        }
        {}
      }
      int _4893 = (int)1;
      int _10874 = (int)0;
      int _10875 = dim;
      for (int _4894 = _10874; _4894 < _10875; ++_4894)
      {
        {
          _4893 *= _ptr__4872[safe_add( _4876,_4894 )];
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _10876;
      bool _10877 = (dim < _4875);
      if (_10877)
      {
        std::vector<int> _10878;
        for (int _4896 = (int)0, _10879 = _4856; _4896 < _10879 ; ++_4896)
        {
          _10878.push_back(_ptr__4872[safe_add( _ptr__4859[_4896],dim )]);
        }
        auto _10880 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10878.size()),_10878.begin(),_10878.end()));
        _10876 = _10880;
      }
      else
      {
        std::vector<int> _10881;
        for (int _4897 = (int)0, _10882 = _4856; _4897 < _10882 ; ++_4897)
        {
          _10881.push_back((int)1);
        }
        auto _10883 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10881.size()),_10881.begin(),_10881.end()));
        _10876 = _10883;
      }
      std::shared_ptr< monty::ndarray< int,1 > > _4895 = _10876;
      _checked_ptr_1<int> _ptr__4895(_4895 ? _4895->raw() : nullptr,_4895 ? _4895->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4898 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4856)));
      _checked_ptr_1<int> _ptr__4898(_4898 ? _4898->raw() : nullptr,_4898 ? _4898->size(0) : 0);
      _ptr__4898[(int)0] = (int)0;
      int _10884 = (int)1;
      int _10885 = _4856;
      for (int _4899 = _10884; _4899 < _10885; ++_4899)
      {
        {
          _ptr__4898[_4899] = safe_add( _ptr__4898[(_4899 - (int)1)],_ptr__4895[(_4899 - (int)1)] );
        }
      }
      int _4900 = (int)0;
      int _10886 = (int)0;
      int _10887 = _4856;
      for (int _4901 = _10886; _4901 < _10887; ++_4901)
      {
        {
          _4900 += _ptr__4895[_4901];
        }
      }
      int _4902 = (int)1;
      int _10888 = safe_add( dim,(int)1 );
      int _10889 = _4875;
      for (int _4903 = _10888; _4903 < _10889; ++_4903)
      {
        {
          _4902 *= _ptr__4872[safe_add( _4876,_4903 )];
        }
      }
      if (_4877)
      {
        {
          _4853->alloc_expr(_4884,_4886,_4887,false,_4885);
          int _4904 = mosek::fusion::p_WorkStack::_get_impl(_4853)->ptr_base;
          int _4905 = mosek::fusion::p_WorkStack::_get_impl(_4853)->shape_base;
          int _4906 = mosek::fusion::p_WorkStack::_get_impl(_4853)->nidxs_base;
          int _4907 = mosek::fusion::p_WorkStack::_get_impl(_4853)->cof_base;
          int _4908 = mosek::fusion::p_WorkStack::_get_impl(_4853)->code_base;
          int _4909 = mosek::fusion::p_WorkStack::_get_impl(_4853)->codeptr_base;
          int _4910 = mosek::fusion::p_WorkStack::_get_impl(_4853)->cconst_base;
          std::shared_ptr< monty::ndarray< int,1 > > _4911 = mosek::fusion::p_WorkStack::_get_impl(_4853)->i32;
          _checked_ptr_1<int> _ptr__4911(_4911 ? _4911->raw() : nullptr,_4911 ? _4911->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _4912 = mosek::fusion::p_WorkStack::_get_impl(_4853)->i64;
          _checked_ptr_1<long long> _ptr__4912(_4912 ? _4912->raw() : nullptr,_4912 ? _4912->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _4913 = mosek::fusion::p_WorkStack::_get_impl(_4853)->f64;
          _checked_ptr_1<double> _ptr__4913(_4913 ? _4913->raw() : nullptr,_4913 ? _4913->size(0) : 0);
          int _10890;
          bool _10891 = (_4885 > (int)0);
          if (_10891)
          {
            _10890 = _4855->alloci32(safe_add( _4886,(int)1 ));
          }
          else
          {
            _10890 = (-(int)9999);
          }
          int _4914 = _10890;
          std::shared_ptr< monty::ndarray< int,1 > > _4915 = mosek::fusion::p_WorkStack::_get_impl(_4855)->i32;
          _checked_ptr_1<int> _ptr__4915(_4915 ? _4915->raw() : nullptr,_4915 ? _4915->size(0) : 0);
          int _10892 = (int)0;
          int _10893 = _4875;
          for (int _4916 = _10892; _4916 < _10893; ++_4916)
          {
            {
              _ptr__4911[safe_add( _4905,_4916 )] = _ptr__4872[safe_add( _4876,_4916 )];
            }
          }
          _ptr__4911[safe_add( _4905,dim )] = _4882;
          {
            int _4917 = (int)0;
            int _4918 = (int)0;
            int _4919 = (int)0;
            _ptr__4911[_4904] = (int)0;
            if (_4888)
            {
              {
                _ptr__4911[_4909] = (int)0;
              }
            }
            {}
            int _10894 = (int)0;
            int _10895 = _4893;
            for (int _4920 = _10894; _4920 < _10895; ++_4920)
            {
              {
                int _10896 = (int)0;
                int _10897 = _4856;
                for (int _4921 = _10896; _4921 < _10897; ++_4921)
                {
                  {
                    int _10898 = (int)0;
                    int _10899 = _ptr__4895[_4921];
                    for (int _4922 = _10898; _4922 < _10899; ++_4922)
                    {
                      {
                        int _10900 = (int)0;
                        int _10901 = _4902;
                        for (int _4923 = _10900; _4923 < _10901; ++_4923)
                        {
                          {
                            int _4924 = safe_add( safe_add( safe_mul( safe_mul( _4920,_ptr__4895[_4921] ),_4902 ),safe_mul( _4922,_4902 ) ),_4923 );
                            int _10902 = _ptr__4872[safe_add( _ptr__4864[_4921],_4924 )];
                            int _10903 = _ptr__4872[safe_add( safe_add( _ptr__4864[_4921],_4924 ),(int)1 )];
                            for (int _4925 = _10902; _4925 < _10903; ++_4925)
                            {
                              {
                                _ptr__4912[safe_add( _4906,_4919 )] = _ptr__4873[safe_add( _ptr__4865[_4921],_4925 )];
                                _ptr__4913[safe_add( _4907,_4919 )] = _ptr__4874[safe_add( _ptr__4867[_4921],_4925 )];
                                if ((_ptr__4862[_4921] > (int)0))
                                {
                                  {
                                    int _10904 = _ptr__4872[safe_add( _ptr__4869[_4921],_4925 )];
                                    int _10905 = _ptr__4872[safe_add( safe_add( _ptr__4869[_4921],_4925 ),(int)1 )];
                                    for (int _4926 = _10904; _4926 < _10905; ++_4926)
                                    {
                                      {
                                        _ptr__4911[safe_add( _4908,_4917 )] = _ptr__4872[safe_add( _ptr__4868[_4921],_4926 )];
                                        _ptr__4913[safe_add( _4910,_4917 )] = _ptr__4874[safe_add( _ptr__4870[_4921],_4926 )];
                                        ++ _4917;
                                      }
                                    }
                                    _ptr__4911[safe_add( safe_add( _4909,_4919 ),(int)1 )] = _4917;
                                  }
                                }
                                else if(_4888)
                                {
                                  {
                                    _ptr__4911[safe_add( _4908,_4917 )] = 2;
                                    _ptr__4913[safe_add( _4910,_4917 )] = 0.0;
                                    ++ _4917;
                                    _ptr__4911[safe_add( safe_add( _4909,_4919 ),(int)1 )] = _4917;
                                  }
                                }
                                {}
                                ++ _4919;
                              }
                            }
                            _ptr__4911[safe_add( safe_add( _4904,_4918 ),(int)1 )] = _4919;
                            ++ _4918;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        {
          int _4927 = (int)1;
          int _10906 = (int)0;
          int _10907 = dim;
          for (int _4928 = _10906; _4928 < _10907; ++_4928)
          {
            {
              _4927 *= _ptr__4872[safe_add( _4876,_4928 )];
            }
          }
          _4927 *= _4882;
          int _10908 = safe_add( dim,(int)1 );
          int _10909 = _4875;
          for (int _4929 = _10908; _4929 < _10909; ++_4929)
          {
            {
              _4927 *= _ptr__4872[safe_add( _4876,_4929 )];
            }
          }
          bool _4930 = (_4886 < _4927);
          _4853->alloc_expr(_4884,_4886,_4887,_4930,_4885);
          int _4931 = mosek::fusion::p_WorkStack::_get_impl(_4853)->ptr_base;
          int _4932 = mosek::fusion::p_WorkStack::_get_impl(_4853)->nidxs_base;
          int _10910;
          bool _10911 = _4930;
          if (_10911)
          {
            _10910 = mosek::fusion::p_WorkStack::_get_impl(_4853)->sp_base;
          }
          else
          {
            _10910 = _4853->alloci64(_4886);
          }
          int _4933 = _10910;
          int _4934 = mosek::fusion::p_WorkStack::_get_impl(_4853)->cof_base;
          int _4935 = mosek::fusion::p_WorkStack::_get_impl(_4853)->code_base;
          int _4936 = mosek::fusion::p_WorkStack::_get_impl(_4853)->codeptr_base;
          int _4937 = mosek::fusion::p_WorkStack::_get_impl(_4853)->cconst_base;
          int _4938 = mosek::fusion::p_WorkStack::_get_impl(_4853)->shape_base;
          int _10912 = (int)0;
          int _10913 = _4875;
          for (int _4939 = _10912; _4939 < _10913; ++_4939)
          {
            {
              ((*mosek::fusion::p_WorkStack::_get_impl(_4853)->i32)(safe_add( _4938,_4939 ))) = _ptr__4872[safe_add( _4876,_4939 )];
            }
          }
          ((*mosek::fusion::p_WorkStack::_get_impl(_4853)->i32)(safe_add( _4938,dim ))) = _4882;
          std::shared_ptr< monty::ndarray< int,1 > > _4940 = mosek::fusion::p_WorkStack::_get_impl(_4853)->i32;
          _checked_ptr_1<int> _ptr__4940(_4940 ? _4940->raw() : nullptr,_4940 ? _4940->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _4941 = mosek::fusion::p_WorkStack::_get_impl(_4853)->i64;
          _checked_ptr_1<long long> _ptr__4941(_4941 ? _4941->raw() : nullptr,_4941 ? _4941->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _4942 = mosek::fusion::p_WorkStack::_get_impl(_4853)->f64;
          _checked_ptr_1<double> _ptr__4942(_4942 ? _4942->raw() : nullptr,_4942 ? _4942->size(0) : 0);
          if ((dim == (int)0))
          {
            {
              int _4943 = (int)0;
              int _4944 = (int)0;
              int _4945 = (int)0;
              long long _4946 = (long long)0;
              _ptr__4940[_4931] = (int)0;
              if ((_4885 > (int)0))
              {
                {
                  _ptr__4940[_4936] = (int)0;
                }
              }
              {}
              int _10914 = (int)0;
              int _10915 = _4856;
              for (int _4947 = _10914; _4947 < _10915; ++_4947)
              {
                {
                  int _10916 = (int)0;
                  int _10917 = _ptr__4860[_4947];
                  for (int _4948 = _10916; _4948 < _10917; ++_4948)
                  {
                    {
                      int _10918 = _ptr__4872[safe_add( _ptr__4864[_4947],_4948 )];
                      int _10919 = _ptr__4872[safe_add( safe_add( _ptr__4864[_4947],_4948 ),(int)1 )];
                      for (int _4949 = _10918; _4949 < _10919; ++_4949)
                      {
                        {
                          _ptr__4941[safe_add( _4932,_4944 )] = _ptr__4873[safe_add( _ptr__4865[_4947],_4949 )];
                          _ptr__4942[safe_add( _4934,_4944 )] = _ptr__4874[safe_add( _ptr__4867[_4947],_4949 )];
                          if ((_ptr__4862[_4947] > (int)0))
                          {
                            {
                              int _10920 = _ptr__4872[safe_add( _ptr__4869[_4947],_4949 )];
                              int _10921 = _ptr__4872[safe_add( safe_add( _ptr__4869[_4947],_4949 ),(int)1 )];
                              for (int _4950 = _10920; _4950 < _10921; ++_4950)
                              {
                                {
                                  _ptr__4940[safe_add( _4935,_4943 )] = _ptr__4872[safe_add( _ptr__4868[_4947],_4950 )];
                                  _ptr__4942[safe_add( _4937,_4943 )] = _ptr__4874[safe_add( _ptr__4870[_4947],_4950 )];
                                  ++ _4943;
                                }
                              }
                              _ptr__4940[safe_add( safe_add( _4936,_4944 ),(int)1 )] = _4943;
                            }
                          }
                          else if((_4885 > (int)0))
                          {
                            {
                              _ptr__4940[safe_add( _4935,_4943 )] = 2;
                              _ptr__4942[safe_add( _4937,_4943 )] = 0.0;
                              ++ _4943;
                              _ptr__4940[safe_add( safe_add( _4936,_4944 ),(int)1 )] = _4943;
                            }
                          }
                          {}
                          ++ _4944;
                        }
                      }
                      _ptr__4940[safe_add( safe_add( _4931,_4945 ),(int)1 )] = _4944;
                      if ((_ptr__4863[_4947] != (int)0))
                      {
                        {
                          _ptr__4941[safe_add( _4933,_4945 )] = safe_add( _4946,_ptr__4873[safe_add( _ptr__4866[_4947],_4948 )] );
                        }
                      }
                      else
                      {
                        {
                          _ptr__4941[safe_add( _4933,_4945 )] = safe_add( _4946,_4948 );
                        }
                      }
                      ++ _4945;
                    }
                  }
                  long long _4951 = (long long)1;
                  int _10922 = (int)0;
                  int _10923 = _4875;
                  for (int _4952 = _10922; _4952 < _10923; ++_4952)
                  {
                    {
                      _4951 *= _ptr__4872[safe_add( _ptr__4859[_4947],_4952 )];
                    }
                  }
                  _4946 += _4951;
                }
              }
            }
          }
          else
          {
            {
              int _4953 = (int)0;
              int _10924 = (int)0;
              int _10925 = _4884;
              for (int _4954 = _10924; _4954 < _10925; ++_4954)
              {
                {
                  if ((_4953 < _ptr__4940[safe_add( _4938,_4954 )]))
                  {
                    {
                      _4953 = _ptr__4940[safe_add( _4938,_4954 )];
                    }
                  }
                  {}
                }
              }
              int _4955 = _4855->alloci64(_4886);
              int _4956 = _4855->alloci32(_4886);
              int _4957 = _4855->alloci32(_4886);
              int _4958 = _4855->alloci32(_4886);
              int _4959 = _4855->alloci32(_4886);
              int _4960 = _4855->alloci32(safe_add( _4953,(int)1 ));
              std::shared_ptr< monty::ndarray< int,1 > > _4961 = mosek::fusion::p_WorkStack::_get_impl(_4855)->i32;
              _checked_ptr_1<int> _ptr__4961(_4961 ? _4961->raw() : nullptr,_4961 ? _4961->size(0) : 0);
              std::shared_ptr< monty::ndarray< long long,1 > > _4962 = mosek::fusion::p_WorkStack::_get_impl(_4855)->i64;
              _checked_ptr_1<long long> _ptr__4962(_4962 ? _4962->raw() : nullptr,_4962 ? _4962->size(0) : 0);
              {
                int _4963 = (int)0;
                int _10926 = (int)0;
                int _10927 = _4856;
                for (int _4964 = _10926; _4964 < _10927; ++_4964)
                {
                  {
                    int _4965 = _ptr__4895[_4964];
                    int _4966 = safe_mul( _4965,_4902 );
                    int _4967 = _4902;
                    if ((_ptr__4863[_4964] != (int)0))
                    {
                      {
                        int _10928 = (int)0;
                        int _10929 = _ptr__4860[_4964];
                        for (int _4968 = _10928; _4968 < _10929; ++_4968)
                        {
                          {
                            long long _4969 = (_ptr__4873[safe_add( _ptr__4866[_4964],_4968 )] / _4966);
                            long long _4970 = ((_ptr__4873[safe_add( _ptr__4866[_4964],_4968 )] / _4967) % _4965);
                            long long _4971 = (_ptr__4873[safe_add( _ptr__4866[_4964],_4968 )] % _4902);
                            _ptr__4962[safe_add( _4955,_4963 )] = safe_add( safe_mul( safe_add( safe_add( safe_mul( _4969,_4882 ),_4970 ),_ptr__4898[_4964] ),_4902 ),_4971 );
                            _ptr__4961[safe_add( _4956,_4963 )] = _4964;
                            _ptr__4961[safe_add( _4957,_4963 )] = _4968;
                            ++ _4963;
                          }
                        }
                      }
                    }
                    else
                    {
                      {
                        int _10930 = (int)0;
                        int _10931 = _ptr__4860[_4964];
                        for (int _4972 = _10930; _4972 < _10931; ++_4972)
                        {
                          {
                            long long _4973 = ((long long)_4972 / _4966);
                            long long _4974 = (((long long)_4972 / _4967) % _4965);
                            long long _4975 = ((long long)_4972 % _4902);
                            _ptr__4962[safe_add( _4955,_4963 )] = safe_add( safe_mul( safe_add( safe_add( safe_mul( _4973,_4882 ),_4974 ),_ptr__4898[_4964] ),_4902 ),_4975 );
                            _ptr__4961[safe_add( _4956,_4963 )] = _4964;
                            _ptr__4961[safe_add( _4957,_4963 )] = _4972;
                            ++ _4963;
                          }
                        }
                      }
                    }
                  }
                }
              }
              {
                std::shared_ptr< monty::ndarray< long long,1 > > _4976 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4884)));
                _checked_ptr_1<long long> _ptr__4976(_4976 ? _4976->raw() : nullptr,_4976 ? _4976->size(0) : 0);
                _ptr__4976[(_4884 - (int)1)] = (int)1;
                int _10932 = (int)1;
                int _10933 = _4884;
                for (int _4977 = _10932; _4977 < _10933; ++_4977)
                {
                  {
                    _ptr__4976[((_4884 - _4977) - (int)1)] = safe_mul( _ptr__4976[(_4884 - _4977)],_ptr__4940[(safe_add( _4938,_4884 ) - _4977)] );
                  }
                }
                int _10934 = (int)0;
                int _10935 = _4886;
                for (int _4978 = _10934; _4978 < _10935; ++_4978)
                {
                  {
                    _ptr__4961[safe_add( _4958,_4978 )] = _4978;
                  }
                }
                int _10936 = (int)0;
                int _10937 = _4884;
                for (int _4979 = _10936; _4979 < _10937; ++_4979)
                {
                  {
                    int _4980 = ((_4884 - _4979) - (int)1);
                    int _4981 = _ptr__4940[safe_add( _4938,_4980 )];
                    int _10938 = (int)0;
                    int _10939 = safe_add( _4981,(int)1 );
                    for (int _4982 = _10938; _4982 < _10939; ++_4982)
                    {
                      {
                        _ptr__4961[safe_add( _4960,_4982 )] = (int)0;
                      }
                    }
                    int _10940 = (int)0;
                    int _10941 = _4886;
                    for (int _4983 = _10940; _4983 < _10941; ++_4983)
                    {
                      {
                        int _4984 = _ptr__4961[safe_add( _4958,_4983 )];
                        long long _4985 = ((_ptr__4962[safe_add( _4955,_4984 )] / _ptr__4976[_4980]) % _4981);
                        ++ _ptr__4961[safe_add( safe_add( _4960,_4985 ),(int)1 )];
                      }
                    }
                    {
                      int _10942 = (int)0;
                      int _10943 = _4981;
                      for (int _4986 = _10942; _4986 < _10943; ++_4986)
                      {
                        {
                          _ptr__4961[safe_add( safe_add( _4960,_4986 ),(int)1 )] += _ptr__4961[safe_add( _4960,_4986 )];
                        }
                      }
                      int _10944 = (int)0;
                      int _10945 = _4886;
                      for (int _4987 = _10944; _4987 < _10945; ++_4987)
                      {
                        {
                          int _4988 = _ptr__4961[safe_add( _4958,_4987 )];
                          long long _4989 = ((_ptr__4962[safe_add( _4955,_4988 )] / _ptr__4976[_4980]) % _4981);
                          _ptr__4961[safe_add( _4959,_ptr__4961[safe_add( _4960,_4989 )] )] = _4988;
                          ++ _ptr__4961[safe_add( _4960,_4989 )];
                        }
                      }
                    }
                    int _4990 = _4958;
                    _4958 = _4959;
                    _4959 = _4990;
                  }
                }
              }
              {
                int _4991 = (int)0;
                int _4992 = (int)0;
                _ptr__4940[_4931] = (int)0;
                if ((_4885 > (int)0))
                {
                  {
                    _ptr__4940[_4936] = (int)0;
                  }
                }
                {}
                int _10946 = (int)0;
                int _10947 = _4886;
                for (int _4993 = _10946; _4993 < _10947; ++_4993)
                {
                  {
                    int _4994 = _ptr__4961[safe_add( _4958,_4993 )];
                    int _4995 = _ptr__4961[safe_add( _4956,_4994 )];
                    int _4996 = _ptr__4961[safe_add( _4957,_4994 )];
                    int _10948 = _ptr__4872[safe_add( _ptr__4864[_4995],_4996 )];
                    int _10949 = _ptr__4872[safe_add( safe_add( _ptr__4864[_4995],_4996 ),(int)1 )];
                    for (int _4997 = _10948; _4997 < _10949; ++_4997)
                    {
                      {
                        _ptr__4941[safe_add( _4932,_4992 )] = _ptr__4873[safe_add( _ptr__4865[_4995],_4997 )];
                        _ptr__4942[safe_add( _4934,_4992 )] = _ptr__4874[safe_add( _ptr__4867[_4995],_4997 )];
                        if ((_ptr__4862[_4995] > (int)0))
                        {
                          {
                            int _10950 = _ptr__4872[safe_add( _ptr__4869[_4995],_4997 )];
                            int _10951 = _ptr__4872[safe_add( safe_add( _ptr__4869[_4995],_4997 ),(int)1 )];
                            for (int _4998 = _10950; _4998 < _10951; ++_4998)
                            {
                              {
                                _ptr__4940[safe_add( _4935,_4991 )] = _ptr__4872[safe_add( _ptr__4868[_4995],_4998 )];
                                _ptr__4942[safe_add( _4937,_4991 )] = _ptr__4874[safe_add( _ptr__4870[_4995],_4998 )];
                                ++ _4991;
                              }
                            }
                            _ptr__4940[safe_add( safe_add( _4936,_4992 ),(int)1 )] = _4991;
                          }
                        }
                        else if(_4888)
                        {
                          {
                            _ptr__4940[safe_add( _4935,_4991 )] = 2;
                            _ptr__4942[safe_add( _4937,_4991 )] = 0.0;
                            ++ _4991;
                            _ptr__4940[safe_add( safe_add( _4936,_4992 ),(int)1 )] = _4991;
                          }
                        }
                        {}
                        ++ _4992;
                      }
                    }
                    _ptr__4940[safe_add( safe_add( _4931,_4993 ),(int)1 )] = _4992;
                    _ptr__4941[safe_add( _4933,_4993 )] = _ptr__4962[safe_add( _4955,_4994 )];
                  }
                }
              }
            }
          }
          if ((!_4930))
          {
            {
              _4853->popi64(_4886);
            }
          }
          {}
        }
      }
    }
  }
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprStack::getshape(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _4999,int _5000){
  if (((int)((_4999)->size(0)) == (int)0))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Cannot stack empty list"));
    }
  }
  else if(((int)((_4999)->size(0)) == (int)1))
  {
    {
      return ((*_4999)((int)0))->getShape();
    }
  }
  else
  {
    {
      std::vector<std::shared_ptr< monty::ndarray< int,1 > >> _10952;
      for (int _5002 = (int)0, _10953 = (int)((_4999)->size(0)); _5002 < _10953 ; ++_5002)
      {
        _10952.push_back(((*_4999)(_5002))->getShape());
      }
      auto _10954 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 >(monty::shape(_10952.size()),_10952.begin(),_10952.end()));
      std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _5001 = _10954;
      std::shared_ptr< monty::ndarray< int,1 > > _5003 = ((*_5001)((int)0));
      _checked_ptr_1<int> _ptr__5003(_5003 ? _5003->raw() : nullptr,_5003 ? _5003->size(0) : 0);
      int _5004 = (int)((_5003)->size(0));
      int _10955 = (int)1;
      int _10956 = (int)((_5001)->size(0));
      for (int _5005 = _10955; _5005 < _10956; ++_5005)
      {
        {
          if ((_5004 != (int)((((*_5001)(_5005)))->size(0))))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression dimensions"));
            }
          }
          {}
          int _10957 = (int)0;
          int _10958 = _5000;
          for (int _5006 = _10957; _5006 < _10958; ++_5006)
          {
            {
              if ((_ptr__5003[_5006] != ((*((*_5001)(_5005)))(_5006))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("mismatching expression dimensions"));
                }
              }
              {}
            }
          }
          int _10959 = safe_add( _5000,(int)1 );
          int _10960 = _5004;
          for (int _5007 = _10959; _5007 < _10960; ++_5007)
          {
            {
              if ((_ptr__5003[_5007] != ((*((*_5001)(_5005)))(_5007))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("mismatching expression dimensions"));
                }
              }
              {}
            }
          }
        }
      }
      if ((_5000 == _5004))
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _5008 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _5004,(int)1 ))));
          _checked_ptr_1<int> _ptr__5008(_5008 ? _5008->raw() : nullptr,_5008 ? _5008->size(0) : 0);
          int _10961 = (int)0;
          int _10962 = _5004;
          for (int _5009 = _10961; _5009 < _10962; ++_5009)
          {
            {
              _ptr__5008[_5009] = _ptr__5003[_5009];
            }
          }
          _ptr__5008[_5004] = (int)((_5001)->size(0));
          return _5008;
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _5010 = _5003;
          _checked_ptr_1<int> _ptr__5010(_5010 ? _5010->raw() : nullptr,_5010 ? _5010->size(0) : 0);
          int _10963 = (int)1;
          int _10964 = (int)((_5001)->size(0));
          for (int _5011 = _10963; _5011 < _10964; ++_5011)
          {
            {
              _ptr__5010[_5000] += ((*((*_5001)(_5011)))(_5000));
            }
          }
          return _5010;
        }
      }
    }
  }
}
std::string mosek::fusion::ExprStack :: toString() { return mosek::fusion::p_ExprStack::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprStack::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _5012 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprStack(dim="))->__mosek_2fusion_2Utils_2StringBuffer__a(dim)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",["))->__mosek_2fusion_2Utils_2StringBuffer__a(((*exprs)((int)0))->toString());
  int _10965 = (int)1;
  int _10966 = (int)((exprs)->size(0));
  for (int _5013 = _10965; _5013 < _10966; ++_5013)
  {
    {
      _5012->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*exprs)(_5013))->toString());
    }
  }
  _5012->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("])"));
  return _5012->toString();
}
void mosek::fusion::p_ExprStack::destroy(){exprs.reset();}void mosek::fusion::ExprStack::destroy() { mosek::fusion::p_ExprStack::_get_impl(this)->destroy(); }mosek::fusion::ExprInner::ExprInner(mosek::fusion::p_ExprInner *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprInner()" << this << std::endl; */ }mosek::fusion::ExprInner::~ExprInner() {  /* std::cout << "~ExprInner()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprInner::p_ExprInner  (::mosek::fusion::ExprInner * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprInner::t mosek::fusion::p_ExprInner::_new_ExprInner  (monty::rc_ptr< ::mosek::fusion::Expression > _5014,    std::shared_ptr< monty::ndarray< long long,1 > > _5015,    std::shared_ptr< monty::ndarray< double,1 > > _5016){ return new mosek::fusion::ExprInner(_5014,_5015,_5016); }mosek::fusion::ExprInner::ExprInner  (monty::rc_ptr< ::mosek::fusion::Expression > _5014,    std::shared_ptr< monty::ndarray< long long,1 > > _5015,    std::shared_ptr< monty::ndarray< double,1 > > _5016) :    ExprInner(new mosek::fusion::p_ExprInner(this)){ mosek::fusion::p_ExprInner::_get_impl(this)->_initialize(_5014,_5015,_5016); }void mosek::fusion::p_ExprInner::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _5014,    std::shared_ptr< monty::ndarray< long long,1 > > _5015,    std::shared_ptr< monty::ndarray< double,1 > > _5016){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__5015(_5015 ? _5015->raw() : nullptr, _5015 ? _5015->size(0) : 0);
    _checked_ptr_1<double> _ptr__5016(_5016 ? _5016->raw() : nullptr, _5016 ? _5016->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))));
    mosek::fusion::p_ExprInner::_get_impl(::mosek::fusion::ExprInner::t(_pubthis))->expr = _5014;
    mosek::fusion::p_ExprInner::_get_impl(::mosek::fusion::ExprInner::t(_pubthis))->vsub = _5015;
    mosek::fusion::p_ExprInner::_get_impl(::mosek::fusion::ExprInner::t(_pubthis))->vcof = _5016;
    if (((int)((_5015)->size(0)) != (int)((_5016)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching lengths of vcof and vsub"));
      }
    }
    {}
    std::shared_ptr< monty::ndarray< int,1 > > _5017 = _5014->getShape();
    _checked_ptr_1<int> _ptr__5017(_5017 ? _5017->raw() : nullptr,_5017 ? _5017->size(0) : 0);
    long long _5018 = ::mosek::fusion::p_Set::size(_5017);
    bool _5019 = false;
    bool _5020 = false;
    {
      int _10967 = (int)1;
      int _10968 = (int)((_5015)->size(0));
      for (int _5021 = _10967; _5021 < _10968; ++_5021)
      {
        {
          if ((_ptr__5015[_5021] <= _ptr__5015[(_5021 - (int)1)]))
          {
            {
              _5019 = true;
            }
          }
          {}
        }
      }
      if (((int)((_5015)->size(0)) > (int)0))
      {
        {
          if (((_ptr__5015[(int)0] < (int)0) || (_ptr__5015[((int)((_5015)->size(0)) - (int)1)] > _5018)))
          {
            {
              _5020 = true;
            }
          }
          {}
        }
      }
      {}
    }
    if (_5019)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Unordered coefficcient subscripts"));
      }
    }
    {}
    if (_5020)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Coefficient subscript out of bounds"));
      }
    }
    {}
  }
}mosek::fusion::ExprInner::t mosek::fusion::p_ExprInner::_new_ExprInner  (monty::rc_ptr< ::mosek::fusion::Expression > _5022,    std::shared_ptr< monty::ndarray< double,1 > > _5023){ return new mosek::fusion::ExprInner(_5022,_5023); }mosek::fusion::ExprInner::ExprInner  (monty::rc_ptr< ::mosek::fusion::Expression > _5022,    std::shared_ptr< monty::ndarray< double,1 > > _5023) :    ExprInner(new mosek::fusion::p_ExprInner(this)){ mosek::fusion::p_ExprInner::_get_impl(this)->_initialize(_5022,_5023); }void mosek::fusion::p_ExprInner::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _5022,    std::shared_ptr< monty::ndarray< double,1 > > _5023){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__5023(_5023 ? _5023->raw() : nullptr, _5023 ? _5023->size(0) : 0);
    mosek::fusion::p_ExprInner::_initialize(_5022,::mosek::fusion::p_ExprInner::range((int)((_5023)->size(0))),_5023);
    std::shared_ptr< monty::ndarray< int,1 > > _5024 = _5022->getShape();
    _checked_ptr_1<int> _ptr__5024(_5024 ? _5024->raw() : nullptr,_5024 ? _5024->size(0) : 0);
    if ((((int)((_5024)->size(0)) != (int)1) || (_ptr__5024[(int)0] != (int)((_5023)->size(0)))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions of operands"));
      }
    }
    {}
  }
}mosek::fusion::ExprInner::t mosek::fusion::p_ExprInner::_new_ExprInner  (monty::rc_ptr< ::mosek::fusion::Expression > _5025,    std::shared_ptr< monty::ndarray< int,2 > > _5026,    std::shared_ptr< monty::ndarray< double,1 > > _5027){ return new mosek::fusion::ExprInner(_5025,_5026,_5027); }mosek::fusion::ExprInner::ExprInner  (monty::rc_ptr< ::mosek::fusion::Expression > _5025,    std::shared_ptr< monty::ndarray< int,2 > > _5026,    std::shared_ptr< monty::ndarray< double,1 > > _5027) :    ExprInner(new mosek::fusion::p_ExprInner(this)){ mosek::fusion::p_ExprInner::_get_impl(this)->_initialize(_5025,_5026,_5027); }void mosek::fusion::p_ExprInner::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _5025,    std::shared_ptr< monty::ndarray< int,2 > > _5026,    std::shared_ptr< monty::ndarray< double,1 > > _5027){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__5027(_5027 ? _5027->raw() : nullptr, _5027 ? _5027->size(0) : 0);
    mosek::fusion::p_ExprInner::_initialize(_5025,::mosek::fusion::p_ExprInner::convert(_5025->getShape(),_5026),_5027);
  }
}void mosek::fusion::ExprInner :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5028,monty::rc_ptr< ::mosek::fusion::WorkStack > _5029,monty::rc_ptr< ::mosek::fusion::WorkStack > _5030) { mosek::fusion::p_ExprInner::_get_impl(this)->eval(_5028,_5029,_5030); }void mosek::fusion::p_ExprInner::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5028,monty::rc_ptr< ::mosek::fusion::WorkStack > _5029,monty::rc_ptr< ::mosek::fusion::WorkStack > _5030){
  expr->eval(_5029,_5028,_5030);
  _5029->pop_expr();
  int _5031 = mosek::fusion::p_WorkStack::_get_impl(_5029)->nd;
  int _5032 = mosek::fusion::p_WorkStack::_get_impl(_5029)->nelem;
  int _5033 = mosek::fusion::p_WorkStack::_get_impl(_5029)->nnz;
  int _5034 = mosek::fusion::p_WorkStack::_get_impl(_5029)->ncodeatom;
  bool _5035 = mosek::fusion::p_WorkStack::_get_impl(_5029)->hassp;
  int _5036 = mosek::fusion::p_WorkStack::_get_impl(_5029)->shape_base;
  int _5037 = mosek::fusion::p_WorkStack::_get_impl(_5029)->ptr_base;
  int _5038 = mosek::fusion::p_WorkStack::_get_impl(_5029)->nidxs_base;
  int _5039 = mosek::fusion::p_WorkStack::_get_impl(_5029)->sp_base;
  int _5040 = mosek::fusion::p_WorkStack::_get_impl(_5029)->cof_base;
  int _5041 = mosek::fusion::p_WorkStack::_get_impl(_5029)->code_base;
  int _5042 = mosek::fusion::p_WorkStack::_get_impl(_5029)->codeptr_base;
  int _5043 = mosek::fusion::p_WorkStack::_get_impl(_5029)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _5044 = mosek::fusion::p_WorkStack::_get_impl(_5029)->i32;
  _checked_ptr_1<int> _ptr__5044(_5044 ? _5044->raw() : nullptr,_5044 ? _5044->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5045 = mosek::fusion::p_WorkStack::_get_impl(_5029)->i64;
  _checked_ptr_1<long long> _ptr__5045(_5045 ? _5045->raw() : nullptr,_5045 ? _5045->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5046 = mosek::fusion::p_WorkStack::_get_impl(_5029)->f64;
  _checked_ptr_1<double> _ptr__5046(_5046 ? _5046->raw() : nullptr,_5046 ? _5046->size(0) : 0);
  int _5047 = (int)0;
  if (_5035)
  {
    {
      int _5048 = (int)0;
      int _5049 = (int)0;
      while ( ((_5049 < (int)((vsub)->size(0))) && (_5048 < _5032)) )
      {
        {
          if ((_ptr__5045[safe_add( _5039,_5048 )] < ((*vsub)(_5049))))
          {
            {
              ++ _5048;
            }
          }
          else if((_ptr__5045[safe_add( _5039,_5048 )] > ((*vsub)(_5049))))
          {
            {
              ++ _5049;
            }
          }
          else
          {
            {
              _5047 += (_ptr__5044[safe_add( safe_add( _5037,_5048 ),(int)1 )] - _ptr__5044[safe_add( _5037,_5048 )]);
              ++ _5049;
              ++ _5048;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int _10969 = (int)0;
      int _10970 = (int)((vsub)->size(0));
      for (int _5050 = _10969; _5050 < _10970; ++_5050)
      {
        {
          _5047 += (_ptr__5044[safe_add( safe_add( _5037,((*vsub)(_5050)) ),(int)1 )] - _ptr__5044[safe_add( _5037,((*vsub)(_5050)) )]);
        }
      }
    }
  }
  int _10971;
  bool _10972 = (_5034 > (int)0);
  if (_10972)
  {
    _10971 = safe_add( _5034,safe_mul( (int)2,_5033 ) );
  }
  else
  {
    _10971 = (int)0;
  }
  int _5051 = _10971;
  _5028->alloc_expr((int)0,(int)1,_5047,false,_5051);
  int _5052 = mosek::fusion::p_WorkStack::_get_impl(_5028)->ptr_base;
  int _5053 = mosek::fusion::p_WorkStack::_get_impl(_5028)->nidxs_base;
  int _5054 = mosek::fusion::p_WorkStack::_get_impl(_5028)->cof_base;
  int _5055 = mosek::fusion::p_WorkStack::_get_impl(_5028)->code_base;
  int _5056 = mosek::fusion::p_WorkStack::_get_impl(_5028)->codeptr_base;
  int _5057 = mosek::fusion::p_WorkStack::_get_impl(_5028)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _5058 = mosek::fusion::p_WorkStack::_get_impl(_5028)->i32;
  _checked_ptr_1<int> _ptr__5058(_5058 ? _5058->raw() : nullptr,_5058 ? _5058->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5059 = mosek::fusion::p_WorkStack::_get_impl(_5028)->i64;
  _checked_ptr_1<long long> _ptr__5059(_5059 ? _5059->raw() : nullptr,_5059 ? _5059->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5060 = mosek::fusion::p_WorkStack::_get_impl(_5028)->f64;
  _checked_ptr_1<double> _ptr__5060(_5060 ? _5060->raw() : nullptr,_5060 ? _5060->size(0) : 0);
  _ptr__5058[_5052] = (int)0;
  _ptr__5058[safe_add( _5052,(int)1 )] = _5047;
  if ((_5051 > (int)0))
  {
    {
      _ptr__5058[_5056] = (int)0;
    }
  }
  {}
  int _5061 = (int)0;
  int _5062 = (int)0;
  if (_5035)
  {
    {
      int _5063 = (int)0;
      int _5064 = (int)0;
      while ( ((_5064 < (int)((vsub)->size(0))) && (_5063 < _5032)) )
      {
        {
          if ((_ptr__5045[safe_add( _5039,_5063 )] < ((*vsub)(_5064))))
          {
            {
              ++ _5063;
            }
          }
          else if((_ptr__5045[safe_add( _5039,_5063 )] > ((*vsub)(_5064))))
          {
            {
              ++ _5064;
            }
          }
          else
          {
            {
              int _5065 = _ptr__5044[safe_add( _5037,_5063 )];
              int _5066 = _ptr__5044[safe_add( safe_add( _5037,_5063 ),(int)1 )];
              int _10973 = _5065;
              int _10974 = _5066;
              for (int _5067 = _10973; _5067 < _10974; ++_5067)
              {
                {
                  _ptr__5059[safe_add( _5053,_5062 )] = _ptr__5045[safe_add( _5038,_5067 )];
                  _ptr__5060[safe_add( _5054,_5062 )] = (((*vcof)(_5064)) * _ptr__5046[safe_add( _5040,_5067 )]);
                  if ((_5051 > (int)0))
                  {
                    {
                      int _10975 = _ptr__5044[safe_add( _5042,_5067 )];
                      int _10976 = _ptr__5044[safe_add( safe_add( _5042,_5067 ),(int)1 )];
                      for (int _5068 = _10975; _5068 < _10976; ++_5068)
                      {
                        {
                          _ptr__5058[safe_add( _5055,_5061 )] = _ptr__5044[safe_add( _5041,_5068 )];
                          _ptr__5060[safe_add( _5057,_5061 )] = _ptr__5046[safe_add( _5043,_5068 )];
                          ++ _5061;
                        }
                      }
                      _ptr__5058[safe_add( _5055,_5061 )] = 2;
                      _ptr__5060[safe_add( _5057,_5061 )] = ((*vcof)(_5064));
                      ++ _5061;
                      _ptr__5058[safe_add( _5055,_5061 )] = 5;
                      ++ _5061;
                      _ptr__5058[safe_add( safe_add( _5056,_5062 ),(int)1 )] = _5061;
                    }
                  }
                  {}
                  ++ _5062;
                }
              }
              ++ _5064;
              ++ _5063;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int _10977 = (int)0;
      int _10978 = (int)((vsub)->size(0));
      for (int _5069 = _10977; _5069 < _10978; ++_5069)
      {
        {
          int _5070 = _ptr__5044[safe_add( _5037,((*vsub)(_5069)) )];
          int _5071 = _ptr__5044[safe_add( safe_add( _5037,((*vsub)(_5069)) ),(int)1 )];
          int _10979 = _5070;
          int _10980 = _5071;
          for (int _5072 = _10979; _5072 < _10980; ++_5072)
          {
            {
              _ptr__5059[safe_add( _5053,_5062 )] = _ptr__5045[safe_add( _5038,_5072 )];
              _ptr__5060[safe_add( _5054,_5062 )] = (((*vcof)(_5069)) * _ptr__5046[safe_add( _5040,_5072 )]);
              if ((_5051 > (int)0))
              {
                {
                  int _10981 = _ptr__5044[safe_add( _5042,_5072 )];
                  int _10982 = _ptr__5044[safe_add( safe_add( _5042,_5072 ),(int)1 )];
                  for (int _5073 = _10981; _5073 < _10982; ++_5073)
                  {
                    {
                      _ptr__5058[safe_add( _5055,_5061 )] = _ptr__5044[safe_add( _5041,_5073 )];
                      _ptr__5060[safe_add( _5057,_5061 )] = _ptr__5044[safe_add( _5043,_5073 )];
                      ++ _5061;
                    }
                  }
                  _ptr__5058[safe_add( _5055,_5061 )] = 2;
                  _ptr__5060[safe_add( _5057,_5061 )] = ((*vcof)(_5069));
                  ++ _5061;
                  _ptr__5058[safe_add( _5055,_5061 )] = 5;
                  ++ _5061;
                  _ptr__5058[safe_add( safe_add( _5056,_5062 ),(int)1 )] = _5061;
                }
              }
              {}
              ++ _5062;
            }
          }
        }
      }
    }
  }
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_ExprInner::range(int _5074){
  std::vector<long long> _10983;
  for (int _5075 = (int)0, _10984 = _5074; _5075 < _10984 ; ++_5075)
  {
    _10983.push_back(_5075);
  }
  auto _10985 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_10983.size()),_10983.begin(),_10983.end()));
  return _10985;
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_ExprInner::convert(std::shared_ptr< monty::ndarray< int,1 > > _5076,std::shared_ptr< monty::ndarray< int,2 > > _5077){
  _checked_ptr_1<int> _ptr__5076(_5076 ? _5076->raw() : nullptr, _5076 ? _5076->size(0) : 0);
  int _5078 = (int)((_5076)->size(0));
  std::shared_ptr< monty::ndarray< long long,1 > > _5079 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5078)));
  _checked_ptr_1<long long> _ptr__5079(_5079 ? _5079->raw() : nullptr,_5079 ? _5079->size(0) : 0);
  _ptr__5079[(_5078 - (int)1)] = (int)1;
  int _10986 = (int)1;
  int _10987 = _5078;
  for (int _5080 = _10986; _5080 < _10987; ++_5080)
  {
    {
      _ptr__5079[((_5078 - _5080) - (int)1)] = safe_mul( _ptr__5079[(_5078 - _5080)],_ptr__5076[(_5078 - _5080)] );
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _5081 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_5077)->size(0)))));
  _checked_ptr_1<long long> _ptr__5081(_5081 ? _5081->raw() : nullptr,_5081 ? _5081->size(0) : 0);
  int _10988 = (int)0;
  int _10989 = (int)((_5077)->size(0));
  for (int _5082 = _10988; _5082 < _10989; ++_5082)
  {
    {
      int _10990 = (int)0;
      int _10991 = _5078;
      for (int _5083 = _10990; _5083 < _10991; ++_5083)
      {
        {
          _ptr__5081[_5082] += safe_mul( _ptr__5079[_5083],((*_5077)(_5082,_5083)) );
        }
      }
    }
  }
  return _5081;
}
std::string mosek::fusion::ExprInner :: toString() { return mosek::fusion::p_ExprInner::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprInner::toString(){
  return std::string ("ExprInner()");
}
void mosek::fusion::p_ExprInner::destroy(){vcof.reset();vsub.reset();expr.reset();}void mosek::fusion::ExprInner::destroy() { mosek::fusion::p_ExprInner::_get_impl(this)->destroy(); }mosek::fusion::ExprMulDiagRight::ExprMulDiagRight(mosek::fusion::p_ExprMulDiagRight *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulDiagRight()" << this << std::endl; */ }mosek::fusion::ExprMulDiagRight::~ExprMulDiagRight() {  /* std::cout << "~ExprMulDiagRight()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulDiagRight::p_ExprMulDiagRight  (::mosek::fusion::ExprMulDiagRight * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulDiagRight::t mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight  (int _5084,    int _5085,    std::shared_ptr< monty::ndarray< int,1 > > _5086,    std::shared_ptr< monty::ndarray< int,1 > > _5087,    std::shared_ptr< monty::ndarray< double,1 > > _5088,    monty::rc_ptr< ::mosek::fusion::Expression > _5089,    int _5090){ return new mosek::fusion::ExprMulDiagRight(_5084,_5085,_5086,_5087,_5088,_5089,_5090); }mosek::fusion::ExprMulDiagRight::ExprMulDiagRight  (int _5084,    int _5085,    std::shared_ptr< monty::ndarray< int,1 > > _5086,    std::shared_ptr< monty::ndarray< int,1 > > _5087,    std::shared_ptr< monty::ndarray< double,1 > > _5088,    monty::rc_ptr< ::mosek::fusion::Expression > _5089,    int _5090) :    ExprMulDiagRight(new mosek::fusion::p_ExprMulDiagRight(this)){ mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->_initialize(_5084,_5085,_5086,_5087,_5088,_5089,_5090); }void mosek::fusion::p_ExprMulDiagRight::_initialize  (int _5084,    int _5085,    std::shared_ptr< monty::ndarray< int,1 > > _5086,    std::shared_ptr< monty::ndarray< int,1 > > _5087,    std::shared_ptr< monty::ndarray< double,1 > > _5088,    monty::rc_ptr< ::mosek::fusion::Expression > _5089,    int _5090){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5086(_5086 ? _5086->raw() : nullptr, _5086 ? _5086->size(0) : 0);
    _checked_ptr_1<int> _ptr__5087(_5087 ? _5087->raw() : nullptr, _5087 ? _5087->size(0) : 0);
    _checked_ptr_1<double> _ptr__5088(_5088 ? _5088->raw() : nullptr, _5088 ? _5088->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_5085)}));
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->mdim0 = _5084;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->mdim1 = _5085;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->msubi = _5086;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->msubj = _5087;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->mval = _5088;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->expr = _5089;
  }
}mosek::fusion::ExprMulDiagRight::t mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight  (int _5091,    int _5092,    std::shared_ptr< monty::ndarray< int,1 > > _5093,    std::shared_ptr< monty::ndarray< int,1 > > _5094,    std::shared_ptr< monty::ndarray< double,1 > > _5095,    monty::rc_ptr< ::mosek::fusion::Expression > _5096){ return new mosek::fusion::ExprMulDiagRight(_5091,_5092,_5093,_5094,_5095,_5096); }mosek::fusion::ExprMulDiagRight::ExprMulDiagRight  (int _5091,    int _5092,    std::shared_ptr< monty::ndarray< int,1 > > _5093,    std::shared_ptr< monty::ndarray< int,1 > > _5094,    std::shared_ptr< monty::ndarray< double,1 > > _5095,    monty::rc_ptr< ::mosek::fusion::Expression > _5096) :    ExprMulDiagRight(new mosek::fusion::p_ExprMulDiagRight(this)){ mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->_initialize(_5091,_5092,_5093,_5094,_5095,_5096); }void mosek::fusion::p_ExprMulDiagRight::_initialize  (int _5091,    int _5092,    std::shared_ptr< monty::ndarray< int,1 > > _5093,    std::shared_ptr< monty::ndarray< int,1 > > _5094,    std::shared_ptr< monty::ndarray< double,1 > > _5095,    monty::rc_ptr< ::mosek::fusion::Expression > _5096){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5093(_5093 ? _5093->raw() : nullptr, _5093 ? _5093->size(0) : 0);
    _checked_ptr_1<int> _ptr__5094(_5094 ? _5094->raw() : nullptr, _5094 ? _5094->size(0) : 0);
    _checked_ptr_1<double> _ptr__5095(_5095 ? _5095->raw() : nullptr, _5095 ? _5095->size(0) : 0);
    mosek::fusion::p_ExprMulDiagRight::_initialize(_5091,_5092,_5093,_5094,_5095,_5096,::mosek::fusion::p_ExprMulDiagRight::validate(_5091,_5092,_5093,_5094,_5095,_5096));
  }
}void mosek::fusion::ExprMulDiagRight :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5097,monty::rc_ptr< ::mosek::fusion::WorkStack > _5098,monty::rc_ptr< ::mosek::fusion::WorkStack > _5099) { mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->eval(_5097,_5098,_5099); }void mosek::fusion::p_ExprMulDiagRight::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5097,monty::rc_ptr< ::mosek::fusion::WorkStack > _5098,monty::rc_ptr< ::mosek::fusion::WorkStack > _5099){
  mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->expr->eval(_5098,_5097,_5099);
  _5098->pop_expr();
  int _5100 = mosek::fusion::p_WorkStack::_get_impl(_5098)->nd;
  int _5101 = mosek::fusion::p_WorkStack::_get_impl(_5098)->nnz;
  int _5102 = mosek::fusion::p_WorkStack::_get_impl(_5098)->nelem;
  int _5103 = mosek::fusion::p_WorkStack::_get_impl(_5098)->ncodeatom;
  bool _5104 = mosek::fusion::p_WorkStack::_get_impl(_5098)->hassp;
  int _5105 = mosek::fusion::p_WorkStack::_get_impl(_5098)->shape_base;
  int _5106 = mosek::fusion::p_WorkStack::_get_impl(_5098)->ptr_base;
  int _5107 = mosek::fusion::p_WorkStack::_get_impl(_5098)->sp_base;
  int _5108 = mosek::fusion::p_WorkStack::_get_impl(_5098)->nidxs_base;
  int _5109 = mosek::fusion::p_WorkStack::_get_impl(_5098)->cof_base;
  int _5110 = mosek::fusion::p_WorkStack::_get_impl(_5098)->codeptr_base;
  int _5111 = mosek::fusion::p_WorkStack::_get_impl(_5098)->code_base;
  int _5112 = mosek::fusion::p_WorkStack::_get_impl(_5098)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _5113 = mosek::fusion::p_WorkStack::_get_impl(_5098)->i32;
  _checked_ptr_1<int> _ptr__5113(_5113 ? _5113->raw() : nullptr,_5113 ? _5113->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5114 = mosek::fusion::p_WorkStack::_get_impl(_5098)->i64;
  _checked_ptr_1<long long> _ptr__5114(_5114 ? _5114->raw() : nullptr,_5114 ? _5114->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5115 = mosek::fusion::p_WorkStack::_get_impl(_5098)->f64;
  _checked_ptr_1<double> _ptr__5115(_5115 ? _5115->raw() : nullptr,_5115 ? _5115->size(0) : 0);
  int _5116 = _ptr__5113[_5105];
  int _5117 = _ptr__5113[safe_add( _5105,(int)1 )];
  int _5118 = (int)((mval)->size(0));
  int _5119 = _5099->alloci32(_5118);
  int _5120 = _5099->alloci32(safe_add( mdim1,(int)1 ));
  std::shared_ptr< monty::ndarray< int,1 > > _5121 = mosek::fusion::p_WorkStack::_get_impl(_5099)->i32;
  _checked_ptr_1<int> _ptr__5121(_5121 ? _5121->raw() : nullptr,_5121 ? _5121->size(0) : 0);
  {
    int _10992 = (int)0;
    int _10993 = safe_add( mdim1,(int)1 );
    for (int _5122 = _10992; _5122 < _10993; ++_5122)
    {
      {
        _ptr__5121[safe_add( _5120,_5122 )] = (int)0;
      }
    }
    int _10994 = (int)0;
    int _10995 = _5118;
    for (int _5123 = _10994; _5123 < _10995; ++_5123)
    {
      {
        ++ _ptr__5121[safe_add( safe_add( _5120,((*msubj)(_5123)) ),(int)1 )];
      }
    }
    int _10996 = (int)0;
    int _10997 = mdim1;
    for (int _5124 = _10996; _5124 < _10997; ++_5124)
    {
      {
        _ptr__5121[safe_add( safe_add( _5120,_5124 ),(int)1 )] += _ptr__5121[safe_add( _5120,_5124 )];
      }
    }
    int _10998 = (int)0;
    int _10999 = _5118;
    for (int _5125 = _10998; _5125 < _10999; ++_5125)
    {
      {
        _ptr__5121[safe_add( _5119,_ptr__5121[safe_add( _5120,((*msubj)(_5125)) )] )] = _5125;
        ++ _ptr__5121[safe_add( _5120,((*msubj)(_5125)) )];
      }
    }
    int _11000 = (int)0;
    int _11001 = mdim1;
    for (int _5126 = _11000; _5126 < _11001; ++_5126)
    {
      {
        _ptr__5121[(safe_add( _5120,mdim1 ) - _5126)] = _ptr__5121[((safe_add( _5120,mdim1 ) - _5126) - (int)1)];
      }
    }
    _ptr__5121[_5120] = (int)0;
  }
  int _5127 = (int)0;
  int _5128 = (int)0;
  int _5129 = (int)0;
  if ((!_5104))
  {
    {
      int _5130 = (int)0;
      while ( (_5130 < _5118) )
      {
        {
          int _5131 = ((*msubj)(_ptr__5121[safe_add( _5119,_5130 )]));
          int _5132 = _5130;
          while ( ((_5130 < _5118) && (_5131 == ((*msubj)(_ptr__5121[safe_add( _5119,_5130 )])))) )
          {
            {
              ++ _5130;
            }
          }
          int _11002 = _5132;
          int _11003 = _5130;
          for (int _5133 = _11002; _5133 < _11003; ++_5133)
          {
            {
              int _5134 = safe_add( safe_mul( ((*msubj)(_ptr__5121[safe_add( _5119,_5133 )])),_5117 ),((*msubi)(_ptr__5121[safe_add( _5119,_5133 )])) );
              _5128 += (_ptr__5113[safe_add( safe_add( _5106,_5134 ),(int)1 )] - _ptr__5113[safe_add( _5106,_5134 )]);
              if ((_5103 > (int)0))
              {
                {
                  _5127 += safe_add( (_ptr__5113[safe_add( _5110,_ptr__5113[safe_add( safe_add( _5106,_5134 ),(int)1 )] )] - _ptr__5113[safe_add( _5110,_ptr__5113[safe_add( _5106,_5134 )] )]),safe_mul( (int)2,(_ptr__5113[safe_add( safe_add( _5106,_5134 ),(int)1 )] - _ptr__5113[safe_add( _5106,_5134 )]) ) );
                }
              }
              {}
            }
          }
          ++ _5129;
        }
      }
    }
  }
  else
  {
    {
      int _5135 = (int)0;
      int _5136 = (int)0;
      int _11004 = (int)0;
      int _11005 = mdim1;
      for (int _5137 = _11004; _5137 < _11005; ++_5137)
      {
        {
          int _5138 = _5135;
          int _5139 = _5136;
          while ( ((_5135 < _5118) && (_5137 == ((*msubj)(_ptr__5121[safe_add( _5119,_5135 )])))) )
          {
            {
              ++ _5135;
            }
          }
          while ( ((_5136 < _5102) && (_5137 == (_ptr__5114[safe_add( _5107,_5136 )] / _5117))) )
          {
            {
              ++ _5136;
            }
          }
          int _5140 = _5138;
          int _5141 = _5139;
          int _5142 = (int)0;
          while ( ((_5141 < _5136) && (_5140 < _5135)) )
          {
            {
              if (((_ptr__5114[safe_add( _5107,_5141 )] % _5117) < ((*msubi)(_ptr__5121[safe_add( _5119,_5140 )]))))
              {
                {
                  ++ _5141;
                }
              }
              else if(((_ptr__5114[safe_add( _5107,_5141 )] % _5117) > ((*msubi)(_ptr__5121[safe_add( _5119,_5140 )]))))
              {
                {
                  ++ _5140;
                }
              }
              else
              {
                {
                  _5128 += (_ptr__5113[safe_add( safe_add( _5106,_5141 ),(int)1 )] - _ptr__5113[safe_add( _5106,_5141 )]);
                  if ((_5103 > (int)0))
                  {
                    {
                      _5127 += safe_add( (_ptr__5113[safe_add( _5110,_ptr__5113[safe_add( safe_add( _5106,_5141 ),(int)1 )] )] - _ptr__5113[safe_add( _5110,_ptr__5113[safe_add( _5106,_5141 )] )]),safe_mul( (int)2,(_ptr__5113[safe_add( safe_add( _5106,_5141 ),(int)1 )] - _ptr__5113[safe_add( _5106,_5141 )]) ) );
                    }
                  }
                  {}
                  ++ _5142;
                  ++ _5141;
                  ++ _5140;
                }
              }
            }
          }
          if ((_5142 > (int)0))
          {
            {
              ++ _5129;
            }
          }
          {}
        }
      }
    }
  }
  bool _5143 = (_5129 < _5116);
  _5097->alloc_expr((int)1,_5129,_5128,_5143,_5127);
  int _5144 = mosek::fusion::p_WorkStack::_get_impl(_5097)->ptr_base;
  int _5145 = mosek::fusion::p_WorkStack::_get_impl(_5097)->nidxs_base;
  int _11006;
  bool _11007 = _5143;
  if (_11007)
  {
    _11006 = mosek::fusion::p_WorkStack::_get_impl(_5097)->sp_base;
  }
  else
  {
    _11006 = _5097->alloci64(_5129);
  }
  int _5146 = _11006;
  int _5147 = mosek::fusion::p_WorkStack::_get_impl(_5097)->cof_base;
  int _5148 = mosek::fusion::p_WorkStack::_get_impl(_5097)->shape_base;
  int _5149 = mosek::fusion::p_WorkStack::_get_impl(_5097)->code_base;
  int _5150 = mosek::fusion::p_WorkStack::_get_impl(_5097)->codeptr_base;
  int _5151 = mosek::fusion::p_WorkStack::_get_impl(_5097)->cconst_base;
  std::shared_ptr< monty::ndarray< long long,1 > > _5152 = mosek::fusion::p_WorkStack::_get_impl(_5097)->i64;
  _checked_ptr_1<long long> _ptr__5152(_5152 ? _5152->raw() : nullptr,_5152 ? _5152->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5153 = mosek::fusion::p_WorkStack::_get_impl(_5097)->f64;
  _checked_ptr_1<double> _ptr__5153(_5153 ? _5153->raw() : nullptr,_5153 ? _5153->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5154 = mosek::fusion::p_WorkStack::_get_impl(_5097)->i32;
  _checked_ptr_1<int> _ptr__5154(_5154 ? _5154->raw() : nullptr,_5154 ? _5154->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5155 = mosek::fusion::p_WorkStack::_get_impl(_5099)->i32;
  _checked_ptr_1<int> _ptr__5155(_5155 ? _5155->raw() : nullptr,_5155 ? _5155->size(0) : 0);
  {
    int _5156 = (int)0;
    int _5157 = (int)0;
    int _5158 = (int)0;
    _ptr__5154[_5144] = (int)0;
    if ((_5127 > (int)0))
    {
      {
        _ptr__5154[_5150] = (int)0;
      }
    }
    {}
    _ptr__5154[_5148] = mdim1;
    if ((!_5104))
    {
      {
        int _5159 = (int)0;
        while ( (_5159 < _5118) )
        {
          {
            int _5160 = ((*msubj)(_ptr__5155[safe_add( _5119,_5159 )]));
            int _5161 = _5159;
            while ( ((_5159 < _5118) && (_5160 == ((*msubj)(_ptr__5155[safe_add( _5119,_5159 )])))) )
            {
              {
                ++ _5159;
              }
            }
            int _11008 = _5161;
            int _11009 = _5159;
            for (int _5162 = _11008; _5162 < _11009; ++_5162)
            {
              {
                int _5163 = _ptr__5155[safe_add( _5119,_5162 )];
                int _5164 = safe_add( safe_mul( ((*msubj)(_5163)),_5117 ),((*msubi)(_5163)) );
                int _11010 = _ptr__5113[safe_add( _5106,_5164 )];
                int _11011 = _ptr__5113[safe_add( safe_add( _5106,_5164 ),(int)1 )];
                for (int _5165 = _11010; _5165 < _11011; ++_5165)
                {
                  {
                    _ptr__5152[safe_add( _5145,_5157 )] = _ptr__5114[safe_add( _5108,_5165 )];
                    _ptr__5153[safe_add( _5147,_5157 )] = (_ptr__5115[safe_add( _5109,_5165 )] * ((*mval)(_5163)));
                    if ((_5103 > (int)0))
                    {
                      {
                        int _11012 = _ptr__5113[safe_add( _5110,_5165 )];
                        int _11013 = _ptr__5113[safe_add( safe_add( _5110,_5165 ),(int)1 )];
                        for (int _5166 = _11012; _5166 < _11013; ++_5166)
                        {
                          {
                            _ptr__5154[safe_add( _5149,_5156 )] = _ptr__5113[safe_add( _5111,_5166 )];
                            _ptr__5153[safe_add( _5151,_5156 )] = _ptr__5115[safe_add( _5112,_5166 )];
                            ++ _5156;
                          }
                        }
                        _ptr__5154[safe_add( _5149,_5156 )] = 2;
                        _ptr__5153[safe_add( _5151,_5156 )] = ((*mval)(_5163));
                        ++ _5156;
                        _ptr__5154[safe_add( _5149,_5156 )] = 5;
                        ++ _5156;
                        _ptr__5154[safe_add( safe_add( _5150,_5157 ),(int)1 )] = _5156;
                      }
                    }
                    {}
                    ++ _5157;
                  }
                }
              }
            }
            _ptr__5152[safe_add( _5146,_5158 )] = _5160;
            _ptr__5154[safe_add( safe_add( _5144,_5158 ),(int)1 )] = _5157;
            ++ _5158;
          }
        }
      }
    }
    else
    {
      {
        int _5167 = (int)0;
        int _5168 = (int)0;
        int _11014 = (int)0;
        int _11015 = mdim1;
        for (int _5169 = _11014; _5169 < _11015; ++_5169)
        {
          {
            int _5170 = _5167;
            int _5171 = _5168;
            while ( ((_5168 < _5102) && (_5169 == (_ptr__5114[safe_add( _5107,_5168 )] / _5117))) )
            {
              {
                ++ _5168;
              }
            }
            while ( ((_5167 < _5118) && (_5169 == ((*msubj)(_ptr__5155[safe_add( _5119,_5167 )])))) )
            {
              {
                ++ _5167;
              }
            }
            int _5172 = _5170;
            int _5173 = _5171;
            int _5174 = (int)0;
            while ( ((_5173 < _5168) && (_5172 < _5167)) )
            {
              {
                if (((_ptr__5114[safe_add( _5107,_5173 )] % _5117) < ((*msubi)(_ptr__5155[safe_add( _5119,_5172 )]))))
                {
                  {
                    ++ _5173;
                  }
                }
                else if(((_ptr__5114[safe_add( _5107,_5173 )] % _5117) > ((*msubi)(_ptr__5155[safe_add( _5119,_5172 )]))))
                {
                  {
                    ++ _5172;
                  }
                }
                else
                {
                  {
                    int _5175 = _ptr__5155[safe_add( _5119,_5172 )];
                    int _11016 = _ptr__5113[safe_add( _5106,_5173 )];
                    int _11017 = _ptr__5113[safe_add( safe_add( _5106,_5173 ),(int)1 )];
                    for (int _5176 = _11016; _5176 < _11017; ++_5176)
                    {
                      {
                        _ptr__5152[safe_add( _5145,_5157 )] = _ptr__5114[safe_add( _5108,_5176 )];
                        _ptr__5153[safe_add( _5147,_5157 )] = (_ptr__5115[safe_add( _5109,_5176 )] * ((*mval)(_5175)));
                        if ((_5103 > (int)0))
                        {
                          {
                            int _11018 = _ptr__5113[safe_add( _5110,_5176 )];
                            int _11019 = _ptr__5113[safe_add( safe_add( _5110,_5176 ),(int)1 )];
                            for (int _5177 = _11018; _5177 < _11019; ++_5177)
                            {
                              {
                                _ptr__5154[safe_add( _5149,_5156 )] = _ptr__5113[safe_add( _5111,_5177 )];
                                _ptr__5153[safe_add( _5151,_5156 )] = _ptr__5115[safe_add( _5112,_5177 )];
                                ++ _5156;
                              }
                            }
                            _ptr__5154[safe_add( _5149,_5156 )] = 2;
                            _ptr__5153[safe_add( _5151,_5156 )] = ((*mval)(_5175));
                            ++ _5156;
                            _ptr__5154[safe_add( _5149,_5156 )] = 5;
                            ++ _5156;
                            _ptr__5154[safe_add( safe_add( _5150,_5157 ),(int)1 )] = _5156;
                          }
                        }
                        {}
                        ++ _5157;
                      }
                    }
                    ++ _5174;
                    ++ _5173;
                    ++ _5172;
                  }
                }
              }
            }
            if ((_5174 > (int)0))
            {
              {
                _ptr__5154[safe_add( safe_add( _5144,_5158 ),(int)1 )] = _5157;
                _ptr__5152[safe_add( _5146,_5158 )] = _5169;
                ++ _5158;
              }
            }
            {}
          }
        }
      }
    }
    if ((!_5143))
    {
      {
        _5097->popi64(_5129);
      }
    }
    {}
    if ((!(_5128 == _5157)))
    {
      {
        throw ::mosek::fusion::UnexpectedError(std::string ("Incorrect number of non-zeros"));
      }
    }
    {}
    if ((!(_5129 == _5158)))
    {
      {
        throw ::mosek::fusion::UnexpectedError(std::string ("Incorrect number of elements"));
      }
    }
    {}
  }
  _5099->clear();
}
int mosek::fusion::p_ExprMulDiagRight::validate(int _5178,int _5179,std::shared_ptr< monty::ndarray< int,1 > > _5180,std::shared_ptr< monty::ndarray< int,1 > > _5181,std::shared_ptr< monty::ndarray< double,1 > > _5182,monty::rc_ptr< ::mosek::fusion::Expression > _5183){
  _checked_ptr_1<int> _ptr__5180(_5180 ? _5180->raw() : nullptr, _5180 ? _5180->size(0) : 0);
  _checked_ptr_1<int> _ptr__5181(_5181 ? _5181->raw() : nullptr, _5181 ? _5181->size(0) : 0);
  _checked_ptr_1<double> _ptr__5182(_5182 ? _5182->raw() : nullptr, _5182 ? _5182->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5184 = _5183->getShape();
  _checked_ptr_1<int> _ptr__5184(_5184 ? _5184->raw() : nullptr,_5184 ? _5184->size(0) : 0);
  if (((int)((_5184)->size(0)) > (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  int _5185 = _ptr__5184[(int)0];
  int _5186 = _ptr__5184[(int)1];
  if (((_5178 < (int)0) || ((_5179 < (int)0) || ((_5185 < (int)0) || (_5186 < (int)0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if (((_5178 != _5186) || (_5179 != _5185)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  if ((((int)((_5180)->size(0)) != (int)((_5181)->size(0))) || ((int)((_5180)->size(0)) != (int)((_5182)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int _5187 = (int)((_5180)->size(0));
  bool _5188 = false;
  bool _5189 = false;
  {
    int _11020 = (int)0;
    int _11021 = _5187;
    for (int _5190 = _11020; _5190 < _11021; ++_5190)
    {
      {
        if (((_ptr__5180[_5190] < (int)0) || ((_ptr__5180[_5190] >= _5178) || ((_ptr__5181[_5190] < (int)0) || (_ptr__5181[_5190] >= _5179)))))
        {
          {
            _5188 = true;
          }
        }
        {}
      }
    }
    int _11022 = (int)0;
    int _11023 = (_5187 - (int)1);
    for (int _5191 = _11022; _5191 < _11023; ++_5191)
    {
      {
        if (((_ptr__5180[_5191] > _ptr__5180[safe_add( _5191,(int)1 )]) || ((_ptr__5180[_5191] == _ptr__5180[safe_add( _5191,(int)1 )]) && (_ptr__5181[_5191] >= _ptr__5181[safe_add( _5191,(int)1 )]))))
        {
          {
            _5189 = true;
          }
        }
        {}
      }
    }
  }
  if (_5188)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  if (_5189)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
    }
  }
  {}
  return (int)1;
}
std::string mosek::fusion::ExprMulDiagRight :: toString() { return mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulDiagRight::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulDiagRight("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",m)"))->toString();
}
void mosek::fusion::p_ExprMulDiagRight::destroy(){expr.reset();mval.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprMulDiagRight::destroy() { mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->destroy(); }mosek::fusion::ExprMulDiagLeft::ExprMulDiagLeft(mosek::fusion::p_ExprMulDiagLeft *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulDiagLeft()" << this << std::endl; */ }mosek::fusion::ExprMulDiagLeft::~ExprMulDiagLeft() {  /* std::cout << "~ExprMulDiagLeft()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulDiagLeft::p_ExprMulDiagLeft  (::mosek::fusion::ExprMulDiagLeft * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulDiagLeft::t mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft  (int _5192,    int _5193,    std::shared_ptr< monty::ndarray< int,1 > > _5194,    std::shared_ptr< monty::ndarray< int,1 > > _5195,    std::shared_ptr< monty::ndarray< double,1 > > _5196,    monty::rc_ptr< ::mosek::fusion::Expression > _5197,    int _5198){ return new mosek::fusion::ExprMulDiagLeft(_5192,_5193,_5194,_5195,_5196,_5197,_5198); }mosek::fusion::ExprMulDiagLeft::ExprMulDiagLeft  (int _5192,    int _5193,    std::shared_ptr< monty::ndarray< int,1 > > _5194,    std::shared_ptr< monty::ndarray< int,1 > > _5195,    std::shared_ptr< monty::ndarray< double,1 > > _5196,    monty::rc_ptr< ::mosek::fusion::Expression > _5197,    int _5198) :    ExprMulDiagLeft(new mosek::fusion::p_ExprMulDiagLeft(this)){ mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->_initialize(_5192,_5193,_5194,_5195,_5196,_5197,_5198); }void mosek::fusion::p_ExprMulDiagLeft::_initialize  (int _5192,    int _5193,    std::shared_ptr< monty::ndarray< int,1 > > _5194,    std::shared_ptr< monty::ndarray< int,1 > > _5195,    std::shared_ptr< monty::ndarray< double,1 > > _5196,    monty::rc_ptr< ::mosek::fusion::Expression > _5197,    int _5198){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5194(_5194 ? _5194->raw() : nullptr, _5194 ? _5194->size(0) : 0);
    _checked_ptr_1<int> _ptr__5195(_5195 ? _5195->raw() : nullptr, _5195 ? _5195->size(0) : 0);
    _checked_ptr_1<double> _ptr__5196(_5196 ? _5196->raw() : nullptr, _5196 ? _5196->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_5192)}));
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->mdim0 = _5192;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->mdim1 = _5193;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->msubi = _5194;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->msubj = _5195;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->mval = _5196;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->expr = _5197;
  }
}mosek::fusion::ExprMulDiagLeft::t mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft  (int _5199,    int _5200,    std::shared_ptr< monty::ndarray< int,1 > > _5201,    std::shared_ptr< monty::ndarray< int,1 > > _5202,    std::shared_ptr< monty::ndarray< double,1 > > _5203,    monty::rc_ptr< ::mosek::fusion::Expression > _5204){ return new mosek::fusion::ExprMulDiagLeft(_5199,_5200,_5201,_5202,_5203,_5204); }mosek::fusion::ExprMulDiagLeft::ExprMulDiagLeft  (int _5199,    int _5200,    std::shared_ptr< monty::ndarray< int,1 > > _5201,    std::shared_ptr< monty::ndarray< int,1 > > _5202,    std::shared_ptr< monty::ndarray< double,1 > > _5203,    monty::rc_ptr< ::mosek::fusion::Expression > _5204) :    ExprMulDiagLeft(new mosek::fusion::p_ExprMulDiagLeft(this)){ mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->_initialize(_5199,_5200,_5201,_5202,_5203,_5204); }void mosek::fusion::p_ExprMulDiagLeft::_initialize  (int _5199,    int _5200,    std::shared_ptr< monty::ndarray< int,1 > > _5201,    std::shared_ptr< monty::ndarray< int,1 > > _5202,    std::shared_ptr< monty::ndarray< double,1 > > _5203,    monty::rc_ptr< ::mosek::fusion::Expression > _5204){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5201(_5201 ? _5201->raw() : nullptr, _5201 ? _5201->size(0) : 0);
    _checked_ptr_1<int> _ptr__5202(_5202 ? _5202->raw() : nullptr, _5202 ? _5202->size(0) : 0);
    _checked_ptr_1<double> _ptr__5203(_5203 ? _5203->raw() : nullptr, _5203 ? _5203->size(0) : 0);
    mosek::fusion::p_ExprMulDiagLeft::_initialize(_5199,_5200,_5201,_5202,_5203,_5204,::mosek::fusion::p_ExprMulDiagLeft::validate(_5199,_5200,_5201,_5202,_5203,_5204));
  }
}void mosek::fusion::ExprMulDiagLeft :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5205,monty::rc_ptr< ::mosek::fusion::WorkStack > _5206,monty::rc_ptr< ::mosek::fusion::WorkStack > _5207) { mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->eval(_5205,_5206,_5207); }void mosek::fusion::p_ExprMulDiagLeft::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5205,monty::rc_ptr< ::mosek::fusion::WorkStack > _5206,monty::rc_ptr< ::mosek::fusion::WorkStack > _5207){
  mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->expr->eval(_5206,_5205,_5207);
  _5206->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _5208 = mosek::fusion::p_WorkStack::_get_impl(_5206)->i32;
  _checked_ptr_1<int> _ptr__5208(_5208 ? _5208->raw() : nullptr,_5208 ? _5208->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5209 = mosek::fusion::p_WorkStack::_get_impl(_5206)->i64;
  _checked_ptr_1<long long> _ptr__5209(_5209 ? _5209->raw() : nullptr,_5209 ? _5209->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5210 = mosek::fusion::p_WorkStack::_get_impl(_5206)->f64;
  _checked_ptr_1<double> _ptr__5210(_5210 ? _5210->raw() : nullptr,_5210 ? _5210->size(0) : 0);
  int _5211 = mosek::fusion::p_WorkStack::_get_impl(_5206)->nd;
  int _5212 = mosek::fusion::p_WorkStack::_get_impl(_5206)->nelem;
  int _5213 = mosek::fusion::p_WorkStack::_get_impl(_5206)->nnz;
  bool _5214 = mosek::fusion::p_WorkStack::_get_impl(_5206)->hassp;
  int _5215 = mosek::fusion::p_WorkStack::_get_impl(_5206)->ncodeatom;
  int _5216 = mosek::fusion::p_WorkStack::_get_impl(_5206)->ptr_base;
  int _5217 = mosek::fusion::p_WorkStack::_get_impl(_5206)->code_base;
  int _5218 = mosek::fusion::p_WorkStack::_get_impl(_5206)->cconst_base;
  int _5219 = mosek::fusion::p_WorkStack::_get_impl(_5206)->codeptr_base;
  int _5220 = mosek::fusion::p_WorkStack::_get_impl(_5206)->shape_base;
  int _5221 = mosek::fusion::p_WorkStack::_get_impl(_5206)->sp_base;
  int _5222 = mosek::fusion::p_WorkStack::_get_impl(_5206)->nidxs_base;
  int _5223 = mosek::fusion::p_WorkStack::_get_impl(_5206)->cof_base;
  int _5224 = mosek::fusion::p_WorkStack::_get_impl(_5206)->cconst_base;
  if ((_5211 != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operator shape for multiplication"));
    }
  }
  {}
  int _5225 = _ptr__5208[_5220];
  int _5226 = _ptr__5208[safe_add( _5220,(int)1 )];
  int _5227 = (int)((msubi)->size(0));
  if ((!_5214))
  {
    {
      int _5228 = (int)0;
      int _5229 = (int)0;
      int _5230 = (int)0;
      int _5231 = (int)0;
      while ( (_5231 < (int)((msubi)->size(0))) )
      {
        {
          int _5232 = ((*msubi)(_5231));
          while ( ((_5231 < (int)((msubi)->size(0))) && (((*msubi)(_5231)) == _5232)) )
          {
            {
              int _5233 = safe_add( safe_mul( ((*msubj)(_5231)),_5226 ),((*msubi)(_5231)) );
              _5228 += (_ptr__5208[safe_add( safe_add( _5216,_5233 ),(int)1 )] - _ptr__5208[safe_add( _5216,_5233 )]);
              if ((_5215 > (int)0))
              {
                {
                  _5230 += safe_add( (_ptr__5208[safe_add( _5219,_ptr__5208[safe_add( safe_add( _5216,_5233 ),(int)1 )] )] - _ptr__5208[safe_add( _5219,_ptr__5208[safe_add( _5216,_5233 )] )]),safe_mul( (int)2,(_ptr__5208[safe_add( safe_add( _5216,_5233 ),(int)1 )] - _ptr__5208[safe_add( _5216,_5233 )]) ) );
                }
              }
              {}
              ++ _5231;
            }
          }
          ++ _5229;
        }
      }
      bool _5234 = (_5229 < mdim0);
      _5205->alloc_expr((int)1,_5229,_5228,_5234,_5230);
      int _5235 = mosek::fusion::p_WorkStack::_get_impl(_5205)->ptr_base;
      int _5236 = mosek::fusion::p_WorkStack::_get_impl(_5205)->nidxs_base;
      int _11024;
      bool _11025 = _5234;
      if (_11025)
      {
        _11024 = mosek::fusion::p_WorkStack::_get_impl(_5205)->sp_base;
      }
      else
      {
        _11024 = _5205->alloci64(_5229);
      }
      int _5237 = _11024;
      int _5238 = mosek::fusion::p_WorkStack::_get_impl(_5205)->cof_base;
      int _5239 = mosek::fusion::p_WorkStack::_get_impl(_5205)->shape_base;
      int _5240 = mosek::fusion::p_WorkStack::_get_impl(_5205)->code_base;
      int _5241 = mosek::fusion::p_WorkStack::_get_impl(_5205)->codeptr_base;
      int _5242 = mosek::fusion::p_WorkStack::_get_impl(_5205)->cconst_base;
      std::shared_ptr< monty::ndarray< long long,1 > > _5243 = mosek::fusion::p_WorkStack::_get_impl(_5205)->i64;
      _checked_ptr_1<long long> _ptr__5243(_5243 ? _5243->raw() : nullptr,_5243 ? _5243->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _5244 = mosek::fusion::p_WorkStack::_get_impl(_5205)->f64;
      _checked_ptr_1<double> _ptr__5244(_5244 ? _5244->raw() : nullptr,_5244 ? _5244->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _5245 = mosek::fusion::p_WorkStack::_get_impl(_5205)->i32;
      _checked_ptr_1<int> _ptr__5245(_5245 ? _5245->raw() : nullptr,_5245 ? _5245->size(0) : 0);
      {
        _ptr__5245[_5235] = (int)0;
        if ((_5215 > (int)0))
        {
          {
            _ptr__5245[_5241] = (int)0;
          }
        }
        {}
        _ptr__5245[_5239] = mdim0;
        int _5246 = (int)0;
        int _5247 = (int)0;
        int _5248 = (int)0;
        {
        }
        {
          int _5249 = (int)0;
          while ( (_5249 < (int)((msubi)->size(0))) )
          {
            {
              int _5250 = ((*msubi)(_5249));
              while ( ((_5249 < (int)((msubi)->size(0))) && (((*msubi)(_5249)) == _5250)) )
              {
                {
                  int _5251 = safe_add( safe_mul( ((*msubj)(_5249)),_5226 ),((*msubi)(_5249)) );
                  int _11026 = _ptr__5208[safe_add( _5216,_5251 )];
                  int _11027 = _ptr__5208[safe_add( safe_add( _5216,_5251 ),(int)1 )];
                  for (int _5252 = _11026; _5252 < _11027; ++_5252)
                  {
                    {
                      _ptr__5243[safe_add( _5236,_5246 )] = _ptr__5209[safe_add( _5222,_5252 )];
                      _ptr__5244[safe_add( _5238,_5246 )] = (_ptr__5210[safe_add( _5223,_5252 )] * ((*mval)(_5249)));
                      if ((_5230 > (int)0))
                      {
                        {
                          int _11028 = _ptr__5208[safe_add( _5219,_5252 )];
                          int _11029 = _ptr__5208[safe_add( safe_add( _5219,_5252 ),(int)1 )];
                          for (int _5253 = _11028; _5253 < _11029; ++_5253)
                          {
                            {
                              _ptr__5245[safe_add( _5240,_5248 )] = _ptr__5208[safe_add( _5217,_5253 )];
                              _ptr__5244[safe_add( _5242,_5248 )] = _ptr__5210[safe_add( _5218,_5253 )];
                              ++ _5248;
                            }
                          }
                          _ptr__5245[safe_add( _5240,_5248 )] = 2;
                          _ptr__5244[safe_add( _5242,_5248 )] = ((*mval)(_5249));
                          ++ _5248;
                          _ptr__5245[safe_add( _5240,_5248 )] = 5;
                          ++ _5248;
                          _ptr__5245[safe_add( safe_add( _5241,_5246 ),(int)1 )] = _5248;
                        }
                      }
                      {}
                      ++ _5246;
                    }
                  }
                  ++ _5249;
                }
              }
              _ptr__5245[safe_add( safe_add( _5235,_5247 ),(int)1 )] = _5246;
              _ptr__5243[safe_add( _5237,_5247 )] = _5250;
              ++ _5247;
            }
          }
        }
      }
      if ((!_5234))
      {
        {
          _5205->popi64(_5229);
        }
      }
      {}
    }
  }
  else
  {
    {
      int _5254 = _5207->alloci32(safe_add( _5226,(int)1 ));
      int _5255 = _5207->alloci32(_5212);
      int _5256 = _5207->alloci32(safe_add( mdim0,(int)1 ));
      std::shared_ptr< monty::ndarray< int,1 > > _5257 = mosek::fusion::p_WorkStack::_get_impl(_5207)->i32;
      _checked_ptr_1<int> _ptr__5257(_5257 ? _5257->raw() : nullptr,_5257 ? _5257->size(0) : 0);
      int _5258 = (int)0;
      int _5259 = (int)0;
      int _5260 = (int)0;
      {
        int _11030 = (int)0;
        int _11031 = safe_add( _5226,(int)1 );
        for (int _5261 = _11030; _5261 < _11031; ++_5261)
        {
          {
            _ptr__5257[safe_add( _5254,_5261 )] = (int)0;
          }
        }
        int _11032 = (int)0;
        int _11033 = _5212;
        for (int _5262 = _11032; _5262 < _11033; ++_5262)
        {
          {
            ++ _ptr__5257[safe_add( safe_add( _5254,(_ptr__5209[safe_add( _5221,_5262 )] % _5226) ),(int)1 )];
          }
        }
        int _11034 = (int)0;
        int _11035 = _5226;
        for (int _5263 = _11034; _5263 < _11035; ++_5263)
        {
          {
            _ptr__5257[safe_add( safe_add( _5254,_5263 ),(int)1 )] += _ptr__5257[safe_add( _5254,_5263 )];
          }
        }
        int _11036 = (int)0;
        int _11037 = _5212;
        for (int _5264 = _11036; _5264 < _11037; ++_5264)
        {
          {
            long long _5265 = (_ptr__5209[safe_add( _5221,_5264 )] % _5226);
            _ptr__5257[safe_add( _5255,_ptr__5257[safe_add( _5254,_5265 )] )] = _5264;
            ++ _ptr__5257[safe_add( _5254,_5265 )];
          }
        }
        int _11038 = (int)0;
        int _11039 = _5226;
        for (int _5266 = _11038; _5266 < _11039; ++_5266)
        {
          {
            _ptr__5257[(safe_add( _5254,_5226 ) - _5266)] = _ptr__5257[((safe_add( _5254,_5226 ) - _5266) - (int)1)];
          }
        }
        _ptr__5257[_5254] = (int)0;
        int _5267 = (int)0;
        int _5268 = (int)0;
        while ( ((_5268 < (int)((msubi)->size(0))) && (_5267 < _5212)) )
        {
          {
            if ((((*msubi)(_5268)) < (_ptr__5209[safe_add( _5221,_ptr__5257[safe_add( _5255,_5267 )] )] % _5226)))
            {
              {
                ++ _5268;
              }
            }
            else if((((*msubi)(_5268)) > (_ptr__5209[safe_add( _5221,_ptr__5257[safe_add( _5255,_5267 )] )] % _5226)))
            {
              {
                ++ _5267;
              }
            }
            else
            {
              {
                int _5269 = (int)0;
                long long _5270 = (_ptr__5209[safe_add( _5221,_ptr__5257[safe_add( _5255,_5267 )] )] % _5226);
                int _5271 = _5268;
                while ( ((_5268 < (int)((msubi)->size(0))) && (((*msubi)(_5268)) == ((*msubi)(_5271)))) )
                {
                  {
                    ++ _5268;
                  }
                }
                int _5272 = _5267;
                while ( ((_5267 < _5212) && ((_ptr__5209[safe_add( _5221,_ptr__5257[safe_add( _5255,_5267 )] )] % _5226) == _5270)) )
                {
                  {
                    ++ _5267;
                  }
                }
                int _5273 = _5272;
                int _5274 = _5271;
                int _5275 = (int)0;
                while ( ((_5274 < _5268) && (_5273 < _5267)) )
                {
                  {
                    int _5276 = _ptr__5257[safe_add( _5255,_5273 )];
                    if ((((*msubj)(_5274)) < (_ptr__5209[safe_add( _5221,_5276 )] / _5226)))
                    {
                      {
                        ++ _5274;
                      }
                    }
                    else if((((*msubj)(_5274)) > (_ptr__5209[safe_add( _5221,_5276 )] / _5226)))
                    {
                      {
                        ++ _5273;
                      }
                    }
                    else
                    {
                      {
                        _5259 += (_ptr__5208[safe_add( safe_add( _5216,_5276 ),(int)1 )] - _ptr__5208[safe_add( _5216,_5276 )]);
                        if ((_5215 > (int)0))
                        {
                          {
                            _5258 += safe_add( (_ptr__5208[safe_add( _5219,_ptr__5208[safe_add( safe_add( _5216,_5276 ),(int)1 )] )] - _ptr__5208[safe_add( _5219,_ptr__5208[safe_add( _5216,_5276 )] )]),safe_mul( (int)2,(_ptr__5208[safe_add( safe_add( _5216,_5276 ),(int)1 )] - _ptr__5208[safe_add( _5216,_5276 )]) ) );
                          }
                        }
                        {}
                        ++ _5275;
                        ++ _5274;
                        ++ _5273;
                      }
                    }
                  }
                }
                if ((_5275 > (int)0))
                {
                  {
                    ++ _5260;
                  }
                }
                {}
              }
            }
          }
        }
      }
      bool _5277 = (_5260 < mdim0);
      _5205->alloc_expr((int)1,_5260,_5259,_5277,_5258);
      int _5278 = mosek::fusion::p_WorkStack::_get_impl(_5205)->ptr_base;
      int _5279 = mosek::fusion::p_WorkStack::_get_impl(_5205)->nidxs_base;
      int _11040;
      bool _11041 = _5277;
      if (_11041)
      {
        _11040 = mosek::fusion::p_WorkStack::_get_impl(_5205)->sp_base;
      }
      else
      {
        _11040 = _5205->alloci64(_5260);
      }
      int _5280 = _11040;
      int _5281 = mosek::fusion::p_WorkStack::_get_impl(_5205)->cof_base;
      int _5282 = mosek::fusion::p_WorkStack::_get_impl(_5205)->shape_base;
      int _5283 = mosek::fusion::p_WorkStack::_get_impl(_5205)->code_base;
      int _5284 = mosek::fusion::p_WorkStack::_get_impl(_5205)->codeptr_base;
      int _5285 = mosek::fusion::p_WorkStack::_get_impl(_5205)->cconst_base;
      std::shared_ptr< monty::ndarray< long long,1 > > _5286 = mosek::fusion::p_WorkStack::_get_impl(_5205)->i64;
      _checked_ptr_1<long long> _ptr__5286(_5286 ? _5286->raw() : nullptr,_5286 ? _5286->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _5287 = mosek::fusion::p_WorkStack::_get_impl(_5205)->f64;
      _checked_ptr_1<double> _ptr__5287(_5287 ? _5287->raw() : nullptr,_5287 ? _5287->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _5288 = mosek::fusion::p_WorkStack::_get_impl(_5205)->i32;
      _checked_ptr_1<int> _ptr__5288(_5288 ? _5288->raw() : nullptr,_5288 ? _5288->size(0) : 0);
      {
        int _5289 = (int)0;
        int _5290 = (int)0;
        int _5291 = (int)0;
        int _5292 = (int)0;
        int _5293 = (int)0;
        _ptr__5288[_5278] = (int)0;
        if ((_5215 > (int)0))
        {
          {
            _ptr__5288[_5284] = (int)0;
          }
        }
        {}
        _ptr__5288[_5282] = mdim0;
        while ( ((_5293 < (int)((msubi)->size(0))) && (_5292 < _5212)) )
        {
          {
            if ((((*msubi)(_5293)) < (_ptr__5209[safe_add( _5221,_ptr__5257[safe_add( _5255,_5292 )] )] % _5226)))
            {
              {
                ++ _5293;
              }
            }
            else if((((*msubi)(_5293)) > (_ptr__5209[safe_add( _5221,_ptr__5257[safe_add( _5255,_5292 )] )] % _5226)))
            {
              {
                ++ _5292;
              }
            }
            else
            {
              {
                int _5294 = (int)0;
                long long _5295 = (_ptr__5209[safe_add( _5221,_ptr__5257[safe_add( _5255,_5292 )] )] % _5226);
                int _5296 = _5293;
                while ( ((_5293 < (int)((msubi)->size(0))) && (((*msubi)(_5293)) == ((*msubi)(_5296)))) )
                {
                  {
                    ++ _5293;
                  }
                }
                int _5297 = _5292;
                while ( ((_5292 < _5212) && ((_ptr__5209[safe_add( _5221,_ptr__5257[safe_add( _5255,_5292 )] )] % _5226) == _5295)) )
                {
                  {
                    ++ _5292;
                  }
                }
                int _5298 = _5297;
                int _5299 = _5296;
                int _5300 = (int)0;
                int _5301 = ((*msubi)(_5296));
                while ( ((_5299 < _5293) && (_5298 < _5292)) )
                {
                  {
                    int _5302 = _ptr__5257[safe_add( _5255,_5298 )];
                    if ((((*msubj)(_5299)) < (_ptr__5209[safe_add( _5221,_5302 )] / _5226)))
                    {
                      {
                        ++ _5299;
                      }
                    }
                    else if((((*msubj)(_5299)) > (_ptr__5209[safe_add( _5221,_5302 )] / _5226)))
                    {
                      {
                        ++ _5298;
                      }
                    }
                    else
                    {
                      {
                        int _11042 = _ptr__5208[safe_add( _5216,_5302 )];
                        int _11043 = _ptr__5208[safe_add( safe_add( _5216,_5302 ),(int)1 )];
                        for (int _5303 = _11042; _5303 < _11043; ++_5303)
                        {
                          {
                            _ptr__5286[safe_add( _5279,_5290 )] = _ptr__5209[safe_add( _5222,_5303 )];
                            _ptr__5287[safe_add( _5281,_5290 )] = (_ptr__5210[safe_add( _5223,_5303 )] * ((*mval)(_5299)));
                            if ((_5215 > (int)0))
                            {
                              {
                                int _11044 = _ptr__5208[safe_add( _5219,_5303 )];
                                int _11045 = _ptr__5208[safe_add( safe_add( _5219,_5303 ),(int)1 )];
                                for (int _5304 = _11044; _5304 < _11045; ++_5304)
                                {
                                  {
                                    _ptr__5288[safe_add( _5283,_5291 )] = _ptr__5208[safe_add( _5217,_5304 )];
                                    _ptr__5287[safe_add( _5285,_5291 )] = _ptr__5210[safe_add( _5218,_5304 )];
                                    ++ _5291;
                                  }
                                }
                                _ptr__5288[safe_add( _5283,_5291 )] = 2;
                                _ptr__5287[safe_add( _5285,_5291 )] = ((*mval)(_5299));
                                ++ _5291;
                                _ptr__5288[safe_add( _5283,_5291 )] = 5;
                                ++ _5291;
                                _ptr__5288[safe_add( safe_add( _5284,_5290 ),(int)1 )] = _5291;
                              }
                            }
                            {}
                            ++ _5290;
                            ++ _5300;
                          }
                        }
                        ++ _5299;
                        ++ _5298;
                      }
                    }
                  }
                }
                if ((_5300 > (int)0))
                {
                  {
                    _ptr__5288[safe_add( safe_add( _5278,_5289 ),(int)1 )] = _5290;
                    _ptr__5286[safe_add( _5280,_5289 )] = _5301;
                    ++ _5289;
                  }
                }
                {}
              }
            }
          }
        }
        if ((_5290 != _5259))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect number of non-zeros"));
          }
        }
        {}
        if ((_5289 != _5260))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect number of elements"));
          }
        }
        {}
      }
      if ((!_5277))
      {
        {
          _5205->popi64(_5260);
        }
      }
      {}
    }
  }
  _5207->clear();
}
int mosek::fusion::p_ExprMulDiagLeft::validate(int _5305,int _5306,std::shared_ptr< monty::ndarray< int,1 > > _5307,std::shared_ptr< monty::ndarray< int,1 > > _5308,std::shared_ptr< monty::ndarray< double,1 > > _5309,monty::rc_ptr< ::mosek::fusion::Expression > _5310){
  _checked_ptr_1<int> _ptr__5307(_5307 ? _5307->raw() : nullptr, _5307 ? _5307->size(0) : 0);
  _checked_ptr_1<int> _ptr__5308(_5308 ? _5308->raw() : nullptr, _5308 ? _5308->size(0) : 0);
  _checked_ptr_1<double> _ptr__5309(_5309 ? _5309->raw() : nullptr, _5309 ? _5309->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5311 = _5310->getShape();
  _checked_ptr_1<int> _ptr__5311(_5311 ? _5311->raw() : nullptr,_5311 ? _5311->size(0) : 0);
  if (((int)((_5311)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  int _5312 = _ptr__5311[(int)0];
  int _5313 = _ptr__5311[(int)1];
  if (((_5305 < (int)0) || (_5306 < (int)0)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if (((_5306 != _5312) || (_5305 != _5313)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  if ((((int)((_5307)->size(0)) != (int)((_5308)->size(0))) || ((int)((_5307)->size(0)) != (int)((_5309)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int _5314 = (int)((_5307)->size(0));
  bool _5315 = false;
  bool _5316 = false;
  {
    int _11046 = (int)0;
    int _11047 = _5314;
    for (int _5317 = _11046; _5317 < _11047; ++_5317)
    {
      {
        if (((_ptr__5307[_5317] < (int)0) || ((_ptr__5307[_5317] >= _5305) || ((_ptr__5308[_5317] < (int)0) || (_ptr__5308[_5317] >= _5306)))))
        {
          {
            _5315 = true;
          }
        }
        {}
      }
    }
    int _11048 = (int)0;
    int _11049 = (_5314 - (int)1);
    for (int _5318 = _11048; _5318 < _11049; ++_5318)
    {
      {
        if (((_ptr__5307[_5318] > _ptr__5307[safe_add( _5318,(int)1 )]) || ((_ptr__5307[_5318] == _ptr__5307[safe_add( _5318,(int)1 )]) && (_ptr__5308[_5318] >= _ptr__5308[safe_add( _5318,(int)1 )]))))
        {
          {
            _5316 = true;
          }
        }
        {}
      }
    }
  }
  if (_5315)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  if (_5316)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
    }
  }
  {}
  return (int)1;
}
std::string mosek::fusion::ExprMulDiagLeft :: toString() { return mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulDiagLeft::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulDiagLeft(m,"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulDiagLeft::destroy(){expr.reset();mval.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprMulDiagLeft::destroy() { mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->destroy(); }mosek::fusion::ExprMulElement::ExprMulElement(mosek::fusion::p_ExprMulElement *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulElement()" << this << std::endl; */ }mosek::fusion::ExprMulElement::~ExprMulElement() {  /* std::cout << "~ExprMulElement()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulElement::p_ExprMulElement  (::mosek::fusion::ExprMulElement * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulElement::t mosek::fusion::p_ExprMulElement::_new_ExprMulElement  (std::shared_ptr< monty::ndarray< double,1 > > _5319,    std::shared_ptr< monty::ndarray< long long,1 > > _5320,    monty::rc_ptr< ::mosek::fusion::Expression > _5321){ return new mosek::fusion::ExprMulElement(_5319,_5320,_5321); }mosek::fusion::ExprMulElement::ExprMulElement  (std::shared_ptr< monty::ndarray< double,1 > > _5319,    std::shared_ptr< monty::ndarray< long long,1 > > _5320,    monty::rc_ptr< ::mosek::fusion::Expression > _5321) :    ExprMulElement(new mosek::fusion::p_ExprMulElement(this)){ mosek::fusion::p_ExprMulElement::_get_impl(this)->_initialize(_5319,_5320,_5321); }void mosek::fusion::p_ExprMulElement::_initialize  (std::shared_ptr< monty::ndarray< double,1 > > _5319,    std::shared_ptr< monty::ndarray< long long,1 > > _5320,    monty::rc_ptr< ::mosek::fusion::Expression > _5321){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__5319(_5319 ? _5319->raw() : nullptr, _5319 ? _5319->size(0) : 0);
    _checked_ptr_1<long long> _ptr__5320(_5320 ? _5320->raw() : nullptr, _5320 ? _5320->size(0) : 0);
    mosek::fusion::p_ExprMulElement::_initialize(_5319,_5320,_5321,(int)1);
    std::shared_ptr< monty::ndarray< int,1 > > _5322 = _5321->getShape();
    _checked_ptr_1<int> _ptr__5322(_5322 ? _5322->raw() : nullptr,_5322 ? _5322->size(0) : 0);
    if (((int)((_5319)->size(0)) != (int)((_5320)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Invalid matrix specification"));
      }
    }
    {}
    long long _5323 = ::mosek::fusion::p_Set::size(_5322);
    bool _5324 = false;
    bool _5325 = false;
    {
      int _11050 = (int)0;
      int _11051 = (int)((_5320)->size(0));
      for (int _5326 = _11050; _5326 < _11051; ++_5326)
      {
        {
          if (((_ptr__5320[_5326] < (int)0) || (_ptr__5320[_5326] >= _5323)))
          {
            {
              _5324 = true;
            }
          }
          {}
        }
      }
      int _11052 = (int)0;
      int _11053 = ((int)((_5320)->size(0)) - (int)1);
      for (int _5327 = _11052; _5327 < _11053; ++_5327)
      {
        {
          if ((_ptr__5320[_5327] >= _ptr__5320[safe_add( _5327,(int)1 )]))
          {
            {
              _5325 = true;
            }
          }
          {}
        }
      }
    }
    if (_5324)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Invalid matrix data"));
      }
    }
    {}
    if (_5325)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Matrix data not sorted"));
      }
    }
    {}
  }
}mosek::fusion::ExprMulElement::t mosek::fusion::p_ExprMulElement::_new_ExprMulElement  (std::shared_ptr< monty::ndarray< double,1 > > _5328,    std::shared_ptr< monty::ndarray< long long,1 > > _5329,    monty::rc_ptr< ::mosek::fusion::Expression > _5330,    int _5331){ return new mosek::fusion::ExprMulElement(_5328,_5329,_5330,_5331); }mosek::fusion::ExprMulElement::ExprMulElement  (std::shared_ptr< monty::ndarray< double,1 > > _5328,    std::shared_ptr< monty::ndarray< long long,1 > > _5329,    monty::rc_ptr< ::mosek::fusion::Expression > _5330,    int _5331) :    ExprMulElement(new mosek::fusion::p_ExprMulElement(this)){ mosek::fusion::p_ExprMulElement::_get_impl(this)->_initialize(_5328,_5329,_5330,_5331); }void mosek::fusion::p_ExprMulElement::_initialize  (std::shared_ptr< monty::ndarray< double,1 > > _5328,    std::shared_ptr< monty::ndarray< long long,1 > > _5329,    monty::rc_ptr< ::mosek::fusion::Expression > _5330,    int _5331){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__5328(_5328 ? _5328->raw() : nullptr, _5328 ? _5328->size(0) : 0);
    _checked_ptr_1<long long> _ptr__5329(_5329 ? _5329->raw() : nullptr, _5329 ? _5329->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_5330->getShape());
    mosek::fusion::p_ExprMulElement::_get_impl(::mosek::fusion::ExprMulElement::t(_pubthis))->expr = _5330;
    mosek::fusion::p_ExprMulElement::_get_impl(::mosek::fusion::ExprMulElement::t(_pubthis))->mcof = _5328;
    mosek::fusion::p_ExprMulElement::_get_impl(::mosek::fusion::ExprMulElement::t(_pubthis))->msp = _5329;
  }
}void mosek::fusion::ExprMulElement :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5332,monty::rc_ptr< ::mosek::fusion::WorkStack > _5333,monty::rc_ptr< ::mosek::fusion::WorkStack > _5334) { mosek::fusion::p_ExprMulElement::_get_impl(this)->eval(_5332,_5333,_5334); }void mosek::fusion::p_ExprMulElement::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5332,monty::rc_ptr< ::mosek::fusion::WorkStack > _5333,monty::rc_ptr< ::mosek::fusion::WorkStack > _5334){
  expr->eval(_5333,_5332,_5334);
  _5333->pop_expr();
  int _5335 = mosek::fusion::p_WorkStack::_get_impl(_5333)->nd;
  int _5336 = mosek::fusion::p_WorkStack::_get_impl(_5333)->nelem;
  int _5337 = mosek::fusion::p_WorkStack::_get_impl(_5333)->nnz;
  int _5338 = mosek::fusion::p_WorkStack::_get_impl(_5333)->ncodeatom;
  bool _5339 = mosek::fusion::p_WorkStack::_get_impl(_5333)->hassp;
  int _5340 = mosek::fusion::p_WorkStack::_get_impl(_5333)->shape_base;
  int _5341 = mosek::fusion::p_WorkStack::_get_impl(_5333)->ptr_base;
  int _5342 = mosek::fusion::p_WorkStack::_get_impl(_5333)->nidxs_base;
  int _5343 = mosek::fusion::p_WorkStack::_get_impl(_5333)->sp_base;
  int _5344 = mosek::fusion::p_WorkStack::_get_impl(_5333)->cof_base;
  int _5345 = mosek::fusion::p_WorkStack::_get_impl(_5333)->code_base;
  int _5346 = mosek::fusion::p_WorkStack::_get_impl(_5333)->codeptr_base;
  int _5347 = mosek::fusion::p_WorkStack::_get_impl(_5333)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _5348 = mosek::fusion::p_WorkStack::_get_impl(_5333)->i32;
  _checked_ptr_1<int> _ptr__5348(_5348 ? _5348->raw() : nullptr,_5348 ? _5348->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5349 = mosek::fusion::p_WorkStack::_get_impl(_5333)->i64;
  _checked_ptr_1<long long> _ptr__5349(_5349 ? _5349->raw() : nullptr,_5349 ? _5349->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5350 = mosek::fusion::p_WorkStack::_get_impl(_5333)->f64;
  _checked_ptr_1<double> _ptr__5350(_5350 ? _5350->raw() : nullptr,_5350 ? _5350->size(0) : 0);
  int _5351 = (int)0;
  int _5352 = (int)0;
  int _5353 = (int)0;
  if ((!_5339))
  {
    {
      _5353 = (int)((msp)->size(0));
      int _11054 = (int)0;
      int _11055 = (int)((msp)->size(0));
      for (int _5354 = _11054; _5354 < _11055; ++_5354)
      {
        {
          _5352 += (_ptr__5348[safe_add( safe_add( _5341,((*msp)(_5354)) ),(int)1 )] - _ptr__5348[safe_add( _5341,((*msp)(_5354)) )]);
        }
      }
      if ((_5338 > (int)0))
      {
        {
          int _11056 = (int)0;
          int _11057 = (int)((msp)->size(0));
          for (int _5355 = _11056; _5355 < _11057; ++_5355)
          {
            {
              _5351 += safe_add( (_ptr__5348[safe_add( _5346,_ptr__5348[safe_add( safe_add( _5341,((*msp)(_5355)) ),(int)1 )] )] - _ptr__5348[safe_add( _5346,_ptr__5348[safe_add( _5341,((*msp)(_5355)) )] )]),safe_mul( (int)2,(_ptr__5348[safe_add( safe_add( _5341,((*msp)(_5355)) ),(int)1 )] - _ptr__5348[safe_add( _5341,((*msp)(_5355)) )]) ) );
            }
          }
        }
      }
      {}
    }
  }
  else
  {
    {
      int _5356 = (int)((msp)->size(0));
      int _5357 = (int)0;
      int _5358 = _5336;
      int _5359 = (int)0;
      while ( ((_5357 < _5356) && (_5359 < _5358)) )
      {
        {
          if ((((*msp)(_5357)) < _ptr__5349[safe_add( _5343,_5359 )]))
          {
            {
              ++ _5357;
            }
          }
          else if((((*msp)(_5357)) > _ptr__5349[safe_add( _5343,_5359 )]))
          {
            {
              ++ _5359;
            }
          }
          else
          {
            {
              _5352 += (_ptr__5348[safe_add( safe_add( _5341,_5359 ),(int)1 )] - _ptr__5348[safe_add( _5341,_5359 )]);
              if ((_5338 > (int)0))
              {
                {
                  _5351 += safe_add( (_ptr__5348[safe_add( _5346,_ptr__5348[safe_add( safe_add( _5341,_5359 ),(int)1 )] )] - _ptr__5348[safe_add( _5346,_ptr__5348[safe_add( _5341,_5359 )] )]),safe_mul( (int)2,(_ptr__5348[safe_add( safe_add( _5341,_5359 ),(int)1 )] - _ptr__5348[safe_add( _5341,_5359 )]) ) );
                }
              }
              {}
              ++ _5357;
              ++ _5359;
              ++ _5353;
            }
          }
        }
      }
    }
  }
  long long _5360 = (long long)1;
  int _11058 = (int)0;
  int _11059 = _5335;
  for (int _5361 = _11058; _5361 < _11059; ++_5361)
  {
    {
      _5360 *= _ptr__5348[safe_add( _5340,_5361 )];
    }
  }
  bool _5362 = (_5353 < _5360);
  int _5363 = _5335;
  _5332->alloc_expr(_5363,_5353,_5352,_5362,_5351);
  int _5364 = mosek::fusion::p_WorkStack::_get_impl(_5332)->ptr_base;
  int _5365 = mosek::fusion::p_WorkStack::_get_impl(_5332)->shape_base;
  int _5366 = mosek::fusion::p_WorkStack::_get_impl(_5332)->nidxs_base;
  int _11060;
  bool _11061 = _5362;
  if (_11061)
  {
    _11060 = mosek::fusion::p_WorkStack::_get_impl(_5332)->sp_base;
  }
  else
  {
    _11060 = _5332->alloci64(_5353);
  }
  int _5367 = _11060;
  int _5368 = mosek::fusion::p_WorkStack::_get_impl(_5332)->cof_base;
  int _5369 = mosek::fusion::p_WorkStack::_get_impl(_5332)->code_base;
  int _5370 = mosek::fusion::p_WorkStack::_get_impl(_5332)->codeptr_base;
  int _5371 = mosek::fusion::p_WorkStack::_get_impl(_5332)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _5372 = mosek::fusion::p_WorkStack::_get_impl(_5332)->i32;
  _checked_ptr_1<int> _ptr__5372(_5372 ? _5372->raw() : nullptr,_5372 ? _5372->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5373 = mosek::fusion::p_WorkStack::_get_impl(_5332)->i64;
  _checked_ptr_1<long long> _ptr__5373(_5373 ? _5373->raw() : nullptr,_5373 ? _5373->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5374 = mosek::fusion::p_WorkStack::_get_impl(_5332)->f64;
  _checked_ptr_1<double> _ptr__5374(_5374 ? _5374->raw() : nullptr,_5374 ? _5374->size(0) : 0);
  {
    int _5375 = (int)0;
    int _5376 = (int)0;
    int _5377 = (int)0;
    _ptr__5372[_5364] = (int)0;
    if ((_5351 > (int)0))
    {
      {
        _ptr__5372[_5370] = (int)0;
      }
    }
    {}
    int _11062 = (int)0;
    int _11063 = _5363;
    for (int _5378 = _11062; _5378 < _11063; ++_5378)
    {
      {
        _ptr__5372[safe_add( _5365,_5378 )] = _ptr__5348[safe_add( _5340,_5378 )];
      }
    }
    if ((!_5339))
    {
      {
        int _11064 = (int)0;
        int _11065 = (int)((msp)->size(0));
        for (int _5379 = _11064; _5379 < _11065; ++_5379)
        {
          {
            int _5380 = _ptr__5348[safe_add( _5341,((*msp)(_5379)) )];
            int _5381 = _ptr__5348[safe_add( safe_add( _5341,((*msp)(_5379)) ),(int)1 )];
            int _11066 = _5380;
            int _11067 = _5381;
            for (int _5382 = _11066; _5382 < _11067; ++_5382)
            {
              {
                _ptr__5373[safe_add( _5366,_5377 )] = _ptr__5349[safe_add( _5342,_5382 )];
                _ptr__5374[safe_add( _5368,_5377 )] = (_ptr__5350[safe_add( _5344,_5382 )] * ((*mcof)(_5379)));
                if ((_5338 > (int)0))
                {
                  {
                    int _11068 = _ptr__5348[safe_add( _5346,_5382 )];
                    int _11069 = _ptr__5348[safe_add( safe_add( _5346,_5382 ),(int)1 )];
                    for (int _5383 = _11068; _5383 < _11069; ++_5383)
                    {
                      {
                        _ptr__5372[safe_add( _5369,_5375 )] = _ptr__5348[safe_add( _5345,_5383 )];
                        _ptr__5374[safe_add( _5371,_5375 )] = _ptr__5350[safe_add( _5347,_5383 )];
                        ++ _5375;
                      }
                    }
                    _ptr__5372[safe_add( _5369,_5375 )] = 2;
                    _ptr__5374[safe_add( _5371,_5375 )] = ((*mcof)(_5379));
                    ++ _5375;
                    _ptr__5372[safe_add( _5369,_5375 )] = 5;
                    ++ _5375;
                    _ptr__5372[safe_add( safe_add( _5370,_5377 ),(int)1 )] = _5375;
                  }
                }
                {}
                ++ _5377;
              }
            }
            _ptr__5372[safe_add( safe_add( _5364,_5379 ),(int)1 )] = _5377;
            _ptr__5373[safe_add( _5367,_5379 )] = ((*msp)(_5379));
          }
        }
      }
    }
    else
    {
      {
        int _5384 = (int)((msp)->size(0));
        int _5385 = (int)0;
        int _5386 = _5336;
        int _5387 = (int)0;
        while ( ((_5385 < _5384) && (_5387 < _5386)) )
        {
          {
            if ((((*msp)(_5385)) < _ptr__5349[safe_add( _5343,_5387 )]))
            {
              {
                ++ _5385;
              }
            }
            else if((((*msp)(_5385)) > _ptr__5349[safe_add( _5343,_5387 )]))
            {
              {
                ++ _5387;
              }
            }
            else
            {
              {
                int _5388 = _ptr__5348[safe_add( _5341,_5387 )];
                int _5389 = _ptr__5348[safe_add( safe_add( _5341,_5387 ),(int)1 )];
                int _11070 = _5388;
                int _11071 = _5389;
                for (int _5390 = _11070; _5390 < _11071; ++_5390)
                {
                  {
                    _ptr__5373[safe_add( _5366,_5377 )] = _ptr__5349[safe_add( _5342,_5390 )];
                    _ptr__5374[safe_add( _5368,_5377 )] = (_ptr__5350[safe_add( _5342,_5390 )] * ((*mcof)(_5385)));
                    if ((_5338 > (int)0))
                    {
                      {
                        int _11072 = _ptr__5348[safe_add( _5346,_5390 )];
                        int _11073 = _ptr__5348[safe_add( safe_add( _5346,_5390 ),(int)1 )];
                        for (int _5391 = _11072; _5391 < _11073; ++_5391)
                        {
                          {
                            _ptr__5372[safe_add( _5369,_5375 )] = _ptr__5348[safe_add( _5345,_5391 )];
                            _ptr__5374[safe_add( _5371,_5375 )] = _ptr__5350[safe_add( _5347,_5391 )];
                            ++ _5375;
                          }
                        }
                        _ptr__5372[safe_add( _5369,_5375 )] = 2;
                        _ptr__5374[safe_add( _5371,_5375 )] = ((*mcof)(_5385));
                        ++ _5375;
                        _ptr__5372[safe_add( _5369,_5375 )] = 5;
                        ++ _5375;
                        _ptr__5372[safe_add( safe_add( _5370,_5377 ),(int)1 )] = _5375;
                      }
                    }
                    {}
                    ++ _5377;
                  }
                }
                _ptr__5372[safe_add( safe_add( _5364,_5376 ),(int)1 )] = _5377;
                _ptr__5373[safe_add( _5367,_5376 )] = ((*msp)(_5385));
                ++ _5376;
                ++ _5385;
                ++ _5387;
              }
            }
          }
        }
      }
    }
  }
  if ((!_5362))
  {
    {
      _5332->popi64(_5353);
    }
  }
  {}
}
std::string mosek::fusion::ExprMulElement :: toString() { return mosek::fusion::p_ExprMulElement::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulElement::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulElement(M,"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulElement::destroy(){expr.reset();msp.reset();mcof.reset();}void mosek::fusion::ExprMulElement::destroy() { mosek::fusion::p_ExprMulElement::_get_impl(this)->destroy(); }mosek::fusion::ExprMulScalarConst::ExprMulScalarConst(mosek::fusion::p_ExprMulScalarConst *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulScalarConst()" << this << std::endl; */ }mosek::fusion::ExprMulScalarConst::~ExprMulScalarConst() {  /* std::cout << "~ExprMulScalarConst()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulScalarConst::p_ExprMulScalarConst  (::mosek::fusion::ExprMulScalarConst * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulScalarConst::t mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst  (double _5392,    monty::rc_ptr< ::mosek::fusion::Expression > _5393){ return new mosek::fusion::ExprMulScalarConst(_5392,_5393); }mosek::fusion::ExprMulScalarConst::ExprMulScalarConst  (double _5392,    monty::rc_ptr< ::mosek::fusion::Expression > _5393) :    ExprMulScalarConst(new mosek::fusion::p_ExprMulScalarConst(this)){ mosek::fusion::p_ExprMulScalarConst::_get_impl(this)->_initialize(_5392,_5393); }void mosek::fusion::p_ExprMulScalarConst::_initialize  (double _5392,    monty::rc_ptr< ::mosek::fusion::Expression > _5393){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_5393->getShape());
    mosek::fusion::p_ExprMulScalarConst::_get_impl(::mosek::fusion::ExprMulScalarConst::t(_pubthis))->c = _5392;
    mosek::fusion::p_ExprMulScalarConst::_get_impl(::mosek::fusion::ExprMulScalarConst::t(_pubthis))->expr = _5393;
  }
}void mosek::fusion::ExprMulScalarConst :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5394,monty::rc_ptr< ::mosek::fusion::WorkStack > _5395,monty::rc_ptr< ::mosek::fusion::WorkStack > _5396) { mosek::fusion::p_ExprMulScalarConst::_get_impl(this)->eval(_5394,_5395,_5396); }void mosek::fusion::p_ExprMulScalarConst::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5394,monty::rc_ptr< ::mosek::fusion::WorkStack > _5395,monty::rc_ptr< ::mosek::fusion::WorkStack > _5396){
  expr->eval(_5395,_5394,_5396);
  _5395->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _5397 = mosek::fusion::p_WorkStack::_get_impl(_5395)->i32;
  _checked_ptr_1<int> _ptr__5397(_5397 ? _5397->raw() : nullptr,_5397 ? _5397->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5398 = mosek::fusion::p_WorkStack::_get_impl(_5395)->i64;
  _checked_ptr_1<long long> _ptr__5398(_5398 ? _5398->raw() : nullptr,_5398 ? _5398->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5399 = mosek::fusion::p_WorkStack::_get_impl(_5395)->f64;
  _checked_ptr_1<double> _ptr__5399(_5399 ? _5399->raw() : nullptr,_5399 ? _5399->size(0) : 0);
  int _5400 = mosek::fusion::p_WorkStack::_get_impl(_5395)->nd;
  int _5401 = mosek::fusion::p_WorkStack::_get_impl(_5395)->nelem;
  int _5402 = mosek::fusion::p_WorkStack::_get_impl(_5395)->nnz;
  bool _5403 = mosek::fusion::p_WorkStack::_get_impl(_5395)->hassp;
  int _5404 = mosek::fusion::p_WorkStack::_get_impl(_5395)->ncodeatom;
  int _5405 = mosek::fusion::p_WorkStack::_get_impl(_5395)->ptr_base;
  int _5406 = mosek::fusion::p_WorkStack::_get_impl(_5395)->code_base;
  int _5407 = mosek::fusion::p_WorkStack::_get_impl(_5395)->cconst_base;
  int _5408 = mosek::fusion::p_WorkStack::_get_impl(_5395)->codeptr_base;
  int _5409 = mosek::fusion::p_WorkStack::_get_impl(_5395)->shape_base;
  int _5410 = mosek::fusion::p_WorkStack::_get_impl(_5395)->sp_base;
  int _5411 = mosek::fusion::p_WorkStack::_get_impl(_5395)->nidxs_base;
  int _5412 = mosek::fusion::p_WorkStack::_get_impl(_5395)->cof_base;
  int _5413 = mosek::fusion::p_WorkStack::_get_impl(_5395)->cconst_base;
  int _11074;
  bool _11075 = (_5404 == (int)0);
  if (_11075)
  {
    _11074 = (int)0;
  }
  else
  {
    _11074 = safe_add( _5404,safe_mul( (int)2,_5402 ) );
  }
  int _5414 = _11074;
  _5394->alloc_expr(_5400,_5401,_5402,_5403,_5414);
  std::shared_ptr< monty::ndarray< long long,1 > > _5415 = mosek::fusion::p_WorkStack::_get_impl(_5394)->i64;
  _checked_ptr_1<long long> _ptr__5415(_5415 ? _5415->raw() : nullptr,_5415 ? _5415->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5416 = mosek::fusion::p_WorkStack::_get_impl(_5394)->f64;
  _checked_ptr_1<double> _ptr__5416(_5416 ? _5416->raw() : nullptr,_5416 ? _5416->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5417 = mosek::fusion::p_WorkStack::_get_impl(_5394)->i32;
  _checked_ptr_1<int> _ptr__5417(_5417 ? _5417->raw() : nullptr,_5417 ? _5417->size(0) : 0);
  int _5418 = mosek::fusion::p_WorkStack::_get_impl(_5394)->ptr_base;
  int _5419 = mosek::fusion::p_WorkStack::_get_impl(_5394)->nidxs_base;
  int _5420 = mosek::fusion::p_WorkStack::_get_impl(_5394)->cof_base;
  int _5421 = mosek::fusion::p_WorkStack::_get_impl(_5394)->code_base;
  int _5422 = mosek::fusion::p_WorkStack::_get_impl(_5394)->codeptr_base;
  int _5423 = mosek::fusion::p_WorkStack::_get_impl(_5394)->cconst_base;
  bool _5424 = mosek::fusion::p_WorkStack::_get_impl(_5394)->hassp;
  int _5425 = mosek::fusion::p_WorkStack::_get_impl(_5394)->shape_base;
  int _5426 = mosek::fusion::p_WorkStack::_get_impl(_5394)->sp_base;
  {
    int _11076 = (int)0;
    int _11077 = safe_add( _5401,(int)1 );
    for (int _5427 = _11076; _5427 < _11077; ++_5427)
    {
      {
        _ptr__5417[safe_add( _5418,_5427 )] = _ptr__5397[safe_add( _5405,_5427 )];
      }
    }
    int _11078 = (int)0;
    int _11079 = _5402;
    for (int _5428 = _11078; _5428 < _11079; ++_5428)
    {
      {
        _ptr__5415[safe_add( _5419,_5428 )] = _ptr__5398[safe_add( _5411,_5428 )];
        _ptr__5416[safe_add( _5420,_5428 )] = (_ptr__5399[safe_add( _5412,_5428 )] * c);
      }
    }
    if (_5403)
    {
      {
        int _11080 = (int)0;
        int _11081 = _5401;
        for (int _5429 = _11080; _5429 < _11081; ++_5429)
        {
          {
            _ptr__5415[safe_add( _5426,_5429 )] = _ptr__5398[safe_add( _5410,_5429 )];
          }
        }
      }
    }
    {}
    int _11082 = (int)0;
    int _11083 = _5400;
    for (int _5430 = _11082; _5430 < _11083; ++_5430)
    {
      {
        _ptr__5417[safe_add( _5425,_5430 )] = _ptr__5397[safe_add( _5409,_5430 )];
      }
    }
    if ((_5404 > (int)0))
    {
      {
        _ptr__5417[_5422] = (int)0;
        int _5431 = (int)0;
        int _11084 = (int)0;
        int _11085 = _5402;
        for (int _5432 = _11084; _5432 < _11085; ++_5432)
        {
          {
            int _11086 = _ptr__5397[safe_add( _5408,_5432 )];
            int _11087 = _ptr__5397[safe_add( safe_add( _5408,_5432 ),(int)1 )];
            for (int _5433 = _11086; _5433 < _11087; ++_5433)
            {
              {
                _ptr__5417[safe_add( _5421,_5431 )] = _ptr__5397[safe_add( _5406,_5433 )];
                _ptr__5416[safe_add( _5423,_5431 )] = _ptr__5399[safe_add( _5407,_5433 )];
                ++ _5431;
              }
            }
            _ptr__5417[safe_add( _5421,_5431 )] = 2;
            _ptr__5416[safe_add( _5423,_5431 )] = c;
            ++ _5431;
            _ptr__5417[safe_add( _5421,_5431 )] = 5;
            ++ _5431;
            _ptr__5417[safe_add( safe_add( _5422,_5432 ),(int)1 )] = _5431;
          }
        }
      }
    }
    {}
  }
}
std::string mosek::fusion::ExprMulScalarConst :: toString() { return mosek::fusion::p_ExprMulScalarConst::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulScalarConst::toString(){
  return std::string ("ExprMulScalarConst()");
}
void mosek::fusion::p_ExprMulScalarConst::destroy(){expr.reset();}void mosek::fusion::ExprMulScalarConst::destroy() { mosek::fusion::p_ExprMulScalarConst::_get_impl(this)->destroy(); }mosek::fusion::ExprScalarMul::ExprScalarMul(mosek::fusion::p_ExprScalarMul *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprScalarMul()" << this << std::endl; */ }mosek::fusion::ExprScalarMul::~ExprScalarMul() {  /* std::cout << "~ExprScalarMul()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprScalarMul::p_ExprScalarMul  (::mosek::fusion::ExprScalarMul * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprScalarMul::t mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul  (int _5434,    int _5435,    std::shared_ptr< monty::ndarray< int,1 > > _5436,    std::shared_ptr< monty::ndarray< int,1 > > _5437,    std::shared_ptr< monty::ndarray< double,1 > > _5438,    monty::rc_ptr< ::mosek::fusion::Expression > _5439,    int _5440){ return new mosek::fusion::ExprScalarMul(_5434,_5435,_5436,_5437,_5438,_5439,_5440); }mosek::fusion::ExprScalarMul::ExprScalarMul  (int _5434,    int _5435,    std::shared_ptr< monty::ndarray< int,1 > > _5436,    std::shared_ptr< monty::ndarray< int,1 > > _5437,    std::shared_ptr< monty::ndarray< double,1 > > _5438,    monty::rc_ptr< ::mosek::fusion::Expression > _5439,    int _5440) :    ExprScalarMul(new mosek::fusion::p_ExprScalarMul(this)){ mosek::fusion::p_ExprScalarMul::_get_impl(this)->_initialize(_5434,_5435,_5436,_5437,_5438,_5439,_5440); }void mosek::fusion::p_ExprScalarMul::_initialize  (int _5434,    int _5435,    std::shared_ptr< monty::ndarray< int,1 > > _5436,    std::shared_ptr< monty::ndarray< int,1 > > _5437,    std::shared_ptr< monty::ndarray< double,1 > > _5438,    monty::rc_ptr< ::mosek::fusion::Expression > _5439,    int _5440){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5436(_5436 ? _5436->raw() : nullptr, _5436 ? _5436->size(0) : 0);
    _checked_ptr_1<int> _ptr__5437(_5437 ? _5437->raw() : nullptr, _5437 ? _5437->size(0) : 0);
    _checked_ptr_1<double> _ptr__5438(_5438 ? _5438->raw() : nullptr, _5438 ? _5438->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_5434),(int)(_5435)}));
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->mdim0 = _5434;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->mdim1 = _5435;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->msubi = _5436;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->msubj = _5437;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->mval = _5438;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->expr = _5439;
  }
}mosek::fusion::ExprScalarMul::t mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul  (int _5441,    int _5442,    std::shared_ptr< monty::ndarray< int,1 > > _5443,    std::shared_ptr< monty::ndarray< int,1 > > _5444,    std::shared_ptr< monty::ndarray< double,1 > > _5445,    monty::rc_ptr< ::mosek::fusion::Expression > _5446){ return new mosek::fusion::ExprScalarMul(_5441,_5442,_5443,_5444,_5445,_5446); }mosek::fusion::ExprScalarMul::ExprScalarMul  (int _5441,    int _5442,    std::shared_ptr< monty::ndarray< int,1 > > _5443,    std::shared_ptr< monty::ndarray< int,1 > > _5444,    std::shared_ptr< monty::ndarray< double,1 > > _5445,    monty::rc_ptr< ::mosek::fusion::Expression > _5446) :    ExprScalarMul(new mosek::fusion::p_ExprScalarMul(this)){ mosek::fusion::p_ExprScalarMul::_get_impl(this)->_initialize(_5441,_5442,_5443,_5444,_5445,_5446); }void mosek::fusion::p_ExprScalarMul::_initialize  (int _5441,    int _5442,    std::shared_ptr< monty::ndarray< int,1 > > _5443,    std::shared_ptr< monty::ndarray< int,1 > > _5444,    std::shared_ptr< monty::ndarray< double,1 > > _5445,    monty::rc_ptr< ::mosek::fusion::Expression > _5446){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5443(_5443 ? _5443->raw() : nullptr, _5443 ? _5443->size(0) : 0);
    _checked_ptr_1<int> _ptr__5444(_5444 ? _5444->raw() : nullptr, _5444 ? _5444->size(0) : 0);
    _checked_ptr_1<double> _ptr__5445(_5445 ? _5445->raw() : nullptr, _5445 ? _5445->size(0) : 0);
    mosek::fusion::p_ExprScalarMul::_initialize(_5441,_5442,_5443,_5444,_5445,_5446,::mosek::fusion::p_ExprScalarMul::validate(_5441,_5442,_5443,_5444,_5445,_5446));
  }
}void mosek::fusion::ExprScalarMul :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5447,monty::rc_ptr< ::mosek::fusion::WorkStack > _5448,monty::rc_ptr< ::mosek::fusion::WorkStack > _5449) { mosek::fusion::p_ExprScalarMul::_get_impl(this)->eval(_5447,_5448,_5449); }void mosek::fusion::p_ExprScalarMul::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5447,monty::rc_ptr< ::mosek::fusion::WorkStack > _5448,monty::rc_ptr< ::mosek::fusion::WorkStack > _5449){
  mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->expr->eval(_5448,_5447,_5449);
  _5448->pop_expr();
  int _5450 = mosek::fusion::p_WorkStack::_get_impl(_5448)->nd;
  int _5451 = mosek::fusion::p_WorkStack::_get_impl(_5448)->nelem;
  int _5452 = mosek::fusion::p_WorkStack::_get_impl(_5448)->nnz;
  bool _5453 = mosek::fusion::p_WorkStack::_get_impl(_5448)->hassp;
  int _5454 = mosek::fusion::p_WorkStack::_get_impl(_5448)->ncodeatom;
  int _5455 = mosek::fusion::p_WorkStack::_get_impl(_5448)->ptr_base;
  int _5456 = mosek::fusion::p_WorkStack::_get_impl(_5448)->sp_base;
  int _5457 = mosek::fusion::p_WorkStack::_get_impl(_5448)->nidxs_base;
  int _5458 = mosek::fusion::p_WorkStack::_get_impl(_5448)->cof_base;
  int _5459 = mosek::fusion::p_WorkStack::_get_impl(_5448)->code_base;
  int _5460 = mosek::fusion::p_WorkStack::_get_impl(_5448)->codeptr_base;
  int _5461 = mosek::fusion::p_WorkStack::_get_impl(_5448)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _5462 = mosek::fusion::p_WorkStack::_get_impl(_5448)->i32;
  _checked_ptr_1<int> _ptr__5462(_5462 ? _5462->raw() : nullptr,_5462 ? _5462->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5463 = mosek::fusion::p_WorkStack::_get_impl(_5448)->i64;
  _checked_ptr_1<long long> _ptr__5463(_5463 ? _5463->raw() : nullptr,_5463 ? _5463->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5464 = mosek::fusion::p_WorkStack::_get_impl(_5448)->f64;
  _checked_ptr_1<double> _ptr__5464(_5464 ? _5464->raw() : nullptr,_5464 ? _5464->size(0) : 0);
  int _5465 = (int)((mval)->size(0));
  if ((_5450 != (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid expression shape"));
    }
  }
  {}
  if ((_5451 == (int)0))
  {
    {
      _5447->alloc_expr((int)2,(int)0,(int)0,true);
      ((*mosek::fusion::p_WorkStack::_get_impl(_5447)->i32)(mosek::fusion::p_WorkStack::_get_impl(_5447)->shape_base)) = mdim0;
      ((*mosek::fusion::p_WorkStack::_get_impl(_5447)->i32)(safe_add( mosek::fusion::p_WorkStack::_get_impl(_5447)->shape_base,(int)1 ))) = mdim1;
    }
  }
  else
  {
    {
      int _11088;
      bool _11089 = (_5454 > (int)0);
      if (_11089)
      {
        _11088 = safe_mul( (int)2,_5452 );
      }
      else
      {
        _11088 = (int)0;
      }
      int _5466 = safe_mul( _5465,safe_add( _5454,_11088 ) );
      _5447->alloc_expr((int)2,_5465,safe_mul( _5465,_5452 ),true,_5466);
      int _5467 = mosek::fusion::p_WorkStack::_get_impl(_5447)->ptr_base;
      int _5468 = mosek::fusion::p_WorkStack::_get_impl(_5447)->nidxs_base;
      int _5469 = mosek::fusion::p_WorkStack::_get_impl(_5447)->sp_base;
      int _5470 = mosek::fusion::p_WorkStack::_get_impl(_5447)->cof_base;
      int _5471 = mosek::fusion::p_WorkStack::_get_impl(_5447)->shape_base;
      int _5472 = mosek::fusion::p_WorkStack::_get_impl(_5447)->code_base;
      int _5473 = mosek::fusion::p_WorkStack::_get_impl(_5447)->codeptr_base;
      int _5474 = mosek::fusion::p_WorkStack::_get_impl(_5447)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _5475 = mosek::fusion::p_WorkStack::_get_impl(_5447)->i32;
      _checked_ptr_1<int> _ptr__5475(_5475 ? _5475->raw() : nullptr,_5475 ? _5475->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _5476 = mosek::fusion::p_WorkStack::_get_impl(_5447)->i64;
      _checked_ptr_1<long long> _ptr__5476(_5476 ? _5476->raw() : nullptr,_5476 ? _5476->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _5477 = mosek::fusion::p_WorkStack::_get_impl(_5447)->f64;
      _checked_ptr_1<double> _ptr__5477(_5477 ? _5477->raw() : nullptr,_5477 ? _5477->size(0) : 0);
      _ptr__5475[_5471] = mdim0;
      _ptr__5475[safe_add( _5471,(int)1 )] = mdim1;
      int _5478 = (int)0;
      int _5479 = (int)0;
      _ptr__5475[_5467] = (int)0;
      if ((_5454 > (int)0))
      {
        {
          _ptr__5475[_5473] = (int)0;
          int _11090 = (int)0;
          int _11091 = _5465;
          for (int _5480 = _11090; _5480 < _11091; ++_5480)
          {
            {
              int _11092 = (int)0;
              int _11093 = _5452;
              for (int _5481 = _11092; _5481 < _11093; ++_5481)
              {
                {
                  _ptr__5476[safe_add( _5468,_5479 )] = _ptr__5463[safe_add( _5457,_5481 )];
                  _ptr__5477[safe_add( _5470,_5479 )] = (_ptr__5464[safe_add( _5458,_5481 )] * ((*mval)(_5480)));
                  int _11094 = _ptr__5462[safe_add( _5460,_5481 )];
                  int _11095 = _ptr__5462[safe_add( safe_add( _5460,_5481 ),(int)1 )];
                  for (int _5482 = _11094; _5482 < _11095; ++_5482)
                  {
                    {
                      _ptr__5475[safe_add( _5472,_5478 )] = _ptr__5462[safe_add( _5459,_5482 )];
                      _ptr__5477[safe_add( _5474,_5478 )] = _ptr__5464[safe_add( _5461,_5482 )];
                      ++ _5478;
                    }
                  }
                  _ptr__5475[safe_add( _5472,_5478 )] = 2;
                  _ptr__5477[safe_add( _5474,_5478 )] = ((*mval)(_5480));
                  ++ _5478;
                  _ptr__5475[safe_add( _5472,_5478 )] = 5;
                  ++ _5478;
                  _ptr__5475[safe_add( safe_add( _5473,_5479 ),(int)1 )] = _5478;
                  ++ _5479;
                }
              }
              _ptr__5476[safe_add( _5469,_5480 )] = safe_add( safe_mul( ((*msubi)(_5480)),mdim1 ),((*msubj)(_5480)) );
              _ptr__5475[safe_add( safe_add( _5467,_5480 ),(int)1 )] = _5479;
            }
          }
        }
      }
      else
      {
        {
          int _11096 = (int)0;
          int _11097 = _5465;
          for (int _5483 = _11096; _5483 < _11097; ++_5483)
          {
            {
              int _11098 = (int)0;
              int _11099 = _5452;
              for (int _5484 = _11098; _5484 < _11099; ++_5484)
              {
                {
                  _ptr__5476[safe_add( _5468,_5479 )] = _ptr__5463[safe_add( _5457,_5484 )];
                  _ptr__5477[safe_add( _5470,_5479 )] = (_ptr__5464[safe_add( _5458,_5484 )] * ((*mval)(_5483)));
                  ++ _5479;
                }
              }
              _ptr__5476[safe_add( _5469,_5483 )] = safe_add( safe_mul( ((*msubi)(_5483)),mdim1 ),((*msubj)(_5483)) );
              _ptr__5475[safe_add( safe_add( _5467,_5483 ),(int)1 )] = _5479;
            }
          }
        }
      }
    }
  }
}
int mosek::fusion::p_ExprScalarMul::validate(int _5485,int _5486,std::shared_ptr< monty::ndarray< int,1 > > _5487,std::shared_ptr< monty::ndarray< int,1 > > _5488,std::shared_ptr< monty::ndarray< double,1 > > _5489,monty::rc_ptr< ::mosek::fusion::Expression > _5490){
  _checked_ptr_1<int> _ptr__5487(_5487 ? _5487->raw() : nullptr, _5487 ? _5487->size(0) : 0);
  _checked_ptr_1<int> _ptr__5488(_5488 ? _5488->raw() : nullptr, _5488 ? _5488->size(0) : 0);
  _checked_ptr_1<double> _ptr__5489(_5489 ? _5489->raw() : nullptr, _5489 ? _5489->size(0) : 0);
  int _5491 = _5490->getND();
  if ((_5491 != (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if (((_5485 < (int)0) || (_5486 < (int)0)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if ((((int)((_5487)->size(0)) != (int)((_5488)->size(0))) || ((int)((_5487)->size(0)) != (int)((_5489)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int _5492 = (int)((_5487)->size(0));
  bool _5493 = false;
  bool _5494 = false;
  {
    int _11100 = (int)0;
    int _11101 = _5492;
    for (int _5495 = _11100; _5495 < _11101; ++_5495)
    {
      {
        if (((_ptr__5487[_5495] < (int)0) || ((_ptr__5487[_5495] >= _5485) || ((_ptr__5488[_5495] < (int)0) || (_ptr__5488[_5495] >= _5486)))))
        {
          {
            _5493 = true;
          }
        }
        {}
      }
    }
    int _11102 = (int)0;
    int _11103 = (_5492 - (int)1);
    for (int _5496 = _11102; _5496 < _11103; ++_5496)
    {
      {
        if (((_ptr__5487[_5496] > _ptr__5487[safe_add( _5496,(int)1 )]) || ((_ptr__5487[_5496] == _ptr__5487[safe_add( _5496,(int)1 )]) && (_ptr__5488[_5496] >= _ptr__5488[safe_add( _5496,(int)1 )]))))
        {
          {
            _5494 = true;
          }
        }
        {}
      }
    }
  }
  if (_5493)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  if (_5494)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
    }
  }
  {}
  return (int)1;
}
std::string mosek::fusion::ExprScalarMul :: toString() { return mosek::fusion::p_ExprScalarMul::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprScalarMul::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprScalarMul(M,"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprScalarMul::destroy(){expr.reset();mval.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprScalarMul::destroy() { mosek::fusion::p_ExprScalarMul::_get_impl(this)->destroy(); }mosek::fusion::ExprMulRight::ExprMulRight(mosek::fusion::p_ExprMulRight *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulRight()" << this << std::endl; */ }mosek::fusion::ExprMulRight::~ExprMulRight() {  /* std::cout << "~ExprMulRight()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulRight::p_ExprMulRight  (::mosek::fusion::ExprMulRight * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulRight::t mosek::fusion::p_ExprMulRight::_new_ExprMulRight  (int _5497,    int _5498,    std::shared_ptr< monty::ndarray< int,1 > > _5499,    std::shared_ptr< monty::ndarray< int,1 > > _5500,    std::shared_ptr< monty::ndarray< double,1 > > _5501,    monty::rc_ptr< ::mosek::fusion::Expression > _5502,    int _5503){ return new mosek::fusion::ExprMulRight(_5497,_5498,_5499,_5500,_5501,_5502,_5503); }mosek::fusion::ExprMulRight::ExprMulRight  (int _5497,    int _5498,    std::shared_ptr< monty::ndarray< int,1 > > _5499,    std::shared_ptr< monty::ndarray< int,1 > > _5500,    std::shared_ptr< monty::ndarray< double,1 > > _5501,    monty::rc_ptr< ::mosek::fusion::Expression > _5502,    int _5503) :    ExprMulRight(new mosek::fusion::p_ExprMulRight(this)){ mosek::fusion::p_ExprMulRight::_get_impl(this)->_initialize(_5497,_5498,_5499,_5500,_5501,_5502,_5503); }void mosek::fusion::p_ExprMulRight::_initialize  (int _5497,    int _5498,    std::shared_ptr< monty::ndarray< int,1 > > _5499,    std::shared_ptr< monty::ndarray< int,1 > > _5500,    std::shared_ptr< monty::ndarray< double,1 > > _5501,    monty::rc_ptr< ::mosek::fusion::Expression > _5502,    int _5503){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5499(_5499 ? _5499->raw() : nullptr, _5499 ? _5499->size(0) : 0);
    _checked_ptr_1<int> _ptr__5500(_5500 ? _5500->raw() : nullptr, _5500 ? _5500->size(0) : 0);
    _checked_ptr_1<double> _ptr__5501(_5501 ? _5501->raw() : nullptr, _5501 ? _5501->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprMulRight::computeshape(_5498,_5502->getShape()));
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->mdim0 = _5497;
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->mdim1 = _5498;
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->msubi = _5499;
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->msubj = _5500;
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->mval = _5501;
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->expr = _5502;
  }
}mosek::fusion::ExprMulRight::t mosek::fusion::p_ExprMulRight::_new_ExprMulRight  (int _5504,    int _5505,    std::shared_ptr< monty::ndarray< int,1 > > _5506,    std::shared_ptr< monty::ndarray< int,1 > > _5507,    std::shared_ptr< monty::ndarray< double,1 > > _5508,    monty::rc_ptr< ::mosek::fusion::Expression > _5509){ return new mosek::fusion::ExprMulRight(_5504,_5505,_5506,_5507,_5508,_5509); }mosek::fusion::ExprMulRight::ExprMulRight  (int _5504,    int _5505,    std::shared_ptr< monty::ndarray< int,1 > > _5506,    std::shared_ptr< monty::ndarray< int,1 > > _5507,    std::shared_ptr< monty::ndarray< double,1 > > _5508,    monty::rc_ptr< ::mosek::fusion::Expression > _5509) :    ExprMulRight(new mosek::fusion::p_ExprMulRight(this)){ mosek::fusion::p_ExprMulRight::_get_impl(this)->_initialize(_5504,_5505,_5506,_5507,_5508,_5509); }void mosek::fusion::p_ExprMulRight::_initialize  (int _5504,    int _5505,    std::shared_ptr< monty::ndarray< int,1 > > _5506,    std::shared_ptr< monty::ndarray< int,1 > > _5507,    std::shared_ptr< monty::ndarray< double,1 > > _5508,    monty::rc_ptr< ::mosek::fusion::Expression > _5509){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5506(_5506 ? _5506->raw() : nullptr, _5506 ? _5506->size(0) : 0);
    _checked_ptr_1<int> _ptr__5507(_5507 ? _5507->raw() : nullptr, _5507 ? _5507->size(0) : 0);
    _checked_ptr_1<double> _ptr__5508(_5508 ? _5508->raw() : nullptr, _5508 ? _5508->size(0) : 0);
    mosek::fusion::p_ExprMulRight::_initialize(_5504,_5505,_5506,_5507,_5508,_5509,::mosek::fusion::p_ExprMulRight::validate(_5504,_5505,_5506,_5507,_5508,_5509));
  }
}void mosek::fusion::ExprMulRight :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5510,monty::rc_ptr< ::mosek::fusion::WorkStack > _5511,monty::rc_ptr< ::mosek::fusion::WorkStack > _5512) { mosek::fusion::p_ExprMulRight::_get_impl(this)->eval(_5510,_5511,_5512); }void mosek::fusion::p_ExprMulRight::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5510,monty::rc_ptr< ::mosek::fusion::WorkStack > _5511,monty::rc_ptr< ::mosek::fusion::WorkStack > _5512){
  mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->expr->eval(_5511,_5510,_5512);
  _5511->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _5513 = mosek::fusion::p_WorkStack::_get_impl(_5511)->i32;
  _checked_ptr_1<int> _ptr__5513(_5513 ? _5513->raw() : nullptr,_5513 ? _5513->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5514 = mosek::fusion::p_WorkStack::_get_impl(_5511)->i64;
  _checked_ptr_1<long long> _ptr__5514(_5514 ? _5514->raw() : nullptr,_5514 ? _5514->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5515 = mosek::fusion::p_WorkStack::_get_impl(_5511)->f64;
  _checked_ptr_1<double> _ptr__5515(_5515 ? _5515->raw() : nullptr,_5515 ? _5515->size(0) : 0);
  int _5516 = mosek::fusion::p_WorkStack::_get_impl(_5511)->nd;
  if ((_5516 != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operator shape for multiplication"));
    }
  }
  {}
  int _5517 = mosek::fusion::p_WorkStack::_get_impl(_5511)->nelem;
  int _5518 = mosek::fusion::p_WorkStack::_get_impl(_5511)->nnz;
  int _5519 = mosek::fusion::p_WorkStack::_get_impl(_5511)->ncodeatom;
  bool _5520 = mosek::fusion::p_WorkStack::_get_impl(_5511)->hassp;
  int _5521 = mosek::fusion::p_WorkStack::_get_impl(_5511)->ptr_base;
  int _5522 = mosek::fusion::p_WorkStack::_get_impl(_5511)->shape_base;
  int _5523 = mosek::fusion::p_WorkStack::_get_impl(_5511)->sp_base;
  int _5524 = mosek::fusion::p_WorkStack::_get_impl(_5511)->nidxs_base;
  int _5525 = mosek::fusion::p_WorkStack::_get_impl(_5511)->cof_base;
  int _5526 = mosek::fusion::p_WorkStack::_get_impl(_5511)->codeptr_base;
  int _5527 = mosek::fusion::p_WorkStack::_get_impl(_5511)->code_base;
  int _5528 = mosek::fusion::p_WorkStack::_get_impl(_5511)->cconst_base;
  int _5529 = _ptr__5513[_5522];
  int _5530 = _ptr__5513[safe_add( _5522,(int)1 )];
  int _5531 = (int)((mval)->size(0));
  bool _5532 = (_5531 < safe_mul( (long long)mdim0,(long long)mdim1 ));
  if (_5532)
  {
    {
      int _5533 = _5512->alloci32(safe_add( mdim1,(int)1 ));
      int _5534 = _5512->alloci32(_5531);
      int _5535 = _5512->alloci32(safe_add( _5529,(int)1 ));
      std::shared_ptr< monty::ndarray< int,1 > > _5536 = mosek::fusion::p_WorkStack::_get_impl(_5512)->i32;
      _checked_ptr_1<int> _ptr__5536(_5536 ? _5536->raw() : nullptr,_5536 ? _5536->size(0) : 0);
      {
        int _11104 = (int)0;
        int _11105 = safe_add( mdim1,(int)1 );
        for (int _5537 = _11104; _5537 < _11105; ++_5537)
        {
          {
            _ptr__5536[safe_add( _5533,_5537 )] = (int)0;
          }
        }
        int _11106 = (int)0;
        int _11107 = _5531;
        for (int _5538 = _11106; _5538 < _11107; ++_5538)
        {
          {
            ++ _ptr__5536[safe_add( safe_add( _5533,((*msubj)(_5538)) ),(int)1 )];
          }
        }
        int _11108 = (int)0;
        int _11109 = mdim1;
        for (int _5539 = _11108; _5539 < _11109; ++_5539)
        {
          {
            _ptr__5536[safe_add( safe_add( _5533,_5539 ),(int)1 )] += _ptr__5536[safe_add( _5533,_5539 )];
          }
        }
        int _11110 = (int)0;
        int _11111 = _5531;
        for (int _5540 = _11110; _5540 < _11111; ++_5540)
        {
          {
            _ptr__5536[safe_add( _5534,_ptr__5536[safe_add( _5533,((*msubj)(_5540)) )] )] = _5540;
            ++ _ptr__5536[safe_add( _5533,((*msubj)(_5540)) )];
          }
        }
        int _11112 = (int)0;
        int _11113 = mdim1;
        for (int _5541 = _11112; _5541 < _11113; ++_5541)
        {
          {
            _ptr__5536[(safe_add( _5533,mdim1 ) - _5541)] = _ptr__5536[((safe_add( _5533,mdim1 ) - _5541) - (int)1)];
          }
        }
        _ptr__5536[_5533] = (int)0;
        int _11114 = (int)0;
        int _11115 = safe_add( _5529,(int)1 );
        for (int _5542 = _11114; _5542 < _11115; ++_5542)
        {
          {
            _ptr__5536[safe_add( _5535,_5542 )] = (int)0;
          }
        }
      }
      if (_5520)
      {
        {
          int _5543 = (int)0;
          int _5544 = (int)0;
          long long _5545 = (long long)0;
          {
            int _5546 = (int)0;
            while ( (_5546 < _5517) )
            {
              {
                long long _5547 = (_ptr__5514[safe_add( _5523,_5546 )] / _5530);
                int _5548 = _5546;
                ++ _5546;
                while ( ((_5546 < _5517) && ((_ptr__5514[safe_add( _5523,_5546 )] / _5530) == _5547)) )
                {
                  {
                    ++ _5546;
                  }
                }
                int _5549 = _5546;
                int _5550 = (int)0;
                while ( (_5550 < _5531) )
                {
                  {
                    int _5551 = ((*msubj)(_ptr__5536[safe_add( _5534,_5550 )]));
                    int _5552 = _5550;
                    ++ _5550;
                    while ( ((_5550 < _5531) && (((*msubj)(_ptr__5536[safe_add( _5534,_5550 )])) == _5551)) )
                    {
                      {
                        ++ _5550;
                      }
                    }
                    int _5553 = _5550;
                    bool _5554 = false;
                    int _5555 = _5552;
                    int _5556 = _5548;
                    while ( ((_5556 < _5549) && (_5555 < _5553)) )
                    {
                      {
                        int _5557 = _ptr__5536[safe_add( _5534,_5555 )];
                        if (((_ptr__5514[safe_add( _5523,_5556 )] % _5530) < ((*msubi)(_5557))))
                        {
                          {
                            ++ _5556;
                          }
                        }
                        else if(((_ptr__5514[safe_add( _5523,_5556 )] % _5530) > ((*msubi)(_5557))))
                        {
                          {
                            ++ _5555;
                          }
                        }
                        else
                        {
                          {
                            if (((((*mval)(_5557)) > (int)0) || ((int)0 < ((*mval)(_5557)))))
                            {
                              {
                                _5545 += (_ptr__5513[safe_add( safe_add( _5521,_5556 ),(int)1 )] - _ptr__5513[safe_add( _5521,_5556 )]);
                                if ((_5519 > (int)0))
                                {
                                  {
                                    _5543 += safe_add( (_ptr__5513[safe_add( _5526,_ptr__5513[safe_add( safe_add( _5521,_5556 ),(int)1 )] )] - _ptr__5513[safe_add( _5526,_ptr__5513[safe_add( _5521,_5556 )] )]),safe_mul( (int)2,(_ptr__5513[safe_add( safe_add( _5521,_5556 ),(int)1 )] - _ptr__5513[safe_add( _5521,_5556 )]) ) );
                                  }
                                }
                                {}
                                ++ _5556;
                                ++ _5555;
                                _5554 = true;
                              }
                            }
                            {}
                          }
                        }
                      }
                    }
                    if (_5554)
                    {
                      {
                        ++ _5544;
                      }
                    }
                    {}
                  }
                }
              }
            }
          }
          bool _5558 = (_5544 < safe_mul( _5529,mdim1 ));
          _5510->alloc_expr((int)2,_5544,(int)_5545,_5558,_5543);
          int _5559 = mosek::fusion::p_WorkStack::_get_impl(_5510)->ptr_base;
          int _5560 = mosek::fusion::p_WorkStack::_get_impl(_5510)->nidxs_base;
          int _11116;
          bool _11117 = _5558;
          if (_11117)
          {
            _11116 = mosek::fusion::p_WorkStack::_get_impl(_5510)->sp_base;
          }
          else
          {
            _11116 = _5510->alloci64(_5544);
          }
          int _5561 = _11116;
          int _5562 = mosek::fusion::p_WorkStack::_get_impl(_5510)->cof_base;
          int _5563 = mosek::fusion::p_WorkStack::_get_impl(_5510)->shape_base;
          int _5564 = mosek::fusion::p_WorkStack::_get_impl(_5510)->codeptr_base;
          int _5565 = mosek::fusion::p_WorkStack::_get_impl(_5510)->code_base;
          int _5566 = mosek::fusion::p_WorkStack::_get_impl(_5510)->cconst_base;
          std::shared_ptr< monty::ndarray< int,1 > > _5567 = mosek::fusion::p_WorkStack::_get_impl(_5510)->i32;
          _checked_ptr_1<int> _ptr__5567(_5567 ? _5567->raw() : nullptr,_5567 ? _5567->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _5568 = mosek::fusion::p_WorkStack::_get_impl(_5510)->i64;
          _checked_ptr_1<long long> _ptr__5568(_5568 ? _5568->raw() : nullptr,_5568 ? _5568->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _5569 = mosek::fusion::p_WorkStack::_get_impl(_5510)->f64;
          _checked_ptr_1<double> _ptr__5569(_5569 ? _5569->raw() : nullptr,_5569 ? _5569->size(0) : 0);
          _ptr__5567[_5563] = _5529;
          _ptr__5567[safe_add( _5563,(int)1 )] = mdim1;
          _ptr__5567[_5559] = (int)0;
          if ((_5543 > (int)0))
          {
            {
              _ptr__5567[_5564] = (int)0;
            }
          }
          {}
          {
            int _5570 = (int)0;
            int _5571 = (int)0;
            int _5572 = (int)0;
            int _5573 = (int)0;
            while ( (_5570 < _5517) )
            {
              {
                long long _5574 = (_ptr__5514[safe_add( _5523,_5570 )] / _5530);
                int _5575 = _5570;
                ++ _5570;
                while ( ((_5570 < _5517) && ((_ptr__5514[safe_add( _5523,_5570 )] / _5530) == _5574)) )
                {
                  {
                    ++ _5570;
                  }
                }
                int _5576 = _5570;
                int _5577 = (int)0;
                while ( (_5577 < _5531) )
                {
                  {
                    int _5578 = ((*msubj)(_ptr__5536[safe_add( _5534,_5577 )]));
                    int _5579 = _5577;
                    ++ _5577;
                    while ( ((_5577 < _5531) && (((*msubj)(_ptr__5536[safe_add( _5534,_5577 )])) == _5578)) )
                    {
                      {
                        ++ _5577;
                      }
                    }
                    int _5580 = _5577;
                    int _5581 = _5579;
                    int _5582 = _5575;
                    bool _5583 = false;
                    while ( ((_5582 < _5576) && (_5581 < _5580)) )
                    {
                      {
                        int _5584 = _ptr__5536[safe_add( _5534,_5581 )];
                        if (((_ptr__5514[safe_add( _5523,_5582 )] % _5530) < ((*msubi)(_5584))))
                        {
                          {
                            ++ _5582;
                          }
                        }
                        else if(((_ptr__5514[safe_add( _5523,_5582 )] % _5530) > ((*msubi)(_5584))))
                        {
                          {
                            ++ _5581;
                          }
                        }
                        else
                        {
                          {
                            if (((((*mval)(_5584)) > (int)0) || ((int)0 < ((*mval)(_5584)))))
                            {
                              {
                                int _11118 = _ptr__5513[safe_add( _5521,_5582 )];
                                int _11119 = _ptr__5513[safe_add( safe_add( _5521,_5582 ),(int)1 )];
                                for (int _5585 = _11118; _5585 < _11119; ++_5585)
                                {
                                  {
                                    _ptr__5568[safe_add( _5560,_5573 )] = _ptr__5514[safe_add( _5524,_5585 )];
                                    _ptr__5569[safe_add( _5562,_5573 )] = (_ptr__5515[safe_add( _5525,_5585 )] * ((*mval)(_5584)));
                                    if ((_5519 > (int)0))
                                    {
                                      {
                                        int _11120 = _ptr__5513[safe_add( _5526,_5585 )];
                                        int _11121 = _ptr__5513[safe_add( safe_add( _5526,_5585 ),(int)1 )];
                                        for (int _5586 = _11120; _5586 < _11121; ++_5586)
                                        {
                                          {
                                            _ptr__5567[safe_add( _5565,_5571 )] = _ptr__5513[safe_add( _5527,_5586 )];
                                            _ptr__5569[safe_add( _5566,_5571 )] = _ptr__5515[safe_add( _5528,_5586 )];
                                            ++ _5571;
                                          }
                                        }
                                        _ptr__5567[safe_add( _5565,_5571 )] = 2;
                                        _ptr__5569[safe_add( _5566,_5571 )] = ((*mval)(_5581));
                                        ++ _5571;
                                        _ptr__5567[safe_add( _5565,_5571 )] = 5;
                                        ++ _5571;
                                        _ptr__5567[safe_add( safe_add( _5564,_5573 ),(int)1 )] = _5571;
                                      }
                                    }
                                    {}
                                    ++ _5573;
                                  }
                                }
                                ++ _5582;
                                ++ _5581;
                                _5583 = true;
                              }
                            }
                            {}
                          }
                        }
                      }
                    }
                    if (_5583)
                    {
                      {
                        _ptr__5567[safe_add( safe_add( _5559,_5572 ),(int)1 )] = _5573;
                        _ptr__5568[safe_add( _5561,_5572 )] = safe_add( safe_mul( _5574,mdim1 ),_5578 );
                        ++ _5572;
                      }
                    }
                    {}
                  }
                }
              }
            }
            if ((_5573 != _5545))
            {
              {
                throw ::mosek::fusion::UnexpectedError(std::string ("Internal: invalid nnz"));
              }
            }
            {}
            if ((_5572 != _5544))
            {
              {
                throw ::mosek::fusion::UnexpectedError(std::string ("Internal: invalid nnz"));
              }
            }
            {}
            if ((_ptr__5567[safe_add( _5559,_5544 )] != _5545))
            {
              {
                throw ::mosek::fusion::UnexpectedError(std::string ("Internal: invalid nnz"));
              }
            }
            {}
          }
          if ((!_5558))
          {
            {
              _5510->popi64(_5544);
            }
          }
          {}
        }
      }
      else
      {
        {
          int _5587 = (int)0;
          int _5588 = safe_mul( _5529,mdim1 );
          int _5589 = (int)0;
          int _11122 = (int)0;
          int _11123 = _5529;
          for (int _5590 = _11122; _5590 < _11123; ++_5590)
          {
            {
              int _11124 = (int)0;
              int _11125 = mdim1;
              for (int _5591 = _11124; _5591 < _11125; ++_5591)
              {
                {
                  int _11126 = _ptr__5536[safe_add( _5533,_5591 )];
                  int _11127 = _ptr__5536[safe_add( safe_add( _5533,_5591 ),(int)1 )];
                  for (int _5592 = _11126; _5592 < _11127; ++_5592)
                  {
                    {
                      int _5593 = _ptr__5536[safe_add( _5534,_5592 )];
                      int _5594 = safe_add( safe_mul( _5590,_5530 ),((*msubi)(_5593)) );
                      _5589 += (_ptr__5513[safe_add( safe_add( _5521,_5594 ),(int)1 )] - _ptr__5513[safe_add( _5521,_5594 )]);
                      if ((_5519 > (int)0))
                      {
                        {
                          _5587 += safe_add( (_ptr__5513[safe_add( _5526,_ptr__5513[safe_add( safe_add( _5521,_5594 ),(int)1 )] )] - _ptr__5513[safe_add( _5526,_ptr__5513[safe_add( _5521,_5594 )] )]),safe_mul( (int)2,(_ptr__5513[safe_add( safe_add( _5521,_5594 ),(int)1 )] - _ptr__5513[safe_add( _5521,_5594 )]) ) );
                        }
                      }
                      {}
                    }
                  }
                }
              }
            }
          }
          bool _5595 = (_5588 < safe_mul( _5529,mdim1 ));
          if ((!(_5589 <= (int)0x7fffffff)))
          {
            {
              throw ::mosek::fusion::LengthError(std::string ("Maximum number of nonzeros exceeded in multiplication"));
            }
          }
          {}
          _5510->alloc_expr((int)2,_5588,(int)_5589,_5595,_5587);
          int _5596 = mosek::fusion::p_WorkStack::_get_impl(_5510)->shape_base;
          int _5597 = mosek::fusion::p_WorkStack::_get_impl(_5510)->ptr_base;
          int _5598 = mosek::fusion::p_WorkStack::_get_impl(_5510)->nidxs_base;
          int _11128;
          bool _11129 = _5595;
          if (_11129)
          {
            _11128 = mosek::fusion::p_WorkStack::_get_impl(_5510)->sp_base;
          }
          else
          {
            _11128 = _5510->alloci64(_5588);
          }
          int _5599 = _11128;
          int _5600 = mosek::fusion::p_WorkStack::_get_impl(_5510)->cof_base;
          int _5601 = mosek::fusion::p_WorkStack::_get_impl(_5510)->code_base;
          int _5602 = mosek::fusion::p_WorkStack::_get_impl(_5510)->codeptr_base;
          int _5603 = mosek::fusion::p_WorkStack::_get_impl(_5510)->cconst_base;
          std::shared_ptr< monty::ndarray< int,1 > > _5604 = mosek::fusion::p_WorkStack::_get_impl(_5510)->i32;
          _checked_ptr_1<int> _ptr__5604(_5604 ? _5604->raw() : nullptr,_5604 ? _5604->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _5605 = mosek::fusion::p_WorkStack::_get_impl(_5510)->i64;
          _checked_ptr_1<long long> _ptr__5605(_5605 ? _5605->raw() : nullptr,_5605 ? _5605->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _5606 = mosek::fusion::p_WorkStack::_get_impl(_5510)->f64;
          _checked_ptr_1<double> _ptr__5606(_5606 ? _5606->raw() : nullptr,_5606 ? _5606->size(0) : 0);
          _ptr__5604[_5596] = _5529;
          _ptr__5604[safe_add( _5596,(int)1 )] = mdim1;
          int _5607 = (int)0;
          int _5608 = (int)0;
          int _5609 = (int)0;
          _ptr__5604[_5597] = (int)0;
          if ((_5587 > (int)0))
          {
            {
              _ptr__5604[_5602] = (int)0;
            }
          }
          {}
          int _11130 = (int)0;
          int _11131 = _5529;
          for (int _5610 = _11130; _5610 < _11131; ++_5610)
          {
            {
              int _11132 = (int)0;
              int _11133 = mdim1;
              for (int _5611 = _11132; _5611 < _11133; ++_5611)
              {
                {
                  int _5612 = safe_mul( _5610,_5530 );
                  int _11134 = _ptr__5536[safe_add( _5533,_5611 )];
                  int _11135 = _ptr__5536[safe_add( safe_add( _5533,_5611 ),(int)1 )];
                  for (int _5613 = _11134; _5613 < _11135; ++_5613)
                  {
                    {
                      int _5614 = _ptr__5536[safe_add( _5534,_5613 )];
                      int _5615 = safe_add( _5612,((*msubi)(_5614)) );
                      if ((_5587 == (int)0))
                      {
                        {
                          int _11136 = _ptr__5513[safe_add( _5521,_5615 )];
                          int _11137 = _ptr__5513[safe_add( safe_add( _5521,_5615 ),(int)1 )];
                          for (int _5616 = _11136; _5616 < _11137; ++_5616)
                          {
                            {
                              _ptr__5605[safe_add( _5598,_5609 )] = _ptr__5514[safe_add( _5524,_5616 )];
                              _ptr__5606[safe_add( _5600,_5609 )] = (_ptr__5515[safe_add( _5525,_5616 )] * ((*mval)(_5614)));
                              ++ _5609;
                            }
                          }
                        }
                      }
                      else
                      {
                        {
                          int _11138 = _ptr__5513[safe_add( _5521,_5615 )];
                          int _11139 = _ptr__5513[safe_add( safe_add( _5521,_5615 ),(int)1 )];
                          for (int _5617 = _11138; _5617 < _11139; ++_5617)
                          {
                            {
                              _ptr__5605[safe_add( _5598,_5609 )] = _ptr__5514[safe_add( _5524,_5617 )];
                              _ptr__5606[safe_add( _5600,_5609 )] = (_ptr__5515[safe_add( _5525,_5617 )] * ((*mval)(_5614)));
                              int _11140 = _ptr__5513[safe_add( _5526,_5617 )];
                              int _11141 = _ptr__5513[safe_add( safe_add( _5526,_5617 ),(int)1 )];
                              for (int _5618 = _11140; _5618 < _11141; ++_5618)
                              {
                                {
                                  _ptr__5604[safe_add( _5601,_5607 )] = _ptr__5513[safe_add( _5527,_5618 )];
                                  _ptr__5606[safe_add( _5603,_5607 )] = _ptr__5515[safe_add( _5528,_5618 )];
                                  ++ _5607;
                                }
                              }
                              _ptr__5604[safe_add( _5601,_5607 )] = 2;
                              _ptr__5606[safe_add( _5603,_5607 )] = ((*mval)(_5614));
                              ++ _5607;
                              _ptr__5604[safe_add( _5601,_5607 )] = 5;
                              ++ _5607;
                              _ptr__5604[safe_add( safe_add( _5602,_5609 ),(int)1 )] = _5607;
                              ++ _5609;
                            }
                          }
                        }
                      }
                    }
                  }
                  _ptr__5604[safe_add( safe_add( _5597,_5608 ),(int)1 )] = _5609;
                  _ptr__5605[safe_add( _5599,_5608 )] = safe_add( safe_mul( _5610,mdim1 ),_5611 );
                  ++ _5608;
                }
              }
            }
          }
          if ((!_5595))
          {
            {
              _5510->popi64(_5588);
            }
          }
          {}
        }
      }
      _5512->clear();
    }
  }
  else
  {
    {
      int _5619 = _5512->alloci32(safe_add( _5529,(int)1 ));
      std::shared_ptr< monty::ndarray< int,1 > > _5620 = mosek::fusion::p_WorkStack::_get_impl(_5512)->i32;
      _checked_ptr_1<int> _ptr__5620(_5620 ? _5620->raw() : nullptr,_5620 ? _5620->size(0) : 0);
      int _11142 = (int)0;
      int _11143 = safe_add( _5529,(int)1 );
      for (int _5621 = _11142; _5621 < _11143; ++_5621)
      {
        {
          _ptr__5620[safe_add( _5619,_5621 )] = (int)0;
        }
      }
      long long _5622 = safe_mul( (long long)_5518,mdim1 );
      int _5623 = safe_mul( _5529,mdim1 );
      int _11144;
      bool _11145 = (_5519 == (int)0);
      if (_11145)
      {
        _11144 = (int)0;
      }
      else
      {
        _11144 = safe_mul( (int)_5622,(int)2 );
      }
      int _5624 = safe_add( safe_mul( _5519,mdim1 ),_11144 );
      bool _5625 = false;
      int _5626 = (int)2;
      if ((!(_5622 <= (int)0x7fffffff)))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Maximum number of nonzeros exceeded in multiplication"));
        }
      }
      {}
      _5510->alloc_expr(_5626,_5623,(int)_5622,_5625,_5624);
      std::shared_ptr< monty::ndarray< int,1 > > _5627 = mosek::fusion::p_WorkStack::_get_impl(_5510)->i32;
      _checked_ptr_1<int> _ptr__5627(_5627 ? _5627->raw() : nullptr,_5627 ? _5627->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _5628 = mosek::fusion::p_WorkStack::_get_impl(_5510)->i64;
      _checked_ptr_1<long long> _ptr__5628(_5628 ? _5628->raw() : nullptr,_5628 ? _5628->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _5629 = mosek::fusion::p_WorkStack::_get_impl(_5510)->f64;
      _checked_ptr_1<double> _ptr__5629(_5629 ? _5629->raw() : nullptr,_5629 ? _5629->size(0) : 0);
      int _5630 = mosek::fusion::p_WorkStack::_get_impl(_5510)->shape_base;
      int _5631 = mosek::fusion::p_WorkStack::_get_impl(_5510)->ptr_base;
      int _5632 = mosek::fusion::p_WorkStack::_get_impl(_5510)->nidxs_base;
      int _5633 = mosek::fusion::p_WorkStack::_get_impl(_5510)->sp_base;
      int _5634 = mosek::fusion::p_WorkStack::_get_impl(_5510)->cof_base;
      int _5635 = mosek::fusion::p_WorkStack::_get_impl(_5510)->code_base;
      int _5636 = mosek::fusion::p_WorkStack::_get_impl(_5510)->codeptr_base;
      int _5637 = mosek::fusion::p_WorkStack::_get_impl(_5510)->cconst_base;
      _ptr__5627[_5630] = _5529;
      _ptr__5627[safe_add( _5630,(int)1 )] = mdim1;
      int _5638 = (int)0;
      int _5639 = (int)0;
      int _5640 = (int)0;
      _ptr__5627[_5631] = (int)0;
      if ((_5624 > (int)0))
      {
        {
          _ptr__5627[_5636] = (int)0;
        }
      }
      {}
      if (_5520)
      {
        {
          {
            int _11146 = (int)0;
            int _11147 = _5517;
            for (int _5641 = _11146; _5641 < _11147; ++_5641)
            {
              {
                ++ _ptr__5620[safe_add( safe_add( _5619,(_ptr__5514[safe_add( _5523,_5641 )] / _5530) ),(int)1 )];
              }
            }
            int _11148 = (int)0;
            int _11149 = _5529;
            for (int _5642 = _11148; _5642 < _11149; ++_5642)
            {
              {
                _ptr__5620[safe_add( safe_add( _5619,_5642 ),(int)1 )] += _ptr__5620[safe_add( _5619,_5642 )];
              }
            }
            int _11150 = (int)0;
            int _11151 = _5529;
            for (int _5643 = _11150; _5643 < _11151; ++_5643)
            {
              {
                int _11152 = (int)0;
                int _11153 = mdim1;
                for (int _5644 = _11152; _5644 < _11153; ++_5644)
                {
                  {
                    int _11154 = _ptr__5620[safe_add( _5619,_5643 )];
                    int _11155 = _ptr__5620[safe_add( safe_add( _5619,_5643 ),(int)1 )];
                    for (int _5645 = _11154; _5645 < _11155; ++_5645)
                    {
                      {
                        long long _5646 = safe_add( _5644,safe_mul( (_ptr__5514[safe_add( _5523,_5645 )] % _5530),mdim1 ) );
                        int _11156 = _ptr__5513[safe_add( _5521,_5645 )];
                        int _11157 = _ptr__5513[safe_add( safe_add( _5521,_5645 ),(int)1 )];
                        for (int _5647 = _11156; _5647 < _11157; ++_5647)
                        {
                          {
                            _ptr__5628[safe_add( _5632,_5639 )] = _ptr__5514[safe_add( _5524,_5647 )];
                            _ptr__5629[safe_add( _5634,_5639 )] = (_ptr__5515[safe_add( _5525,_5647 )] * ((*mval)(_5646)));
                            if ((_5519 > (int)0))
                            {
                              {
                                int _11158 = _ptr__5513[safe_add( _5526,_5647 )];
                                int _11159 = _ptr__5513[safe_add( safe_add( _5526,_5647 ),(int)1 )];
                                for (int _5648 = _11158; _5648 < _11159; ++_5648)
                                {
                                  {
                                    _ptr__5627[safe_add( _5635,_5638 )] = _ptr__5513[safe_add( _5527,_5648 )];
                                    _ptr__5629[safe_add( _5637,_5638 )] = _ptr__5515[safe_add( _5528,_5648 )];
                                    ++ _5638;
                                  }
                                }
                                _ptr__5627[safe_add( _5635,_5638 )] = 2;
                                _ptr__5629[safe_add( _5637,_5638 )] = ((*mval)(_5646));
                                ++ _5638;
                                _ptr__5627[safe_add( _5635,_5638 )] = 5;
                                ++ _5638;
                                _ptr__5627[safe_add( safe_add( _5636,_5639 ),(int)1 )] = _5638;
                              }
                            }
                            {}
                            ++ _5639;
                          }
                        }
                      }
                    }
                    _ptr__5627[safe_add( safe_add( _5631,_5640 ),(int)1 )] = _5639;
                    ++ _5640;
                  }
                }
              }
            }
          }
          if ((_5639 != _5622))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid num nonzeros"));
            }
          }
          {}
          if ((_5640 != _5623))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid num elements"));
            }
          }
          {}
          if ((_5638 != _5624))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid num code atoms"));
            }
          }
          {}
        }
      }
      else
      {
        {
          int _11160 = (int)0;
          int _11161 = _5529;
          for (int _5649 = _11160; _5649 < _11161; ++_5649)
          {
            {
              int _11162 = (int)0;
              int _11163 = mdim1;
              for (int _5650 = _11162; _5650 < _11163; ++_5650)
              {
                {
                  int _11164 = (int)0;
                  int _11165 = _5530;
                  for (int _5651 = _11164; _5651 < _11165; ++_5651)
                  {
                    {
                      int _5652 = safe_add( safe_mul( _5649,_5530 ),_5651 );
                      int _5653 = safe_add( _5650,safe_mul( _5651,mdim1 ) );
                      int _11166 = _ptr__5513[safe_add( _5521,_5652 )];
                      int _11167 = _ptr__5513[safe_add( safe_add( _5521,_5652 ),(int)1 )];
                      for (int _5654 = _11166; _5654 < _11167; ++_5654)
                      {
                        {
                          _ptr__5628[safe_add( _5632,_5639 )] = _ptr__5514[safe_add( _5524,_5654 )];
                          _ptr__5629[safe_add( _5634,_5639 )] = (_ptr__5515[safe_add( _5525,_5654 )] * ((*mval)(_5653)));
                          if ((_5519 > (int)0))
                          {
                            {
                              int _11168 = _ptr__5513[safe_add( _5526,_5654 )];
                              int _11169 = _ptr__5513[safe_add( safe_add( _5526,_5654 ),(int)1 )];
                              for (int _5655 = _11168; _5655 < _11169; ++_5655)
                              {
                                {
                                  _ptr__5627[safe_add( _5635,_5638 )] = _ptr__5513[safe_add( _5527,_5655 )];
                                  _ptr__5629[safe_add( _5637,_5638 )] = _ptr__5515[safe_add( _5528,_5655 )];
                                  ++ _5638;
                                }
                              }
                              _ptr__5627[safe_add( _5635,_5638 )] = 2;
                              _ptr__5629[safe_add( _5637,_5638 )] = ((*mval)(_5653));
                              ++ _5638;
                              _ptr__5627[safe_add( _5635,_5638 )] = 5;
                              ++ _5638;
                              _ptr__5627[safe_add( safe_add( _5636,_5639 ),(int)1 )] = _5638;
                            }
                          }
                          {}
                          ++ _5639;
                        }
                      }
                    }
                  }
                  _ptr__5627[safe_add( safe_add( _5631,_5640 ),(int)1 )] = _5639;
                  ++ _5640;
                }
              }
            }
          }
        }
      }
      _5512->clear();
    }
  }
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprMulRight::computeshape(int _5656,std::shared_ptr< monty::ndarray< int,1 > > _5657){
  _checked_ptr_1<int> _ptr__5657(_5657 ? _5657->raw() : nullptr, _5657 ? _5657->size(0) : 0);
  if (((int)((_5657)->size(0)) == (int)1))
  {
    {
      return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(_5656)});
    }
  }
  else
  {
    {
      return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__5657[(int)0]),(int)(_5656)});
    }
  }
}
int mosek::fusion::p_ExprMulRight::validate(int _5658,int _5659,std::shared_ptr< monty::ndarray< int,1 > > _5660,std::shared_ptr< monty::ndarray< int,1 > > _5661,std::shared_ptr< monty::ndarray< double,1 > > _5662,monty::rc_ptr< ::mosek::fusion::Expression > _5663){
  _checked_ptr_1<int> _ptr__5660(_5660 ? _5660->raw() : nullptr, _5660 ? _5660->size(0) : 0);
  _checked_ptr_1<int> _ptr__5661(_5661 ? _5661->raw() : nullptr, _5661 ? _5661->size(0) : 0);
  _checked_ptr_1<double> _ptr__5662(_5662 ? _5662->raw() : nullptr, _5662 ? _5662->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5664 = _5663->getShape();
  _checked_ptr_1<int> _ptr__5664(_5664 ? _5664->raw() : nullptr,_5664 ? _5664->size(0) : 0);
  if (((int)((_5664)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  int _5665 = _ptr__5664[(int)0];
  int _5666 = _ptr__5664[(int)1];
  if (((_5658 < (int)0) || ((_5659 < (int)0) || ((_5665 < (int)0) || (_5666 < (int)0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if ((_5658 != _5666))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  if ((((int)((_5660)->size(0)) != (int)((_5661)->size(0))) || ((int)((_5660)->size(0)) != (int)((_5662)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int _5667 = (int)((_5660)->size(0));
  {
    bool _5668 = false;
    int _11170 = (int)0;
    int _11171 = _5667;
    for (int _5669 = _11170; _5669 < _11171; ++_5669)
    {
      {
        _5668 = (_5668 || ((_ptr__5660[_5669] < (int)0) || ((_ptr__5660[_5669] >= _5658) || ((_ptr__5661[_5669] < (int)0) || (_ptr__5661[_5669] >= _5659)))));
      }
    }
    if (_5668)
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
      }
    }
    {}
  }
  {
    bool _5670 = false;
    int _11172 = (int)0;
    int _11173 = (_5667 - (int)1);
    for (int _5671 = _11172; _5671 < _11173; ++_5671)
    {
      {
        _5670 = (_5670 || ((_ptr__5660[_5671] > _ptr__5660[safe_add( _5671,(int)1 )]) || ((_ptr__5660[_5671] == _ptr__5660[safe_add( _5671,(int)1 )]) && (_ptr__5661[_5671] >= _ptr__5661[safe_add( _5671,(int)1 )]))));
      }
    }
    if (_5670)
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
      }
    }
    {}
  }
  return (int)1;
}
std::string mosek::fusion::ExprMulRight :: toString() { return mosek::fusion::p_ExprMulRight::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulRight::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulRight(M,"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulRight::destroy(){expr.reset();mval.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprMulRight::destroy() { mosek::fusion::p_ExprMulRight::_get_impl(this)->destroy(); }mosek::fusion::ExprMulLeft::ExprMulLeft(mosek::fusion::p_ExprMulLeft *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulLeft()" << this << std::endl; */ }mosek::fusion::ExprMulLeft::~ExprMulLeft() {  /* std::cout << "~ExprMulLeft()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulLeft::p_ExprMulLeft  (::mosek::fusion::ExprMulLeft * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulLeft::t mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft  (int _5672,    int _5673,    std::shared_ptr< monty::ndarray< int,1 > > _5674,    std::shared_ptr< monty::ndarray< int,1 > > _5675,    std::shared_ptr< monty::ndarray< double,1 > > _5676,    monty::rc_ptr< ::mosek::fusion::Expression > _5677,    int _5678){ return new mosek::fusion::ExprMulLeft(_5672,_5673,_5674,_5675,_5676,_5677,_5678); }mosek::fusion::ExprMulLeft::ExprMulLeft  (int _5672,    int _5673,    std::shared_ptr< monty::ndarray< int,1 > > _5674,    std::shared_ptr< monty::ndarray< int,1 > > _5675,    std::shared_ptr< monty::ndarray< double,1 > > _5676,    monty::rc_ptr< ::mosek::fusion::Expression > _5677,    int _5678) :    ExprMulLeft(new mosek::fusion::p_ExprMulLeft(this)){ mosek::fusion::p_ExprMulLeft::_get_impl(this)->_initialize(_5672,_5673,_5674,_5675,_5676,_5677,_5678); }void mosek::fusion::p_ExprMulLeft::_initialize  (int _5672,    int _5673,    std::shared_ptr< monty::ndarray< int,1 > > _5674,    std::shared_ptr< monty::ndarray< int,1 > > _5675,    std::shared_ptr< monty::ndarray< double,1 > > _5676,    monty::rc_ptr< ::mosek::fusion::Expression > _5677,    int _5678){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5674(_5674 ? _5674->raw() : nullptr, _5674 ? _5674->size(0) : 0);
    _checked_ptr_1<int> _ptr__5675(_5675 ? _5675->raw() : nullptr, _5675 ? _5675->size(0) : 0);
    _checked_ptr_1<double> _ptr__5676(_5676 ? _5676->raw() : nullptr, _5676 ? _5676->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprMulLeft::computeshape(_5672,_5673,_5677->getShape()));
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->mdim0 = _5672;
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->mdim1 = _5673;
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->msubi = _5674;
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->msubj = _5675;
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->mval = _5676;
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->expr = _5677;
  }
}mosek::fusion::ExprMulLeft::t mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft  (int _5679,    int _5680,    std::shared_ptr< monty::ndarray< int,1 > > _5681,    std::shared_ptr< monty::ndarray< int,1 > > _5682,    std::shared_ptr< monty::ndarray< double,1 > > _5683,    monty::rc_ptr< ::mosek::fusion::Expression > _5684){ return new mosek::fusion::ExprMulLeft(_5679,_5680,_5681,_5682,_5683,_5684); }mosek::fusion::ExprMulLeft::ExprMulLeft  (int _5679,    int _5680,    std::shared_ptr< monty::ndarray< int,1 > > _5681,    std::shared_ptr< monty::ndarray< int,1 > > _5682,    std::shared_ptr< monty::ndarray< double,1 > > _5683,    monty::rc_ptr< ::mosek::fusion::Expression > _5684) :    ExprMulLeft(new mosek::fusion::p_ExprMulLeft(this)){ mosek::fusion::p_ExprMulLeft::_get_impl(this)->_initialize(_5679,_5680,_5681,_5682,_5683,_5684); }void mosek::fusion::p_ExprMulLeft::_initialize  (int _5679,    int _5680,    std::shared_ptr< monty::ndarray< int,1 > > _5681,    std::shared_ptr< monty::ndarray< int,1 > > _5682,    std::shared_ptr< monty::ndarray< double,1 > > _5683,    monty::rc_ptr< ::mosek::fusion::Expression > _5684){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5681(_5681 ? _5681->raw() : nullptr, _5681 ? _5681->size(0) : 0);
    _checked_ptr_1<int> _ptr__5682(_5682 ? _5682->raw() : nullptr, _5682 ? _5682->size(0) : 0);
    _checked_ptr_1<double> _ptr__5683(_5683 ? _5683->raw() : nullptr, _5683 ? _5683->size(0) : 0);
    mosek::fusion::p_ExprMulLeft::_initialize(_5679,_5680,_5681,_5682,_5683,_5684,::mosek::fusion::p_ExprMulLeft::validate(_5679,_5680,_5681,_5682,_5683,_5684));
  }
}void mosek::fusion::ExprMulLeft :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5685,monty::rc_ptr< ::mosek::fusion::WorkStack > _5686,monty::rc_ptr< ::mosek::fusion::WorkStack > _5687) { mosek::fusion::p_ExprMulLeft::_get_impl(this)->eval(_5685,_5686,_5687); }void mosek::fusion::p_ExprMulLeft::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5685,monty::rc_ptr< ::mosek::fusion::WorkStack > _5686,monty::rc_ptr< ::mosek::fusion::WorkStack > _5687){
  mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->expr->eval(_5686,_5685,_5687);
  _5686->pop_expr();
  int _5688 = mosek::fusion::p_WorkStack::_get_impl(_5686)->nd;
  int _5689 = mosek::fusion::p_WorkStack::_get_impl(_5686)->nnz;
  int _5690 = mosek::fusion::p_WorkStack::_get_impl(_5686)->nelem;
  int _5691 = mosek::fusion::p_WorkStack::_get_impl(_5686)->ncodeatom;
  bool _5692 = mosek::fusion::p_WorkStack::_get_impl(_5686)->hassp;
  int _5693 = mosek::fusion::p_WorkStack::_get_impl(_5686)->shape_base;
  int _5694 = mosek::fusion::p_WorkStack::_get_impl(_5686)->ptr_base;
  int _5695 = mosek::fusion::p_WorkStack::_get_impl(_5686)->sp_base;
  int _5696 = mosek::fusion::p_WorkStack::_get_impl(_5686)->nidxs_base;
  int _5697 = mosek::fusion::p_WorkStack::_get_impl(_5686)->cof_base;
  int _5698 = mosek::fusion::p_WorkStack::_get_impl(_5686)->codeptr_base;
  int _5699 = mosek::fusion::p_WorkStack::_get_impl(_5686)->code_base;
  int _5700 = mosek::fusion::p_WorkStack::_get_impl(_5686)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _5701 = mosek::fusion::p_WorkStack::_get_impl(_5686)->i32;
  _checked_ptr_1<int> _ptr__5701(_5701 ? _5701->raw() : nullptr,_5701 ? _5701->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5702 = mosek::fusion::p_WorkStack::_get_impl(_5686)->i64;
  _checked_ptr_1<long long> _ptr__5702(_5702 ? _5702->raw() : nullptr,_5702 ? _5702->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5703 = mosek::fusion::p_WorkStack::_get_impl(_5686)->f64;
  _checked_ptr_1<double> _ptr__5703(_5703 ? _5703->raw() : nullptr,_5703 ? _5703->size(0) : 0);
  if ((_5688 != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operator shape for multiplication"));
    }
  }
  {}
  int _5704 = (int)9999;
  int _5705 = (int)9999;
  int _5706 = (int)9999;
  int _5707 = _ptr__5701[_5693];
  int _5708 = _ptr__5701[safe_add( _5693,(int)1 )];
  int _5709 = (int)((msubi)->size(0));
  bool _5710 = (_5709 < safe_mul( (long long)mdim0,(long long)mdim1 ));
  bool _5711 = false;
  int _5712 = (int)0;
  int _5713 = (int)0;
  long long _5714 = (long long)0;
  if (_5692)
  {
    {
      _5704 = _5687->alloci32(_5690);
      _5705 = _5687->alloci32(_5690);
      _5706 = _5687->alloci32(safe_add( _5708,(int)1 ));
      std::shared_ptr< monty::ndarray< int,1 > > _5715 = mosek::fusion::p_WorkStack::_get_impl(_5687)->i32;
      _checked_ptr_1<int> _ptr__5715(_5715 ? _5715->raw() : nullptr,_5715 ? _5715->size(0) : 0);
      {
        int _11174 = (int)0;
        int _11175 = safe_add( _5708,(int)1 );
        for (int _5716 = _11174; _5716 < _11175; ++_5716)
        {
          {
            _ptr__5715[safe_add( _5706,_5716 )] = (int)0;
          }
        }
        int _11176 = (int)0;
        int _11177 = _5690;
        for (int _5717 = _11176; _5717 < _11177; ++_5717)
        {
          {
            ++ _ptr__5715[safe_add( safe_add( _5706,(_ptr__5702[safe_add( _5695,_5717 )] % _5708) ),(int)1 )];
          }
        }
        int _11178 = (int)0;
        int _11179 = _5708;
        for (int _5718 = _11178; _5718 < _11179; ++_5718)
        {
          {
            _ptr__5715[safe_add( safe_add( _5706,_5718 ),(int)1 )] += _ptr__5715[safe_add( _5706,_5718 )];
          }
        }
        int _11180 = (int)0;
        int _11181 = _5690;
        for (int _5719 = _11180; _5719 < _11181; ++_5719)
        {
          {
            long long _5720 = (_ptr__5702[safe_add( _5695,_5719 )] % _5708);
            _ptr__5715[safe_add( _5704,_ptr__5715[safe_add( _5706,_5720 )] )] = _5719;
            ++ _ptr__5715[safe_add( _5706,_5720 )];
          }
        }
        int _11182 = (int)0;
        int _11183 = _5708;
        for (int _5721 = _11182; _5721 < _11183; ++_5721)
        {
          {
            _ptr__5715[(safe_add( _5706,_5708 ) - _5721)] = _ptr__5715[((safe_add( _5706,_5708 ) - _5721) - (int)1)];
          }
        }
        _ptr__5715[_5706] = (int)0;
      }
      if (_5710)
      {
        {
          int _5722 = (int)0;
          while ( (_5722 < _5709) )
          {
            {
              int _5723 = ((*msubi)(_5722));
              int _5724 = safe_add( _5722,(int)1 );
              while ( ((_5724 < _5709) && (((*msubi)(_5724)) == ((*msubi)(_5722)))) )
              {
                {
                  ++ _5724;
                }
              }
              int _11184 = (int)0;
              int _11185 = _5708;
              for (int _5725 = _11184; _5725 < _11185; ++_5725)
              {
                {
                  bool _5726 = false;
                  int _5727 = _5724;
                  int _5728 = _5722;
                  int _5729 = _ptr__5715[safe_add( safe_add( _5706,_5725 ),(int)1 )];
                  int _5730 = _ptr__5715[safe_add( _5706,_5725 )];
                  while ( ((_5728 < _5727) && (_5730 < _5729)) )
                  {
                    {
                      int _5731 = _ptr__5715[safe_add( _5704,_5730 )];
                      if ((((*msubj)(_5728)) < (_ptr__5702[safe_add( _5695,_5731 )] / _5708)))
                      {
                        {
                          ++ _5728;
                        }
                      }
                      else if((((*msubj)(_5728)) > (_ptr__5702[safe_add( _5695,_5731 )] / _5708)))
                      {
                        {
                          ++ _5730;
                        }
                      }
                      else
                      {
                        {
                          _5726 = true;
                          _5714 += (_ptr__5701[safe_add( safe_add( _5694,_5731 ),(int)1 )] - _ptr__5701[safe_add( _5694,_5731 )]);
                          if ((_5691 > (int)0))
                          {
                            {
                              _5712 += safe_add( (_ptr__5701[safe_add( _5698,_ptr__5701[safe_add( safe_add( _5694,_5731 ),(int)1 )] )] - _ptr__5701[safe_add( _5698,_ptr__5701[safe_add( _5694,_5731 )] )]),safe_mul( (int)2,(_ptr__5701[safe_add( safe_add( _5694,_5731 ),(int)1 )] - _ptr__5701[safe_add( _5694,_5731 )]) ) );
                            }
                          }
                          {}
                          ++ _5730;
                          ++ _5728;
                        }
                      }
                    }
                  }
                  if (_5726)
                  {
                    {
                      ++ _5713;
                    }
                  }
                  {}
                }
              }
              _5722 = _5724;
            }
          }
        }
      }
      else
      {
        {
          _5713 = safe_mul( mdim0,_5708 );
          _5714 = safe_mul( (long long)_5689,mdim0 );
          if ((_5691 > (int)0))
          {
            {
              _5712 = (int)safe_add( safe_mul( _5691,mdim0 ),safe_mul( (int)2,_5714 ) );
            }
          }
          {}
        }
      }
    }
  }
  else
  {
    {
      if (_5710)
      {
        {
          int _5732 = (int)0;
          while ( (_5732 < _5709) )
          {
            {
              int _5733 = safe_add( _5732,(int)1 );
              while ( ((_5733 < _5709) && (((*msubi)(_5732)) == ((*msubi)(_5733)))) )
              {
                {
                  ++ _5733;
                }
              }
              int _5734 = ((*msubi)(_5732));
              int _11186 = (int)0;
              int _11187 = _5708;
              for (int _5735 = _11186; _5735 < _11187; ++_5735)
              {
                {
                  bool _5736 = false;
                  int _11188 = _5732;
                  int _11189 = _5733;
                  for (int _5737 = _11188; _5737 < _11189; ++_5737)
                  {
                    {
                      int _5738 = safe_add( safe_mul( ((*msubj)(_5737)),_5708 ),_5735 );
                      _5714 += (_ptr__5701[safe_add( safe_add( _5694,_5738 ),(int)1 )] - _ptr__5701[safe_add( _5694,_5738 )]);
                      if ((_5691 > (int)0))
                      {
                        {
                          _5712 += safe_add( (_ptr__5701[safe_add( _5698,_ptr__5701[safe_add( safe_add( _5694,_5738 ),(int)1 )] )] - _ptr__5701[safe_add( _5698,_ptr__5701[safe_add( _5694,_5738 )] )]),safe_mul( (int)2,(_ptr__5701[safe_add( safe_add( _5694,_5738 ),(int)1 )] - _ptr__5701[safe_add( _5694,_5738 )]) ) );
                        }
                      }
                      {}
                      _5736 = true;
                    }
                  }
                  if (_5736)
                  {
                    {
                      ++ _5713;
                    }
                  }
                  {}
                }
              }
              _5732 = _5733;
            }
          }
        }
      }
      else
      {
        {
          _5714 = safe_mul( (long long)_5689,mdim0 );
          if ((_5691 > (int)0))
          {
            {
              _5712 = (int)safe_add( safe_mul( _5691,mdim0 ),safe_mul( (int)2,_5714 ) );
            }
          }
          {}
          _5713 = safe_mul( mdim0,_5708 );
        }
      }
    }
  }
  if ((!(_5714 <= (int)0x7fffffff)))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Maximum number of nonzeros exceeded in multiplication"));
    }
  }
  {}
  _5711 = (_5713 < safe_mul( mdim0,_5708 ));
  int _5739 = (int)2;
  _5685->alloc_expr(_5739,_5713,(int)_5714,_5711,_5712);
  int _5740 = mosek::fusion::p_WorkStack::_get_impl(_5685)->ptr_base;
  int _5741 = mosek::fusion::p_WorkStack::_get_impl(_5685)->nidxs_base;
  int _11190;
  bool _11191 = _5711;
  if (_11191)
  {
    _11190 = mosek::fusion::p_WorkStack::_get_impl(_5685)->sp_base;
  }
  else
  {
    _11190 = _5685->alloci64(_5713);
  }
  int _5742 = _11190;
  int _5743 = mosek::fusion::p_WorkStack::_get_impl(_5685)->cof_base;
  int _5744 = mosek::fusion::p_WorkStack::_get_impl(_5685)->shape_base;
  int _5745 = mosek::fusion::p_WorkStack::_get_impl(_5685)->code_base;
  int _5746 = mosek::fusion::p_WorkStack::_get_impl(_5685)->codeptr_base;
  int _5747 = mosek::fusion::p_WorkStack::_get_impl(_5685)->cconst_base;
  std::shared_ptr< monty::ndarray< long long,1 > > _5748 = mosek::fusion::p_WorkStack::_get_impl(_5685)->i64;
  _checked_ptr_1<long long> _ptr__5748(_5748 ? _5748->raw() : nullptr,_5748 ? _5748->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5749 = mosek::fusion::p_WorkStack::_get_impl(_5685)->f64;
  _checked_ptr_1<double> _ptr__5749(_5749 ? _5749->raw() : nullptr,_5749 ? _5749->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5750 = mosek::fusion::p_WorkStack::_get_impl(_5685)->i32;
  _checked_ptr_1<int> _ptr__5750(_5750 ? _5750->raw() : nullptr,_5750 ? _5750->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5751 = mosek::fusion::p_WorkStack::_get_impl(_5687)->i32;
  _checked_ptr_1<int> _ptr__5751(_5751 ? _5751->raw() : nullptr,_5751 ? _5751->size(0) : 0);
  _ptr__5750[_5744] = mdim0;
  _ptr__5750[safe_add( _5744,(int)1 )] = _5708;
  _ptr__5750[_5740] = (int)0;
  if ((_5712 > (int)0))
  {
    {
      _ptr__5750[_5746] = (int)0;
    }
  }
  {}
  if (_5692)
  {
    {
      if (_5710)
      {
        {
          int _5752 = (int)0;
          int _5753 = (int)0;
          int _5754 = (int)0;
          int _5755 = (int)0;
          while ( (_5755 < _5709) )
          {
            {
              int _5756 = ((*msubi)(_5755));
              int _5757 = safe_add( _5755,(int)1 );
              while ( ((_5757 < _5709) && (((*msubi)(_5757)) == ((*msubi)(_5755)))) )
              {
                {
                  ++ _5757;
                }
              }
              int _11192 = (int)0;
              int _11193 = _5708;
              for (int _5758 = _11192; _5758 < _11193; ++_5758)
              {
                {
                  bool _5759 = false;
                  int _5760 = _5757;
                  int _5761 = _5755;
                  int _5762 = _ptr__5751[safe_add( safe_add( _5706,_5758 ),(int)1 )];
                  int _5763 = _ptr__5751[safe_add( _5706,_5758 )];
                  while ( ((_5761 < _5760) && (_5763 < _5762)) )
                  {
                    {
                      int _5764 = _ptr__5751[safe_add( _5704,_5763 )];
                      if ((((*msubj)(_5761)) < (_ptr__5702[safe_add( _5695,_5764 )] / _5708)))
                      {
                        {
                          ++ _5761;
                        }
                      }
                      else if((((*msubj)(_5761)) > (_ptr__5702[safe_add( _5695,_5764 )] / _5708)))
                      {
                        {
                          ++ _5763;
                        }
                      }
                      else
                      {
                        {
                          _5759 = true;
                          int _11194 = _ptr__5701[safe_add( _5694,_5764 )];
                          int _11195 = _ptr__5701[safe_add( safe_add( _5694,_5764 ),(int)1 )];
                          for (int _5765 = _11194; _5765 < _11195; ++_5765)
                          {
                            {
                              _ptr__5748[safe_add( _5741,_5754 )] = _ptr__5702[safe_add( _5696,_5765 )];
                              _ptr__5749[safe_add( _5743,_5754 )] = (_ptr__5703[safe_add( _5697,_5765 )] * ((*mval)(_5761)));
                              if ((_5712 > (int)0))
                              {
                                {
                                  int _11196 = _ptr__5701[safe_add( _5698,_5765 )];
                                  int _11197 = _ptr__5701[safe_add( safe_add( _5698,_5765 ),(int)1 )];
                                  for (int _5766 = _11196; _5766 < _11197; ++_5766)
                                  {
                                    {
                                      _ptr__5750[safe_add( _5745,_5752 )] = _ptr__5701[safe_add( _5699,_5766 )];
                                      _ptr__5749[safe_add( _5747,_5752 )] = _ptr__5749[safe_add( _5700,_5766 )];
                                      ++ _5752;
                                    }
                                  }
                                  _ptr__5750[safe_add( _5745,_5752 )] = 2;
                                  _ptr__5749[safe_add( _5747,_5752 )] = ((*mval)(_5761));
                                  ++ _5752;
                                  _ptr__5750[safe_add( _5745,_5752 )] = 5;
                                  _ptr__5750[safe_add( safe_add( _5746,_5754 ),(int)1 )] = _5752;
                                }
                              }
                              {}
                              ++ _5754;
                            }
                          }
                          ++ _5761;
                          ++ _5763;
                        }
                      }
                    }
                  }
                  if (_5759)
                  {
                    {
                      _ptr__5750[safe_add( safe_add( _5740,_5753 ),(int)1 )] = _5754;
                      _ptr__5748[safe_add( _5742,_5753 )] = safe_add( safe_mul( _5756,_5708 ),_5758 );
                      ++ _5753;
                    }
                  }
                  {}
                }
              }
              _5755 = _5757;
            }
          }
        }
      }
      else
      {
        {
          int _5767 = (int)0;
          int _5768 = (int)0;
          int _5769 = (int)0;
          int _11198 = (int)0;
          int _11199 = mdim0;
          for (int _5770 = _11198; _5770 < _11199; ++_5770)
          {
            {
              int _11200 = (int)0;
              int _11201 = _5708;
              for (int _5771 = _11200; _5771 < _11201; ++_5771)
              {
                {
                  int _11202 = _ptr__5751[safe_add( _5706,_5771 )];
                  int _11203 = _ptr__5751[safe_add( safe_add( _5706,_5771 ),(int)1 )];
                  for (int _5772 = _11202; _5772 < _11203; ++_5772)
                  {
                    {
                      int _5773 = _ptr__5751[safe_add( _5704,_5772 )];
                      long long _5774 = safe_add( safe_mul( _5770,mdim1 ),(_ptr__5702[safe_add( _5695,_5773 )] / _5708) );
                      int _11204 = _ptr__5701[safe_add( _5694,_5773 )];
                      int _11205 = _ptr__5701[safe_add( safe_add( _5694,_5773 ),(int)1 )];
                      for (int _5775 = _11204; _5775 < _11205; ++_5775)
                      {
                        {
                          _ptr__5748[safe_add( _5741,_5769 )] = _ptr__5702[safe_add( _5696,_5775 )];
                          _ptr__5749[safe_add( _5743,_5769 )] = (_ptr__5703[safe_add( _5697,_5775 )] * ((*mval)(_5774)));
                          if ((_5712 > (int)0))
                          {
                            {
                              int _11206 = _ptr__5701[safe_add( _5698,_5775 )];
                              int _11207 = _ptr__5701[safe_add( safe_add( _5698,_5775 ),(int)1 )];
                              for (int _5776 = _11206; _5776 < _11207; ++_5776)
                              {
                                {
                                  _ptr__5750[safe_add( _5745,_5767 )] = _ptr__5701[safe_add( _5699,_5776 )];
                                  _ptr__5749[safe_add( _5747,_5767 )] = _ptr__5703[safe_add( _5700,_5776 )];
                                  ++ _5767;
                                }
                              }
                              _ptr__5750[safe_add( _5745,_5767 )] = 2;
                              _ptr__5749[safe_add( _5747,_5767 )] = ((*mval)(_5774));
                              ++ _5767;
                              _ptr__5750[safe_add( _5745,_5767 )] = 5;
                              ++ _5767;
                              _ptr__5750[safe_add( safe_add( _5746,_5769 ),(int)1 )] = _5767;
                            }
                          }
                          {}
                          ++ _5769;
                        }
                      }
                    }
                  }
                  _ptr__5750[safe_add( safe_add( _5740,_5768 ),(int)1 )] = _5769;
                  ++ _5768;
                }
              }
            }
          }
          if ((_5768 != _5713))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect number of elements"));
            }
          }
          {}
          if ((_5769 != _5714))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect number of non-zeros"));
            }
          }
          {}
          if ((_5767 != _5712))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect number of code atoms"));
            }
          }
          {}
        }
      }
    }
  }
  else
  {
    {
      int _5777 = (int)0;
      int _5778 = (int)0;
      int _5779 = (int)0;
      int _5780 = (int)0;
      while ( (_5778 < _5709) )
      {
        {
          int _5781 = safe_add( _5778,(int)1 );
          while ( ((_5781 < _5709) && (((*msubi)(_5778)) == ((*msubi)(_5781)))) )
          {
            {
              ++ _5781;
            }
          }
          int _5782 = ((*msubi)(_5778));
          int _11208 = (int)0;
          int _11209 = _5708;
          for (int _5783 = _11208; _5783 < _11209; ++_5783)
          {
            {
              bool _5784 = false;
              int _11210 = _5778;
              int _11211 = _5781;
              for (int _5785 = _11210; _5785 < _11211; ++_5785)
              {
                {
                  int _5786 = safe_add( safe_mul( ((*msubj)(_5785)),_5708 ),_5783 );
                  int _11212 = _ptr__5701[safe_add( _5694,_5786 )];
                  int _11213 = _ptr__5701[safe_add( safe_add( _5694,_5786 ),(int)1 )];
                  for (int _5787 = _11212; _5787 < _11213; ++_5787)
                  {
                    {
                      _ptr__5748[safe_add( _5741,_5780 )] = _ptr__5702[safe_add( _5696,_5787 )];
                      _ptr__5749[safe_add( _5743,_5780 )] = (_ptr__5703[safe_add( _5697,_5787 )] * ((*mval)(_5785)));
                      if ((_5712 > (int)0))
                      {
                        {
                          int _11214 = _ptr__5701[safe_add( _5698,_5787 )];
                          int _11215 = _ptr__5701[safe_add( safe_add( _5698,_5787 ),(int)1 )];
                          for (int _5788 = _11214; _5788 < _11215; ++_5788)
                          {
                            {
                              _ptr__5750[safe_add( _5745,_5777 )] = _ptr__5701[safe_add( _5699,_5788 )];
                              _ptr__5749[safe_add( _5747,_5777 )] = _ptr__5703[safe_add( _5700,_5788 )];
                              ++ _5777;
                            }
                          }
                          _ptr__5750[safe_add( _5745,_5777 )] = 2;
                          _ptr__5749[safe_add( _5747,_5777 )] = ((*mval)(_5785));
                          ++ _5777;
                          _ptr__5750[safe_add( _5745,_5777 )] = 5;
                          ++ _5777;
                          _ptr__5750[safe_add( safe_add( _5746,_5780 ),(int)1 )] = _5777;
                        }
                      }
                      {}
                      ++ _5780;
                    }
                  }
                  _5784 = true;
                }
              }
              if (_5784)
              {
                {
                  _ptr__5748[safe_add( _5742,_5779 )] = safe_add( safe_mul( _5782,_5708 ),_5783 );
                  _ptr__5750[safe_add( safe_add( _5740,_5779 ),(int)1 )] = _5780;
                  ++ _5779;
                }
              }
              {}
            }
          }
          _5778 = _5781;
        }
      }
      if ((_5779 != _5713))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect number of elements"));
        }
      }
      {}
      if ((_5780 != _5714))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect number of non-zeros"));
        }
      }
      {}
      if ((_5777 != _5712))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect number of code atoms"));
        }
      }
      {}
    }
  }
  if ((!_5711))
  {
    {
      _5685->popi64(_5713);
    }
  }
  {}
  _5687->clear();
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprMulLeft::computeshape(int _5789,int _5790,std::shared_ptr< monty::ndarray< int,1 > > _5791){
  _checked_ptr_1<int> _ptr__5791(_5791 ? _5791->raw() : nullptr, _5791 ? _5791->size(0) : 0);
  if (((int)((_5791)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions"));
    }
  }
  else if((_5790 != _ptr__5791[(int)0]))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions"));
    }
  }
  {}
  return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_5789),(int)(_ptr__5791[(int)1])});
}
int mosek::fusion::p_ExprMulLeft::validate(int _5792,int _5793,std::shared_ptr< monty::ndarray< int,1 > > _5794,std::shared_ptr< monty::ndarray< int,1 > > _5795,std::shared_ptr< monty::ndarray< double,1 > > _5796,monty::rc_ptr< ::mosek::fusion::Expression > _5797){
  _checked_ptr_1<int> _ptr__5794(_5794 ? _5794->raw() : nullptr, _5794 ? _5794->size(0) : 0);
  _checked_ptr_1<int> _ptr__5795(_5795 ? _5795->raw() : nullptr, _5795 ? _5795->size(0) : 0);
  _checked_ptr_1<double> _ptr__5796(_5796 ? _5796->raw() : nullptr, _5796 ? _5796->size(0) : 0);
  if ((_5797->getND() != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  int _5798 = _5797->getDim((int)0);
  int _5799 = _5797->getDim((int)0);
  if (((_5792 < (int)0) || (_5793 < (int)0)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if ((_5793 != _5798))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  if ((((int)((_5794)->size(0)) != (int)((_5795)->size(0))) || ((int)((_5794)->size(0)) != (int)((_5796)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int _5800 = (int)((_5794)->size(0));
  bool _5801 = false;
  bool _5802 = false;
  {
    int _11216 = (int)0;
    int _11217 = _5800;
    for (int _5803 = _11216; _5803 < _11217; ++_5803)
    {
      {
        _5801 = (_5801 || ((_ptr__5794[_5803] < (int)0) || ((_ptr__5794[_5803] >= _5792) || ((_ptr__5795[_5803] < (int)0) || (_ptr__5795[_5803] >= _5793)))));
      }
    }
    if ((!_5801))
    {
      {
        int _11218 = (int)0;
        int _11219 = (_5800 - (int)1);
        for (int _5804 = _11218; _5804 < _11219; ++_5804)
        {
          {
            _5802 = (_5802 || ((_ptr__5794[_5804] > _ptr__5794[safe_add( _5804,(int)1 )]) || ((_ptr__5794[_5804] == _ptr__5794[safe_add( _5804,(int)1 )]) && (_ptr__5795[_5804] >= _ptr__5795[safe_add( _5804,(int)1 )]))));
          }
        }
      }
    }
    {}
  }
  if (_5801)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  if (_5802)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
    }
  }
  {}
  return (int)1;
}
std::string mosek::fusion::ExprMulLeft :: toString() { return mosek::fusion::p_ExprMulLeft::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulLeft::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulLeft(M("))->__mosek_2fusion_2Utils_2StringBuffer__a(mdim0)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(mdim1)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("),"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulLeft::destroy(){expr.reset();mval.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprMulLeft::destroy() { mosek::fusion::p_ExprMulLeft::_get_impl(this)->destroy(); }mosek::fusion::ExprMulVar::ExprMulVar(mosek::fusion::p_ExprMulVar *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulVar()" << this << std::endl; */ }mosek::fusion::ExprMulVar::~ExprMulVar() {  /* std::cout << "~ExprMulVar()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulVar::p_ExprMulVar  (::mosek::fusion::ExprMulVar * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulVar::t mosek::fusion::p_ExprMulVar::_new_ExprMulVar  (bool _5805,    int _5806,    int _5807,    std::shared_ptr< monty::ndarray< int,1 > > _5808,    std::shared_ptr< monty::ndarray< int,1 > > _5809,    std::shared_ptr< monty::ndarray< double,1 > > _5810,    monty::rc_ptr< ::mosek::fusion::Variable > _5811){ return new mosek::fusion::ExprMulVar(_5805,_5806,_5807,_5808,_5809,_5810,_5811); }mosek::fusion::ExprMulVar::ExprMulVar  (bool _5805,    int _5806,    int _5807,    std::shared_ptr< monty::ndarray< int,1 > > _5808,    std::shared_ptr< monty::ndarray< int,1 > > _5809,    std::shared_ptr< monty::ndarray< double,1 > > _5810,    monty::rc_ptr< ::mosek::fusion::Variable > _5811) :    ExprMulVar(new mosek::fusion::p_ExprMulVar(this)){ mosek::fusion::p_ExprMulVar::_get_impl(this)->_initialize(_5805,_5806,_5807,_5808,_5809,_5810,_5811); }void mosek::fusion::p_ExprMulVar::_initialize  (bool _5805,    int _5806,    int _5807,    std::shared_ptr< monty::ndarray< int,1 > > _5808,    std::shared_ptr< monty::ndarray< int,1 > > _5809,    std::shared_ptr< monty::ndarray< double,1 > > _5810,    monty::rc_ptr< ::mosek::fusion::Variable > _5811){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5808(_5808 ? _5808->raw() : nullptr, _5808 ? _5808->size(0) : 0);
    _checked_ptr_1<int> _ptr__5809(_5809 ? _5809->raw() : nullptr, _5809 ? _5809->size(0) : 0);
    _checked_ptr_1<double> _ptr__5810(_5810 ? _5810->raw() : nullptr, _5810 ? _5810->size(0) : 0);
    mosek::fusion::p_ExprMulVar::_initialize(_5805,_5806,_5807,_5808,_5809,_5810,_5811,(int)1);
    std::shared_ptr< monty::ndarray< int,1 > > _5812 = _5811->getShape();
    _checked_ptr_1<int> _ptr__5812(_5812 ? _5812->raw() : nullptr,_5812 ? _5812->size(0) : 0);
    int _5813 = (int)((_5812)->size(0));
    if ((_5813 != (int)2))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    else if((_5805 && (_ptr__5812[(int)0] != _5807)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    else if(((!_5805) && (_ptr__5812[(int)1] != _5806)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    {}
    if ((((int)((_5808)->size(0)) != (int)((_5809)->size(0))) || ((int)((_5808)->size(0)) != (int)((_5810)->size(0)))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching matrix data lengths"));
      }
    }
    {}
    validate(_5806,_5807,_5808,_5809,_5810);
  }
}mosek::fusion::ExprMulVar::t mosek::fusion::p_ExprMulVar::_new_ExprMulVar  (bool _5814,    int _5815,    int _5816,    std::shared_ptr< monty::ndarray< int,1 > > _5817,    std::shared_ptr< monty::ndarray< int,1 > > _5818,    std::shared_ptr< monty::ndarray< double,1 > > _5819,    monty::rc_ptr< ::mosek::fusion::Variable > _5820,    int _5821){ return new mosek::fusion::ExprMulVar(_5814,_5815,_5816,_5817,_5818,_5819,_5820,_5821); }mosek::fusion::ExprMulVar::ExprMulVar  (bool _5814,    int _5815,    int _5816,    std::shared_ptr< monty::ndarray< int,1 > > _5817,    std::shared_ptr< monty::ndarray< int,1 > > _5818,    std::shared_ptr< monty::ndarray< double,1 > > _5819,    monty::rc_ptr< ::mosek::fusion::Variable > _5820,    int _5821) :    ExprMulVar(new mosek::fusion::p_ExprMulVar(this)){ mosek::fusion::p_ExprMulVar::_get_impl(this)->_initialize(_5814,_5815,_5816,_5817,_5818,_5819,_5820,_5821); }void mosek::fusion::p_ExprMulVar::_initialize  (bool _5814,    int _5815,    int _5816,    std::shared_ptr< monty::ndarray< int,1 > > _5817,    std::shared_ptr< monty::ndarray< int,1 > > _5818,    std::shared_ptr< monty::ndarray< double,1 > > _5819,    monty::rc_ptr< ::mosek::fusion::Variable > _5820,    int _5821){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5817(_5817 ? _5817->raw() : nullptr, _5817 ? _5817->size(0) : 0);
    _checked_ptr_1<int> _ptr__5818(_5818 ? _5818->raw() : nullptr, _5818 ? _5818->size(0) : 0);
    _checked_ptr_1<double> _ptr__5819(_5819 ? _5819->raw() : nullptr, _5819 ? _5819->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprMulVar::resshape(_5815,_5816,_5820->getShape(),_5814));
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->left = _5814;
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->x = _5820;
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimi = _5815;
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimj = _5816;
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubi = ::mosek::fusion::Utils::Tools::arraycopy(_5817);
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubj = ::mosek::fusion::Utils::Tools::arraycopy(_5818);
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mcof = ::mosek::fusion::Utils::Tools::arraycopy(_5819);
  }
}void mosek::fusion::ExprMulVar :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5822,monty::rc_ptr< ::mosek::fusion::WorkStack > _5823,monty::rc_ptr< ::mosek::fusion::WorkStack > _5824) { mosek::fusion::p_ExprMulVar::_get_impl(this)->eval(_5822,_5823,_5824); }void mosek::fusion::p_ExprMulVar::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5822,monty::rc_ptr< ::mosek::fusion::WorkStack > _5823,monty::rc_ptr< ::mosek::fusion::WorkStack > _5824){
  if (left)
  {
    {
      _pubthis->eval_left(_5822,_5823,_5824);
    }
  }
  else
  {
    {
      _pubthis->eval_right(_5822,_5823,_5824);
    }
  }
}
void mosek::fusion::ExprMulVar :: eval_right(monty::rc_ptr< ::mosek::fusion::WorkStack > _5825,monty::rc_ptr< ::mosek::fusion::WorkStack > _5826,monty::rc_ptr< ::mosek::fusion::WorkStack > _5827) { mosek::fusion::p_ExprMulVar::_get_impl(this)->eval_right(_5825,_5826,_5827); }void mosek::fusion::p_ExprMulVar::eval_right(monty::rc_ptr< ::mosek::fusion::WorkStack > _5825,monty::rc_ptr< ::mosek::fusion::WorkStack > _5826,monty::rc_ptr< ::mosek::fusion::WorkStack > _5827){
  int _5828 = mosek::fusion::p_WorkStack::_get_impl(_5826)->pi32;
  int _5829 = mosek::fusion::p_WorkStack::_get_impl(_5826)->pi64;
  int _5830 = x->numInst();
  int _5831 = _5826->alloci64(_5830);
  int _5832 = _5826->alloci64(_5830);
  int _5833 = _5826->alloci32(_5830);
  int _5834 = _5826->alloci32(_5830);
  std::shared_ptr< monty::ndarray< int,1 > > _5835 = x->getShape();
  _checked_ptr_1<int> _ptr__5835(_5835 ? _5835->raw() : nullptr,_5835 ? _5835->size(0) : 0);
  int _5836 = (int)((_5835)->size(0));
  long long _5837 = safe_mul( _ptr__5835[(int)0],_ptr__5835[(int)1] );
  int _5838 = _ptr__5835[(int)1];
  int _5839 = _ptr__5835[(int)0];
  int _5840 = _5826->alloci32(safe_add( _5839,(int)1 ));
  int _5841 = (int)((mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubi)->size(0));
  std::shared_ptr< monty::ndarray< int,1 > > _5842 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubi;
  _checked_ptr_1<int> _ptr__5842(_5842 ? _5842->raw() : nullptr,_5842 ? _5842->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5843 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubj;
  _checked_ptr_1<int> _ptr__5843(_5843 ? _5843->raw() : nullptr,_5843 ? _5843->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5844 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mcof;
  _checked_ptr_1<double> _ptr__5844(_5844 ? _5844->raw() : nullptr,_5844 ? _5844->size(0) : 0);
  int _5845 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimi;
  int _5846 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimj;
  bool _5847 = ((_5841 / _5845) == _5846);
  int _5848 = _5826->alloci32(_5841);
  int _5849 = _5826->alloci32(safe_add( mdimj,(int)1 ));
  std::shared_ptr< monty::ndarray< int,1 > > _5850 = mosek::fusion::p_WorkStack::_get_impl(_5826)->i32;
  _checked_ptr_1<int> _ptr__5850(_5850 ? _5850->raw() : nullptr,_5850 ? _5850->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5851 = mosek::fusion::p_WorkStack::_get_impl(_5826)->i64;
  _checked_ptr_1<long long> _ptr__5851(_5851 ? _5851->raw() : nullptr,_5851 ? _5851->size(0) : 0);
  int _5852 = (int)0;
  int _5853 = (int)0;
  x->inst(_5832,_5851,_5831,_5851);
  if (_5847)
  {
    {
      int _5854 = (int)0;
      if ((_5830 > (int)0))
      {
        {
          _5854 = (int)1;
          if ((_5839 > (int)1))
          {
            {
              if ((_5838 == (int)1))
              {
                {
                  int _11220 = (int)1;
                  int _11221 = _5830;
                  for (int _5855 = _11220; _5855 < _11221; ++_5855)
                  {
                    {
                      if ((_ptr__5851[safe_add( _5832,_5855 )] > _ptr__5851[(safe_add( _5832,_5855 ) - (int)1)]))
                      {
                        {
                          ++ _5854;
                        }
                      }
                      {}
                    }
                  }
                }
              }
              else
              {
                {
                  int _11222 = (int)1;
                  int _11223 = _5830;
                  for (int _5856 = _11222; _5856 < _11223; ++_5856)
                  {
                    {
                      if (((_ptr__5851[safe_add( _5832,_5856 )] / _5838) > (_ptr__5851[(safe_add( _5832,_5856 ) - (int)1)] / _5838)))
                      {
                        {
                          ++ _5854;
                        }
                      }
                      {}
                    }
                  }
                }
              }
            }
          }
          {}
        }
      }
      {}
      _5853 = safe_mul( _5854,_5846 );
      _5852 = safe_mul( _5830,_5846 );
      bool _5857 = (_5854 < _5839);
      _5825->alloc_expr((int)2,_5853,_5852,_5857);
      int _5858 = mosek::fusion::p_WorkStack::_get_impl(_5825)->ptr_base;
      int _5859 = mosek::fusion::p_WorkStack::_get_impl(_5825)->shape_base;
      int _5860 = mosek::fusion::p_WorkStack::_get_impl(_5825)->nidxs_base;
      int _11224;
      bool _11225 = _5857;
      if (_11225)
      {
        _11224 = mosek::fusion::p_WorkStack::_get_impl(_5825)->sp_base;
      }
      else
      {
        _11224 = _5825->alloci64(_5853);
      }
      int _5861 = _11224;
      int _5862 = mosek::fusion::p_WorkStack::_get_impl(_5825)->cof_base;
      std::shared_ptr< monty::ndarray< int,1 > > _5863 = mosek::fusion::p_WorkStack::_get_impl(_5825)->i32;
      _checked_ptr_1<int> _ptr__5863(_5863 ? _5863->raw() : nullptr,_5863 ? _5863->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _5864 = mosek::fusion::p_WorkStack::_get_impl(_5825)->i64;
      _checked_ptr_1<long long> _ptr__5864(_5864 ? _5864->raw() : nullptr,_5864 ? _5864->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _5865 = mosek::fusion::p_WorkStack::_get_impl(_5825)->f64;
      _checked_ptr_1<double> _ptr__5865(_5865 ? _5865->raw() : nullptr,_5865 ? _5865->size(0) : 0);
      _ptr__5863[_5859] = _5839;
      _ptr__5863[safe_add( _5859,(int)1 )] = _5846;
      {
        int _5866 = (int)0;
        int _5867 = (int)0;
        int _5868 = (int)0;
        _ptr__5863[_5858] = (int)0;
        while ( (_5866 < _5830) )
        {
          {
            int _5869 = _5866;
            ++ _5866;
            while ( ((_5866 < _5830) && ((_ptr__5851[safe_add( _5832,_5866 )] / _5838) == (_ptr__5851[safe_add( _5832,_5869 )] / _5838))) )
            {
              {
                ++ _5866;
              }
            }
            long long _5870 = (_ptr__5851[safe_add( _5832,_5869 )] / _5838);
            int _11226 = (int)0;
            int _11227 = _5846;
            for (int _5871 = _11226; _5871 < _11227; ++_5871)
            {
              {
                int _11228 = _5869;
                int _11229 = _5866;
                for (int _5872 = _11228; _5872 < _11229; ++_5872)
                {
                  {
                    long long _5873 = (_ptr__5851[safe_add( _5832,_5872 )] % _5838);
                    _ptr__5864[safe_add( _5860,_5868 )] = _ptr__5851[safe_add( _5831,_5872 )];
                    _ptr__5865[safe_add( _5862,_5868 )] = _ptr__5844[safe_add( safe_mul( _5873,_5846 ),_5871 )];
                    ++ _5868;
                  }
                }
                _ptr__5863[safe_add( safe_add( _5858,_5867 ),(int)1 )] = _5868;
                _ptr__5864[safe_add( _5861,_5867 )] = safe_add( safe_mul( _5870,_5846 ),_5871 );
                ++ _5867;
              }
            }
          }
        }
      }
      if ((!_5857))
      {
        {
          _5825->popi64(_5853);
        }
      }
      {}
    }
  }
  else
  {
    {
      {
        if ((_5846 == (int)1))
        {
          {
            int _11230 = (int)0;
            int _11231 = _5841;
            for (int _5874 = _11230; _5874 < _11231; ++_5874)
            {
              {
                _ptr__5850[safe_add( _5848,_5874 )] = _5874;
              }
            }
            _ptr__5850[_5849] = (int)0;
            _ptr__5850[safe_add( _5849,(int)1 )] = _5841;
          }
        }
        else
        {
          {
            _ptr__5850[_5849] = (int)0;
            int _11232 = (int)0;
            int _11233 = safe_add( _5846,(int)1 );
            for (int _5875 = _11232; _5875 < _11233; ++_5875)
            {
              {
                _ptr__5850[safe_add( _5849,_5875 )] = (int)0;
              }
            }
            int _11234 = (int)0;
            int _11235 = _5841;
            for (int _5876 = _11234; _5876 < _11235; ++_5876)
            {
              {
                ++ _ptr__5850[safe_add( safe_add( _5849,_ptr__5843[_5876] ),(int)1 )];
              }
            }
            int _11236 = (int)0;
            int _11237 = mdimj;
            for (int _5877 = _11236; _5877 < _11237; ++_5877)
            {
              {
                _ptr__5850[safe_add( safe_add( _5849,_5877 ),(int)1 )] += _ptr__5850[safe_add( _5849,_5877 )];
              }
            }
            int _11238 = (int)0;
            int _11239 = _5841;
            for (int _5878 = _11238; _5878 < _11239; ++_5878)
            {
              {
                _ptr__5850[safe_add( _5848,_ptr__5850[safe_add( _5849,_ptr__5843[_5878] )] )] = _5878;
                ++ _ptr__5850[safe_add( _5849,_ptr__5843[_5878] )];
              }
            }
            int _11240 = (int)0;
            int _11241 = _5846;
            for (int _5879 = _11240; _5879 < _11241; ++_5879)
            {
              {
                _ptr__5850[(safe_add( _5849,_5846 ) - _5879)] = _ptr__5850[((safe_add( _5849,_5846 ) - _5879) - (int)1)];
              }
            }
            _ptr__5850[_5849] = (int)0;
          }
        }
      }
      if (((_5830 / _5839) == _5838))
      {
        {
          int _5880 = (int)0;
          {
            int _5881 = (int)0;
            while ( (_5881 < _5841) )
            {
              {
                ++ _5881;
                while ( ((_5881 < _5841) && (_ptr__5843[_ptr__5850[(safe_add( _5848,_5881 ) - (int)1)]] == _ptr__5843[_ptr__5850[safe_add( _5848,_5881 )]])) )
                {
                  {
                    ++ _5881;
                  }
                }
                ++ _5880;
              }
            }
          }
          _5853 = safe_mul( _5880,_5839 );
          _5852 = safe_mul( _5841,_5839 );
          bool _5882 = (_5880 < _5846);
          _5825->alloc_expr((int)2,_5853,_5852,_5882);
          int _5883 = mosek::fusion::p_WorkStack::_get_impl(_5825)->ptr_base;
          int _5884 = mosek::fusion::p_WorkStack::_get_impl(_5825)->shape_base;
          int _5885 = mosek::fusion::p_WorkStack::_get_impl(_5825)->nidxs_base;
          int _11242;
          bool _11243 = _5882;
          if (_11243)
          {
            _11242 = mosek::fusion::p_WorkStack::_get_impl(_5825)->sp_base;
          }
          else
          {
            _11242 = _5825->alloci64(_5853);
          }
          int _5886 = _11242;
          int _5887 = mosek::fusion::p_WorkStack::_get_impl(_5825)->cof_base;
          ((*mosek::fusion::p_WorkStack::_get_impl(_5825)->i32)(_5884)) = _5839;
          ((*mosek::fusion::p_WorkStack::_get_impl(_5825)->i32)(safe_add( _5884,(int)1 ))) = _5846;
          std::shared_ptr< monty::ndarray< int,1 > > _5888 = mosek::fusion::p_WorkStack::_get_impl(_5825)->i32;
          _checked_ptr_1<int> _ptr__5888(_5888 ? _5888->raw() : nullptr,_5888 ? _5888->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _5889 = mosek::fusion::p_WorkStack::_get_impl(_5825)->i64;
          _checked_ptr_1<long long> _ptr__5889(_5889 ? _5889->raw() : nullptr,_5889 ? _5889->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _5890 = mosek::fusion::p_WorkStack::_get_impl(_5825)->f64;
          _checked_ptr_1<double> _ptr__5890(_5890 ? _5890->raw() : nullptr,_5890 ? _5890->size(0) : 0);
          _ptr__5888[_5883] = (int)0;
          int _5891 = (int)0;
          int _5892 = (int)0;
          int _11244 = (int)0;
          int _11245 = _5839;
          for (int _5893 = _11244; _5893 < _11245; ++_5893)
          {
            {
              int _5894 = (int)0;
              while ( (_5894 < _5841) )
              {
                {
                  int _5895 = _5894;
                  ++ _5894;
                  while ( ((_5894 < _5841) && (_ptr__5843[_ptr__5850[safe_add( _5848,_5895 )]] == _ptr__5843[_ptr__5850[safe_add( _5848,_5894 )]])) )
                  {
                    {
                      ++ _5894;
                    }
                  }
                  int _5896 = _ptr__5843[_ptr__5850[safe_add( _5848,_5895 )]];
                  int _11246 = _5895;
                  int _11247 = _5894;
                  for (int _5897 = _11246; _5897 < _11247; ++_5897)
                  {
                    {
                      int _5898 = _ptr__5842[_ptr__5850[safe_add( _5848,_5897 )]];
                      _ptr__5889[safe_add( _5885,_5892 )] = _ptr__5851[safe_add( safe_add( _5831,safe_mul( _5893,_5838 ) ),_5898 )];
                      _ptr__5890[safe_add( _5887,_5892 )] = _ptr__5844[_ptr__5850[safe_add( _5848,_5897 )]];
                      ++ _5892;
                    }
                  }
                  _ptr__5889[safe_add( _5886,_5891 )] = safe_add( safe_mul( _5893,_5846 ),_5896 );
                  _ptr__5888[safe_add( safe_add( _5883,_5891 ),(int)1 )] = _5892;
                  ++ _5891;
                }
              }
            }
          }
          if ((!_5882))
          {
            {
              _5825->popi64(_5853);
            }
          }
          {}
        }
      }
      else
      {
        {
          int _11248 = (int)0;
          int _11249 = safe_add( _5839,(int)1 );
          for (int _5899 = _11248; _5899 < _11249; ++_5899)
          {
            {
              _ptr__5850[safe_add( _5840,_5899 )] = (int)0;
            }
          }
          if ((_5836 == (int)1))
          {
            {
              int _11250 = (int)0;
              int _11251 = _5830;
              for (int _5900 = _11250; _5900 < _11251; ++_5900)
              {
                {
                  _ptr__5850[safe_add( _5833,_5900 )] = (int)0;
                }
              }
              int _11252 = (int)0;
              int _11253 = _5830;
              for (int _5901 = _11252; _5901 < _11253; ++_5901)
              {
                {
                  _ptr__5850[safe_add( _5834,_5901 )] = (int)_ptr__5851[safe_add( _5832,_5901 )];
                }
              }
              _ptr__5850[_5840] = (int)0;
              _ptr__5850[safe_add( _5840,(int)1 )] = _5830;
            }
          }
          else
          {
            {
              int _11254 = (int)0;
              int _11255 = _5830;
              for (int _5902 = _11254; _5902 < _11255; ++_5902)
              {
                {
                  _ptr__5850[safe_add( _5833,_5902 )] = (int)(_ptr__5851[safe_add( _5832,_5902 )] / _ptr__5835[(int)1]);
                }
              }
              int _11256 = (int)0;
              int _11257 = _5830;
              for (int _5903 = _11256; _5903 < _11257; ++_5903)
              {
                {
                  _ptr__5850[safe_add( _5834,_5903 )] = (int)(_ptr__5851[safe_add( _5832,_5903 )] % _ptr__5835[(int)1]);
                }
              }
              _ptr__5850[_5840] = (int)0;
              int _11258 = (int)0;
              int _11259 = _5830;
              for (int _5904 = _11258; _5904 < _11259; ++_5904)
              {
                {
                  ++ _ptr__5850[safe_add( safe_add( _5840,_ptr__5850[safe_add( _5833,_5904 )] ),(int)1 )];
                }
              }
              int _11260 = (int)0;
              int _11261 = _5839;
              for (int _5905 = _11260; _5905 < _11261; ++_5905)
              {
                {
                  _ptr__5850[safe_add( safe_add( _5840,_5905 ),(int)1 )] += _ptr__5850[safe_add( _5840,_5905 )];
                }
              }
            }
          }
          int _11262 = (int)0;
          int _11263 = _5839;
          for (int _5906 = _11262; _5906 < _11263; ++_5906)
          {
            {
              int _11264 = (int)0;
              int _11265 = mdimj;
              for (int _5907 = _11264; _5907 < _11265; ++_5907)
              {
                {
                  int _5908 = (int)0;
                  int _5909 = _ptr__5850[safe_add( safe_add( _5840,_5906 ),(int)1 )];
                  int _5910 = _ptr__5850[safe_add( safe_add( _5849,_5907 ),(int)1 )];
                  int _5911 = _ptr__5850[safe_add( _5840,_5906 )];
                  int _5912 = _ptr__5850[safe_add( _5849,_5907 )];
                  while ( ((_5912 < _5910) && (_5911 < _5909)) )
                  {
                    {
                      if ((_ptr__5842[_ptr__5850[safe_add( _5848,_5912 )]] < _ptr__5850[safe_add( _5834,_5911 )]))
                      {
                        {
                          ++ _5912;
                        }
                      }
                      else if((_ptr__5842[_ptr__5850[safe_add( _5848,_5912 )]] > _ptr__5850[safe_add( _5834,_5911 )]))
                      {
                        {
                          ++ _5911;
                        }
                      }
                      else
                      {
                        {
                          ++ _5908;
                          ++ _5912;
                          ++ _5911;
                        }
                      }
                    }
                  }
                  if ((_5908 > (int)0))
                  {
                    {
                      _5852 += _5908;
                      ++ _5853;
                    }
                  }
                  {}
                }
              }
            }
          }
          bool _5913 = (_5853 < safe_mul( _5838,mdimi ));
          _5825->alloc_expr((int)2,_5853,_5852,_5913);
          int _5914 = mosek::fusion::p_WorkStack::_get_impl(_5825)->ptr_base;
          int _5915 = mosek::fusion::p_WorkStack::_get_impl(_5825)->shape_base;
          int _5916 = mosek::fusion::p_WorkStack::_get_impl(_5825)->nidxs_base;
          int _5917 = mosek::fusion::p_WorkStack::_get_impl(_5825)->sp_base;
          int _5918 = mosek::fusion::p_WorkStack::_get_impl(_5825)->cof_base;
          ((*mosek::fusion::p_WorkStack::_get_impl(_5825)->i32)(_5915)) = _5839;
          ((*mosek::fusion::p_WorkStack::_get_impl(_5825)->i32)(safe_add( _5915,(int)1 ))) = mdimj;
          std::shared_ptr< monty::ndarray< int,1 > > _5919 = mosek::fusion::p_WorkStack::_get_impl(_5825)->i32;
          _checked_ptr_1<int> _ptr__5919(_5919 ? _5919->raw() : nullptr,_5919 ? _5919->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _5920 = mosek::fusion::p_WorkStack::_get_impl(_5825)->i64;
          _checked_ptr_1<long long> _ptr__5920(_5920 ? _5920->raw() : nullptr,_5920 ? _5920->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _5921 = mosek::fusion::p_WorkStack::_get_impl(_5825)->f64;
          _checked_ptr_1<double> _ptr__5921(_5921 ? _5921->raw() : nullptr,_5921 ? _5921->size(0) : 0);
          {
            int _5922 = (int)0;
            int _5923 = (int)0;
            int _5924 = (int)0;
            _ptr__5919[_5914] = (int)0;
            int _11266 = (int)0;
            int _11267 = _5839;
            for (int _5925 = _11266; _5925 < _11267; ++_5925)
            {
              {
                int _11268 = (int)0;
                int _11269 = mdimj;
                for (int _5926 = _11268; _5926 < _11269; ++_5926)
                {
                  {
                    int _5927 = (int)0;
                    int _5928 = _ptr__5850[safe_add( safe_add( _5840,_5925 ),(int)1 )];
                    int _5929 = _ptr__5850[safe_add( safe_add( _5849,_5926 ),(int)1 )];
                    int _5930 = _ptr__5850[safe_add( _5840,_5925 )];
                    int _5931 = _ptr__5850[safe_add( _5849,_5926 )];
                    while ( ((_5931 < _5929) && (_5930 < _5928)) )
                    {
                      {
                        if ((_ptr__5842[_ptr__5850[safe_add( _5848,_5931 )]] < _ptr__5850[safe_add( _5834,_5930 )]))
                        {
                          {
                            ++ _5931;
                          }
                        }
                        else if((_ptr__5842[_ptr__5850[safe_add( _5848,_5931 )]] > _ptr__5850[safe_add( _5834,_5930 )]))
                        {
                          {
                            ++ _5930;
                          }
                        }
                        else
                        {
                          {
                            _ptr__5920[safe_add( _5916,_5924 )] = _ptr__5851[safe_add( _5831,_5930 )];
                            _ptr__5921[safe_add( _5918,_5924 )] = _ptr__5844[_ptr__5850[safe_add( _5848,_5931 )]];
                            ++ _5927;
                            ++ _5924;
                            ++ _5931;
                            ++ _5930;
                          }
                        }
                      }
                    }
                    if ((_5927 > (int)0))
                    {
                      {
                        _ptr__5919[safe_add( safe_add( _5914,_5923 ),(int)1 )] = _5924;
                        _ptr__5920[safe_add( _5917,_5923 )] = _5922;
                        ++ _5923;
                      }
                    }
                    {}
                    ++ _5922;
                  }
                }
              }
            }
          }
          if ((!_5913))
          {
            {
              _5825->popi64(_5853);
            }
          }
          {}
        }
      }
    }
  }
  mosek::fusion::p_WorkStack::_get_impl(_5826)->pi32 = _5828;
  mosek::fusion::p_WorkStack::_get_impl(_5826)->pi64 = _5829;
}
void mosek::fusion::ExprMulVar :: eval_left(monty::rc_ptr< ::mosek::fusion::WorkStack > _5932,monty::rc_ptr< ::mosek::fusion::WorkStack > _5933,monty::rc_ptr< ::mosek::fusion::WorkStack > _5934) { mosek::fusion::p_ExprMulVar::_get_impl(this)->eval_left(_5932,_5933,_5934); }void mosek::fusion::p_ExprMulVar::eval_left(monty::rc_ptr< ::mosek::fusion::WorkStack > _5932,monty::rc_ptr< ::mosek::fusion::WorkStack > _5933,monty::rc_ptr< ::mosek::fusion::WorkStack > _5934){
  int _5935 = x->numInst();
  std::shared_ptr< monty::ndarray< int,1 > > _5936 = x->getShape();
  _checked_ptr_1<int> _ptr__5936(_5936 ? _5936->raw() : nullptr,_5936 ? _5936->size(0) : 0);
  int _5937 = (int)((_5936)->size(0));
  int _5938 = _5934->alloci64(_5935);
  int _5939 = _5934->alloci64(_5935);
  int _5940 = _5934->alloci32(_5935);
  int _5941 = _5934->alloci32(_5935);
  int _5942 = _5934->alloci32(_5935);
  int _5943 = _5934->alloci32(safe_add( mdimi,(int)1 ));
  std::shared_ptr< monty::ndarray< int,1 > > _5944 = x->getShape();
  _checked_ptr_1<int> _ptr__5944(_5944 ? _5944->raw() : nullptr,_5944 ? _5944->size(0) : 0);
  int _5945 = (int)((_5944)->size(0));
  int _11270;
  bool _11271 = (_5945 == (int)1);
  if (_11271)
  {
    _11270 = (int)1;
  }
  else
  {
    _11270 = _ptr__5944[(int)1];
  }
  int _5946 = _11270;
  int _5947 = _ptr__5944[(int)0];
  int _5948 = _5934->alloci32(safe_add( _5946,(int)1 ));
  std::shared_ptr< monty::ndarray< int,1 > > _5949 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubi;
  _checked_ptr_1<int> _ptr__5949(_5949 ? _5949->raw() : nullptr,_5949 ? _5949->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5950 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubj;
  _checked_ptr_1<int> _ptr__5950(_5950 ? _5950->raw() : nullptr,_5950 ? _5950->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5951 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mcof;
  _checked_ptr_1<double> _ptr__5951(_5951 ? _5951->raw() : nullptr,_5951 ? _5951->size(0) : 0);
  int _5952 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimi;
  int _5953 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimj;
  int _5954 = (int)0;
  int _5955 = (int)0;
  std::shared_ptr< monty::ndarray< int,1 > > _5956 = mosek::fusion::p_WorkStack::_get_impl(_5934)->i32;
  _checked_ptr_1<int> _ptr__5956(_5956 ? _5956->raw() : nullptr,_5956 ? _5956->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5957 = mosek::fusion::p_WorkStack::_get_impl(_5934)->i64;
  _checked_ptr_1<long long> _ptr__5957(_5957 ? _5957->raw() : nullptr,_5957 ? _5957->size(0) : 0);
  int _5958 = (int)((_5951)->size(0));
  x->inst(_5939,_5957,_5938,_5957);
  if ((x->numInst() < x->getSize()))
  {
    {
      {
        int _11272 = (int)0;
        int _11273 = safe_add( _5952,(int)1 );
        for (int _5959 = _11272; _5959 < _11273; ++_5959)
        {
          {
            _ptr__5956[safe_add( _5943,_5959 )] = (int)0;
          }
        }
        int _11274 = (int)0;
        int _11275 = (int)((_5949)->size(0));
        for (int _5960 = _11274; _5960 < _11275; ++_5960)
        {
          {
            ++ _ptr__5956[safe_add( safe_add( _5943,_ptr__5949[_5960] ),(int)1 )];
          }
        }
        int _11276 = (int)0;
        int _11277 = _5952;
        for (int _5961 = _11276; _5961 < _11277; ++_5961)
        {
          {
            _ptr__5956[safe_add( safe_add( _5943,_5961 ),(int)1 )] += _ptr__5956[safe_add( _5943,_5961 )];
          }
        }
        if ((_5945 == (int)1))
        {
          {
            int _11278 = (int)0;
            int _11279 = _5935;
            for (int _5962 = _11278; _5962 < _11279; ++_5962)
            {
              {
                _ptr__5956[safe_add( _5940,_5962 )] = (int)_ptr__5957[safe_add( _5939,_5962 )];
              }
            }
            int _11280 = (int)0;
            int _11281 = _5935;
            for (int _5963 = _11280; _5963 < _11281; ++_5963)
            {
              {
                _ptr__5956[safe_add( _5941,_5963 )] = (int)0;
              }
            }
          }
        }
        else
        {
          {
            int _11282 = (int)0;
            int _11283 = _5935;
            for (int _5964 = _11282; _5964 < _11283; ++_5964)
            {
              {
                _ptr__5956[safe_add( _5940,_5964 )] = (int)(_ptr__5957[safe_add( _5939,_5964 )] / _5946);
              }
            }
            int _11284 = (int)0;
            int _11285 = _5935;
            for (int _5965 = _11284; _5965 < _11285; ++_5965)
            {
              {
                _ptr__5956[safe_add( _5941,_5965 )] = (int)(_ptr__5957[safe_add( _5939,_5965 )] % _5946);
              }
            }
          }
        }
        if ((_5945 > (int)1))
        {
          {
            int _11286 = (int)0;
            int _11287 = safe_add( _5946,(int)1 );
            for (int _5966 = _11286; _5966 < _11287; ++_5966)
            {
              {
                _ptr__5956[safe_add( _5948,_5966 )] = (int)0;
              }
            }
            int _11288 = (int)0;
            int _11289 = _5935;
            for (int _5967 = _11288; _5967 < _11289; ++_5967)
            {
              {
                ++ _ptr__5956[safe_add( safe_add( _5948,_ptr__5956[safe_add( _5941,_5967 )] ),(int)1 )];
              }
            }
            int _11290 = (int)0;
            int _11291 = _5946;
            for (int _5968 = _11290; _5968 < _11291; ++_5968)
            {
              {
                _ptr__5956[safe_add( safe_add( _5948,_5968 ),(int)1 )] += _ptr__5956[safe_add( _5948,_5968 )];
              }
            }
            int _11292 = (int)0;
            int _11293 = _5935;
            for (int _5969 = _11292; _5969 < _11293; ++_5969)
            {
              {
                _ptr__5956[safe_add( _5942,_ptr__5956[safe_add( _5948,_ptr__5956[safe_add( _5941,_5969 )] )] )] = _5969;
                ++ _ptr__5956[safe_add( _5948,_ptr__5956[safe_add( _5941,_5969 )] )];
              }
            }
            int _11294 = (int)0;
            int _11295 = _5946;
            for (int _5970 = _11294; _5970 < _11295; ++_5970)
            {
              {
                _ptr__5956[(safe_add( _5948,_5946 ) - _5970)] = _ptr__5956[((safe_add( _5948,_5946 ) - _5970) - (int)1)];
              }
            }
            _ptr__5956[_5948] = (int)0;
          }
        }
        else
        {
          {
            _ptr__5956[_5948] = (int)0;
            _ptr__5956[safe_add( _5948,(int)1 )] = _5935;
            int _11296 = (int)0;
            int _11297 = _5935;
            for (int _5971 = _11296; _5971 < _11297; ++_5971)
            {
              {
                _ptr__5956[safe_add( _5942,_5971 )] = _5971;
              }
            }
          }
        }
        int _11298 = (int)0;
        int _11299 = _5952;
        for (int _5972 = _11298; _5972 < _11299; ++_5972)
        {
          {
            int _11300 = (int)0;
            int _11301 = _5946;
            for (int _5973 = _11300; _5973 < _11301; ++_5973)
            {
              {
                int _5974 = (int)0;
                int _5975 = _ptr__5956[safe_add( safe_add( _5948,_5973 ),(int)1 )];
                int _5976 = _ptr__5956[safe_add( safe_add( _5943,_5972 ),(int)1 )];
                int _5977 = _ptr__5956[safe_add( _5948,_5973 )];
                int _5978 = _ptr__5956[safe_add( _5943,_5972 )];
                while ( ((_5978 < _5976) && (_5977 < _5975)) )
                {
                  {
                    if ((_ptr__5950[_5978] < _ptr__5956[safe_add( _5940,_ptr__5956[safe_add( _5942,_5977 )] )]))
                    {
                      {
                        ++ _5978;
                      }
                    }
                    else if((_ptr__5950[_5978] > _ptr__5956[safe_add( _5940,_ptr__5956[safe_add( _5942,_5977 )] )]))
                    {
                      {
                        ++ _5977;
                      }
                    }
                    else
                    {
                      {
                        ++ _5974;
                        ++ _5978;
                        ++ _5977;
                      }
                    }
                  }
                }
                if ((_5974 > (int)0))
                {
                  {
                    _5954 += _5974;
                    ++ _5955;
                  }
                }
                {}
              }
            }
          }
        }
      }
    }
  }
  else
  {
    {
      _5954 = safe_mul( _5958,_5946 );
      int _5979 = (int)0;
      while ( (_5979 < _5958) )
      {
        {
          int _5980 = safe_add( _5979,(int)1 );
          while ( ((_5980 < _5958) && (_ptr__5949[_5979] == _ptr__5949[_5980])) )
          {
            {
              ++ _5980;
            }
          }
          ++ _5955;
          _5979 = _5980;
        }
      }
      _5955 *= _5946;
    }
  }
  bool _11302;
  bool _11303 = (_5955 < safe_mul( _5946,_5952 ));
  if (_11303)
  {
    _11302 = true;
  }
  else
  {
    _11302 = false;
  }
  bool _5981 = _11302;
  int _5982 = _5945;
  _5932->alloc_expr(_5982,_5955,_5954,_5981);
  int _5983 = mosek::fusion::p_WorkStack::_get_impl(_5932)->ptr_base;
  int _5984 = mosek::fusion::p_WorkStack::_get_impl(_5932)->shape_base;
  int _5985 = mosek::fusion::p_WorkStack::_get_impl(_5932)->nidxs_base;
  int _11304;
  bool _11305 = _5981;
  if (_11305)
  {
    _11304 = mosek::fusion::p_WorkStack::_get_impl(_5932)->sp_base;
  }
  else
  {
    _11304 = _5932->alloci64(_5955);
  }
  int _5986 = _11304;
  int _5987 = mosek::fusion::p_WorkStack::_get_impl(_5932)->cof_base;
  std::shared_ptr< monty::ndarray< int,1 > > _5988 = mosek::fusion::p_WorkStack::_get_impl(_5932)->i32;
  _checked_ptr_1<int> _ptr__5988(_5988 ? _5988->raw() : nullptr,_5988 ? _5988->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5989 = mosek::fusion::p_WorkStack::_get_impl(_5932)->i64;
  _checked_ptr_1<long long> _ptr__5989(_5989 ? _5989->raw() : nullptr,_5989 ? _5989->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5990 = mosek::fusion::p_WorkStack::_get_impl(_5932)->f64;
  _checked_ptr_1<double> _ptr__5990(_5990 ? _5990->raw() : nullptr,_5990 ? _5990->size(0) : 0);
  _ptr__5988[_5984] = _5952;
  if ((_5945 > (int)1))
  {
    {
      _ptr__5988[safe_add( _5984,(int)1 )] = _5946;
    }
  }
  {}
  if ((x->numInst() < x->getSize()))
  {
    {
      int _5991 = (int)0;
      int _5992 = (int)0;
      int _5993 = (int)0;
      _ptr__5988[_5983] = (int)0;
      int _11306 = (int)0;
      int _11307 = _5952;
      for (int _5994 = _11306; _5994 < _11307; ++_5994)
      {
        {
          int _11308 = (int)0;
          int _11309 = _5946;
          for (int _5995 = _11308; _5995 < _11309; ++_5995)
          {
            {
              int _5996 = (int)0;
              int _5997 = _ptr__5956[safe_add( safe_add( _5948,_5995 ),(int)1 )];
              int _5998 = _ptr__5956[safe_add( safe_add( _5943,_5994 ),(int)1 )];
              int _5999 = _ptr__5956[safe_add( _5948,_5995 )];
              int _6000 = _ptr__5956[safe_add( _5943,_5994 )];
              while ( ((_6000 < _5998) && (_5999 < _5997)) )
              {
                {
                  if ((_ptr__5950[_6000] < _ptr__5956[safe_add( _5940,_ptr__5956[safe_add( _5942,_5999 )] )]))
                  {
                    {
                      ++ _6000;
                    }
                  }
                  else if((_ptr__5950[_6000] > _ptr__5956[safe_add( _5940,_ptr__5956[safe_add( _5942,_5999 )] )]))
                  {
                    {
                      ++ _5999;
                    }
                  }
                  else
                  {
                    {
                      _ptr__5989[safe_add( _5985,_5993 )] = _ptr__5957[safe_add( _5938,_ptr__5956[safe_add( _5942,_5999 )] )];
                      _ptr__5990[safe_add( _5987,_5993 )] = _ptr__5951[_6000];
                      ++ _5996;
                      ++ _5993;
                      ++ _6000;
                      ++ _5999;
                    }
                  }
                }
              }
              if ((_5996 > (int)0))
              {
                {
                  _ptr__5988[safe_add( safe_add( _5983,_5992 ),(int)1 )] = _5993;
                  _ptr__5989[safe_add( _5986,_5992 )] = _5991;
                  ++ _5992;
                }
              }
              {}
              ++ _5991;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int _6001 = (int)0;
      int _6002 = (int)0;
      _ptr__5988[_5983] = (int)0;
      int _6003 = (int)0;
      while ( (_6003 < _5958) )
      {
        {
          int _6004 = safe_add( _6003,(int)1 );
          while ( ((_6004 < _5958) && (_ptr__5949[_6004] == _ptr__5949[_6003])) )
          {
            {
              ++ _6004;
            }
          }
          int _11310 = (int)0;
          int _11311 = _5946;
          for (int _6005 = _11310; _6005 < _11311; ++_6005)
          {
            {
              int _11312 = _6003;
              int _11313 = _6004;
              for (int _6006 = _11312; _6006 < _11313; ++_6006)
              {
                {
                  _ptr__5989[safe_add( _5985,_6001 )] = _ptr__5957[safe_add( safe_add( _5938,safe_mul( _ptr__5950[_6006],_5946 ) ),_6005 )];
                  _ptr__5990[safe_add( _5987,_6001 )] = _ptr__5951[_6006];
                  ++ _6001;
                }
              }
              _ptr__5988[safe_add( safe_add( _5983,_6002 ),(int)1 )] = _6001;
              _ptr__5989[safe_add( _5986,_6002 )] = safe_add( safe_mul( _ptr__5949[_6003],_5946 ),_6005 );
              ++ _6002;
            }
          }
          _6003 = _6004;
        }
      }
    }
  }
  if ((!_5981))
  {
    {
      _5932->popi64(_5955);
    }
  }
  {}
  _5934->clear();
}
void mosek::fusion::p_ExprMulVar::validate(int _6007,int _6008,std::shared_ptr< monty::ndarray< int,1 > > _6009,std::shared_ptr< monty::ndarray< int,1 > > _6010,std::shared_ptr< monty::ndarray< double,1 > > _6011){
  _checked_ptr_1<int> _ptr__6009(_6009 ? _6009->raw() : nullptr, _6009 ? _6009->size(0) : 0);
  _checked_ptr_1<int> _ptr__6010(_6010 ? _6010->raw() : nullptr, _6010 ? _6010->size(0) : 0);
  _checked_ptr_1<double> _ptr__6011(_6011 ? _6011->raw() : nullptr, _6011 ? _6011->size(0) : 0);
  bool _6012 = true;
  {
    int _11314 = (int)0;
    int _11315 = (int)((_6009)->size(0));
    for (int _6013 = _11314; _6013 < _11315; ++_6013)
    {
      {
        if (((_ptr__6009[_6013] < (int)0) || ((_ptr__6009[_6013] >= _6007) || ((_ptr__6010[_6013] < (int)0) || (_ptr__6010[_6013] >= _6008)))))
        {
          {
            _6012 = false;
          }
        }
        {}
      }
    }
    int _11316 = (int)1;
    int _11317 = (int)((_6009)->size(0));
    for (int _6014 = _11316; _6014 < _11317; ++_6014)
    {
      {
        if (((_ptr__6009[(_6014 - (int)1)] > _ptr__6009[_6014]) || ((_ptr__6009[(_6014 - (int)1)] == _ptr__6009[_6014]) && (_ptr__6010[(_6014 - (int)1)] >= _ptr__6010[_6014]))))
        {
          {
            _6012 = false;
          }
        }
        {}
      }
    }
  }
  if ((!_6012))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid matrix data"));
    }
  }
  {}
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprMulVar::resshape(int _6015,int _6016,std::shared_ptr< monty::ndarray< int,1 > > _6017,bool _6018){
  _checked_ptr_1<int> _ptr__6017(_6017 ? _6017->raw() : nullptr, _6017 ? _6017->size(0) : 0);
  if (_6018)
  {
    {
      return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_6015),(int)(_ptr__6017[(int)1])});
    }
  }
  else
  {
    {
      return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__6017[(int)0]),(int)(_6016)});
    }
  }
}
std::string mosek::fusion::ExprMulVar :: toString() { return mosek::fusion::p_ExprMulVar::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulVar::toString(){
  if (left)
  {
    {
      return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulVar(M,"))->__mosek_2fusion_2Utils_2StringBuffer__a(x->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
    }
  }
  else
  {
    {
      return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulVar("))->__mosek_2fusion_2Utils_2StringBuffer__a(x->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",M)"))->toString();
    }
  }
}
void mosek::fusion::p_ExprMulVar::destroy(){x.reset();mcof.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprMulVar::destroy() { mosek::fusion::p_ExprMulVar::_get_impl(this)->destroy(); }mosek::fusion::ExprMulScalarVar::ExprMulScalarVar(mosek::fusion::p_ExprMulScalarVar *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulScalarVar()" << this << std::endl; */ }mosek::fusion::ExprMulScalarVar::~ExprMulScalarVar() {  /* std::cout << "~ExprMulScalarVar()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulScalarVar::p_ExprMulScalarVar  (::mosek::fusion::ExprMulScalarVar * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulScalarVar::t mosek::fusion::p_ExprMulScalarVar::_new_ExprMulScalarVar  (int _6019,    int _6020,    std::shared_ptr< monty::ndarray< int,1 > > _6021,    std::shared_ptr< monty::ndarray< int,1 > > _6022,    std::shared_ptr< monty::ndarray< double,1 > > _6023,    monty::rc_ptr< ::mosek::fusion::Variable > _6024){ return new mosek::fusion::ExprMulScalarVar(_6019,_6020,_6021,_6022,_6023,_6024); }mosek::fusion::ExprMulScalarVar::ExprMulScalarVar  (int _6019,    int _6020,    std::shared_ptr< monty::ndarray< int,1 > > _6021,    std::shared_ptr< monty::ndarray< int,1 > > _6022,    std::shared_ptr< monty::ndarray< double,1 > > _6023,    monty::rc_ptr< ::mosek::fusion::Variable > _6024) :    ExprMulScalarVar(new mosek::fusion::p_ExprMulScalarVar(this)){ mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->_initialize(_6019,_6020,_6021,_6022,_6023,_6024); }void mosek::fusion::p_ExprMulScalarVar::_initialize  (int _6019,    int _6020,    std::shared_ptr< monty::ndarray< int,1 > > _6021,    std::shared_ptr< monty::ndarray< int,1 > > _6022,    std::shared_ptr< monty::ndarray< double,1 > > _6023,    monty::rc_ptr< ::mosek::fusion::Variable > _6024){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__6021(_6021 ? _6021->raw() : nullptr, _6021 ? _6021->size(0) : 0);
    _checked_ptr_1<int> _ptr__6022(_6022 ? _6022->raw() : nullptr, _6022 ? _6022->size(0) : 0);
    _checked_ptr_1<double> _ptr__6023(_6023 ? _6023->raw() : nullptr, _6023 ? _6023->size(0) : 0);
    mosek::fusion::p_ExprMulScalarVar::_initialize(_6019,_6020,::mosek::fusion::Utils::Tools::arraycopy(_6021),::mosek::fusion::Utils::Tools::arraycopy(_6022),::mosek::fusion::Utils::Tools::arraycopy(_6023),_6024,(int)1);
    if ((_6024->getND() != (int)0))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid Variable size"));
      }
    }
    {}
    if (((_6019 < (int)0) || ((_6020 < (int)0) || (((int)((_6021)->size(0)) != (int)((_6022)->size(0))) || ((int)((_6021)->size(0)) != (int)((_6023)->size(0)))))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Invalid Matrix data"));
      }
    }
    {}
    bool _6025 = false;
    int _11318 = (int)0;
    int _11319 = (int)((_6021)->size(0));
    for (int _6026 = _11318; _6026 < _11319; ++_6026)
    {
      {
        if (((_ptr__6021[_6026] < (int)0) || ((_ptr__6021[_6026] >= _6019) || ((_ptr__6022[_6026] < (int)0) || (_ptr__6022[_6026] >= _6020)))))
        {
          {
            _6025 = true;
          }
        }
        {}
      }
    }
    if (_6025)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Invalid Matrix data"));
      }
    }
    {}
    bool _6027 = false;
    int _11320 = (int)1;
    int _11321 = (int)((_6021)->size(0));
    for (int _6028 = _11320; _6028 < _11321; ++_6028)
    {
      {
        if (((_ptr__6021[_6028] < _ptr__6021[(_6028 - (int)1)]) || ((_ptr__6021[_6028] == _ptr__6021[(_6028 - (int)1)]) && (_ptr__6022[_6028] <= _ptr__6022[(_6028 - (int)1)]))))
        {
          {
            _6027 = true;
          }
        }
        {}
      }
    }
    if (_6027)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Matrix data not correctly sorted"));
      }
    }
    {}
  }
}mosek::fusion::ExprMulScalarVar::t mosek::fusion::p_ExprMulScalarVar::_new_ExprMulScalarVar  (int _6029,    int _6030,    std::shared_ptr< monty::ndarray< int,1 > > _6031,    std::shared_ptr< monty::ndarray< int,1 > > _6032,    std::shared_ptr< monty::ndarray< double,1 > > _6033,    monty::rc_ptr< ::mosek::fusion::Variable > _6034,    int _6035){ return new mosek::fusion::ExprMulScalarVar(_6029,_6030,_6031,_6032,_6033,_6034,_6035); }mosek::fusion::ExprMulScalarVar::ExprMulScalarVar  (int _6029,    int _6030,    std::shared_ptr< monty::ndarray< int,1 > > _6031,    std::shared_ptr< monty::ndarray< int,1 > > _6032,    std::shared_ptr< monty::ndarray< double,1 > > _6033,    monty::rc_ptr< ::mosek::fusion::Variable > _6034,    int _6035) :    ExprMulScalarVar(new mosek::fusion::p_ExprMulScalarVar(this)){ mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->_initialize(_6029,_6030,_6031,_6032,_6033,_6034,_6035); }void mosek::fusion::p_ExprMulScalarVar::_initialize  (int _6029,    int _6030,    std::shared_ptr< monty::ndarray< int,1 > > _6031,    std::shared_ptr< monty::ndarray< int,1 > > _6032,    std::shared_ptr< monty::ndarray< double,1 > > _6033,    monty::rc_ptr< ::mosek::fusion::Variable > _6034,    int _6035){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__6031(_6031 ? _6031->raw() : nullptr, _6031 ? _6031->size(0) : 0);
    _checked_ptr_1<int> _ptr__6032(_6032 ? _6032->raw() : nullptr, _6032 ? _6032->size(0) : 0);
    _checked_ptr_1<double> _ptr__6033(_6033 ? _6033->raw() : nullptr, _6033 ? _6033->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_6029),(int)(_6030)}));
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->mdimi = _6029;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->mdimj = _6030;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->msubi = _6031;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->msubj = _6032;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->mcof = _6033;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->x = _6034;
  }
}void mosek::fusion::ExprMulScalarVar :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6036,monty::rc_ptr< ::mosek::fusion::WorkStack > _6037,monty::rc_ptr< ::mosek::fusion::WorkStack > _6038) { mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->eval(_6036,_6037,_6038); }void mosek::fusion::p_ExprMulScalarVar::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6036,monty::rc_ptr< ::mosek::fusion::WorkStack > _6037,monty::rc_ptr< ::mosek::fusion::WorkStack > _6038){
  if ((x->numInst() == (int)0))
  {
    {
      _6036->alloc_expr((int)2,(int)0,(int)0,false);
      ((*mosek::fusion::p_WorkStack::_get_impl(_6036)->i32)(mosek::fusion::p_WorkStack::_get_impl(_6036)->shape_base)) = mdimi;
      ((*mosek::fusion::p_WorkStack::_get_impl(_6036)->i32)(safe_add( mosek::fusion::p_WorkStack::_get_impl(_6036)->shape_base,(int)1 ))) = mdimj;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _6039 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1)));
      _checked_ptr_1<long long> _ptr__6039(_6039 ? _6039->raw() : nullptr,_6039 ? _6039->size(0) : 0);
      x->inst((int)0,_6039);
      long long _6040 = _ptr__6039[(int)0];
      int _6041 = (int)((msubi)->size(0));
      int _6042 = _6041;
      bool _6043 = (_6041 < safe_mul( mdimi,mdimj ));
      _6036->alloc_expr((int)2,_6041,_6042,_6043);
      int _6044 = mosek::fusion::p_WorkStack::_get_impl(_6036)->ptr_base;
      ((*mosek::fusion::p_WorkStack::_get_impl(_6036)->i32)(mosek::fusion::p_WorkStack::_get_impl(_6036)->shape_base)) = mdimi;
      ((*mosek::fusion::p_WorkStack::_get_impl(_6036)->i32)(safe_add( mosek::fusion::p_WorkStack::_get_impl(_6036)->shape_base,(int)1 ))) = mdimj;
      int _6045 = mosek::fusion::p_WorkStack::_get_impl(_6036)->nidxs_base;
      int _6046 = mosek::fusion::p_WorkStack::_get_impl(_6036)->sp_base;
      int _6047 = mosek::fusion::p_WorkStack::_get_impl(_6036)->cof_base;
      std::shared_ptr< monty::ndarray< int,1 > > _6048 = mosek::fusion::p_WorkStack::_get_impl(_6036)->i32;
      _checked_ptr_1<int> _ptr__6048(_6048 ? _6048->raw() : nullptr,_6048 ? _6048->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _6049 = mosek::fusion::p_WorkStack::_get_impl(_6036)->i64;
      _checked_ptr_1<long long> _ptr__6049(_6049 ? _6049->raw() : nullptr,_6049 ? _6049->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6050 = mosek::fusion::p_WorkStack::_get_impl(_6036)->f64;
      _checked_ptr_1<double> _ptr__6050(_6050 ? _6050->raw() : nullptr,_6050 ? _6050->size(0) : 0);
      {
        int _11322 = (int)0;
        int _11323 = _6042;
        for (int _6051 = _11322; _6051 < _11323; ++_6051)
        {
          {
            _ptr__6050[safe_add( _6047,_6051 )] = ((*mcof)(_6051));
          }
        }
        int _11324 = (int)0;
        int _11325 = _6042;
        for (int _6052 = _11324; _6052 < _11325; ++_6052)
        {
          {
            _ptr__6049[safe_add( _6045,_6052 )] = _6040;
          }
        }
        if (_6043)
        {
          {
            int _11326 = (int)0;
            int _11327 = _6041;
            for (int _6053 = _11326; _6053 < _11327; ++_6053)
            {
              {
                _ptr__6049[safe_add( _6046,_6053 )] = safe_add( safe_mul( ((*msubi)(_6053)),mdimj ),((*msubj)(_6053)) );
              }
            }
          }
        }
        {}
        int _11328 = (int)0;
        int _11329 = safe_add( _6041,(int)1 );
        for (int _6054 = _11328; _6054 < _11329; ++_6054)
        {
          {
            _ptr__6048[safe_add( _6044,_6054 )] = _6054;
          }
        }
      }
    }
  }
}
std::string mosek::fusion::ExprMulScalarVar :: toString() { return mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulScalarVar::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulScalarVar(M("))->__mosek_2fusion_2Utils_2StringBuffer__a(mdimi)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(mdimj)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("), "))->__mosek_2fusion_2Utils_2StringBuffer__a(x->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulScalarVar::destroy(){x.reset();mcof.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprMulScalarVar::destroy() { mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->destroy(); }mosek::fusion::ExprMulVarScalarConst::ExprMulVarScalarConst(mosek::fusion::p_ExprMulVarScalarConst *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulVarScalarConst()" << this << std::endl; */ }mosek::fusion::ExprMulVarScalarConst::~ExprMulVarScalarConst() {  /* std::cout << "~ExprMulVarScalarConst()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulVarScalarConst::p_ExprMulVarScalarConst  (::mosek::fusion::ExprMulVarScalarConst * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulVarScalarConst::t mosek::fusion::p_ExprMulVarScalarConst::_new_ExprMulVarScalarConst  (monty::rc_ptr< ::mosek::fusion::Variable > _6055,    double _6056){ return new mosek::fusion::ExprMulVarScalarConst(_6055,_6056); }mosek::fusion::ExprMulVarScalarConst::ExprMulVarScalarConst  (monty::rc_ptr< ::mosek::fusion::Variable > _6055,    double _6056) :    ExprMulVarScalarConst(new mosek::fusion::p_ExprMulVarScalarConst(this)){ mosek::fusion::p_ExprMulVarScalarConst::_get_impl(this)->_initialize(_6055,_6056); }void mosek::fusion::p_ExprMulVarScalarConst::_initialize  (monty::rc_ptr< ::mosek::fusion::Variable > _6055,    double _6056){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_6055->getShape());
    mosek::fusion::p_ExprMulVarScalarConst::_get_impl(::mosek::fusion::ExprMulVarScalarConst::t(_pubthis))->x = _6055;
    mosek::fusion::p_ExprMulVarScalarConst::_get_impl(::mosek::fusion::ExprMulVarScalarConst::t(_pubthis))->c = _6056;
  }
}void mosek::fusion::ExprMulVarScalarConst :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6057,monty::rc_ptr< ::mosek::fusion::WorkStack > _6058,monty::rc_ptr< ::mosek::fusion::WorkStack > _6059) { mosek::fusion::p_ExprMulVarScalarConst::_get_impl(this)->eval(_6057,_6058,_6059); }void mosek::fusion::p_ExprMulVarScalarConst::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6057,monty::rc_ptr< ::mosek::fusion::WorkStack > _6058,monty::rc_ptr< ::mosek::fusion::WorkStack > _6059){
  int _6060 = x->numInst();
  int _6061 = _6060;
  std::shared_ptr< monty::ndarray< int,1 > > _6062 = x->getShape();
  _checked_ptr_1<int> _ptr__6062(_6062 ? _6062->raw() : nullptr,_6062 ? _6062->size(0) : 0);
  int _6063 = (int)((_6062)->size(0));
  bool _6064 = (::mosek::fusion::p_Set::size(_6062) > _6061);
  _6057->alloc_expr(_6063,_6061,_6060,_6064);
  int _6065 = mosek::fusion::p_WorkStack::_get_impl(_6057)->ptr_base;
  int _6066 = mosek::fusion::p_WorkStack::_get_impl(_6057)->nidxs_base;
  int _6067 = mosek::fusion::p_WorkStack::_get_impl(_6057)->sp_base;
  int _6068 = mosek::fusion::p_WorkStack::_get_impl(_6057)->cof_base;
  int _6069 = mosek::fusion::p_WorkStack::_get_impl(_6057)->shape_base;
  if (_6064)
  {
    {
      x->inst(_6067,mosek::fusion::p_WorkStack::_get_impl(_6057)->i64,_6066,mosek::fusion::p_WorkStack::_get_impl(_6057)->i64);
    }
  }
  else
  {
    {
      x->inst(_6066,mosek::fusion::p_WorkStack::_get_impl(_6057)->i64);
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _6070 = mosek::fusion::p_WorkStack::_get_impl(_6057)->i32;
  _checked_ptr_1<int> _ptr__6070(_6070 ? _6070->raw() : nullptr,_6070 ? _6070->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6071 = mosek::fusion::p_WorkStack::_get_impl(_6057)->i64;
  _checked_ptr_1<long long> _ptr__6071(_6071 ? _6071->raw() : nullptr,_6071 ? _6071->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6072 = mosek::fusion::p_WorkStack::_get_impl(_6057)->f64;
  _checked_ptr_1<double> _ptr__6072(_6072 ? _6072->raw() : nullptr,_6072 ? _6072->size(0) : 0);
  {
    int _11330 = (int)0;
    int _11331 = _6063;
    for (int _6073 = _11330; _6073 < _11331; ++_6073)
    {
      {
        _ptr__6070[safe_add( _6069,_6073 )] = _ptr__6062[_6073];
      }
    }
    int _11332 = (int)0;
    int _11333 = safe_add( _6061,(int)1 );
    for (int _6074 = _11332; _6074 < _11333; ++_6074)
    {
      {
        _ptr__6070[safe_add( _6065,_6074 )] = _6074;
      }
    }
    int _11334 = (int)0;
    int _11335 = _6060;
    for (int _6075 = _11334; _6075 < _11335; ++_6075)
    {
      {
        _ptr__6072[safe_add( _6068,_6075 )] = 1.0;
      }
    }
  }
}
std::string mosek::fusion::ExprMulVarScalarConst :: toString() { return mosek::fusion::p_ExprMulVarScalarConst::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulVarScalarConst::toString(){
  return std::string ("ExprMulVarScalarConst()");
}
void mosek::fusion::p_ExprMulVarScalarConst::destroy(){x.reset();}void mosek::fusion::ExprMulVarScalarConst::destroy() { mosek::fusion::p_ExprMulVarScalarConst::_get_impl(this)->destroy(); }mosek::fusion::ExprAdd::ExprAdd(mosek::fusion::p_ExprAdd *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprAdd()" << this << std::endl; */ }mosek::fusion::ExprAdd::~ExprAdd() {  /* std::cout << "~ExprAdd()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprAdd::p_ExprAdd  (::mosek::fusion::ExprAdd * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprAdd::t mosek::fusion::p_ExprAdd::_new_ExprAdd  (monty::rc_ptr< ::mosek::fusion::Expression > _6076,    monty::rc_ptr< ::mosek::fusion::Expression > _6077,    double _6078,    double _6079){ return new mosek::fusion::ExprAdd(_6076,_6077,_6078,_6079); }mosek::fusion::ExprAdd::ExprAdd  (monty::rc_ptr< ::mosek::fusion::Expression > _6076,    monty::rc_ptr< ::mosek::fusion::Expression > _6077,    double _6078,    double _6079) :    ExprAdd(new mosek::fusion::p_ExprAdd(this)){ mosek::fusion::p_ExprAdd::_get_impl(this)->_initialize(_6076,_6077,_6078,_6079); }void mosek::fusion::p_ExprAdd::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _6076,    monty::rc_ptr< ::mosek::fusion::Expression > _6077,    double _6078,    double _6079){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_6076->getShape());
    mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->e1 = _6076;
    mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->e2 = _6077;
    mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m1 = _6078;
    mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m2 = _6079;
    if ((_6076->getND() != _6077->getND()))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
      }
    }
    {}
    int _11336 = (int)0;
    int _11337 = _6076->getND();
    for (int _6080 = _11336; _6080 < _11337; ++_6080)
    {
      {
        if ((_6076->getDim(_6080) != _6077->getDim(_6080)))
        {
          {
            throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
          }
        }
        {}
      }
    }
  }
}void mosek::fusion::ExprAdd :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6081,monty::rc_ptr< ::mosek::fusion::WorkStack > _6082,monty::rc_ptr< ::mosek::fusion::WorkStack > _6083) { mosek::fusion::p_ExprAdd::_get_impl(this)->eval(_6081,_6082,_6083); }void mosek::fusion::p_ExprAdd::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6081,monty::rc_ptr< ::mosek::fusion::WorkStack > _6082,monty::rc_ptr< ::mosek::fusion::WorkStack > _6083){
  e1->eval(_6082,_6081,_6083);
  e2->eval(_6082,_6081,_6083);
  _6082->pop_expr();
  int _6084 = mosek::fusion::p_WorkStack::_get_impl(_6082)->nd;
  int _6085 = mosek::fusion::p_WorkStack::_get_impl(_6082)->shape_base;
  int _6086 = mosek::fusion::p_WorkStack::_get_impl(_6082)->nelem;
  int _6087 = mosek::fusion::p_WorkStack::_get_impl(_6082)->nnz;
  int _6088 = mosek::fusion::p_WorkStack::_get_impl(_6082)->ncodeatom;
  bool _6089 = mosek::fusion::p_WorkStack::_get_impl(_6082)->hassp;
  int _6090 = mosek::fusion::p_WorkStack::_get_impl(_6082)->ptr_base;
  int _6091 = mosek::fusion::p_WorkStack::_get_impl(_6082)->sp_base;
  int _6092 = mosek::fusion::p_WorkStack::_get_impl(_6082)->nidxs_base;
  int _6093 = mosek::fusion::p_WorkStack::_get_impl(_6082)->cof_base;
  int _6094 = mosek::fusion::p_WorkStack::_get_impl(_6082)->code_base;
  int _6095 = mosek::fusion::p_WorkStack::_get_impl(_6082)->codeptr_base;
  int _6096 = mosek::fusion::p_WorkStack::_get_impl(_6082)->cconst_base;
  _6082->pop_expr();
  int _6097 = mosek::fusion::p_WorkStack::_get_impl(_6082)->nd;
  int _6098 = mosek::fusion::p_WorkStack::_get_impl(_6082)->shape_base;
  int _6099 = mosek::fusion::p_WorkStack::_get_impl(_6082)->nelem;
  int _6100 = mosek::fusion::p_WorkStack::_get_impl(_6082)->nnz;
  int _6101 = mosek::fusion::p_WorkStack::_get_impl(_6082)->ncodeatom;
  bool _6102 = mosek::fusion::p_WorkStack::_get_impl(_6082)->hassp;
  int _6103 = mosek::fusion::p_WorkStack::_get_impl(_6082)->ptr_base;
  int _6104 = mosek::fusion::p_WorkStack::_get_impl(_6082)->sp_base;
  int _6105 = mosek::fusion::p_WorkStack::_get_impl(_6082)->nidxs_base;
  int _6106 = mosek::fusion::p_WorkStack::_get_impl(_6082)->cof_base;
  int _6107 = mosek::fusion::p_WorkStack::_get_impl(_6082)->code_base;
  int _6108 = mosek::fusion::p_WorkStack::_get_impl(_6082)->codeptr_base;
  int _6109 = mosek::fusion::p_WorkStack::_get_impl(_6082)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _6110 = mosek::fusion::p_WorkStack::_get_impl(_6082)->i32;
  _checked_ptr_1<int> _ptr__6110(_6110 ? _6110->raw() : nullptr,_6110 ? _6110->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6111 = mosek::fusion::p_WorkStack::_get_impl(_6082)->i64;
  _checked_ptr_1<long long> _ptr__6111(_6111 ? _6111->raw() : nullptr,_6111 ? _6111->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6112 = mosek::fusion::p_WorkStack::_get_impl(_6082)->f64;
  _checked_ptr_1<double> _ptr__6112(_6112 ? _6112->raw() : nullptr,_6112 ? _6112->size(0) : 0);
  bool _6113 = ((_6101 > (int)0) || (_6088 > (int)0));
  if ((_6097 != _6084))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
    }
  }
  {}
  int _11338 = (int)0;
  int _11339 = _6097;
  for (int _6114 = _11338; _6114 < _11339; ++_6114)
  {
    {
      if ((_ptr__6110[safe_add( _6098,_6114 )] != _ptr__6110[safe_add( _6085,_6114 )]))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
        }
      }
      {}
    }
  }
  if (((!_6102) && (!_6089)))
  {
    {
      int _6115 = _6099;
      int _6116 = safe_add( _6100,_6087 );
      int _6117 = (int)0;
      if (_6113)
      {
        {
          int _11340;
          bool _11341 = (_6101 > (int)0);
          if (_11341)
          {
            _11340 = safe_add( _6101,safe_mul( _6100,(int)2 ) );
          }
          else
          {
            _11340 = _6100;
          }
          _6117 += _11340;
          int _11342;
          bool _11343 = (_6088 > (int)0);
          if (_11343)
          {
            _11342 = safe_add( _6088,safe_mul( _6087,(int)2 ) );
          }
          else
          {
            _11342 = _6087;
          }
          _6117 += _11342;
        }
      }
      {}
      int _6118 = _6097;
      _6081->alloc_expr(_6118,_6115,_6116,false,_6117);
      int _6119 = mosek::fusion::p_WorkStack::_get_impl(_6081)->shape_base;
      int _6120 = mosek::fusion::p_WorkStack::_get_impl(_6081)->ptr_base;
      int _6121 = mosek::fusion::p_WorkStack::_get_impl(_6081)->sp_base;
      int _6122 = mosek::fusion::p_WorkStack::_get_impl(_6081)->nidxs_base;
      int _6123 = mosek::fusion::p_WorkStack::_get_impl(_6081)->cof_base;
      int _6124 = mosek::fusion::p_WorkStack::_get_impl(_6081)->code_base;
      int _6125 = mosek::fusion::p_WorkStack::_get_impl(_6081)->codeptr_base;
      int _6126 = mosek::fusion::p_WorkStack::_get_impl(_6081)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _6127 = mosek::fusion::p_WorkStack::_get_impl(_6081)->i32;
      _checked_ptr_1<int> _ptr__6127(_6127 ? _6127->raw() : nullptr,_6127 ? _6127->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _6128 = mosek::fusion::p_WorkStack::_get_impl(_6081)->i64;
      _checked_ptr_1<long long> _ptr__6128(_6128 ? _6128->raw() : nullptr,_6128 ? _6128->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6129 = mosek::fusion::p_WorkStack::_get_impl(_6081)->f64;
      _checked_ptr_1<double> _ptr__6129(_6129 ? _6129->raw() : nullptr,_6129 ? _6129->size(0) : 0);
      int _11344 = (int)0;
      int _11345 = _6118;
      for (int _6130 = _11344; _6130 < _11345; ++_6130)
      {
        {
          _ptr__6127[safe_add( _6119,_6130 )] = _ptr__6110[safe_add( _6098,_6130 )];
        }
      }
      int _6131 = (int)0;
      int _6132 = (int)0;
      if ((_6117 > (int)0))
      {
        {
          _ptr__6127[_6125] = (int)0;
        }
      }
      {}
      _ptr__6127[_6120] = (int)0;
      int _11346 = (int)0;
      int _11347 = _6115;
      for (int _6133 = _11346; _6133 < _11347; ++_6133)
      {
        {
          int _11348 = _ptr__6110[safe_add( _6103,_6133 )];
          int _11349 = _ptr__6110[safe_add( safe_add( _6103,_6133 ),(int)1 )];
          for (int _6134 = _11348; _6134 < _11349; ++_6134)
          {
            {
              _ptr__6128[safe_add( _6122,_6132 )] = _ptr__6111[safe_add( _6105,_6134 )];
              _ptr__6129[safe_add( _6123,_6132 )] = (_ptr__6112[safe_add( _6106,_6134 )] * m1);
              if ((_6101 > (int)0))
              {
                {
                  int _11350 = _ptr__6110[safe_add( _6108,_6134 )];
                  int _11351 = _ptr__6110[safe_add( safe_add( _6108,_6134 ),(int)1 )];
                  for (int _6135 = _11350; _6135 < _11351; ++_6135)
                  {
                    {
                      _ptr__6127[safe_add( _6124,_6131 )] = _ptr__6110[safe_add( _6107,_6135 )];
                      _ptr__6129[safe_add( _6126,_6131 )] = _ptr__6112[safe_add( _6109,_6135 )];
                      ++ _6131;
                    }
                  }
                  _ptr__6127[safe_add( _6124,_6131 )] = 2;
                  _ptr__6129[safe_add( _6126,_6131 )] = m1;
                  ++ _6131;
                  _ptr__6127[safe_add( _6124,_6131 )] = 5;
                  ++ _6131;
                  _ptr__6127[safe_add( safe_add( _6125,_6132 ),(int)1 )] = _6131;
                }
              }
              else
              {
                {
                  if ((_6117 > (int)0))
                  {
                    {
                      _ptr__6127[safe_add( _6124,_6131 )] = 2;
                      _ptr__6129[safe_add( _6126,_6131 )] = 0.0;
                      ++ _6131;
                      _ptr__6127[safe_add( safe_add( _6125,_6132 ),(int)1 )] = _6131;
                    }
                  }
                  {}
                }
              }
              ++ _6132;
            }
          }
          int _11352 = _ptr__6110[safe_add( _6090,_6133 )];
          int _11353 = _ptr__6110[safe_add( safe_add( _6090,_6133 ),(int)1 )];
          for (int _6136 = _11352; _6136 < _11353; ++_6136)
          {
            {
              _ptr__6128[safe_add( _6122,_6132 )] = _ptr__6111[safe_add( _6092,_6136 )];
              _ptr__6129[safe_add( _6123,_6132 )] = (_ptr__6112[safe_add( _6093,_6136 )] * m2);
              if ((_6088 > (int)0))
              {
                {
                  int _11354 = _ptr__6110[safe_add( _6095,_6136 )];
                  int _11355 = _ptr__6110[safe_add( safe_add( _6095,_6136 ),(int)1 )];
                  for (int _6137 = _11354; _6137 < _11355; ++_6137)
                  {
                    {
                      _ptr__6127[safe_add( _6124,_6131 )] = _ptr__6110[safe_add( _6094,_6137 )];
                      _ptr__6129[safe_add( _6126,_6131 )] = _ptr__6112[safe_add( _6096,_6137 )];
                      ++ _6131;
                    }
                  }
                  _ptr__6127[safe_add( _6124,_6131 )] = 2;
                  _ptr__6129[safe_add( _6126,_6131 )] = m2;
                  ++ _6131;
                  _ptr__6127[safe_add( _6124,_6131 )] = 5;
                  ++ _6131;
                  _ptr__6127[safe_add( safe_add( _6125,_6132 ),(int)1 )] = _6131;
                }
              }
              else
              {
                {
                  if ((_6117 > (int)0))
                  {
                    {
                      _ptr__6127[safe_add( _6124,_6131 )] = 2;
                      _ptr__6129[safe_add( _6126,_6131 )] = 0.0;
                      ++ _6131;
                      _ptr__6127[safe_add( safe_add( _6125,_6132 ),(int)1 )] = _6131;
                    }
                  }
                  {}
                }
              }
              ++ _6132;
            }
          }
          _ptr__6127[safe_add( safe_add( _6120,_6133 ),(int)1 )] = _6132;
        }
      }
    }
  }
  else if(((!_6102) || (!_6089)))
  {
    {
      if ((!_6089))
      {
        {
          int _6138 = _6086;
          int _6139 = _6087;
          int _6140 = _6090;
          int _6141 = _6091;
          int _6142 = _6092;
          int _6143 = _6088;
          int _6144 = _6095;
          int _6145 = _6094;
          int _6146 = _6096;
          int _6147 = _6093;
          _6086 = _6099;
          _6087 = _6100;
          _6090 = _6103;
          _6091 = _6104;
          _6092 = _6105;
          _6088 = _6101;
          _6095 = _6108;
          _6094 = _6107;
          _6096 = _6109;
          _6093 = _6106;
          _6099 = _6138;
          _6100 = _6139;
          _6103 = _6140;
          _6104 = _6141;
          _6105 = _6142;
          _6101 = _6143;
          _6108 = _6144;
          _6107 = _6145;
          _6109 = _6146;
          _6106 = _6147;
        }
      }
      {}
      double _11356;
      bool _11357 = (!_6102);
      if (_11357)
      {
        _11356 = mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m1;
      }
      else
      {
        _11356 = mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m2;
      }
      double _6148 = _11356;
      double _11358;
      bool _11359 = (!_6102);
      if (_11359)
      {
        _11358 = mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m2;
      }
      else
      {
        _11358 = mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m1;
      }
      double _6149 = _11358;
      int _6150 = _6099;
      int _6151 = safe_add( _6100,_6087 );
      int _6152 = _6097;
      int _6153 = safe_add( _6101,_6088 );
      if (_6113)
      {
        {
          int _11360;
          bool _11361 = (_6101 > (int)0);
          if (_11361)
          {
            _11360 = safe_mul( (int)2,_6100 );
          }
          else
          {
            _11360 = _6100;
          }
          _6153 += _11360;
          int _11362;
          bool _11363 = (_6088 > (int)0);
          if (_11363)
          {
            _11362 = safe_mul( (int)2,_6087 );
          }
          else
          {
            _11362 = _6087;
          }
          _6153 += _11362;
        }
      }
      {}
      _6081->alloc_expr(_6152,_6150,_6151,false,_6153);
      int _6154 = mosek::fusion::p_WorkStack::_get_impl(_6081)->shape_base;
      int _6155 = mosek::fusion::p_WorkStack::_get_impl(_6081)->ptr_base;
      int _6156 = mosek::fusion::p_WorkStack::_get_impl(_6081)->sp_base;
      int _6157 = mosek::fusion::p_WorkStack::_get_impl(_6081)->nidxs_base;
      int _6158 = mosek::fusion::p_WorkStack::_get_impl(_6081)->cof_base;
      int _6159 = mosek::fusion::p_WorkStack::_get_impl(_6081)->code_base;
      int _6160 = mosek::fusion::p_WorkStack::_get_impl(_6081)->codeptr_base;
      int _6161 = mosek::fusion::p_WorkStack::_get_impl(_6081)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _6162 = mosek::fusion::p_WorkStack::_get_impl(_6081)->i32;
      _checked_ptr_1<int> _ptr__6162(_6162 ? _6162->raw() : nullptr,_6162 ? _6162->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _6163 = mosek::fusion::p_WorkStack::_get_impl(_6081)->i64;
      _checked_ptr_1<long long> _ptr__6163(_6163 ? _6163->raw() : nullptr,_6163 ? _6163->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6164 = mosek::fusion::p_WorkStack::_get_impl(_6081)->f64;
      _checked_ptr_1<double> _ptr__6164(_6164 ? _6164->raw() : nullptr,_6164 ? _6164->size(0) : 0);
      {
        int _6165 = (int)0;
        int _6166 = (int)0;
        int _6167 = (int)0;
        int _11364 = (int)0;
        int _11365 = _6152;
        for (int _6168 = _11364; _6168 < _11365; ++_6168)
        {
          {
            _ptr__6162[safe_add( _6154,_6168 )] = _ptr__6110[safe_add( _6098,_6168 )];
          }
        }
        _ptr__6162[_6155] = (int)0;
        if ((_6153 > (int)0))
        {
          {
            _ptr__6162[_6160] = (int)0;
          }
        }
        {}
        int _6169 = (int)0;
        int _6170 = (int)0;
        while ( ((_6170 < _6099) || (_6169 < _6086)) )
        {
          {
            if (((_6170 < _6099) && ((_6169 >= _6086) || (_6170 < _ptr__6111[safe_add( _6091,_6169 )]))))
            {
              {
                int _11366 = _ptr__6110[safe_add( _6103,_6170 )];
                int _11367 = _ptr__6110[safe_add( safe_add( _6103,_6170 ),(int)1 )];
                for (int _6171 = _11366; _6171 < _11367; ++_6171)
                {
                  {
                    _ptr__6163[safe_add( _6157,_6167 )] = _ptr__6111[safe_add( _6105,_6171 )];
                    _ptr__6164[safe_add( _6158,_6167 )] = (_ptr__6112[safe_add( _6106,_6171 )] * _6148);
                    if ((_6101 > (int)0))
                    {
                      {
                        int _11368 = _ptr__6110[safe_add( _6108,_6171 )];
                        int _11369 = _ptr__6110[safe_add( safe_add( _6108,_6171 ),(int)1 )];
                        for (int _6172 = _11368; _6172 < _11369; ++_6172)
                        {
                          {
                            _ptr__6162[safe_add( _6159,_6165 )] = _ptr__6110[safe_add( _6107,_6172 )];
                            _ptr__6164[safe_add( _6161,_6165 )] = _ptr__6112[safe_add( _6109,_6172 )];
                            ++ _6165;
                          }
                        }
                        _ptr__6162[safe_add( _6159,_6165 )] = 2;
                        _ptr__6164[safe_add( _6161,_6165 )] = _6148;
                        ++ _6165;
                        _ptr__6162[safe_add( _6159,_6165 )] = 5;
                        ++ _6165;
                        _ptr__6162[safe_add( safe_add( _6160,_6167 ),(int)1 )] = _6165;
                      }
                    }
                    else
                    {
                      {
                        if ((_6153 > (int)0))
                        {
                          {
                            _ptr__6162[safe_add( _6159,_6165 )] = 2;
                            _ptr__6164[safe_add( _6161,_6165 )] = 0.0;
                            ++ _6165;
                            _ptr__6162[safe_add( safe_add( _6160,_6167 ),(int)1 )] = _6165;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6167;
                  }
                }
                _ptr__6162[safe_add( safe_add( _6155,_6166 ),(int)1 )] = _6167;
                ++ _6170;
              }
            }
            else if(((_6169 < _6086) && ((_6170 >= _6099) || (_6170 > _ptr__6111[safe_add( _6091,_6169 )]))))
            {
              {
                int _11370 = _ptr__6110[safe_add( _6090,_6169 )];
                int _11371 = _ptr__6110[safe_add( safe_add( _6090,_6169 ),(int)1 )];
                for (int _6173 = _11370; _6173 < _11371; ++_6173)
                {
                  {
                    _ptr__6163[safe_add( _6157,_6167 )] = _ptr__6111[safe_add( _6092,_6173 )];
                    _ptr__6164[safe_add( _6158,_6167 )] = (_ptr__6112[safe_add( _6093,_6173 )] * _6149);
                    if ((_6088 > (int)0))
                    {
                      {
                        int _11372 = _ptr__6110[safe_add( _6095,_6173 )];
                        int _11373 = _ptr__6110[safe_add( safe_add( _6095,_6173 ),(int)1 )];
                        for (int _6174 = _11372; _6174 < _11373; ++_6174)
                        {
                          {
                            _ptr__6162[safe_add( _6159,_6165 )] = _ptr__6110[safe_add( _6094,_6174 )];
                            _ptr__6164[safe_add( _6161,_6165 )] = _ptr__6112[safe_add( _6096,_6174 )];
                            ++ _6165;
                          }
                        }
                        _ptr__6162[safe_add( _6159,_6165 )] = 2;
                        _ptr__6164[safe_add( _6161,_6165 )] = _6149;
                        ++ _6165;
                        _ptr__6162[safe_add( _6159,_6165 )] = 5;
                        ++ _6165;
                        _ptr__6162[safe_add( safe_add( _6160,_6167 ),(int)1 )] = _6165;
                      }
                    }
                    else
                    {
                      {
                        if ((_6153 > (int)0))
                        {
                          {
                            _ptr__6162[safe_add( _6159,_6165 )] = 2;
                            _ptr__6164[safe_add( _6161,_6165 )] = 0.0;
                            ++ _6165;
                            _ptr__6162[safe_add( safe_add( _6160,_6167 ),(int)1 )] = _6165;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6167;
                  }
                }
                _ptr__6162[safe_add( safe_add( _6155,_6166 ),(int)1 )] = _6167;
                ++ _6169;
              }
            }
            else
            {
              {
                int _11374 = _ptr__6110[safe_add( _6103,_6170 )];
                int _11375 = _ptr__6110[safe_add( safe_add( _6103,_6170 ),(int)1 )];
                for (int _6175 = _11374; _6175 < _11375; ++_6175)
                {
                  {
                    _ptr__6163[safe_add( _6157,_6167 )] = _ptr__6111[safe_add( _6105,_6175 )];
                    _ptr__6164[safe_add( _6158,_6167 )] = (_ptr__6112[safe_add( _6106,_6175 )] * _6148);
                    if ((_6101 > (int)0))
                    {
                      {
                        int _11376 = _ptr__6110[safe_add( _6108,_6175 )];
                        int _11377 = _ptr__6110[safe_add( safe_add( _6108,_6175 ),(int)1 )];
                        for (int _6176 = _11376; _6176 < _11377; ++_6176)
                        {
                          {
                            _ptr__6162[safe_add( _6159,_6165 )] = _ptr__6110[safe_add( _6107,_6176 )];
                            _ptr__6164[safe_add( _6161,_6165 )] = _ptr__6112[safe_add( _6109,_6176 )];
                            ++ _6165;
                          }
                        }
                        _ptr__6162[safe_add( _6159,_6165 )] = 2;
                        _ptr__6164[safe_add( _6161,_6165 )] = _6148;
                        ++ _6165;
                        _ptr__6162[safe_add( _6159,_6165 )] = 5;
                        ++ _6165;
                        _ptr__6162[safe_add( safe_add( _6160,_6167 ),(int)1 )] = _6165;
                      }
                    }
                    else
                    {
                      {
                        if ((_6153 > (int)0))
                        {
                          {
                            _ptr__6162[safe_add( _6159,_6165 )] = 2;
                            _ptr__6164[safe_add( _6161,_6165 )] = 0.0;
                            ++ _6165;
                            _ptr__6162[safe_add( safe_add( _6160,_6167 ),(int)1 )] = _6165;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6167;
                  }
                }
                int _11378 = _ptr__6110[safe_add( _6090,_6169 )];
                int _11379 = _ptr__6110[safe_add( safe_add( _6090,_6169 ),(int)1 )];
                for (int _6177 = _11378; _6177 < _11379; ++_6177)
                {
                  {
                    _ptr__6163[safe_add( _6157,_6167 )] = _ptr__6111[safe_add( _6092,_6177 )];
                    _ptr__6164[safe_add( _6158,_6167 )] = (_ptr__6112[safe_add( _6093,_6177 )] * _6149);
                    if ((_6088 > (int)0))
                    {
                      {
                        int _11380 = _ptr__6110[safe_add( _6095,_6177 )];
                        int _11381 = _ptr__6110[safe_add( safe_add( _6095,_6177 ),(int)1 )];
                        for (int _6178 = _11380; _6178 < _11381; ++_6178)
                        {
                          {
                            _ptr__6162[safe_add( _6159,_6165 )] = _ptr__6110[safe_add( _6094,_6178 )];
                            _ptr__6164[safe_add( _6161,_6165 )] = _ptr__6112[safe_add( _6096,_6178 )];
                            ++ _6165;
                          }
                        }
                        _ptr__6162[safe_add( _6159,_6165 )] = 2;
                        _ptr__6164[safe_add( _6161,_6165 )] = _6149;
                        ++ _6165;
                        _ptr__6162[safe_add( _6159,_6165 )] = 5;
                        ++ _6165;
                        _ptr__6162[safe_add( safe_add( _6160,_6167 ),(int)1 )] = _6165;
                      }
                    }
                    else
                    {
                      {
                        if ((_6153 > (int)0))
                        {
                          {
                            _ptr__6162[safe_add( _6159,_6165 )] = 2;
                            _ptr__6164[safe_add( _6161,_6165 )] = 0.0;
                            ++ _6165;
                            _ptr__6162[safe_add( safe_add( _6160,_6167 ),(int)1 )] = _6165;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6167;
                  }
                }
                _ptr__6162[safe_add( safe_add( _6155,_6166 ),(int)1 )] = _6167;
                ++ _6170;
                ++ _6169;
              }
            }
            ++ _6166;
          }
        }
        if ((_6167 != _6151))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: invalid nnz"));
          }
        }
        {}
        if ((_6165 != _6153))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: invalid codei"));
          }
        }
        {}
      }
    }
  }
  else
  {
    {
      int _6179 = safe_add( _6100,_6087 );
      int _6180 = (int)0;
      int _6181 = _6097;
      int _6182 = safe_add( _6101,_6088 );
      if (_6113)
      {
        {
          int _11382;
          bool _11383 = (_6101 > (int)0);
          if (_11383)
          {
            _11382 = safe_mul( (int)2,_6100 );
          }
          else
          {
            _11382 = _6100;
          }
          _6182 += _11382;
          int _11384;
          bool _11385 = (_6088 > (int)0);
          if (_11385)
          {
            _11384 = safe_mul( (int)2,_6087 );
          }
          else
          {
            _11384 = _6087;
          }
          _6182 += _11384;
        }
      }
      {}
      long long _6183 = (long long)1;
      int _11386 = (int)0;
      int _11387 = _6181;
      for (int _6184 = _11386; _6184 < _11387; ++_6184)
      {
        {
          _6183 *= _ptr__6110[safe_add( _6098,_6184 )];
        }
      }
      {
        int _6185 = (int)0;
        int _6186 = (int)0;
        while ( ((_6186 < _6099) && (_6185 < _6086)) )
        {
          {
            if ((_ptr__6111[safe_add( _6104,_6186 )] < _ptr__6111[safe_add( _6091,_6185 )]))
            {
              {
                ++ _6180;
                ++ _6186;
              }
            }
            else if((_ptr__6111[safe_add( _6104,_6186 )] > _ptr__6111[safe_add( _6091,_6185 )]))
            {
              {
                ++ _6180;
                ++ _6185;
              }
            }
            else
            {
              {
                ++ _6180;
                ++ _6186;
                ++ _6185;
              }
            }
          }
        }
        _6180 += (safe_add( (_6099 - _6186),_6086 ) - _6185);
      }
      bool _6187 = (_6180 < _6183);
      _6081->alloc_expr(_6181,_6180,_6179,_6187,_6182);
      int _6188 = mosek::fusion::p_WorkStack::_get_impl(_6081)->shape_base;
      int _6189 = mosek::fusion::p_WorkStack::_get_impl(_6081)->ptr_base;
      int _11388;
      bool _11389 = _6187;
      if (_11389)
      {
        _11388 = mosek::fusion::p_WorkStack::_get_impl(_6081)->sp_base;
      }
      else
      {
        _11388 = _6081->alloci64(_6180);
      }
      int _6190 = _11388;
      int _6191 = mosek::fusion::p_WorkStack::_get_impl(_6081)->nidxs_base;
      int _6192 = mosek::fusion::p_WorkStack::_get_impl(_6081)->cof_base;
      int _6193 = mosek::fusion::p_WorkStack::_get_impl(_6081)->code_base;
      int _6194 = mosek::fusion::p_WorkStack::_get_impl(_6081)->codeptr_base;
      int _6195 = mosek::fusion::p_WorkStack::_get_impl(_6081)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _6196 = mosek::fusion::p_WorkStack::_get_impl(_6081)->i32;
      _checked_ptr_1<int> _ptr__6196(_6196 ? _6196->raw() : nullptr,_6196 ? _6196->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _6197 = mosek::fusion::p_WorkStack::_get_impl(_6081)->i64;
      _checked_ptr_1<long long> _ptr__6197(_6197 ? _6197->raw() : nullptr,_6197 ? _6197->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6198 = mosek::fusion::p_WorkStack::_get_impl(_6081)->f64;
      _checked_ptr_1<double> _ptr__6198(_6198 ? _6198->raw() : nullptr,_6198 ? _6198->size(0) : 0);
      int _11390 = (int)0;
      int _11391 = _6181;
      for (int _6199 = _11390; _6199 < _11391; ++_6199)
      {
        {
          _ptr__6196[safe_add( _6188,_6199 )] = _ptr__6110[safe_add( _6098,_6199 )];
        }
      }
      {
        _ptr__6196[_6189] = (int)0;
        if ((_6182 > (int)0))
        {
          {
            _ptr__6196[_6194] = (int)0;
          }
        }
        {}
        int _6200 = (int)0;
        int _6201 = (int)0;
        int _6202 = (int)0;
        int _6203 = (int)0;
        int _6204 = (int)0;
        while ( ((_6204 < _6099) && (_6203 < _6086)) )
        {
          {
            if ((_ptr__6111[safe_add( _6104,_6204 )] < _ptr__6111[safe_add( _6091,_6203 )]))
            {
              {
                int _11392 = _ptr__6110[safe_add( _6103,_6204 )];
                int _11393 = _ptr__6110[safe_add( safe_add( _6103,_6204 ),(int)1 )];
                for (int _6205 = _11392; _6205 < _11393; ++_6205)
                {
                  {
                    _ptr__6197[safe_add( _6191,_6202 )] = _ptr__6111[safe_add( _6105,_6205 )];
                    _ptr__6198[safe_add( _6192,_6202 )] = (m1 * _ptr__6112[safe_add( _6106,_6205 )]);
                    if ((_6101 > (int)0))
                    {
                      {
                        int _11394 = _ptr__6110[safe_add( _6108,_6205 )];
                        int _11395 = _ptr__6110[safe_add( safe_add( _6108,_6205 ),(int)1 )];
                        for (int _6206 = _11394; _6206 < _11395; ++_6206)
                        {
                          {
                            _ptr__6196[safe_add( _6193,_6200 )] = _ptr__6110[safe_add( _6107,_6206 )];
                            _ptr__6198[safe_add( _6195,_6200 )] = _ptr__6112[safe_add( _6109,_6206 )];
                            ++ _6200;
                          }
                        }
                        _ptr__6196[safe_add( _6193,_6200 )] = 2;
                        _ptr__6198[safe_add( _6195,_6200 )] = m1;
                        ++ _6200;
                        _ptr__6196[safe_add( _6193,_6200 )] = 5;
                        ++ _6200;
                        _ptr__6196[safe_add( safe_add( _6194,_6202 ),(int)1 )] = _6200;
                      }
                    }
                    else
                    {
                      {
                        if ((_6182 > (int)0))
                        {
                          {
                            _ptr__6196[safe_add( _6193,_6200 )] = 2;
                            _ptr__6198[safe_add( _6195,_6200 )] = (int)0;
                            ++ _6200;
                            _ptr__6196[safe_add( safe_add( _6194,_6202 ),(int)1 )] = _6200;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6202;
                  }
                }
                _ptr__6197[safe_add( _6190,_6201 )] = _ptr__6111[safe_add( _6104,_6204 )];
                _ptr__6196[safe_add( safe_add( _6189,_6201 ),(int)1 )] = _6202;
                ++ _6201;
                ++ _6204;
              }
            }
            else if((_ptr__6111[safe_add( _6091,_6203 )] < _ptr__6111[safe_add( _6104,_6204 )]))
            {
              {
                int _11396 = _ptr__6110[safe_add( _6090,_6203 )];
                int _11397 = _ptr__6110[safe_add( safe_add( _6090,_6203 ),(int)1 )];
                for (int _6207 = _11396; _6207 < _11397; ++_6207)
                {
                  {
                    _ptr__6197[safe_add( _6191,_6202 )] = _ptr__6111[safe_add( _6092,_6207 )];
                    _ptr__6198[safe_add( _6192,_6202 )] = (m2 * _ptr__6112[safe_add( _6093,_6207 )]);
                    if ((_6088 > (int)0))
                    {
                      {
                        int _11398 = _ptr__6110[safe_add( _6095,_6207 )];
                        int _11399 = _ptr__6110[safe_add( safe_add( _6095,_6207 ),(int)1 )];
                        for (int _6208 = _11398; _6208 < _11399; ++_6208)
                        {
                          {
                            _ptr__6196[safe_add( _6193,_6200 )] = _ptr__6110[safe_add( _6094,_6208 )];
                            _ptr__6198[safe_add( _6195,_6200 )] = _ptr__6112[safe_add( _6096,_6208 )];
                            ++ _6200;
                          }
                        }
                        _ptr__6196[safe_add( _6193,_6200 )] = 2;
                        _ptr__6198[safe_add( _6195,_6200 )] = m2;
                        ++ _6200;
                        _ptr__6196[safe_add( _6193,_6200 )] = 5;
                        ++ _6200;
                        _ptr__6196[safe_add( safe_add( _6194,_6202 ),(int)1 )] = _6200;
                      }
                    }
                    else
                    {
                      {
                        if ((_6182 > (int)0))
                        {
                          {
                            _ptr__6196[safe_add( _6193,_6200 )] = 2;
                            _ptr__6198[safe_add( _6195,_6200 )] = (int)0;
                            ++ _6200;
                            _ptr__6196[safe_add( safe_add( _6194,_6202 ),(int)1 )] = _6200;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6202;
                  }
                }
                _ptr__6197[safe_add( _6190,_6201 )] = _ptr__6111[safe_add( _6091,_6203 )];
                _ptr__6196[safe_add( safe_add( _6189,_6201 ),(int)1 )] = _6202;
                ++ _6201;
                ++ _6203;
              }
            }
            else
            {
              {
                int _11400 = _ptr__6110[safe_add( _6103,_6204 )];
                int _11401 = _ptr__6110[safe_add( safe_add( _6103,_6204 ),(int)1 )];
                for (int _6209 = _11400; _6209 < _11401; ++_6209)
                {
                  {
                    _ptr__6197[safe_add( _6191,_6202 )] = _ptr__6111[safe_add( _6105,_6209 )];
                    _ptr__6198[safe_add( _6192,_6202 )] = (m1 * _ptr__6112[safe_add( _6106,_6209 )]);
                    if ((_6101 > (int)0))
                    {
                      {
                        int _11402 = _ptr__6110[safe_add( _6108,_6209 )];
                        int _11403 = _ptr__6110[safe_add( safe_add( _6108,_6209 ),(int)1 )];
                        for (int _6210 = _11402; _6210 < _11403; ++_6210)
                        {
                          {
                            _ptr__6196[safe_add( _6193,_6200 )] = _ptr__6110[safe_add( _6107,_6210 )];
                            _ptr__6198[safe_add( _6195,_6200 )] = _ptr__6112[safe_add( _6109,_6210 )];
                            ++ _6200;
                          }
                        }
                        _ptr__6196[safe_add( _6193,_6200 )] = 2;
                        _ptr__6198[safe_add( _6195,_6200 )] = m1;
                        ++ _6200;
                        _ptr__6196[safe_add( _6193,_6200 )] = 5;
                        ++ _6200;
                        _ptr__6196[safe_add( safe_add( _6194,_6202 ),(int)1 )] = _6200;
                      }
                    }
                    else
                    {
                      {
                        if ((_6182 > (int)0))
                        {
                          {
                            _ptr__6196[safe_add( _6193,_6200 )] = 2;
                            _ptr__6198[safe_add( _6195,_6200 )] = (int)0;
                            ++ _6200;
                            _ptr__6196[safe_add( safe_add( _6194,_6202 ),(int)1 )] = _6200;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6202;
                  }
                }
                int _11404 = _ptr__6110[safe_add( _6090,_6203 )];
                int _11405 = _ptr__6110[safe_add( safe_add( _6090,_6203 ),(int)1 )];
                for (int _6211 = _11404; _6211 < _11405; ++_6211)
                {
                  {
                    _ptr__6197[safe_add( _6191,_6202 )] = _ptr__6111[safe_add( _6092,_6211 )];
                    _ptr__6198[safe_add( _6192,_6202 )] = (m2 * _ptr__6112[safe_add( _6093,_6211 )]);
                    if ((_6088 > (int)0))
                    {
                      {
                        int _11406 = _ptr__6110[safe_add( _6095,_6211 )];
                        int _11407 = _ptr__6110[safe_add( safe_add( _6095,_6211 ),(int)1 )];
                        for (int _6212 = _11406; _6212 < _11407; ++_6212)
                        {
                          {
                            _ptr__6196[safe_add( _6193,_6200 )] = _ptr__6110[safe_add( _6094,_6212 )];
                            _ptr__6198[safe_add( _6195,_6200 )] = _ptr__6112[safe_add( _6096,_6212 )];
                            ++ _6200;
                          }
                        }
                        _ptr__6196[safe_add( _6193,_6200 )] = 2;
                        _ptr__6198[safe_add( _6195,_6200 )] = m2;
                        ++ _6200;
                        _ptr__6196[safe_add( _6193,_6200 )] = 5;
                        ++ _6200;
                        _ptr__6196[safe_add( safe_add( _6194,_6202 ),(int)1 )] = _6200;
                      }
                    }
                    else
                    {
                      {
                        if ((_6182 > (int)0))
                        {
                          {
                            _ptr__6196[safe_add( _6193,_6200 )] = 2;
                            _ptr__6198[safe_add( _6195,_6200 )] = (int)0;
                            ++ _6200;
                            _ptr__6196[safe_add( safe_add( _6194,_6202 ),(int)1 )] = _6200;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6202;
                  }
                }
                _ptr__6197[safe_add( _6190,_6201 )] = _ptr__6111[safe_add( _6104,_6204 )];
                _ptr__6196[safe_add( safe_add( _6189,_6201 ),(int)1 )] = _6202;
                ++ _6201;
                ++ _6204;
                ++ _6203;
              }
            }
          }
        }
        while ( (_6204 < _6099) )
        {
          {
            int _11408 = _ptr__6110[safe_add( _6103,_6204 )];
            int _11409 = _ptr__6110[safe_add( safe_add( _6103,_6204 ),(int)1 )];
            for (int _6213 = _11408; _6213 < _11409; ++_6213)
            {
              {
                _ptr__6197[safe_add( _6191,_6202 )] = _ptr__6111[safe_add( _6105,_6213 )];
                _ptr__6198[safe_add( _6192,_6202 )] = (m1 * _ptr__6112[safe_add( _6106,_6213 )]);
                if ((_6101 > (int)0))
                {
                  {
                    int _11410 = _ptr__6110[safe_add( _6108,_6213 )];
                    int _11411 = _ptr__6110[safe_add( safe_add( _6108,_6213 ),(int)1 )];
                    for (int _6214 = _11410; _6214 < _11411; ++_6214)
                    {
                      {
                        _ptr__6196[safe_add( _6193,_6200 )] = _ptr__6110[safe_add( _6107,_6214 )];
                        _ptr__6198[safe_add( _6195,_6200 )] = _ptr__6112[safe_add( _6109,_6214 )];
                        ++ _6200;
                      }
                    }
                    _ptr__6196[safe_add( _6193,_6200 )] = 2;
                    _ptr__6198[safe_add( _6195,_6200 )] = m1;
                    ++ _6200;
                    _ptr__6196[safe_add( _6193,_6200 )] = 5;
                    ++ _6200;
                    _ptr__6196[safe_add( safe_add( _6194,_6202 ),(int)1 )] = _6200;
                  }
                }
                else
                {
                  {
                    if ((_6182 > (int)0))
                    {
                      {
                        _ptr__6196[safe_add( _6193,_6200 )] = 2;
                        _ptr__6198[safe_add( _6195,_6200 )] = (int)0;
                        ++ _6200;
                        _ptr__6196[safe_add( safe_add( _6194,_6202 ),(int)1 )] = _6200;
                      }
                    }
                    {}
                  }
                }
                ++ _6202;
              }
            }
            _ptr__6197[safe_add( _6190,_6201 )] = _ptr__6111[safe_add( _6104,_6204 )];
            _ptr__6196[safe_add( safe_add( _6189,_6201 ),(int)1 )] = _6202;
            ++ _6201;
            ++ _6204;
          }
        }
        while ( (_6203 < _6086) )
        {
          {
            int _11412 = _ptr__6110[safe_add( _6090,_6203 )];
            int _11413 = _ptr__6110[safe_add( safe_add( _6090,_6203 ),(int)1 )];
            for (int _6215 = _11412; _6215 < _11413; ++_6215)
            {
              {
                _ptr__6197[safe_add( _6191,_6202 )] = _ptr__6111[safe_add( _6092,_6215 )];
                _ptr__6198[safe_add( _6192,_6202 )] = (m2 * _ptr__6112[safe_add( _6093,_6215 )]);
                if ((_6088 > (int)0))
                {
                  {
                    int _11414 = _ptr__6110[safe_add( _6095,_6215 )];
                    int _11415 = _ptr__6110[safe_add( safe_add( _6095,_6215 ),(int)1 )];
                    for (int _6216 = _11414; _6216 < _11415; ++_6216)
                    {
                      {
                        _ptr__6196[safe_add( _6193,_6200 )] = _ptr__6110[safe_add( _6094,_6216 )];
                        _ptr__6198[safe_add( _6195,_6200 )] = _ptr__6112[safe_add( _6096,_6216 )];
                        ++ _6200;
                      }
                    }
                    _ptr__6196[safe_add( _6193,_6200 )] = 2;
                    _ptr__6198[safe_add( _6195,_6200 )] = m2;
                    ++ _6200;
                    _ptr__6196[safe_add( _6193,_6200 )] = 5;
                    ++ _6200;
                    _ptr__6196[safe_add( safe_add( _6194,_6202 ),(int)1 )] = _6200;
                  }
                }
                else
                {
                  {
                    if ((_6182 > (int)0))
                    {
                      {
                        _ptr__6196[safe_add( _6193,_6200 )] = 2;
                        _ptr__6198[safe_add( _6195,_6200 )] = (int)0;
                        ++ _6200;
                        _ptr__6196[safe_add( safe_add( _6194,_6202 ),(int)1 )] = _6200;
                      }
                    }
                    {}
                  }
                }
                ++ _6202;
              }
            }
            _ptr__6197[safe_add( _6190,_6201 )] = _ptr__6111[safe_add( _6091,_6203 )];
            _ptr__6196[safe_add( safe_add( _6189,_6201 ),(int)1 )] = _6202;
            ++ _6201;
            ++ _6203;
          }
        }
      }
      if ((!_6187))
      {
        {
          _6081->popi64(_6180);
        }
      }
      {}
    }
  }
}
std::string mosek::fusion::ExprAdd :: toString() { return mosek::fusion::p_ExprAdd::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprAdd::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprAdd("))->__mosek_2fusion_2Utils_2StringBuffer__a(e1->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e2->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("; "))->__mosek_2fusion_2Utils_2StringBuffer__a(m1)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(m2)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprAdd::destroy(){e2.reset();e1.reset();}void mosek::fusion::ExprAdd::destroy() { mosek::fusion::p_ExprAdd::_get_impl(this)->destroy(); }mosek::fusion::ExprWSum::ExprWSum(mosek::fusion::p_ExprWSum *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprWSum()" << this << std::endl; */ }mosek::fusion::ExprWSum::~ExprWSum() {  /* std::cout << "~ExprWSum()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprWSum::p_ExprWSum  (::mosek::fusion::ExprWSum * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprWSum::t mosek::fusion::p_ExprWSum::_new_ExprWSum  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _6217,    std::shared_ptr< monty::ndarray< double,1 > > _6218){ return new mosek::fusion::ExprWSum(_6217,_6218); }mosek::fusion::ExprWSum::ExprWSum  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _6217,    std::shared_ptr< monty::ndarray< double,1 > > _6218) :    ExprWSum(new mosek::fusion::p_ExprWSum(this)){ mosek::fusion::p_ExprWSum::_get_impl(this)->_initialize(_6217,_6218); }void mosek::fusion::p_ExprWSum::_initialize  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _6217,    std::shared_ptr< monty::ndarray< double,1 > > _6218){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__6218(_6218 ? _6218->raw() : nullptr, _6218 ? _6218->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(((*_6217)((int)0))->getShape());
    if (((int)((_6218)->size(0)) != (int)((_6217)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching weights and expressions array lengths"));
      }
    }
    {}
    mosek::fusion::p_ExprWSum::_get_impl(::mosek::fusion::ExprWSum::t(_pubthis))->w = ::mosek::fusion::Utils::Tools::arraycopy(_6218);
    std::shared_ptr< monty::ndarray< int,1 > > _6219 = ((*_6217)((int)0))->getShape();
    _checked_ptr_1<int> _ptr__6219(_6219 ? _6219->raw() : nullptr,_6219 ? _6219->size(0) : 0);
    int _6220 = (int)((_6219)->size(0));
    int _11416 = (int)1;
    int _11417 = (int)((_6217)->size(0));
    for (int _6221 = _11416; _6221 < _11417; ++_6221)
    {
      {
        std::shared_ptr< monty::ndarray< int,1 > > _6222 = ((*_6217)(_6221))->getShape();
        _checked_ptr_1<int> _ptr__6222(_6222 ? _6222->raw() : nullptr,_6222 ? _6222->size(0) : 0);
        if ((_6220 != (int)((_6222)->size(0))))
        {
          {
            throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression shapes"));
          }
        }
        else
        {
          {
            int _11418 = (int)0;
            int _11419 = _6220;
            for (int _6223 = _11418; _6223 < _11419; ++_6223)
            {
              {
                if ((_ptr__6219[_6223] != _ptr__6222[_6223]))
                {
                  {
                    throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression shapes"));
                  }
                }
                {}
              }
            }
          }
        }
      }
    }
    std::vector<monty::rc_ptr< ::mosek::fusion::Expression >> _11420;
    for (int _6224 = (int)0, _11421 = (int)((_6217)->size(0)); _6224 < _11421 ; ++_6224)
    {
      _11420.push_back(((*_6217)(_6224)));
    }
    auto _11422 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_11420.size()),_11420.begin(),_11420.end()));
    mosek::fusion::p_ExprWSum::_get_impl(::mosek::fusion::ExprWSum::t(_pubthis))->es = _11422;
  }
}void mosek::fusion::ExprWSum :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6225,monty::rc_ptr< ::mosek::fusion::WorkStack > _6226,monty::rc_ptr< ::mosek::fusion::WorkStack > _6227) { mosek::fusion::p_ExprWSum::_get_impl(this)->eval(_6225,_6226,_6227); }void mosek::fusion::p_ExprWSum::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6225,monty::rc_ptr< ::mosek::fusion::WorkStack > _6226,monty::rc_ptr< ::mosek::fusion::WorkStack > _6227){
  int _6228 = (int)((es)->size(0));
  int _11423 = (int)0;
  int _11424 = _6228;
  for (int _6229 = _11423; _6229 < _11424; ++_6229)
  {
    {
      ((*es)(_6229))->eval(_6226,_6225,_6227);
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _6230 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6228)));
  _checked_ptr_1<int> _ptr__6230(_6230 ? _6230->raw() : nullptr,_6230 ? _6230->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6231 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6228)));
  _checked_ptr_1<int> _ptr__6231(_6231 ? _6231->raw() : nullptr,_6231 ? _6231->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6232 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6228)));
  _checked_ptr_1<int> _ptr__6232(_6232 ? _6232->raw() : nullptr,_6232 ? _6232->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6233 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6228)));
  _checked_ptr_1<int> _ptr__6233(_6233 ? _6233->raw() : nullptr,_6233 ? _6233->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6234 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6228)));
  _checked_ptr_1<int> _ptr__6234(_6234 ? _6234->raw() : nullptr,_6234 ? _6234->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6235 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6228)));
  _checked_ptr_1<int> _ptr__6235(_6235 ? _6235->raw() : nullptr,_6235 ? _6235->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6236 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6228)));
  _checked_ptr_1<int> _ptr__6236(_6236 ? _6236->raw() : nullptr,_6236 ? _6236->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6237 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6228)));
  _checked_ptr_1<int> _ptr__6237(_6237 ? _6237->raw() : nullptr,_6237 ? _6237->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6238 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6228)));
  _checked_ptr_1<int> _ptr__6238(_6238 ? _6238->raw() : nullptr,_6238 ? _6238->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6239 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6228)));
  _checked_ptr_1<int> _ptr__6239(_6239 ? _6239->raw() : nullptr,_6239 ? _6239->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6240 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6228)));
  _checked_ptr_1<int> _ptr__6240(_6240 ? _6240->raw() : nullptr,_6240 ? _6240->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6241 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6228)));
  _checked_ptr_1<int> _ptr__6241(_6241 ? _6241->raw() : nullptr,_6241 ? _6241->size(0) : 0);
  std::shared_ptr< monty::ndarray< bool,1 > > _6242 = std::shared_ptr< monty::ndarray< bool,1 > >(new monty::ndarray< bool,1 >(monty::shape(_6228)));
  int _11425 = (int)0;
  int _11426 = _6228;
  for (int _6243 = _11425; _6243 < _11426; ++_6243)
  {
    {
      _6226->pop_expr();
      _ptr__6230[((_6228 - (int)1) - _6243)] = mosek::fusion::p_WorkStack::_get_impl(_6226)->nd;
      _ptr__6231[((_6228 - (int)1) - _6243)] = mosek::fusion::p_WorkStack::_get_impl(_6226)->nelem;
      _ptr__6232[((_6228 - (int)1) - _6243)] = mosek::fusion::p_WorkStack::_get_impl(_6226)->nnz;
      _ptr__6233[((_6228 - (int)1) - _6243)] = mosek::fusion::p_WorkStack::_get_impl(_6226)->ncodeatom;
      _ptr__6234[((_6228 - (int)1) - _6243)] = mosek::fusion::p_WorkStack::_get_impl(_6226)->ptr_base;
      _ptr__6236[((_6228 - (int)1) - _6243)] = mosek::fusion::p_WorkStack::_get_impl(_6226)->sp_base;
      _ptr__6235[((_6228 - (int)1) - _6243)] = mosek::fusion::p_WorkStack::_get_impl(_6226)->nidxs_base;
      _ptr__6237[((_6228 - (int)1) - _6243)] = mosek::fusion::p_WorkStack::_get_impl(_6226)->cof_base;
      _ptr__6238[((_6228 - (int)1) - _6243)] = mosek::fusion::p_WorkStack::_get_impl(_6226)->shape_base;
      _ptr__6239[((_6228 - (int)1) - _6243)] = mosek::fusion::p_WorkStack::_get_impl(_6226)->code_base;
      _ptr__6240[((_6228 - (int)1) - _6243)] = mosek::fusion::p_WorkStack::_get_impl(_6226)->codeptr_base;
      _ptr__6241[((_6228 - (int)1) - _6243)] = mosek::fusion::p_WorkStack::_get_impl(_6226)->cconst_base;
      ((*_6242)(((_6228 - (int)1) - _6243))) = mosek::fusion::p_WorkStack::_get_impl(_6226)->hassp;
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _6244 = mosek::fusion::p_WorkStack::_get_impl(_6226)->i32;
  _checked_ptr_1<int> _ptr__6244(_6244 ? _6244->raw() : nullptr,_6244 ? _6244->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6245 = mosek::fusion::p_WorkStack::_get_impl(_6226)->i64;
  _checked_ptr_1<long long> _ptr__6245(_6245 ? _6245->raw() : nullptr,_6245 ? _6245->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6246 = mosek::fusion::p_WorkStack::_get_impl(_6226)->f64;
  _checked_ptr_1<double> _ptr__6246(_6246 ? _6246->raw() : nullptr,_6246 ? _6246->size(0) : 0);
  {
    bool _6247 = true;
    int _11427 = (int)1;
    int _11428 = _6228;
    for (int _6248 = _11427; _6248 < _11428; ++_6248)
    {
      {
        _6247 = (_6247 && (_ptr__6230[(int)0] == _ptr__6230[_6248]));
        int _11429 = (int)0;
        int _11430 = _ptr__6230[(int)0];
        for (int _6249 = _11429; _6249 < _11430; ++_6249)
        {
          {
            _6247 = (_6247 && (_ptr__6244[safe_add( _ptr__6238[(int)0],_6249 )] == _ptr__6244[safe_add( _ptr__6238[_6248],_6249 )]));
          }
        }
      }
    }
    if ((!_6247))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
      }
    }
    {}
  }
  std::vector<int> _11431;
  for (int _6251 = (int)0, _11432 = _ptr__6230[(int)0]; _6251 < _11432 ; ++_6251)
  {
    _11431.push_back(_ptr__6244[safe_add( _ptr__6238[(int)0],_6251 )]);
  }
  auto _11433 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11431.size()),_11431.begin(),_11431.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _6250 = _11433;
  _checked_ptr_1<int> _ptr__6250(_6250 ? _6250->raw() : nullptr,_6250 ? _6250->size(0) : 0);
  bool _6252 = false;
  int _11434 = (int)0;
  int _11435 = _6228;
  for (int _6253 = _11434; _6253 < _11435; ++_6253)
  {
    {
      if ((!((*_6242)(_6253))))
      {
        {
          _6252 = true;
        }
      }
      {}
    }
  }
  bool _6254 = false;
  int _11436 = (int)0;
  int _11437 = _6228;
  for (int _6255 = _11436; _6255 < _11437; ++_6255)
  {
    {
      if ((_ptr__6233[_6255] > (int)0))
      {
        {
          _6254 = true;
        }
      }
      {}
    }
  }
  int _6256 = (int)0;
  int _6257 = (int)0;
  int _6258 = (int)0;
  if (_6252)
  {
    {
      _6257 = (int)::mosek::fusion::p_Set::size(_6250);
      int _11438 = (int)0;
      int _11439 = _6228;
      for (int _6259 = _11438; _6259 < _11439; ++_6259)
      {
        {
          _6258 += _ptr__6232[_6259];
          if (_6254)
          {
            {
              int _11440;
              bool _11441 = (_ptr__6233[_6259] > (int)0);
              if (_11441)
              {
                _11440 = safe_add( _ptr__6233[_6259],safe_mul( (int)2,_ptr__6232[_6259] ) );
              }
              else
              {
                _11440 = _ptr__6232[_6259];
              }
              _6256 += _11440;
            }
          }
          {}
        }
      }
    }
  }
  else
  {
    {
      bool _6260 = false;
      std::shared_ptr< monty::ndarray< int,1 > > _6261 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6228)));
      _checked_ptr_1<int> _ptr__6261(_6261 ? _6261->raw() : nullptr,_6261 ? _6261->size(0) : 0);
      int _11442 = (int)0;
      int _11443 = _6228;
      for (int _6262 = _11442; _6262 < _11443; ++_6262)
      {
        {
          _6258 += _ptr__6232[_6262];
          if (_6254)
          {
            {
              int _11444;
              bool _11445 = (_ptr__6233[_6262] > (int)0);
              if (_11445)
              {
                _11444 = safe_add( _ptr__6233[_6262],safe_mul( (int)2,_ptr__6232[_6262] ) );
              }
              else
              {
                _11444 = _ptr__6232[_6262];
              }
              _6256 += _11444;
            }
          }
          {}
        }
      }
      while ( (!_6260) )
      {
        {
          long long _6263 = (-(int)1);
          int _11446 = (int)0;
          int _11447 = _6228;
          for (int _6264 = _11446; _6264 < _11447; ++_6264)
          {
            {
              if (((_ptr__6261[_6264] < _ptr__6231[_6264]) && ((_6263 < (int)0) || (_ptr__6245[safe_add( _ptr__6236[_6264],_ptr__6261[_6264] )] < _6263))))
              {
                {
                  _6263 = _ptr__6245[safe_add( _ptr__6236[_6264],_ptr__6261[_6264] )];
                }
              }
              {}
            }
          }
          if ((_6263 < (int)0))
          {
            {
              _6260 = true;
            }
          }
          else
          {
            {
              int _11448 = (int)0;
              int _11449 = _6228;
              for (int _6265 = _11448; _6265 < _11449; ++_6265)
              {
                {
                  if (((_ptr__6261[_6265] < _ptr__6231[_6265]) && (_6263 == _ptr__6245[safe_add( _ptr__6236[_6265],_ptr__6261[_6265] )])))
                  {
                    {
                      ++ _ptr__6261[_6265];
                    }
                  }
                  {}
                }
              }
              ++ _6257;
            }
          }
        }
      }
    }
  }
  _6225->alloc_expr(_ptr__6230[(int)0],_6257,_6258,(!_6252),_6256);
  int _6266 = mosek::fusion::p_WorkStack::_get_impl(_6225)->ptr_base;
  int _6267 = mosek::fusion::p_WorkStack::_get_impl(_6225)->nidxs_base;
  int _6268 = mosek::fusion::p_WorkStack::_get_impl(_6225)->sp_base;
  int _6269 = mosek::fusion::p_WorkStack::_get_impl(_6225)->shape_base;
  int _6270 = mosek::fusion::p_WorkStack::_get_impl(_6225)->cof_base;
  int _6271 = mosek::fusion::p_WorkStack::_get_impl(_6225)->code_base;
  int _6272 = mosek::fusion::p_WorkStack::_get_impl(_6225)->codeptr_base;
  int _6273 = mosek::fusion::p_WorkStack::_get_impl(_6225)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _6274 = mosek::fusion::p_WorkStack::_get_impl(_6225)->i32;
  _checked_ptr_1<int> _ptr__6274(_6274 ? _6274->raw() : nullptr,_6274 ? _6274->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6275 = mosek::fusion::p_WorkStack::_get_impl(_6225)->i64;
  _checked_ptr_1<long long> _ptr__6275(_6275 ? _6275->raw() : nullptr,_6275 ? _6275->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6276 = mosek::fusion::p_WorkStack::_get_impl(_6225)->f64;
  _checked_ptr_1<double> _ptr__6276(_6276 ? _6276->raw() : nullptr,_6276 ? _6276->size(0) : 0);
  int _11450 = (int)0;
  int _11451 = _ptr__6230[(int)0];
  for (int _6277 = _11450; _6277 < _11451; ++_6277)
  {
    {
      _ptr__6274[safe_add( _6269,_6277 )] = _ptr__6244[safe_add( _ptr__6238[(int)0],_6277 )];
    }
  }
  if ((_6256 > (int)0))
  {
    {
      _ptr__6274[_6272] = (int)0;
    }
  }
  {}
  int _11452 = (int)0;
  int _11453 = safe_add( _6257,(int)1 );
  for (int _6278 = _11452; _6278 < _11453; ++_6278)
  {
    {
      _ptr__6274[safe_add( _6266,_6278 )] = (int)0;
    }
  }
  if (_6252)
  {
    {
      int _6279 = (-(int)9999);
      if ((_6256 > (int)0))
      {
        {
          _6279 = _6227->alloci32(safe_add( _6257,(int)1 ));
        }
      }
      {}
      std::shared_ptr< monty::ndarray< int,1 > > _6280 = mosek::fusion::p_WorkStack::_get_impl(_6227)->i32;
      _checked_ptr_1<int> _ptr__6280(_6280 ? _6280->raw() : nullptr,_6280 ? _6280->size(0) : 0);
      if ((_6256 > (int)0))
      {
        {
          int _11454 = (int)0;
          int _11455 = safe_add( _6257,(int)1 );
          for (int _6281 = _11454; _6281 < _11455; ++_6281)
          {
            {
              _ptr__6280[safe_add( _6279,_6281 )] = (int)0;
            }
          }
        }
      }
      {}
      int _11456 = (int)0;
      int _11457 = _6228;
      for (int _6282 = _11456; _6282 < _11457; ++_6282)
      {
        {
          if (((*_6242)(_6282)))
          {
            {
              int _11458 = (int)0;
              int _11459 = _ptr__6231[_6282];
              for (int _6283 = _11458; _6283 < _11459; ++_6283)
              {
                {
                  _ptr__6274[safe_add( safe_add( _6266,_ptr__6245[safe_add( _ptr__6236[_6282],_6283 )] ),(int)1 )] += (_ptr__6244[safe_add( safe_add( _ptr__6234[_6282],_6283 ),(int)1 )] - _ptr__6244[safe_add( _ptr__6234[_6282],_6283 )]);
                }
              }
              if ((_ptr__6233[_6282] > (int)0))
              {
                {
                  int _11460 = (int)0;
                  int _11461 = _ptr__6231[_6282];
                  for (int _6284 = _11460; _6284 < _11461; ++_6284)
                  {
                    {
                      _ptr__6280[safe_add( safe_add( _6279,_ptr__6245[safe_add( _ptr__6236[_6282],_6284 )] ),(int)1 )] += safe_add( (_ptr__6244[safe_add( _ptr__6240[_6282],_ptr__6244[safe_add( safe_add( _ptr__6234[_6282],_6284 ),(int)1 )] )] - _ptr__6244[safe_add( _ptr__6240[_6282],_ptr__6244[safe_add( _ptr__6234[_6282],_6284 )] )]),safe_mul( (int)2,(_ptr__6244[safe_add( safe_add( _ptr__6234[_6282],_6284 ),(int)1 )] - _ptr__6244[safe_add( _ptr__6234[_6282],_6284 )]) ) );
                    }
                  }
                }
              }
              else if(_6254)
              {
                {
                  int _11462 = (int)0;
                  int _11463 = _ptr__6231[_6282];
                  for (int _6285 = _11462; _6285 < _11463; ++_6285)
                  {
                    {
                      _ptr__6280[safe_add( safe_add( _6279,_ptr__6245[safe_add( _ptr__6236[_6282],_6285 )] ),(int)1 )] += (int)1;
                    }
                  }
                }
              }
              {}
            }
          }
          else
          {
            {
              int _11464 = (int)0;
              int _11465 = _ptr__6231[_6282];
              for (int _6286 = _11464; _6286 < _11465; ++_6286)
              {
                {
                  _ptr__6274[safe_add( safe_add( _6266,_6286 ),(int)1 )] += (_ptr__6244[safe_add( safe_add( _ptr__6234[_6282],_6286 ),(int)1 )] - _ptr__6244[safe_add( _ptr__6234[_6282],_6286 )]);
                }
              }
              if ((_ptr__6233[_6282] > (int)0))
              {
                {
                  int _11466 = (int)0;
                  int _11467 = _ptr__6231[_6282];
                  for (int _6287 = _11466; _6287 < _11467; ++_6287)
                  {
                    {
                      _ptr__6280[safe_add( safe_add( _6279,_6287 ),(int)1 )] += safe_add( (_ptr__6244[safe_add( _ptr__6240[_6282],_ptr__6244[safe_add( safe_add( _ptr__6234[_6282],_6287 ),(int)1 )] )] - _ptr__6244[safe_add( _ptr__6240[_6282],_ptr__6244[safe_add( _ptr__6234[_6282],_6287 )] )]),safe_mul( (int)2,(_ptr__6244[safe_add( safe_add( _ptr__6234[_6282],_6287 ),(int)1 )] - _ptr__6244[safe_add( _ptr__6234[_6282],_6287 )]) ) );
                    }
                  }
                }
              }
              else if(_6254)
              {
                {
                  int _11468 = (int)0;
                  int _11469 = _ptr__6231[_6282];
                  for (int _6288 = _11468; _6288 < _11469; ++_6288)
                  {
                    {
                      _ptr__6280[safe_add( safe_add( _6279,_6288 ),(int)1 )] += (int)1;
                    }
                  }
                }
              }
              {}
            }
          }
        }
      }
      int _11470 = (int)0;
      int _11471 = _6257;
      for (int _6289 = _11470; _6289 < _11471; ++_6289)
      {
        {
          _ptr__6274[safe_add( safe_add( _6266,_6289 ),(int)1 )] += _ptr__6274[safe_add( _6266,_6289 )];
        }
      }
      if ((_6256 > (int)0))
      {
        {
          int _11472 = (int)0;
          int _11473 = _6257;
          for (int _6290 = _11472; _6290 < _11473; ++_6290)
          {
            {
              _ptr__6280[safe_add( safe_add( _6279,_6290 ),(int)1 )] += _ptr__6280[safe_add( _6279,_6290 )];
            }
          }
        }
      }
      {}
      int _11474 = (int)0;
      int _11475 = _6228;
      for (int _6291 = _11474; _6291 < _11475; ++_6291)
      {
        {
          if (((*_6242)(_6291)))
          {
            {
              int _11476 = (int)0;
              int _11477 = _ptr__6231[_6291];
              for (int _6292 = _11476; _6292 < _11477; ++_6292)
              {
                {
                  int _6293 = _ptr__6244[safe_add( _ptr__6234[_6291],_6292 )];
                  int _6294 = _ptr__6244[safe_add( safe_add( _ptr__6234[_6291],_6292 ),(int)1 )];
                  long long _6295 = _ptr__6245[safe_add( _ptr__6236[_6291],_6292 )];
                  int _6296 = _ptr__6274[safe_add( _6266,_6295 )];
                  int _11478;
                  bool _11479 = _6254;
                  if (_11479)
                  {
                    _11478 = _ptr__6280[safe_add( _6279,_6295 )];
                  }
                  else
                  {
                    _11478 = (-(int)10000);
                  }
                  int _6297 = _11478;
                  int _11480 = _6293;
                  int _11481 = _6294;
                  for (int _6298 = _11480; _6298 < _11481; ++_6298)
                  {
                    {
                      _ptr__6275[safe_add( _6267,_6296 )] = _ptr__6245[safe_add( _ptr__6235[_6291],_6298 )];
                      _ptr__6276[safe_add( _6270,_6296 )] = (((*w)(_6291)) * _ptr__6246[safe_add( _ptr__6237[_6291],_6298 )]);
                      if (_6254)
                      {
                        {
                          if ((_ptr__6233[_6291] > (int)0))
                          {
                            {
                              int _11482 = _ptr__6244[safe_add( _ptr__6240[_6291],_6298 )];
                              int _11483 = _ptr__6244[safe_add( safe_add( _ptr__6240[_6291],_6298 ),(int)1 )];
                              for (int _6299 = _11482; _6299 < _11483; ++_6299)
                              {
                                {
                                  _ptr__6274[safe_add( _6271,_6297 )] = _ptr__6244[safe_add( _ptr__6239[_6291],_6299 )];
                                  _ptr__6276[safe_add( _6273,_6297 )] = _ptr__6246[safe_add( _ptr__6241[_6291],_6299 )];
                                  ++ _6297;
                                }
                              }
                              _ptr__6274[safe_add( _6271,_6297 )] = 2;
                              _ptr__6276[safe_add( _6273,_6297 )] = ((*w)(_6291));
                              ++ _6297;
                              _ptr__6274[safe_add( _6271,_6297 )] = 5;
                              ++ _6297;
                            }
                          }
                          else
                          {
                            {
                              _ptr__6274[safe_add( _6271,_6297 )] = 2;
                              _ptr__6276[safe_add( _6273,_6297 )] = 0.0;
                              ++ _6297;
                            }
                          }
                          _ptr__6274[safe_add( safe_add( _6272,_6296 ),(int)1 )] = _6297;
                        }
                      }
                      {}
                      ++ _6296;
                    }
                  }
                  if (_6254)
                  {
                    {
                      _ptr__6280[safe_add( _6279,_6295 )] = _6297;
                    }
                  }
                  {}
                  _ptr__6274[safe_add( _6266,_6295 )] += (_6294 - _6293);
                }
              }
            }
          }
          else
          {
            {
              int _11484 = (int)0;
              int _11485 = _ptr__6231[_6291];
              for (int _6300 = _11484; _6300 < _11485; ++_6300)
              {
                {
                  int _6301 = _ptr__6244[safe_add( _ptr__6234[_6291],_6300 )];
                  int _6302 = _ptr__6244[safe_add( safe_add( _ptr__6234[_6291],_6300 ),(int)1 )];
                  int _6303 = _6300;
                  int _6304 = _ptr__6274[safe_add( _6266,_6303 )];
                  int _11486;
                  bool _11487 = _6254;
                  if (_11487)
                  {
                    _11486 = _ptr__6280[safe_add( _6279,_6303 )];
                  }
                  else
                  {
                    _11486 = (-(int)10000);
                  }
                  int _6305 = _11486;
                  int _11488 = _6301;
                  int _11489 = _6302;
                  for (int _6306 = _11488; _6306 < _11489; ++_6306)
                  {
                    {
                      _ptr__6275[safe_add( _6267,_6304 )] = _ptr__6245[safe_add( _ptr__6235[_6291],_6306 )];
                      _ptr__6276[safe_add( _6270,_6304 )] = (((*w)(_6291)) * _ptr__6246[safe_add( _ptr__6237[_6291],_6306 )]);
                      if (_6254)
                      {
                        {
                          if ((_ptr__6233[_6291] > (int)0))
                          {
                            {
                              int _11490 = _ptr__6244[safe_add( _ptr__6240[_6291],_6306 )];
                              int _11491 = _ptr__6244[safe_add( safe_add( _ptr__6240[_6291],_6306 ),(int)1 )];
                              for (int _6307 = _11490; _6307 < _11491; ++_6307)
                              {
                                {
                                  _ptr__6274[safe_add( _6271,_6305 )] = _ptr__6244[safe_add( _ptr__6239[_6291],_6307 )];
                                  _ptr__6276[safe_add( _6273,_6305 )] = _ptr__6246[safe_add( _ptr__6241[_6291],_6307 )];
                                  ++ _6305;
                                }
                              }
                              _ptr__6274[safe_add( _6271,_6305 )] = 2;
                              _ptr__6276[safe_add( _6273,_6305 )] = ((*w)(_6291));
                              ++ _6305;
                              _ptr__6274[safe_add( _6271,_6305 )] = 5;
                              ++ _6305;
                              _ptr__6274[safe_add( safe_add( _6272,_6304 ),(int)1 )] = _6305;
                            }
                          }
                          else
                          {
                            {
                              _ptr__6274[safe_add( _6271,_6305 )] = 2;
                              _ptr__6276[safe_add( _6273,_6305 )] = 0.0;
                              ++ _6305;
                            }
                          }
                          _ptr__6274[safe_add( safe_add( _6272,_6304 ),(int)1 )] = _6305;
                        }
                      }
                      {}
                      ++ _6304;
                    }
                  }
                  if (_6254)
                  {
                    {
                      _ptr__6280[safe_add( _6279,_6303 )] = _6305;
                    }
                  }
                  {}
                  _ptr__6274[safe_add( _6266,_6303 )] += (_6302 - _6301);
                }
              }
            }
          }
        }
      }
      int _11492 = (int)0;
      int _11493 = _6257;
      for (int _6308 = _11492; _6308 < _11493; ++_6308)
      {
        {
          _ptr__6274[(safe_add( _6266,_6257 ) - _6308)] = _ptr__6274[((safe_add( _6266,_6257 ) - _6308) - (int)1)];
        }
      }
      _ptr__6274[_6266] = (int)0;
    }
  }
  else
  {
    {
      bool _6309 = false;
      std::shared_ptr< monty::ndarray< int,1 > > _6310 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6228)));
      _checked_ptr_1<int> _ptr__6310(_6310 ? _6310->raw() : nullptr,_6310 ? _6310->size(0) : 0);
      int _6311 = (int)0;
      int _6312 = (int)0;
      int _6313 = (int)0;
      while ( (!_6309) )
      {
        {
          long long _6314 = (-(int)1);
          int _11494 = (int)0;
          int _11495 = _6228;
          for (int _6315 = _11494; _6315 < _11495; ++_6315)
          {
            {
              if (((_ptr__6310[_6315] < _ptr__6231[_6315]) && ((_6314 < (int)0) || (_ptr__6245[safe_add( _ptr__6236[_6315],_ptr__6310[_6315] )] < _6314))))
              {
                {
                  _6314 = _ptr__6245[safe_add( _ptr__6236[_6315],_ptr__6310[_6315] )];
                }
              }
              {}
            }
          }
          if ((_6314 < (int)0))
          {
            {
              _6309 = true;
            }
          }
          else
          {
            {
              int _11496 = (int)0;
              int _11497 = _6228;
              for (int _6316 = _11496; _6316 < _11497; ++_6316)
              {
                {
                  if (((_ptr__6310[_6316] < _ptr__6231[_6316]) && (_6314 == _ptr__6245[safe_add( _ptr__6236[_6316],_ptr__6310[_6316] )])))
                  {
                    {
                      int _11498 = _ptr__6244[safe_add( _ptr__6234[_6316],_ptr__6310[_6316] )];
                      int _11499 = _ptr__6244[safe_add( safe_add( _ptr__6234[_6316],_ptr__6310[_6316] ),(int)1 )];
                      for (int _6317 = _11498; _6317 < _11499; ++_6317)
                      {
                        {
                          _ptr__6275[safe_add( _6267,_6313 )] = _ptr__6245[safe_add( _ptr__6235[_6316],_6317 )];
                          _ptr__6276[safe_add( _6270,_6313 )] = (((*w)(_6316)) * _ptr__6246[safe_add( _ptr__6237[_6316],_6317 )]);
                          if (_6254)
                          {
                            {
                              if ((_ptr__6233[_6316] > (int)0))
                              {
                                {
                                  int _11500 = _ptr__6244[safe_add( _ptr__6240[_6316],_6317 )];
                                  int _11501 = _ptr__6244[safe_add( safe_add( _ptr__6240[_6316],_6317 ),(int)1 )];
                                  for (int _6318 = _11500; _6318 < _11501; ++_6318)
                                  {
                                    {
                                      _ptr__6274[safe_add( _6271,_6311 )] = _ptr__6244[safe_add( _ptr__6239[_6316],_6318 )];
                                      _ptr__6276[safe_add( _6273,_6311 )] = _ptr__6246[safe_add( _ptr__6241[_6316],_6318 )];
                                      ++ _6311;
                                    }
                                  }
                                  _ptr__6274[safe_add( _6271,_6311 )] = 2;
                                  _ptr__6276[safe_add( _6273,_6311 )] = ((*w)(_6316));
                                  ++ _6311;
                                  _ptr__6274[safe_add( _6271,_6311 )] = 5;
                                  ++ _6311;
                                }
                              }
                              else
                              {
                                {
                                  _ptr__6274[safe_add( _6271,_6311 )] = 2;
                                  _ptr__6276[safe_add( _6273,_6311 )] = 0.0;
                                  ++ _6311;
                                }
                              }
                              _ptr__6274[safe_add( safe_add( _6272,_6313 ),(int)1 )] = _6311;
                            }
                          }
                          {}
                          ++ _6313;
                        }
                      }
                      ++ _ptr__6310[_6316];
                    }
                  }
                  {}
                }
              }
              _ptr__6274[safe_add( safe_add( _6266,_6312 ),(int)1 )] = _6313;
              _ptr__6275[safe_add( _6268,_6312 )] = _6314;
            }
          }
          ++ _6312;
        }
      }
    }
  }
  _6227->clear();
}
std::string mosek::fusion::ExprWSum :: toString() { return mosek::fusion::p_ExprWSum::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprWSum::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _6319 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprWSum(["));
  _6319->__mosek_2fusion_2Utils_2StringBuffer__a(((*es)((int)0))->toString());
  int _11502 = (int)1;
  int _11503 = (int)((es)->size(0));
  for (int _6320 = _11502; _6320 < _11503; ++_6320)
  {
    {
      _6319->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*es)(_6320))->toString());
    }
  }
  _6319->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("])"));
  return _6319->toString();
}
void mosek::fusion::p_ExprWSum::destroy(){w.reset();es.reset();}void mosek::fusion::ExprWSum::destroy() { mosek::fusion::p_ExprWSum::_get_impl(this)->destroy(); }mosek::fusion::ExprSumReduce::ExprSumReduce(mosek::fusion::p_ExprSumReduce *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprSumReduce()" << this << std::endl; */ }mosek::fusion::ExprSumReduce::~ExprSumReduce() {  /* std::cout << "~ExprSumReduce()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprSumReduce::p_ExprSumReduce  (::mosek::fusion::ExprSumReduce * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprSumReduce::t mosek::fusion::p_ExprSumReduce::_new_ExprSumReduce  (int _6321,    monty::rc_ptr< ::mosek::fusion::Expression > _6322){ return new mosek::fusion::ExprSumReduce(_6321,_6322); }mosek::fusion::ExprSumReduce::ExprSumReduce  (int _6321,    monty::rc_ptr< ::mosek::fusion::Expression > _6322) :    ExprSumReduce(new mosek::fusion::p_ExprSumReduce(this)){ mosek::fusion::p_ExprSumReduce::_get_impl(this)->_initialize(_6321,_6322); }void mosek::fusion::p_ExprSumReduce::_initialize  (int _6321,    monty::rc_ptr< ::mosek::fusion::Expression > _6322){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprSumReduce::computeShape(_6321,_6322->getShape()));
    mosek::fusion::p_ExprSumReduce::_get_impl(::mosek::fusion::ExprSumReduce::t(_pubthis))->expr = _6322;
    mosek::fusion::p_ExprSumReduce::_get_impl(::mosek::fusion::ExprSumReduce::t(_pubthis))->dim = _6321;
    std::shared_ptr< monty::ndarray< int,1 > > _6323 = _6322->getShape();
    _checked_ptr_1<int> _ptr__6323(_6323 ? _6323->raw() : nullptr,_6323 ? _6323->size(0) : 0);
    if (((int)((_6323)->size(0)) <= _6321))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid summing dimension"));
      }
    }
    {}
  }
}void mosek::fusion::ExprSumReduce :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6324,monty::rc_ptr< ::mosek::fusion::WorkStack > _6325,monty::rc_ptr< ::mosek::fusion::WorkStack > _6326) { mosek::fusion::p_ExprSumReduce::_get_impl(this)->eval(_6324,_6325,_6326); }void mosek::fusion::p_ExprSumReduce::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6324,monty::rc_ptr< ::mosek::fusion::WorkStack > _6325,monty::rc_ptr< ::mosek::fusion::WorkStack > _6326){
  expr->eval(_6325,_6324,_6326);
  _6325->pop_expr();
  int _6327 = mosek::fusion::p_WorkStack::_get_impl(_6325)->nd;
  int _6328 = mosek::fusion::p_WorkStack::_get_impl(_6325)->shape_base;
  int _6329 = mosek::fusion::p_WorkStack::_get_impl(_6325)->nelem;
  int _6330 = mosek::fusion::p_WorkStack::_get_impl(_6325)->nnz;
  int _6331 = mosek::fusion::p_WorkStack::_get_impl(_6325)->ncodeatom;
  bool _6332 = mosek::fusion::p_WorkStack::_get_impl(_6325)->hassp;
  int _6333 = mosek::fusion::p_WorkStack::_get_impl(_6325)->ptr_base;
  int _6334 = mosek::fusion::p_WorkStack::_get_impl(_6325)->sp_base;
  int _6335 = mosek::fusion::p_WorkStack::_get_impl(_6325)->nidxs_base;
  int _6336 = mosek::fusion::p_WorkStack::_get_impl(_6325)->cof_base;
  int _6337 = mosek::fusion::p_WorkStack::_get_impl(_6325)->code_base;
  int _6338 = mosek::fusion::p_WorkStack::_get_impl(_6325)->codeptr_base;
  int _6339 = mosek::fusion::p_WorkStack::_get_impl(_6325)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _6340 = mosek::fusion::p_WorkStack::_get_impl(_6325)->i32;
  _checked_ptr_1<int> _ptr__6340(_6340 ? _6340->raw() : nullptr,_6340 ? _6340->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6341 = mosek::fusion::p_WorkStack::_get_impl(_6325)->i64;
  _checked_ptr_1<long long> _ptr__6341(_6341 ? _6341->raw() : nullptr,_6341 ? _6341->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6342 = mosek::fusion::p_WorkStack::_get_impl(_6325)->f64;
  _checked_ptr_1<double> _ptr__6342(_6342 ? _6342->raw() : nullptr,_6342 ? _6342->size(0) : 0);
  int _6343 = (int)99999;
  int _6344 = (int)99999;
  int _6345 = (int)99999;
  if (_6332)
  {
    {
      int _6346 = (int)0;
      int _11504 = (int)0;
      int _11505 = _6327;
      for (int _6347 = _11504; _6347 < _11505; ++_6347)
      {
        {
          if ((_6346 < _ptr__6340[safe_add( _6328,_6347 )]))
          {
            {
              _6346 = _ptr__6340[safe_add( _6328,_6347 )];
            }
          }
          {}
        }
      }
      _6343 = _6326->alloci32(safe_add( _6346,(int)1 ));
      _6344 = _6326->alloci32(_6329);
      _6345 = _6326->alloci32(_6329);
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _6348 = mosek::fusion::p_WorkStack::_get_impl(_6326)->i32;
  _checked_ptr_1<int> _ptr__6348(_6348 ? _6348->raw() : nullptr,_6348 ? _6348->size(0) : 0);
  if (_6332)
  {
    {
      int _6349 = _6344;
      int _6350 = _6345;
      int _11506 = (int)0;
      int _11507 = _6329;
      for (int _6351 = _11506; _6351 < _11507; ++_6351)
      {
        {
          _ptr__6348[safe_add( _6349,_6351 )] = _6351;
        }
      }
      if ((dim < (_6327 - (int)1)))
      {
        {
          std::shared_ptr< monty::ndarray< long long,1 > > _6352 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6327)));
          _checked_ptr_1<long long> _ptr__6352(_6352 ? _6352->raw() : nullptr,_6352 ? _6352->size(0) : 0);
          _ptr__6352[(_6327 - (int)1)] = (int)1;
          int _11508 = (int)1;
          int _11509 = _6327;
          for (int _6353 = _11508; _6353 < _11509; ++_6353)
          {
            {
              _ptr__6352[((_6327 - _6353) - (int)1)] = safe_mul( _ptr__6352[(_6327 - _6353)],_ptr__6340[(safe_add( _6328,_6327 ) - _6353)] );
            }
          }
          std::shared_ptr< monty::ndarray< int,1 > > _6354 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((_6327 - (int)1))));
          _checked_ptr_1<int> _ptr__6354(_6354 ? _6354->raw() : nullptr,_6354 ? _6354->size(0) : 0);
          int _11510 = (int)0;
          int _11511 = dim;
          for (int _6355 = _11510; _6355 < _11511; ++_6355)
          {
            {
              _ptr__6354[((_6327 - _6355) - (int)2)] = _6355;
            }
          }
          int _11512 = safe_add( dim,(int)1 );
          int _11513 = _6327;
          for (int _6356 = _11512; _6356 < _11513; ++_6356)
          {
            {
              _ptr__6354[((_6327 - _6356) - (int)1)] = _6356;
            }
          }
          int _11514 = (int)0;
          int _11515 = (_6327 - (int)1);
          for (int _6357 = _11514; _6357 < _11515; ++_6357)
          {
            {
              int _6358 = _ptr__6354[_6357];
              int _6359 = _ptr__6340[safe_add( _6328,_6358 )];
              int _11516 = (int)0;
              int _11517 = safe_add( _6359,(int)1 );
              for (int _6360 = _11516; _6360 < _11517; ++_6360)
              {
                {
                  _ptr__6348[safe_add( _6343,_6360 )] = (int)0;
                }
              }
              int _11518 = (int)0;
              int _11519 = _6329;
              for (int _6361 = _11518; _6361 < _11519; ++_6361)
              {
                {
                  ++ _ptr__6348[safe_add( safe_add( _6343,(int)1 ),((_ptr__6341[safe_add( _6334,_6361 )] / _ptr__6352[_6358]) % _6359) )];
                }
              }
              int _11520 = (int)0;
              int _11521 = _6359;
              for (int _6362 = _11520; _6362 < _11521; ++_6362)
              {
                {
                  _ptr__6348[safe_add( safe_add( _6343,_6362 ),(int)1 )] += _ptr__6348[safe_add( _6343,_6362 )];
                }
              }
              int _11522 = (int)0;
              int _11523 = _6329;
              for (int _6363 = _11522; _6363 < _11523; ++_6363)
              {
                {
                  int _6364 = _ptr__6348[safe_add( _6349,_6363 )];
                  long long _6365 = ((_ptr__6341[safe_add( _6334,_6364 )] / _ptr__6352[_6358]) % _6359);
                  _ptr__6348[safe_add( _6350,_ptr__6348[safe_add( _6343,_6365 )] )] = _6364;
                  ++ _ptr__6348[safe_add( _6343,_6365 )];
                }
              }
              int _6366 = _6350;
              _6350 = _6349;
              _6349 = _6366;
            }
          }
        }
      }
      {}
      int _6367 = (int)1;
      int _11524 = (int)0;
      int _11525 = dim;
      for (int _6368 = _11524; _6368 < _11525; ++_6368)
      {
        {
          _6367 *= _ptr__6340[safe_add( _6328,_6368 )];
        }
      }
      int _6369 = _ptr__6340[safe_add( _6328,dim )];
      int _6370 = (int)1;
      int _11526 = safe_add( dim,(int)1 );
      int _11527 = _6327;
      for (int _6371 = _11526; _6371 < _11527; ++_6371)
      {
        {
          _6370 *= _ptr__6340[safe_add( _6328,_6371 )];
        }
      }
      int _6372 = safe_mul( _6370,_6369 );
      int _6373 = _6370;
      int _6374 = (int)1;
      int _6375 = (int)0;
      long long _6376 = (-(int)1);
      long long _6377 = (-(int)1);
      int _11528 = (int)0;
      int _11529 = _6329;
      for (int _6378 = _11528; _6378 < _11529; ++_6378)
      {
        {
          int _6379 = _ptr__6348[safe_add( _6349,_6378 )];
          long long _6380 = ((_ptr__6341[safe_add( _6334,_6379 )] / _6372) % _6367);
          long long _6381 = (_ptr__6341[safe_add( _6334,_6379 )] % _6370);
          if (((_6377 != _6380) || (_6376 != _6381)))
          {
            {
              _6377 = _6380;
              _6376 = _6381;
              ++ _6375;
            }
          }
          {}
        }
      }
      int _6382 = (_6327 - (int)1);
      bool _6383 = (_6375 < safe_mul( _6367,_6370 ));
      int _6384 = _6330;
      int _6385 = _6331;
      _6324->alloc_expr(_6382,_6375,_6384,_6383,_6385);
      int _6386 = mosek::fusion::p_WorkStack::_get_impl(_6324)->ptr_base;
      int _6387 = mosek::fusion::p_WorkStack::_get_impl(_6324)->nidxs_base;
      int _11530;
      bool _11531 = _6383;
      if (_11531)
      {
        _11530 = mosek::fusion::p_WorkStack::_get_impl(_6324)->sp_base;
      }
      else
      {
        _11530 = _6324->alloci64(_6375);
      }
      int _6388 = _11530;
      int _6389 = mosek::fusion::p_WorkStack::_get_impl(_6324)->cof_base;
      int _6390 = mosek::fusion::p_WorkStack::_get_impl(_6324)->shape_base;
      int _6391 = mosek::fusion::p_WorkStack::_get_impl(_6324)->code_base;
      int _6392 = mosek::fusion::p_WorkStack::_get_impl(_6324)->codeptr_base;
      int _6393 = mosek::fusion::p_WorkStack::_get_impl(_6324)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _6394 = mosek::fusion::p_WorkStack::_get_impl(_6324)->i32;
      _checked_ptr_1<int> _ptr__6394(_6394 ? _6394->raw() : nullptr,_6394 ? _6394->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _6395 = mosek::fusion::p_WorkStack::_get_impl(_6324)->i64;
      _checked_ptr_1<long long> _ptr__6395(_6395 ? _6395->raw() : nullptr,_6395 ? _6395->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6396 = mosek::fusion::p_WorkStack::_get_impl(_6324)->f64;
      _checked_ptr_1<double> _ptr__6396(_6396 ? _6396->raw() : nullptr,_6396 ? _6396->size(0) : 0);
      int _11532 = (int)0;
      int _11533 = dim;
      for (int _6397 = _11532; _6397 < _11533; ++_6397)
      {
        {
          _ptr__6394[safe_add( _6390,_6397 )] = _ptr__6340[safe_add( _6328,_6397 )];
        }
      }
      int _11534 = safe_add( dim,(int)1 );
      int _11535 = _6327;
      for (int _6398 = _11534; _6398 < _11535; ++_6398)
      {
        {
          _ptr__6394[(safe_add( _6390,_6398 ) - (int)1)] = _ptr__6340[safe_add( _6328,_6398 )];
        }
      }
      _ptr__6394[_6386] = (int)0;
      if ((_6385 > (int)0))
      {
        {
          _ptr__6394[_6392] = (int)0;
        }
      }
      {}
      int _6399 = (int)0;
      int _6400 = (int)0;
      int _6401 = (int)0;
      int _6402 = (int)0;
      while ( (_6402 < _6329) )
      {
        {
          int _6403 = _6402;
          long long _6404 = ((_ptr__6341[safe_add( _6334,_ptr__6348[safe_add( _6349,_6403 )] )] / _6372) % _6367);
          long long _6405 = (_ptr__6341[safe_add( _6334,_ptr__6348[safe_add( _6349,_6403 )] )] % _6370);
          ++ _6402;
          while ( ((_6402 < _6329) && ((_6404 == ((_ptr__6341[safe_add( _6334,_ptr__6348[safe_add( _6349,_6402 )] )] / _6372) % _6367)) && (_6405 == (_ptr__6341[safe_add( _6334,_ptr__6348[safe_add( _6349,_6402 )] )] % _6370)))) )
          {
            {
              ++ _6402;
            }
          }
          int _11536 = _6403;
          int _11537 = _6402;
          for (int _6406 = _11536; _6406 < _11537; ++_6406)
          {
            {
              int _6407 = _ptr__6348[safe_add( _6349,_6406 )];
              int _11538 = _ptr__6340[safe_add( _6333,_6407 )];
              int _11539 = _ptr__6340[safe_add( safe_add( _6333,_6407 ),(int)1 )];
              for (int _6408 = _11538; _6408 < _11539; ++_6408)
              {
                {
                  _ptr__6395[safe_add( _6387,_6401 )] = _ptr__6341[safe_add( _6335,_6408 )];
                  _ptr__6396[safe_add( _6389,_6401 )] = _ptr__6342[safe_add( _6336,_6408 )];
                  if ((_6385 > (int)0))
                  {
                    {
                      int _11540 = _ptr__6340[safe_add( _6338,_6408 )];
                      int _11541 = _ptr__6340[safe_add( safe_add( _6338,_6408 ),(int)1 )];
                      for (int _6409 = _11540; _6409 < _11541; ++_6409)
                      {
                        {
                          _ptr__6394[safe_add( _6391,_6399 )] = _ptr__6340[safe_add( _6337,_6409 )];
                          _ptr__6396[safe_add( _6393,_6399 )] = _ptr__6342[safe_add( _6339,_6409 )];
                          ++ _6399;
                        }
                      }
                      _ptr__6394[safe_add( safe_add( _6392,_6401 ),(int)1 )] = _6399;
                    }
                  }
                  {}
                  ++ _6401;
                }
              }
            }
          }
          _ptr__6395[safe_add( _6388,_6400 )] = safe_add( safe_mul( _6404,_6370 ),_6405 );
          _ptr__6394[safe_add( safe_add( _6386,_6400 ),(int)1 )] = _6401;
          ++ _6400;
        }
      }
      if ((!_6383))
      {
        {
          _6324->popi64(_6375);
        }
      }
      {}
    }
  }
  else
  {
    {
      int _6410 = (int)1;
      int _11542 = (int)0;
      int _11543 = dim;
      for (int _6411 = _11542; _6411 < _11543; ++_6411)
      {
        {
          _6410 *= _ptr__6340[safe_add( _6328,_6411 )];
        }
      }
      int _6412 = _ptr__6340[safe_add( _6328,dim )];
      int _6413 = (int)1;
      int _11544 = safe_add( dim,(int)1 );
      int _11545 = _6327;
      for (int _6414 = _11544; _6414 < _11545; ++_6414)
      {
        {
          _6413 *= _ptr__6340[safe_add( _6328,_6414 )];
        }
      }
      int _6415 = safe_mul( _6413,_6412 );
      int _6416 = _6413;
      int _6417 = (int)1;
      int _6418 = safe_mul( _6410,_6413 );
      int _6419 = _6330;
      int _6420 = _6331;
      _6324->alloc_expr((_6327 - (int)1),_6418,_6419,false,_6420);
      int _6421 = mosek::fusion::p_WorkStack::_get_impl(_6324)->ptr_base;
      int _6422 = mosek::fusion::p_WorkStack::_get_impl(_6324)->nidxs_base;
      int _6423 = mosek::fusion::p_WorkStack::_get_impl(_6324)->cof_base;
      int _6424 = mosek::fusion::p_WorkStack::_get_impl(_6324)->shape_base;
      int _6425 = mosek::fusion::p_WorkStack::_get_impl(_6324)->code_base;
      int _6426 = mosek::fusion::p_WorkStack::_get_impl(_6324)->codeptr_base;
      int _6427 = mosek::fusion::p_WorkStack::_get_impl(_6324)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _6428 = mosek::fusion::p_WorkStack::_get_impl(_6324)->i32;
      _checked_ptr_1<int> _ptr__6428(_6428 ? _6428->raw() : nullptr,_6428 ? _6428->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _6429 = mosek::fusion::p_WorkStack::_get_impl(_6324)->i64;
      _checked_ptr_1<long long> _ptr__6429(_6429 ? _6429->raw() : nullptr,_6429 ? _6429->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6430 = mosek::fusion::p_WorkStack::_get_impl(_6324)->f64;
      _checked_ptr_1<double> _ptr__6430(_6430 ? _6430->raw() : nullptr,_6430 ? _6430->size(0) : 0);
      int _11546 = (int)0;
      int _11547 = dim;
      for (int _6431 = _11546; _6431 < _11547; ++_6431)
      {
        {
          _ptr__6428[safe_add( _6424,_6431 )] = _ptr__6340[safe_add( _6328,_6431 )];
        }
      }
      int _11548 = safe_add( dim,(int)1 );
      int _11549 = _6327;
      for (int _6432 = _11548; _6432 < _11549; ++_6432)
      {
        {
          _ptr__6428[(safe_add( _6424,_6432 ) - (int)1)] = _ptr__6340[safe_add( _6328,_6432 )];
        }
      }
      int _6433 = (int)0;
      int _6434 = (int)0;
      _ptr__6428[_6421] = (int)0;
      if ((_6420 > (int)0))
      {
        {
          _ptr__6428[_6426] = (int)0;
        }
      }
      {}
      int _6435 = (int)0;
      int _11550 = (int)0;
      int _11551 = _6410;
      for (int _6436 = _11550; _6436 < _11551; ++_6436)
      {
        {
          int _11552 = (int)0;
          int _11553 = _6413;
          for (int _6437 = _11552; _6437 < _11553; ++_6437)
          {
            {
              int _11554 = (int)0;
              int _11555 = _6412;
              for (int _6438 = _11554; _6438 < _11555; ++_6438)
              {
                {
                  int _6439 = safe_add( safe_add( safe_mul( _6436,_6415 ),safe_mul( _6438,_6416 ) ),_6437 );
                  int _11556 = _ptr__6340[safe_add( _6333,_6439 )];
                  int _11557 = _ptr__6340[safe_add( safe_add( _6333,_6439 ),(int)1 )];
                  for (int _6440 = _11556; _6440 < _11557; ++_6440)
                  {
                    {
                      _ptr__6429[safe_add( _6422,_6434 )] = _ptr__6341[safe_add( _6335,_6440 )];
                      _ptr__6430[safe_add( _6423,_6434 )] = _ptr__6342[safe_add( _6336,_6440 )];
                      if ((_6420 > (int)0))
                      {
                        {
                          int _11558 = _ptr__6340[safe_add( _6338,_6440 )];
                          int _11559 = _ptr__6340[safe_add( safe_add( _6338,_6440 ),(int)1 )];
                          for (int _6441 = _11558; _6441 < _11559; ++_6441)
                          {
                            {
                              _ptr__6428[safe_add( _6425,_6435 )] = _ptr__6340[safe_add( _6337,_6441 )];
                              _ptr__6430[safe_add( _6427,_6435 )] = _ptr__6342[safe_add( _6339,_6441 )];
                              ++ _6435;
                            }
                          }
                          _ptr__6428[safe_add( safe_add( _6426,_6434 ),(int)1 )] = _6435;
                        }
                      }
                      {}
                      ++ _6434;
                    }
                  }
                }
              }
              _ptr__6428[safe_add( safe_add( _6421,_6433 ),(int)1 )] = _6434;
              ++ _6433;
            }
          }
        }
      }
    }
  }
  _6326->clear();
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprSumReduce::computeShape(int _6442,std::shared_ptr< monty::ndarray< int,1 > > _6443){
  _checked_ptr_1<int> _ptr__6443(_6443 ? _6443->raw() : nullptr, _6443 ? _6443->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6444 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(((int)((_6443)->size(0)) - (int)1))));
  _checked_ptr_1<int> _ptr__6444(_6444 ? _6444->raw() : nullptr,_6444 ? _6444->size(0) : 0);
  int _11560 = (int)0;
  int _11561 = _6442;
  for (int _6445 = _11560; _6445 < _11561; ++_6445)
  {
    {
      _ptr__6444[_6445] = _ptr__6443[_6445];
    }
  }
  int _11562 = safe_add( _6442,(int)1 );
  int _11563 = (int)((_6443)->size(0));
  for (int _6446 = _11562; _6446 < _11563; ++_6446)
  {
    {
      _ptr__6444[(_6446 - (int)1)] = _ptr__6443[_6446];
    }
  }
  return _6444;
}
std::string mosek::fusion::ExprSumReduce :: toString() { return mosek::fusion::p_ExprSumReduce::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprSumReduce::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprSumReduce("))->__mosek_2fusion_2Utils_2StringBuffer__a(dim)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprSumReduce::destroy(){expr.reset();}void mosek::fusion::ExprSumReduce::destroy() { mosek::fusion::p_ExprSumReduce::_get_impl(this)->destroy(); }mosek::fusion::ExprDenseTril::ExprDenseTril(mosek::fusion::p_ExprDenseTril *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprDenseTril()" << this << std::endl; */ }mosek::fusion::ExprDenseTril::~ExprDenseTril() {  /* std::cout << "~ExprDenseTril()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprDenseTril::p_ExprDenseTril  (::mosek::fusion::ExprDenseTril * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprDenseTril::t mosek::fusion::p_ExprDenseTril::_new_ExprDenseTril  (int _6447,    int _6448,    monty::rc_ptr< ::mosek::fusion::Expression > _6449,    int _6450){ return new mosek::fusion::ExprDenseTril(_6447,_6448,_6449,_6450); }mosek::fusion::ExprDenseTril::ExprDenseTril  (int _6447,    int _6448,    monty::rc_ptr< ::mosek::fusion::Expression > _6449,    int _6450) :    ExprDenseTril(new mosek::fusion::p_ExprDenseTril(this)){ mosek::fusion::p_ExprDenseTril::_get_impl(this)->_initialize(_6447,_6448,_6449,_6450); }void mosek::fusion::p_ExprDenseTril::_initialize  (int _6447,    int _6448,    monty::rc_ptr< ::mosek::fusion::Expression > _6449,    int _6450){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_6449->getShape());
    mosek::fusion::p_ExprDenseTril::_get_impl(::mosek::fusion::ExprDenseTril::t(_pubthis))->expr = _6449;
    mosek::fusion::p_ExprDenseTril::_get_impl(::mosek::fusion::ExprDenseTril::t(_pubthis))->dim0 = _6447;
    mosek::fusion::p_ExprDenseTril::_get_impl(::mosek::fusion::ExprDenseTril::t(_pubthis))->dim1 = _6448;
  }
}mosek::fusion::ExprDenseTril::t mosek::fusion::p_ExprDenseTril::_new_ExprDenseTril  (int _6451,    int _6452,    monty::rc_ptr< ::mosek::fusion::Expression > _6453){ return new mosek::fusion::ExprDenseTril(_6451,_6452,_6453); }mosek::fusion::ExprDenseTril::ExprDenseTril  (int _6451,    int _6452,    monty::rc_ptr< ::mosek::fusion::Expression > _6453) :    ExprDenseTril(new mosek::fusion::p_ExprDenseTril(this)){ mosek::fusion::p_ExprDenseTril::_get_impl(this)->_initialize(_6451,_6452,_6453); }void mosek::fusion::p_ExprDenseTril::_initialize  (int _6451,    int _6452,    monty::rc_ptr< ::mosek::fusion::Expression > _6453){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ExprDenseTril::_initialize(_6451,_6452,_6453,(int)1);
    std::shared_ptr< monty::ndarray< int,1 > > _6454 = _6453->getShape();
    _checked_ptr_1<int> _ptr__6454(_6454 ? _6454->raw() : nullptr,_6454 ? _6454->size(0) : 0);
    if (((dim0 == dim1) || ((dim0 < (int)0) || ((dim0 >= (int)((_6454)->size(0))) || ((dim1 < (int)0) || ((dim1 >= (int)((_6454)->size(0))) || (_ptr__6454[dim0] != _ptr__6454[dim1])))))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid dimension definitions"));
      }
    }
    {}
  }
}void mosek::fusion::ExprDenseTril :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6455,monty::rc_ptr< ::mosek::fusion::WorkStack > _6456,monty::rc_ptr< ::mosek::fusion::WorkStack > _6457) { mosek::fusion::p_ExprDenseTril::_get_impl(this)->eval(_6455,_6456,_6457); }void mosek::fusion::p_ExprDenseTril::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6455,monty::rc_ptr< ::mosek::fusion::WorkStack > _6456,monty::rc_ptr< ::mosek::fusion::WorkStack > _6457){
  expr->eval(_6456,_6455,_6457);
  _6456->pop_expr();
  int _6458 = mosek::fusion::p_WorkStack::_get_impl(_6456)->nd;
  int _6459 = mosek::fusion::p_WorkStack::_get_impl(_6456)->nnz;
  int _6460 = mosek::fusion::p_WorkStack::_get_impl(_6456)->nelem;
  int _6461 = mosek::fusion::p_WorkStack::_get_impl(_6456)->ncodeatom;
  bool _6462 = mosek::fusion::p_WorkStack::_get_impl(_6456)->hassp;
  int _6463 = mosek::fusion::p_WorkStack::_get_impl(_6456)->shape_base;
  int _6464 = mosek::fusion::p_WorkStack::_get_impl(_6456)->ptr_base;
  int _6465 = mosek::fusion::p_WorkStack::_get_impl(_6456)->code_base;
  int _6466 = mosek::fusion::p_WorkStack::_get_impl(_6456)->codeptr_base;
  int _6467 = mosek::fusion::p_WorkStack::_get_impl(_6456)->cconst_base;
  int _6468 = mosek::fusion::p_WorkStack::_get_impl(_6456)->nidxs_base;
  int _6469 = mosek::fusion::p_WorkStack::_get_impl(_6456)->sp_base;
  int _6470 = mosek::fusion::p_WorkStack::_get_impl(_6456)->cof_base;
  std::shared_ptr< monty::ndarray< int,1 > > _6471 = mosek::fusion::p_WorkStack::_get_impl(_6456)->i32;
  _checked_ptr_1<int> _ptr__6471(_6471 ? _6471->raw() : nullptr,_6471 ? _6471->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6472 = mosek::fusion::p_WorkStack::_get_impl(_6456)->i64;
  _checked_ptr_1<long long> _ptr__6472(_6472 ? _6472->raw() : nullptr,_6472 ? _6472->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6473 = mosek::fusion::p_WorkStack::_get_impl(_6456)->f64;
  _checked_ptr_1<double> _ptr__6473(_6473 ? _6473->raw() : nullptr,_6473 ? _6473->size(0) : 0);
  int _11564;
  bool _11565 = (dim0 < dim1);
  if (_11565)
  {
    _11564 = dim0;
  }
  else
  {
    _11564 = dim1;
  }
  int _6474 = _11564;
  int _11566;
  bool _11567 = (dim0 > dim1);
  if (_11567)
  {
    _11566 = dim0;
  }
  else
  {
    _11566 = dim1;
  }
  int _6475 = _11566;
  bool _6476 = (dim0 < dim1);
  if (((dim0 == dim1) || ((dim0 < (int)0) || ((dim0 >= _6458) || ((dim1 < (int)0) || (dim1 >= _6458))))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid symmetry dimensions"));
    }
  }
  else if((_ptr__6471[safe_add( _6463,dim0 )] != _ptr__6471[safe_add( _6463,dim1 )]))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Not symmetric in given dimensions"));
    }
  }
  {}
  std::vector<int> _11568;
  for (int _6478 = (int)0, _11569 = (int)5; _6478 < _11569 ; ++_6478)
  {
    _11568.push_back((int)1);
  }
  auto _11570 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11568.size()),_11568.begin(),_11568.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _6477 = _11570;
  _checked_ptr_1<int> _ptr__6477(_6477 ? _6477->raw() : nullptr,_6477 ? _6477->size(0) : 0);
  int _11571 = (int)0;
  int _11572 = _6474;
  for (int _6479 = _11571; _6479 < _11572; ++_6479)
  {
    {
      _ptr__6477[(int)0] *= _ptr__6471[safe_add( _6463,_6479 )];
    }
  }
  _ptr__6477[(int)1] = _ptr__6471[safe_add( _6463,dim0 )];
  int _11573 = safe_add( _6474,(int)1 );
  int _11574 = _6475;
  for (int _6480 = _11573; _6480 < _11574; ++_6480)
  {
    {
      _ptr__6477[(int)2] *= _ptr__6471[safe_add( _6463,_6480 )];
    }
  }
  _ptr__6477[(int)3] = _ptr__6471[safe_add( _6463,dim1 )];
  int _11575 = safe_add( _6475,(int)1 );
  int _11576 = _6458;
  for (int _6481 = _11575; _6481 < _11576; ++_6481)
  {
    {
      _ptr__6477[(int)4] *= _ptr__6471[safe_add( _6463,_6481 )];
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _6482 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)5)));
  _checked_ptr_1<int> _ptr__6482(_6482 ? _6482->raw() : nullptr,_6482 ? _6482->size(0) : 0);
  _ptr__6482[(int)4] = (int)1;
  int _11577 = (int)1;
  int _11578 = (int)5;
  for (int _6483 = _11577; _6483 < _11578; ++_6483)
  {
    {
      _ptr__6482[(((int)5 - _6483) - (int)1)] = safe_mul( _ptr__6482[((int)5 - _6483)],_ptr__6477[((int)5 - _6483)] );
    }
  }
  int _6484 = (int)0;
  int _6485 = safe_mul( safe_mul( safe_mul( _ptr__6477[(int)0],_ptr__6477[(int)2] ),_ptr__6477[(int)4] ),(safe_mul( _ptr__6477[(int)1],safe_add( _ptr__6477[(int)1],(int)1 ) ) / (int)2) );
  int _6486 = (int)0;
  {
    if (_6462)
    {
      {
        int _6487 = _ptr__6477[(int)1];
        if (_6476)
        {
          {
            int _11579 = (int)0;
            int _11580 = _6460;
            for (int _6488 = _11579; _6488 < _11580; ++_6488)
            {
              {
                long long _6489 = ((_ptr__6472[safe_add( _6469,_6488 )] / _ptr__6482[(int)1]) % _6487);
                long long _6490 = ((_ptr__6472[safe_add( _6469,_6488 )] / _ptr__6482[(int)3]) % _6487);
                if ((_6489 >= _6490))
                {
                  {
                    _6484 += (_ptr__6471[safe_add( safe_add( _6464,_6488 ),(int)1 )] - _ptr__6471[safe_add( _6464,_6488 )]);
                    if ((_6461 > (int)0))
                    {
                      {
                        _6486 += (_ptr__6471[safe_add( _6466,_ptr__6471[safe_add( safe_add( _6464,_6488 ),(int)1 )] )] - _ptr__6471[safe_add( _6466,_ptr__6471[safe_add( _6464,_6488 )] )]);
                      }
                    }
                    {}
                  }
                }
                {}
              }
            }
          }
        }
        else
        {
          {
            int _11581 = (int)0;
            int _11582 = _6460;
            for (int _6491 = _11581; _6491 < _11582; ++_6491)
            {
              {
                long long _6492 = ((_ptr__6472[safe_add( _6469,_6491 )] / _ptr__6482[(int)1]) % _ptr__6477[(int)1]);
                long long _6493 = ((_ptr__6472[safe_add( _6469,_6491 )] / _ptr__6482[(int)3]) % _ptr__6477[(int)3]);
                if ((_6492 <= _6493))
                {
                  {
                    _6484 += (_ptr__6471[safe_add( safe_add( _6464,_6491 ),(int)1 )] - _ptr__6471[safe_add( _6464,_6491 )]);
                    if ((_6461 > (int)0))
                    {
                      {
                        _6486 += (_ptr__6471[safe_add( _6466,_ptr__6471[safe_add( safe_add( _6464,_6491 ),(int)1 )] )] - _ptr__6471[safe_add( _6466,_ptr__6471[safe_add( _6464,_6491 )] )]);
                      }
                    }
                    {}
                  }
                }
                {}
              }
            }
          }
        }
      }
    }
    else
    {
      {
        if (_6476)
        {
          {
            int _11583 = (int)0;
            int _11584 = _ptr__6477[(int)0];
            for (int _6494 = _11583; _6494 < _11584; ++_6494)
            {
              {
                int _11585 = (int)0;
                int _11586 = _ptr__6477[(int)1];
                for (int _6495 = _11585; _6495 < _11586; ++_6495)
                {
                  {
                    int _11587 = (int)0;
                    int _11588 = _ptr__6477[(int)2];
                    for (int _6496 = _11587; _6496 < _11588; ++_6496)
                    {
                      {
                        int _11589 = (int)0;
                        int _11590 = safe_add( _6495,(int)1 );
                        for (int _6497 = _11589; _6497 < _11590; ++_6497)
                        {
                          {
                            int _11591 = (int)0;
                            int _11592 = _ptr__6477[(int)4];
                            for (int _6498 = _11591; _6498 < _11592; ++_6498)
                            {
                              {
                                int _6499 = safe_add( safe_add( safe_add( safe_add( safe_mul( _6494,_ptr__6482[(int)0] ),safe_mul( _6495,_ptr__6482[(int)1] ) ),safe_mul( _6496,_ptr__6482[(int)2] ) ),safe_mul( _6497,_ptr__6482[(int)3] ) ),safe_mul( _6498,_ptr__6482[(int)4] ) );
                                _6484 += (_ptr__6471[safe_add( safe_add( _6464,_6499 ),(int)1 )] - _ptr__6471[safe_add( _6464,_6499 )]);
                                if ((_6461 > (int)0))
                                {
                                  {
                                    _6486 += (_ptr__6471[safe_add( _6466,_ptr__6471[safe_add( safe_add( _6464,_6499 ),(int)1 )] )] - _ptr__6471[safe_add( _6466,_ptr__6471[safe_add( _6464,_6499 )] )]);
                                  }
                                }
                                {}
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
          {
            int _11593 = (int)0;
            int _11594 = _ptr__6477[(int)0];
            for (int _6500 = _11593; _6500 < _11594; ++_6500)
            {
              {
                int _11595 = (int)0;
                int _11596 = _ptr__6477[(int)1];
                for (int _6501 = _11595; _6501 < _11596; ++_6501)
                {
                  {
                    int _11597 = (int)0;
                    int _11598 = _ptr__6477[(int)2];
                    for (int _6502 = _11597; _6502 < _11598; ++_6502)
                    {
                      {
                        int _11599 = _6501;
                        int _11600 = _ptr__6477[(int)3];
                        for (int _6503 = _11599; _6503 < _11600; ++_6503)
                        {
                          {
                            int _11601 = (int)0;
                            int _11602 = _ptr__6477[(int)4];
                            for (int _6504 = _11601; _6504 < _11602; ++_6504)
                            {
                              {
                                int _6505 = safe_add( safe_add( safe_add( safe_add( safe_mul( _6500,_ptr__6482[(int)0] ),safe_mul( _6501,_ptr__6482[(int)1] ) ),safe_mul( _6502,_ptr__6482[(int)2] ) ),safe_mul( _6503,_ptr__6482[(int)3] ) ),safe_mul( _6504,_ptr__6482[(int)4] ) );
                                _6484 += (_ptr__6471[safe_add( safe_add( _6464,_6505 ),(int)1 )] - _ptr__6471[safe_add( _6464,_6505 )]);
                                if ((_6461 > (int)0))
                                {
                                  {
                                    _6486 += (_ptr__6471[safe_add( _6466,_ptr__6471[safe_add( safe_add( _6464,_6505 ),(int)1 )] )] - _ptr__6471[safe_add( _6466,_ptr__6471[safe_add( _6464,_6505 )] )]);
                                  }
                                }
                                {}
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  int _6506 = (safe_mul( safe_mul( safe_mul( safe_mul( _ptr__6477[(int)0],_ptr__6477[(int)2] ),_ptr__6477[(int)4] ),_ptr__6477[(int)1] ),safe_add( _ptr__6477[(int)1],(int)1 ) ) / (int)2);
  _6455->alloc_expr(_6458,_6485,_6484,true,_6486);
  int _6507 = mosek::fusion::p_WorkStack::_get_impl(_6455)->ptr_base;
  int _6508 = mosek::fusion::p_WorkStack::_get_impl(_6455)->shape_base;
  int _6509 = mosek::fusion::p_WorkStack::_get_impl(_6455)->nidxs_base;
  int _6510 = mosek::fusion::p_WorkStack::_get_impl(_6455)->sp_base;
  int _6511 = mosek::fusion::p_WorkStack::_get_impl(_6455)->cof_base;
  int _6512 = mosek::fusion::p_WorkStack::_get_impl(_6455)->code_base;
  int _6513 = mosek::fusion::p_WorkStack::_get_impl(_6455)->codeptr_base;
  int _6514 = mosek::fusion::p_WorkStack::_get_impl(_6455)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _6515 = mosek::fusion::p_WorkStack::_get_impl(_6455)->i32;
  _checked_ptr_1<int> _ptr__6515(_6515 ? _6515->raw() : nullptr,_6515 ? _6515->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6516 = mosek::fusion::p_WorkStack::_get_impl(_6455)->i64;
  _checked_ptr_1<long long> _ptr__6516(_6516 ? _6516->raw() : nullptr,_6516 ? _6516->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6517 = mosek::fusion::p_WorkStack::_get_impl(_6455)->f64;
  _checked_ptr_1<double> _ptr__6517(_6517 ? _6517->raw() : nullptr,_6517 ? _6517->size(0) : 0);
  _ptr__6515[_6507] = (int)0;
  if ((_6486 > (int)0))
  {
    {
      _ptr__6515[_6513] = (int)0;
    }
  }
  {}
  int _11603 = (int)0;
  int _11604 = _6458;
  for (int _6518 = _11603; _6518 < _11604; ++_6518)
  {
    {
      _ptr__6515[safe_add( _6508,_6518 )] = _ptr__6471[safe_add( _6463,_6518 )];
    }
  }
  if (_6476)
  {
    {
      int _6519 = (int)0;
      int _11605 = (int)0;
      int _11606 = _ptr__6477[(int)0];
      for (int _6520 = _11605; _6520 < _11606; ++_6520)
      {
        {
          int _11607 = (int)0;
          int _11608 = _ptr__6477[(int)1];
          for (int _6521 = _11607; _6521 < _11608; ++_6521)
          {
            {
              int _11609 = (int)0;
              int _11610 = _ptr__6477[(int)2];
              for (int _6522 = _11609; _6522 < _11610; ++_6522)
              {
                {
                  int _11611 = (int)0;
                  int _11612 = safe_add( _6521,(int)1 );
                  for (int _6523 = _11611; _6523 < _11612; ++_6523)
                  {
                    {
                      int _11613 = (int)0;
                      int _11614 = _ptr__6477[(int)4];
                      for (int _6524 = _11613; _6524 < _11614; ++_6524)
                      {
                        {
                          _ptr__6516[safe_add( _6510,_6519 )] = safe_add( safe_add( safe_add( safe_add( safe_mul( _6520,_ptr__6482[(int)0] ),safe_mul( _6521,_ptr__6482[(int)1] ) ),safe_mul( _6522,_ptr__6482[(int)2] ) ),safe_mul( _6523,_ptr__6482[(int)3] ) ),safe_mul( _6524,_ptr__6482[(int)4] ) );
                          ++ _6519;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if ((_6519 != _6485))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid nelem"));
        }
      }
      {}
    }
  }
  else
  {
    {
      int _6525 = (int)0;
      int _11615 = (int)0;
      int _11616 = _ptr__6477[(int)0];
      for (int _6526 = _11615; _6526 < _11616; ++_6526)
      {
        {
          int _11617 = (int)0;
          int _11618 = _ptr__6477[(int)1];
          for (int _6527 = _11617; _6527 < _11618; ++_6527)
          {
            {
              int _11619 = (int)0;
              int _11620 = _ptr__6477[(int)2];
              for (int _6528 = _11619; _6528 < _11620; ++_6528)
              {
                {
                  int _11621 = _6527;
                  int _11622 = _ptr__6477[(int)3];
                  for (int _6529 = _11621; _6529 < _11622; ++_6529)
                  {
                    {
                      int _11623 = (int)0;
                      int _11624 = _ptr__6477[(int)4];
                      for (int _6530 = _11623; _6530 < _11624; ++_6530)
                      {
                        {
                          _ptr__6516[safe_add( _6510,_6525 )] = safe_add( safe_add( safe_add( safe_add( safe_mul( _6526,_ptr__6482[(int)0] ),safe_mul( _6527,_ptr__6482[(int)1] ) ),safe_mul( _6528,_ptr__6482[(int)2] ) ),safe_mul( _6529,_ptr__6482[(int)3] ) ),safe_mul( _6530,_ptr__6482[(int)4] ) );
                          ++ _6525;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if ((_6525 != _6485))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid nelem"));
        }
      }
      {}
    }
  }
  {
    int _6531 = (int)0;
    int _6532 = (int)0;
    if (_6462)
    {
      {
        int _6533 = (int)0;
        int _6534 = (int)0;
        while ( ((_6534 < _6460) && (_6533 < _6506)) )
        {
          {
            if ((_ptr__6472[safe_add( _6469,_6534 )] < _ptr__6516[safe_add( _6510,_6533 )]))
            {
              {
                ++ _6534;
              }
            }
            else if((_ptr__6472[safe_add( _6469,_6534 )] > _ptr__6516[safe_add( _6510,_6533 )]))
            {
              {
                _ptr__6515[safe_add( safe_add( _6507,_6533 ),(int)1 )] = _6531;
                ++ _6533;
              }
            }
            else
            {
              {
                int _11625 = _ptr__6471[safe_add( _6464,_6534 )];
                int _11626 = _ptr__6471[safe_add( safe_add( _6464,_6534 ),(int)1 )];
                for (int _6535 = _11625; _6535 < _11626; ++_6535)
                {
                  {
                    _ptr__6516[safe_add( _6509,_6531 )] = _ptr__6472[safe_add( _6468,_6535 )];
                    _ptr__6517[safe_add( _6511,_6531 )] = _ptr__6473[safe_add( _6470,_6535 )];
                    if ((_6486 > (int)0))
                    {
                      {
                        int _11627 = _ptr__6471[safe_add( _6466,_6535 )];
                        int _11628 = _ptr__6471[safe_add( safe_add( _6466,_6535 ),(int)1 )];
                        for (int _6536 = _11627; _6536 < _11628; ++_6536)
                        {
                          {
                            _ptr__6515[safe_add( _6512,_6532 )] = _ptr__6471[safe_add( _6465,_6536 )];
                            _ptr__6517[safe_add( _6514,_6532 )] = _ptr__6473[safe_add( _6467,_6536 )];
                            ++ _6532;
                          }
                        }
                        _ptr__6515[safe_add( safe_add( _6513,_6531 ),(int)1 )] = _6532;
                      }
                    }
                    {}
                    ++ _6531;
                  }
                }
                _ptr__6515[safe_add( safe_add( _6507,_6533 ),(int)1 )] = _6531;
                ++ _6534;
                ++ _6533;
              }
            }
          }
        }
        while ( (_6533 < _6506) )
        {
          {
            _ptr__6515[safe_add( safe_add( _6507,_6533 ),(int)1 )] = _6531;
            ++ _6533;
          }
        }
      }
    }
    else
    {
      {
        int _11629 = (int)0;
        int _11630 = _6506;
        for (int _6537 = _11629; _6537 < _11630; ++_6537)
        {
          {
            long long _6538 = _ptr__6516[safe_add( _6510,_6537 )];
            int _11631 = _ptr__6471[safe_add( _6464,_6538 )];
            int _11632 = _ptr__6471[safe_add( safe_add( _6464,_6538 ),(int)1 )];
            for (int _6539 = _11631; _6539 < _11632; ++_6539)
            {
              {
                _ptr__6516[safe_add( _6509,_6531 )] = _ptr__6472[safe_add( _6468,_6539 )];
                _ptr__6517[safe_add( _6511,_6531 )] = _ptr__6473[safe_add( _6470,_6539 )];
                if ((_6486 > (int)0))
                {
                  {
                    int _11633 = _ptr__6471[safe_add( _6466,_6539 )];
                    int _11634 = _ptr__6471[safe_add( safe_add( _6466,_6539 ),(int)1 )];
                    for (int _6540 = _11633; _6540 < _11634; ++_6540)
                    {
                      {
                        _ptr__6515[safe_add( _6512,_6532 )] = _ptr__6471[safe_add( _6465,_6540 )];
                        _ptr__6517[safe_add( _6514,_6532 )] = _ptr__6473[safe_add( _6467,_6540 )];
                        ++ _6532;
                      }
                    }
                    _ptr__6515[safe_add( safe_add( _6513,_6531 ),(int)1 )] = _6532;
                  }
                }
                {}
                ++ _6531;
              }
            }
            _ptr__6515[safe_add( safe_add( _6507,_6537 ),(int)1 )] = _6531;
          }
        }
      }
    }
    if ((_6531 != _6484))
    {
      {
        throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid nnz"));
      }
    }
    {}
  }
}
std::string mosek::fusion::ExprDenseTril :: toString() { return mosek::fusion::p_ExprDenseTril::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprDenseTril::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprDenseTril(symdim=("))->__mosek_2fusion_2Utils_2StringBuffer__a(dim0)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(dim1)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("),"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprDenseTril::destroy(){expr.reset();}void mosek::fusion::ExprDenseTril::destroy() { mosek::fusion::p_ExprDenseTril::_get_impl(this)->destroy(); }mosek::fusion::ExprDense::ExprDense(mosek::fusion::p_ExprDense *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprDense()" << this << std::endl; */ }mosek::fusion::ExprDense::~ExprDense() {  /* std::cout << "~ExprDense()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprDense::p_ExprDense  (::mosek::fusion::ExprDense * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprDense::t mosek::fusion::p_ExprDense::_new_ExprDense  (monty::rc_ptr< ::mosek::fusion::Expression > _6541){ return new mosek::fusion::ExprDense(_6541); }mosek::fusion::ExprDense::ExprDense  (monty::rc_ptr< ::mosek::fusion::Expression > _6541) :    ExprDense(new mosek::fusion::p_ExprDense(this)){ mosek::fusion::p_ExprDense::_get_impl(this)->_initialize(_6541); }void mosek::fusion::p_ExprDense::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _6541){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_6541->getShape());
    mosek::fusion::p_ExprDense::_get_impl(::mosek::fusion::ExprDense::t(_pubthis))->expr = _6541;
  }
}void mosek::fusion::ExprDense :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6542,monty::rc_ptr< ::mosek::fusion::WorkStack > _6543,monty::rc_ptr< ::mosek::fusion::WorkStack > _6544) { mosek::fusion::p_ExprDense::_get_impl(this)->eval(_6542,_6543,_6544); }void mosek::fusion::p_ExprDense::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6542,monty::rc_ptr< ::mosek::fusion::WorkStack > _6543,monty::rc_ptr< ::mosek::fusion::WorkStack > _6544){
  expr->eval(_6543,_6542,_6544);
  _6543->pop_expr();
  int _6545 = mosek::fusion::p_WorkStack::_get_impl(_6543)->nd;
  int _6546 = mosek::fusion::p_WorkStack::_get_impl(_6543)->nnz;
  int _6547 = mosek::fusion::p_WorkStack::_get_impl(_6543)->nelem;
  int _6548 = mosek::fusion::p_WorkStack::_get_impl(_6543)->ncodeatom;
  bool _6549 = mosek::fusion::p_WorkStack::_get_impl(_6543)->hassp;
  int _6550 = mosek::fusion::p_WorkStack::_get_impl(_6543)->shape_base;
  int _6551 = mosek::fusion::p_WorkStack::_get_impl(_6543)->ptr_base;
  int _6552 = mosek::fusion::p_WorkStack::_get_impl(_6543)->nidxs_base;
  int _6553 = mosek::fusion::p_WorkStack::_get_impl(_6543)->cof_base;
  int _6554 = mosek::fusion::p_WorkStack::_get_impl(_6543)->sp_base;
  int _6555 = mosek::fusion::p_WorkStack::_get_impl(_6543)->codeptr_base;
  int _6556 = mosek::fusion::p_WorkStack::_get_impl(_6543)->code_base;
  int _6557 = mosek::fusion::p_WorkStack::_get_impl(_6543)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _6558 = mosek::fusion::p_WorkStack::_get_impl(_6543)->i32;
  _checked_ptr_1<int> _ptr__6558(_6558 ? _6558->raw() : nullptr,_6558 ? _6558->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6559 = mosek::fusion::p_WorkStack::_get_impl(_6543)->i64;
  _checked_ptr_1<long long> _ptr__6559(_6559 ? _6559->raw() : nullptr,_6559 ? _6559->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6560 = mosek::fusion::p_WorkStack::_get_impl(_6543)->f64;
  _checked_ptr_1<double> _ptr__6560(_6560 ? _6560->raw() : nullptr,_6560 ? _6560->size(0) : 0);
  int _6561 = (int)1;
  if (_6549)
  {
    {
      bool _6562 = true;
      int _11635 = (int)0;
      int _11636 = _6545;
      for (int _6563 = _11635; _6563 < _11636; ++_6563)
      {
        {
          int _6564 = safe_mul( _6561,_ptr__6558[safe_add( _6550,_6563 )] );
          _6562 = (_6562 && ((_ptr__6558[safe_add( _6550,_6563 )] == (int)0) || ((_6564 / _ptr__6558[safe_add( _6550,_6563 )]) == _6561)));
          _6561 = _6564;
        }
      }
      if ((!_6562))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("The domain is too large"));
        }
      }
      {}
    }
  }
  else
  {
    {
      _6561 = _6547;
    }
  }
  _6542->alloc_expr(_6545,_6561,_6546,false,_6548);
  int _6565 = mosek::fusion::p_WorkStack::_get_impl(_6542)->shape_base;
  int _6566 = mosek::fusion::p_WorkStack::_get_impl(_6542)->ptr_base;
  int _6567 = mosek::fusion::p_WorkStack::_get_impl(_6542)->nidxs_base;
  int _6568 = mosek::fusion::p_WorkStack::_get_impl(_6542)->cof_base;
  int _6569 = mosek::fusion::p_WorkStack::_get_impl(_6542)->codeptr_base;
  int _6570 = mosek::fusion::p_WorkStack::_get_impl(_6542)->code_base;
  int _6571 = mosek::fusion::p_WorkStack::_get_impl(_6542)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _6572 = mosek::fusion::p_WorkStack::_get_impl(_6542)->i32;
  _checked_ptr_1<int> _ptr__6572(_6572 ? _6572->raw() : nullptr,_6572 ? _6572->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6573 = mosek::fusion::p_WorkStack::_get_impl(_6542)->i64;
  _checked_ptr_1<long long> _ptr__6573(_6573 ? _6573->raw() : nullptr,_6573 ? _6573->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6574 = mosek::fusion::p_WorkStack::_get_impl(_6542)->f64;
  _checked_ptr_1<double> _ptr__6574(_6574 ? _6574->raw() : nullptr,_6574 ? _6574->size(0) : 0);
  {
    int _11637 = (int)0;
    int _11638 = _6545;
    for (int _6575 = _11637; _6575 < _11638; ++_6575)
    {
      {
        _ptr__6572[safe_add( _6565,_6575 )] = _ptr__6558[safe_add( _6550,_6575 )];
      }
    }
    int _11639 = (int)0;
    int _11640 = _6546;
    for (int _6576 = _11639; _6576 < _11640; ++_6576)
    {
      {
        _ptr__6573[safe_add( _6567,_6576 )] = _ptr__6559[safe_add( _6552,_6576 )];
      }
    }
    int _11641 = (int)0;
    int _11642 = _6546;
    for (int _6577 = _11641; _6577 < _11642; ++_6577)
    {
      {
        _ptr__6574[safe_add( _6568,_6577 )] = _ptr__6560[safe_add( _6553,_6577 )];
      }
    }
    if ((_6548 > (int)0))
    {
      {
        int _11643 = (int)0;
        int _11644 = safe_add( _6546,(int)1 );
        for (int _6578 = _11643; _6578 < _11644; ++_6578)
        {
          {
            _ptr__6572[safe_add( _6569,_6578 )] = _ptr__6558[safe_add( _6555,_6578 )];
          }
        }
        int _11645 = (int)0;
        int _11646 = _6548;
        for (int _6579 = _11645; _6579 < _11646; ++_6579)
        {
          {
            _ptr__6572[safe_add( _6570,_6579 )] = _ptr__6558[safe_add( _6556,_6579 )];
          }
        }
        int _11647 = (int)0;
        int _11648 = _6548;
        for (int _6580 = _11647; _6580 < _11648; ++_6580)
        {
          {
            _ptr__6574[safe_add( _6571,_6580 )] = _ptr__6560[safe_add( _6557,_6580 )];
          }
        }
      }
    }
    {}
    if ((!_6549))
    {
      {
        int _11649 = (int)0;
        int _11650 = safe_add( _6561,(int)1 );
        for (int _6581 = _11649; _6581 < _11650; ++_6581)
        {
          {
            _ptr__6572[safe_add( _6566,_6581 )] = _ptr__6558[safe_add( _6551,_6581 )];
          }
        }
      }
    }
    else
    {
      {
        int _11651 = (int)0;
        int _11652 = safe_add( _6561,(int)1 );
        for (int _6582 = _11651; _6582 < _11652; ++_6582)
        {
          {
            _ptr__6572[safe_add( _6566,_6582 )] = (int)0;
          }
        }
        int _11653 = (int)0;
        int _11654 = _6547;
        for (int _6583 = _11653; _6583 < _11654; ++_6583)
        {
          {
            _ptr__6572[safe_add( safe_add( _6566,_ptr__6559[safe_add( _6554,_6583 )] ),(int)1 )] = (_ptr__6558[safe_add( safe_add( _6551,_6583 ),(int)1 )] - _ptr__6558[safe_add( _6551,_6583 )]);
          }
        }
        int _11655 = (int)0;
        int _11656 = _6561;
        for (int _6584 = _11655; _6584 < _11656; ++_6584)
        {
          {
            _ptr__6572[safe_add( safe_add( _6566,_6584 ),(int)1 )] += _ptr__6572[safe_add( _6566,_6584 )];
          }
        }
      }
    }
  }
}
std::string mosek::fusion::ExprDense :: toString() { return mosek::fusion::p_ExprDense::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprDense::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprDense("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprDense::destroy(){expr.reset();}void mosek::fusion::ExprDense::destroy() { mosek::fusion::p_ExprDense::_get_impl(this)->destroy(); }mosek::fusion::ExprSymmetrize::ExprSymmetrize(mosek::fusion::p_ExprSymmetrize *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprSymmetrize()" << this << std::endl; */ }mosek::fusion::ExprSymmetrize::~ExprSymmetrize() {  /* std::cout << "~ExprSymmetrize()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprSymmetrize::p_ExprSymmetrize  (::mosek::fusion::ExprSymmetrize * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprSymmetrize::t mosek::fusion::p_ExprSymmetrize::_new_ExprSymmetrize  (int _6585,    int _6586,    monty::rc_ptr< ::mosek::fusion::Expression > _6587,    int _6588){ return new mosek::fusion::ExprSymmetrize(_6585,_6586,_6587,_6588); }mosek::fusion::ExprSymmetrize::ExprSymmetrize  (int _6585,    int _6586,    monty::rc_ptr< ::mosek::fusion::Expression > _6587,    int _6588) :    ExprSymmetrize(new mosek::fusion::p_ExprSymmetrize(this)){ mosek::fusion::p_ExprSymmetrize::_get_impl(this)->_initialize(_6585,_6586,_6587,_6588); }void mosek::fusion::p_ExprSymmetrize::_initialize  (int _6585,    int _6586,    monty::rc_ptr< ::mosek::fusion::Expression > _6587,    int _6588){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_6587->getShape());
    mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->expr = _6587;
    if ((_6585 < _6586))
    {
      {
        mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->dim0 = _6585;
        mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->dim1 = _6586;
      }
    }
    else
    {
      {
        mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->dim0 = _6586;
        mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->dim1 = _6585;
      }
    }
  }
}mosek::fusion::ExprSymmetrize::t mosek::fusion::p_ExprSymmetrize::_new_ExprSymmetrize  (int _6589,    int _6590,    monty::rc_ptr< ::mosek::fusion::Expression > _6591){ return new mosek::fusion::ExprSymmetrize(_6589,_6590,_6591); }mosek::fusion::ExprSymmetrize::ExprSymmetrize  (int _6589,    int _6590,    monty::rc_ptr< ::mosek::fusion::Expression > _6591) :    ExprSymmetrize(new mosek::fusion::p_ExprSymmetrize(this)){ mosek::fusion::p_ExprSymmetrize::_get_impl(this)->_initialize(_6589,_6590,_6591); }void mosek::fusion::p_ExprSymmetrize::_initialize  (int _6589,    int _6590,    monty::rc_ptr< ::mosek::fusion::Expression > _6591){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ExprSymmetrize::_initialize(_6589,_6590,_6591,(int)1);
    std::shared_ptr< monty::ndarray< int,1 > > _6592 = _6591->getShape();
    _checked_ptr_1<int> _ptr__6592(_6592 ? _6592->raw() : nullptr,_6592 ? _6592->size(0) : 0);
    if (((dim0 < (int)0) || ((dim0 == dim1) || ((dim1 >= (int)((_6592)->size(0))) || (_ptr__6592[dim0] != _ptr__6592[dim1])))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid dimension definitions"));
      }
    }
    {}
  }
}void mosek::fusion::ExprSymmetrize :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6593,monty::rc_ptr< ::mosek::fusion::WorkStack > _6594,monty::rc_ptr< ::mosek::fusion::WorkStack > _6595) { mosek::fusion::p_ExprSymmetrize::_get_impl(this)->eval(_6593,_6594,_6595); }void mosek::fusion::p_ExprSymmetrize::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6593,monty::rc_ptr< ::mosek::fusion::WorkStack > _6594,monty::rc_ptr< ::mosek::fusion::WorkStack > _6595){
  expr->eval(_6594,_6593,_6595);
  _6594->pop_expr();
  int _6596 = (int)0;
  int _6597 = mosek::fusion::p_WorkStack::_get_impl(_6594)->nd;
  int _6598 = mosek::fusion::p_WorkStack::_get_impl(_6594)->nnz;
  int _6599 = mosek::fusion::p_WorkStack::_get_impl(_6594)->nelem;
  int _6600 = mosek::fusion::p_WorkStack::_get_impl(_6594)->ncodeatom;
  bool _6601 = mosek::fusion::p_WorkStack::_get_impl(_6594)->hassp;
  int _6602 = mosek::fusion::p_WorkStack::_get_impl(_6594)->shape_base;
  int _6603 = mosek::fusion::p_WorkStack::_get_impl(_6594)->ptr_base;
  int _6604 = mosek::fusion::p_WorkStack::_get_impl(_6594)->code_base;
  int _6605 = mosek::fusion::p_WorkStack::_get_impl(_6594)->codeptr_base;
  int _6606 = mosek::fusion::p_WorkStack::_get_impl(_6594)->cconst_base;
  int _6607 = mosek::fusion::p_WorkStack::_get_impl(_6594)->nidxs_base;
  int _6608 = mosek::fusion::p_WorkStack::_get_impl(_6594)->sp_base;
  int _6609 = mosek::fusion::p_WorkStack::_get_impl(_6594)->cof_base;
  std::shared_ptr< monty::ndarray< int,1 > > _6610 = mosek::fusion::p_WorkStack::_get_impl(_6594)->i32;
  _checked_ptr_1<int> _ptr__6610(_6610 ? _6610->raw() : nullptr,_6610 ? _6610->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6611 = mosek::fusion::p_WorkStack::_get_impl(_6594)->i64;
  _checked_ptr_1<long long> _ptr__6611(_6611 ? _6611->raw() : nullptr,_6611 ? _6611->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6612 = mosek::fusion::p_WorkStack::_get_impl(_6594)->f64;
  _checked_ptr_1<double> _ptr__6612(_6612 ? _6612->raw() : nullptr,_6612 ? _6612->size(0) : 0);
  int _11657 = (int)0;
  int _11658 = _6597;
  for (int _6613 = _11657; _6613 < _11658; ++_6613)
  {
    {
      int _6614 = _ptr__6610[safe_add( _6602,_6613 )];
      if ((_6614 > _6596))
      {
        {
          _6596 = _6614;
        }
      }
      {}
    }
  }
  int _6615 = _6595->alloci32(_6599);
  int _6616 = _6595->alloci32(_6599);
  int _6617 = _6595->alloci32(safe_add( _6596,(int)1 ));
  int _6618 = _6595->alloci64(_6599);
  std::shared_ptr< monty::ndarray< int,1 > > _6619 = mosek::fusion::p_WorkStack::_get_impl(_6595)->i32;
  _checked_ptr_1<int> _ptr__6619(_6619 ? _6619->raw() : nullptr,_6619 ? _6619->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6620 = mosek::fusion::p_WorkStack::_get_impl(_6595)->i64;
  _checked_ptr_1<long long> _ptr__6620(_6620 ? _6620->raw() : nullptr,_6620 ? _6620->size(0) : 0);
  int _6621 = (int)0;
  int _6622 = (int)0;
  int _6623 = (int)0;
  std::vector<int> _11659;
  for (int _6625 = (int)0, _11660 = (int)5; _6625 < _11660 ; ++_6625)
  {
    _11659.push_back((int)1);
  }
  auto _11661 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11659.size()),_11659.begin(),_11659.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _6624 = _11661;
  _checked_ptr_1<int> _ptr__6624(_6624 ? _6624->raw() : nullptr,_6624 ? _6624->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6626 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)5)));
  _checked_ptr_1<long long> _ptr__6626(_6626 ? _6626->raw() : nullptr,_6626 ? _6626->size(0) : 0);
  int _11662 = (int)0;
  int _11663 = dim0;
  for (int _6627 = _11662; _6627 < _11663; ++_6627)
  {
    {
      _ptr__6624[(int)0] *= _ptr__6610[safe_add( _6602,_6627 )];
    }
  }
  _ptr__6624[(int)1] = _ptr__6610[safe_add( _6602,dim0 )];
  int _11664 = safe_add( dim0,(int)1 );
  int _11665 = dim1;
  for (int _6628 = _11664; _6628 < _11665; ++_6628)
  {
    {
      _ptr__6624[(int)2] *= _ptr__6610[safe_add( _6602,_6628 )];
    }
  }
  _ptr__6624[(int)3] = _ptr__6610[safe_add( _6602,dim1 )];
  int _11666 = safe_add( dim1,(int)1 );
  int _11667 = _6597;
  for (int _6629 = _11666; _6629 < _11667; ++_6629)
  {
    {
      _ptr__6624[(int)4] *= _ptr__6610[safe_add( _6602,_6629 )];
    }
  }
  _ptr__6626[(int)4] = (int)1;
  int _11668 = (int)1;
  int _11669 = (int)5;
  for (int _6630 = _11668; _6630 < _11669; ++_6630)
  {
    {
      _ptr__6626[(((int)5 - _6630) - (int)1)] = safe_mul( _ptr__6626[((int)5 - _6630)],_ptr__6624[((int)5 - _6630)] );
    }
  }
  if (_6601)
  {
    {
      int _6631 = _6615;
      int _11670 = (int)0;
      int _11671 = _6599;
      for (int _6632 = _11670; _6632 < _11671; ++_6632)
      {
        {
          _ptr__6619[safe_add( _6631,_6632 )] = _6632;
        }
      }
      int _6633 = _6616;
      std::shared_ptr< monty::ndarray< int,1 > > _6634 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((int)2),(int)((int)3),(int)((int)0)});
      _checked_ptr_1<int> _ptr__6634(_6634 ? _6634->raw() : nullptr,_6634 ? _6634->size(0) : 0);
      int _11672 = (int)0;
      int _11673 = (int)4;
      for (int _6635 = _11672; _6635 < _11673; ++_6635)
      {
        {
          long long _6636 = _ptr__6626[_ptr__6634[_6635]];
          int _6637 = _ptr__6624[_ptr__6634[_6635]];
          if ((_6637 > (int)1))
          {
            {
              int _11674 = (int)0;
              int _11675 = safe_add( _6637,(int)1 );
              for (int _6638 = _11674; _6638 < _11675; ++_6638)
              {
                {
                  _ptr__6619[safe_add( _6617,_6638 )] = (int)0;
                }
              }
              int _11676 = (int)0;
              int _11677 = _6599;
              for (int _6639 = _11676; _6639 < _11677; ++_6639)
              {
                {
                  ++ _ptr__6619[safe_add( safe_add( _6617,((_ptr__6611[safe_add( _6608,_ptr__6619[safe_add( _6631,_6639 )] )] / _6636) % _6637) ),(int)1 )];
                }
              }
              int _11678 = (int)0;
              int _11679 = _ptr__6624[(int)3];
              for (int _6640 = _11678; _6640 < _11679; ++_6640)
              {
                {
                  _ptr__6619[safe_add( safe_add( _6617,_6640 ),(int)1 )] += _ptr__6619[safe_add( _6617,_6640 )];
                }
              }
              int _11680 = (int)0;
              int _11681 = _6599;
              for (int _6641 = _11680; _6641 < _11681; ++_6641)
              {
                {
                  int _6642 = _ptr__6619[safe_add( _6631,_6641 )];
                  long long _6643 = ((_ptr__6611[safe_add( _6608,_6642 )] / _6636) % _6637);
                  _ptr__6619[safe_add( _6633,_ptr__6619[safe_add( _6617,_6643 )] )] = _6642;
                  ++ _ptr__6619[safe_add( _6617,_6643 )];
                }
              }
              int _6644 = _6631;
              _6631 = _6633;
              _6633 = _6644;
            }
          }
          {}
        }
      }
      int _11682 = (int)0;
      int _11683 = _6599;
      for (int _6645 = _11682; _6645 < _11683; ++_6645)
      {
        {
          _ptr__6620[safe_add( _6618,_6645 )] = safe_add( safe_add( safe_add( safe_add( safe_mul( ((_ptr__6611[safe_add( _6608,_6645 )] / _ptr__6626[(int)0]) % _ptr__6624[(int)0]),_ptr__6626[(int)0] ),safe_mul( ((_ptr__6611[safe_add( _6608,_6645 )] / _ptr__6626[(int)1]) % _ptr__6624[(int)1]),_ptr__6626[(int)3] ) ),safe_mul( ((_ptr__6611[safe_add( _6608,_6645 )] / _ptr__6626[(int)2]) % _ptr__6624[(int)2]),_ptr__6626[(int)2] ) ),safe_mul( ((_ptr__6611[safe_add( _6608,_6645 )] / _ptr__6626[(int)3]) % _ptr__6624[(int)3]),_ptr__6626[(int)1] ) ),safe_mul( ((_ptr__6611[safe_add( _6608,_6645 )] / _ptr__6626[(int)4]) % _ptr__6624[(int)4]),_ptr__6626[(int)4] ) );
        }
      }
      {
        int _6646 = (int)0;
        int _6647 = (int)0;
        while ( ((_6647 < _6599) || (_6646 < _6599)) )
        {
          {
            int _6648 = _ptr__6619[safe_add( _6631,_6646 )];
            if (((_6647 < _6599) && ((_6646 == _6599) || (_ptr__6611[safe_add( _6608,_6647 )] < _ptr__6620[safe_add( _6618,_6648 )]))))
            {
              {
                _6622 += (_ptr__6610[safe_add( safe_add( _6603,_6647 ),(int)1 )] - _ptr__6610[safe_add( _6603,_6647 )]);
                if ((_6600 > (int)0))
                {
                  {
                    _6623 += safe_add( (_ptr__6610[safe_add( _6605,_ptr__6610[safe_add( safe_add( _6603,_6647 ),(int)1 )] )] - _ptr__6610[safe_add( _6605,_ptr__6610[safe_add( _6603,_6647 )] )]),safe_mul( (int)2,(_ptr__6610[safe_add( safe_add( _6603,_6647 ),(int)1 )] - _ptr__6610[safe_add( _6603,_6647 )]) ) );
                  }
                }
                {}
                ++ _6621;
                ++ _6647;
              }
            }
            else if(((_6646 < _6599) && ((_6647 == _6599) || (_ptr__6611[safe_add( _6608,_6647 )] > _ptr__6620[safe_add( _6618,_6648 )]))))
            {
              {
                _6622 += (_ptr__6610[safe_add( safe_add( _6603,_6648 ),(int)1 )] - _ptr__6610[safe_add( _6603,_6648 )]);
                if ((_6600 > (int)0))
                {
                  {
                    _6623 += safe_add( (_ptr__6610[safe_add( _6605,_ptr__6610[safe_add( safe_add( _6603,_6648 ),(int)1 )] )] - _ptr__6610[safe_add( _6605,_ptr__6610[safe_add( _6603,_6648 )] )]),safe_mul( (int)2,(_ptr__6610[safe_add( safe_add( _6603,_6648 ),(int)1 )] - _ptr__6610[safe_add( _6603,_6648 )]) ) );
                  }
                }
                {}
                ++ _6621;
                ++ _6646;
              }
            }
            else if((_ptr__6611[safe_add( _6608,_6647 )] != _ptr__6620[safe_add( _6618,_6648 )]))
            {
              {
                _6622 += (_ptr__6610[safe_add( safe_add( _6603,_6647 ),(int)1 )] - _ptr__6610[safe_add( _6603,_6647 )]);
                _6622 += (_ptr__6610[safe_add( safe_add( _6603,_6648 ),(int)1 )] - _ptr__6610[safe_add( _6603,_6648 )]);
                if ((_6600 > (int)0))
                {
                  {
                    _6623 += safe_add( (_ptr__6610[safe_add( _6605,_ptr__6610[safe_add( safe_add( _6603,_6647 ),(int)1 )] )] - _ptr__6610[safe_add( _6605,_ptr__6610[safe_add( _6603,_6647 )] )]),safe_mul( (int)2,(_ptr__6610[safe_add( safe_add( _6603,_6647 ),(int)1 )] - _ptr__6610[safe_add( _6603,_6647 )]) ) );
                    _6623 += safe_add( (_ptr__6610[safe_add( _6605,_ptr__6610[safe_add( safe_add( _6603,_6648 ),(int)1 )] )] - _ptr__6610[safe_add( _6605,_ptr__6610[safe_add( _6603,_6648 )] )]),safe_mul( (int)2,(_ptr__6610[safe_add( safe_add( _6603,_6648 ),(int)1 )] - _ptr__6610[safe_add( _6603,_6648 )]) ) );
                  }
                }
                {}
                ++ _6621;
                ++ _6646;
                ++ _6647;
              }
            }
            else
            {
              {
                _6622 += (_ptr__6610[safe_add( safe_add( _6603,_6647 ),(int)1 )] - _ptr__6610[safe_add( _6603,_6647 )]);
                if ((_6600 > (int)0))
                {
                  {
                    _6623 += (_ptr__6610[safe_add( _6605,_ptr__6610[safe_add( safe_add( _6603,_6647 ),(int)1 )] )] - _ptr__6610[safe_add( _6605,_ptr__6610[safe_add( _6603,_6647 )] )]);
                  }
                }
                {}
                ++ _6621;
                ++ _6646;
                ++ _6647;
              }
            }
          }
        }
      }
      _6593->alloc_expr(_6597,_6621,_6622,true,_6623);
      int _6649 = _6597;
      int _6650 = mosek::fusion::p_WorkStack::_get_impl(_6593)->ptr_base;
      int _6651 = mosek::fusion::p_WorkStack::_get_impl(_6593)->nidxs_base;
      int _6652 = mosek::fusion::p_WorkStack::_get_impl(_6593)->shape_base;
      int _6653 = mosek::fusion::p_WorkStack::_get_impl(_6593)->sp_base;
      int _6654 = mosek::fusion::p_WorkStack::_get_impl(_6593)->cof_base;
      int _6655 = mosek::fusion::p_WorkStack::_get_impl(_6593)->code_base;
      int _6656 = mosek::fusion::p_WorkStack::_get_impl(_6593)->codeptr_base;
      int _6657 = mosek::fusion::p_WorkStack::_get_impl(_6593)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _6658 = mosek::fusion::p_WorkStack::_get_impl(_6593)->i32;
      _checked_ptr_1<int> _ptr__6658(_6658 ? _6658->raw() : nullptr,_6658 ? _6658->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _6659 = mosek::fusion::p_WorkStack::_get_impl(_6593)->i64;
      _checked_ptr_1<long long> _ptr__6659(_6659 ? _6659->raw() : nullptr,_6659 ? _6659->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6660 = mosek::fusion::p_WorkStack::_get_impl(_6593)->f64;
      _checked_ptr_1<double> _ptr__6660(_6660 ? _6660->raw() : nullptr,_6660 ? _6660->size(0) : 0);
      int _11684 = (int)0;
      int _11685 = _6597;
      for (int _6661 = _11684; _6661 < _11685; ++_6661)
      {
        {
          _ptr__6658[safe_add( _6652,_6661 )] = _ptr__6610[safe_add( _6602,_6661 )];
        }
      }
      _ptr__6658[_6650] = (int)0;
      if ((_6623 > (int)0))
      {
        {
          _ptr__6658[_6656] = (int)0;
        }
      }
      {}
      {
        int _6662 = (int)0;
        int _6663 = (int)0;
        int _6664 = (int)0;
        int _6665 = (int)0;
        int _6666 = (int)0;
        _ptr__6658[_6650] = (int)0;
        while ( ((_6666 < _6599) || (_6665 < _6599)) )
        {
          {
            int _6667 = _ptr__6619[safe_add( _6631,_6665 )];
            if (((_6666 < _6599) && ((_6665 == _6599) || (_ptr__6611[safe_add( _6608,_6666 )] < _ptr__6620[safe_add( _6618,_6667 )]))))
            {
              {
                if ((_6623 == (int)0))
                {
                  {
                    int _11686 = _ptr__6610[safe_add( _6603,_6666 )];
                    int _11687 = _ptr__6610[safe_add( safe_add( _6603,_6666 ),(int)1 )];
                    for (int _6668 = _11686; _6668 < _11687; ++_6668)
                    {
                      {
                        _ptr__6659[safe_add( _6651,_6662 )] = _ptr__6611[safe_add( _6607,_6668 )];
                        _ptr__6660[safe_add( _6654,_6662 )] = (_ptr__6612[safe_add( _6609,_6668 )] * 0.5);
                        ++ _6662;
                      }
                    }
                  }
                }
                else
                {
                  {
                    int _11688 = _ptr__6610[safe_add( _6603,_6666 )];
                    int _11689 = _ptr__6610[safe_add( safe_add( _6603,_6666 ),(int)1 )];
                    for (int _6669 = _11688; _6669 < _11689; ++_6669)
                    {
                      {
                        _ptr__6659[safe_add( _6651,_6662 )] = _ptr__6611[safe_add( _6607,_6669 )];
                        _ptr__6660[safe_add( _6654,_6662 )] = (_ptr__6612[safe_add( _6609,_6669 )] * 0.5);
                        int _11690 = _ptr__6610[safe_add( _6605,_6669 )];
                        int _11691 = _ptr__6610[safe_add( safe_add( _6605,_6669 ),(int)1 )];
                        for (int _6670 = _11690; _6670 < _11691; ++_6670)
                        {
                          {
                            _ptr__6658[safe_add( _6655,_6663 )] = _ptr__6610[safe_add( _6604,_6670 )];
                            _ptr__6660[safe_add( _6657,_6663 )] = _ptr__6612[safe_add( _6606,_6670 )];
                            ++ _6663;
                          }
                        }
                        _ptr__6658[safe_add( _6655,_6663 )] = 2;
                        _ptr__6660[safe_add( _6657,_6663 )] = 0.5;
                        ++ _6663;
                        _ptr__6658[safe_add( _6655,_6663 )] = 5;
                        ++ _6663;
                        _ptr__6658[safe_add( safe_add( _6656,_6662 ),(int)1 )] = _6663;
                        ++ _6662;
                      }
                    }
                  }
                }
                _ptr__6659[safe_add( _6653,_6664 )] = _ptr__6611[safe_add( _6608,_6666 )];
                _ptr__6658[safe_add( safe_add( _6650,_6664 ),(int)1 )] = _6662;
                ++ _6664;
                ++ _6666;
              }
            }
            else if(((_6665 < _6599) && ((_6666 == _6599) || (_ptr__6611[safe_add( _6608,_6666 )] > _ptr__6620[safe_add( _6618,_6667 )]))))
            {
              {
                if ((_6623 == (int)0))
                {
                  {
                    int _11692 = _ptr__6610[safe_add( _6603,_6667 )];
                    int _11693 = _ptr__6610[safe_add( safe_add( _6603,_6667 ),(int)1 )];
                    for (int _6671 = _11692; _6671 < _11693; ++_6671)
                    {
                      {
                        _ptr__6659[safe_add( _6651,_6662 )] = _ptr__6611[safe_add( _6607,_6671 )];
                        _ptr__6660[safe_add( _6654,_6662 )] = (_ptr__6612[safe_add( _6609,_6671 )] * 0.5);
                        ++ _6662;
                      }
                    }
                  }
                }
                else
                {
                  {
                    int _11694 = _ptr__6610[safe_add( _6603,_6667 )];
                    int _11695 = _ptr__6610[safe_add( safe_add( _6603,_6667 ),(int)1 )];
                    for (int _6672 = _11694; _6672 < _11695; ++_6672)
                    {
                      {
                        _ptr__6659[safe_add( _6651,_6662 )] = _ptr__6611[safe_add( _6607,_6672 )];
                        _ptr__6660[safe_add( _6654,_6662 )] = (_ptr__6612[safe_add( _6609,_6672 )] * 0.5);
                        int _11696 = _ptr__6610[safe_add( _6605,_6672 )];
                        int _11697 = _ptr__6610[safe_add( safe_add( _6605,_6672 ),(int)1 )];
                        for (int _6673 = _11696; _6673 < _11697; ++_6673)
                        {
                          {
                            _ptr__6658[safe_add( _6655,_6663 )] = _ptr__6610[safe_add( _6604,_6673 )];
                            _ptr__6660[safe_add( _6657,_6663 )] = _ptr__6612[safe_add( _6606,_6673 )];
                            ++ _6663;
                          }
                        }
                        _ptr__6658[safe_add( _6655,_6663 )] = 2;
                        _ptr__6660[safe_add( _6657,_6663 )] = 0.5;
                        ++ _6663;
                        _ptr__6658[safe_add( _6655,_6663 )] = 5;
                        ++ _6663;
                        _ptr__6658[safe_add( safe_add( _6656,_6662 ),(int)1 )] = _6663;
                        ++ _6662;
                      }
                    }
                  }
                }
                _ptr__6659[safe_add( _6653,_6664 )] = _ptr__6611[safe_add( _6618,_6667 )];
                _ptr__6658[safe_add( safe_add( _6650,_6664 ),(int)1 )] = _6662;
                ++ _6664;
                ++ _6665;
              }
            }
            else if((_ptr__6611[safe_add( _6608,_6666 )] != _ptr__6620[safe_add( _6618,_6667 )]))
            {
              {
                if ((_6623 == (int)0))
                {
                  {
                    int _11698 = _ptr__6610[safe_add( _6603,_6666 )];
                    int _11699 = _ptr__6610[safe_add( safe_add( _6603,_6666 ),(int)1 )];
                    for (int _6674 = _11698; _6674 < _11699; ++_6674)
                    {
                      {
                        _ptr__6659[safe_add( _6651,_6662 )] = _ptr__6611[safe_add( _6607,_6674 )];
                        _ptr__6660[safe_add( _6654,_6662 )] = (_ptr__6612[safe_add( _6609,_6674 )] * 0.5);
                        ++ _6662;
                      }
                    }
                    int _11700 = _ptr__6610[safe_add( _6603,_6667 )];
                    int _11701 = _ptr__6610[safe_add( safe_add( _6603,_6667 ),(int)1 )];
                    for (int _6675 = _11700; _6675 < _11701; ++_6675)
                    {
                      {
                        _ptr__6659[safe_add( _6651,_6662 )] = _ptr__6611[safe_add( _6607,_6675 )];
                        _ptr__6660[safe_add( _6654,_6662 )] = (_ptr__6612[safe_add( _6609,_6675 )] * 0.5);
                        ++ _6662;
                      }
                    }
                  }
                }
                else
                {
                  {
                    int _11702 = _ptr__6610[safe_add( _6603,_6666 )];
                    int _11703 = _ptr__6610[safe_add( safe_add( _6603,_6666 ),(int)1 )];
                    for (int _6676 = _11702; _6676 < _11703; ++_6676)
                    {
                      {
                        _ptr__6659[safe_add( _6651,_6662 )] = _ptr__6611[safe_add( _6607,_6676 )];
                        _ptr__6660[safe_add( _6654,_6662 )] = (_ptr__6612[safe_add( _6609,_6676 )] * 0.5);
                        int _11704 = _ptr__6610[safe_add( _6605,_6676 )];
                        int _11705 = _ptr__6610[safe_add( safe_add( _6605,_6676 ),(int)1 )];
                        for (int _6677 = _11704; _6677 < _11705; ++_6677)
                        {
                          {
                            _ptr__6658[safe_add( _6655,_6663 )] = _ptr__6610[safe_add( _6604,_6677 )];
                            _ptr__6660[safe_add( _6657,_6663 )] = _ptr__6612[safe_add( _6606,_6677 )];
                            ++ _6663;
                          }
                        }
                        _ptr__6658[safe_add( _6655,_6663 )] = 2;
                        _ptr__6660[safe_add( _6657,_6663 )] = 0.5;
                        ++ _6663;
                        _ptr__6658[safe_add( _6655,_6663 )] = 5;
                        ++ _6663;
                        _ptr__6658[safe_add( safe_add( _6656,_6662 ),(int)1 )] = _6663;
                        ++ _6662;
                      }
                    }
                    int _11706 = _ptr__6610[safe_add( _6603,_6667 )];
                    int _11707 = _ptr__6610[safe_add( safe_add( _6603,_6667 ),(int)1 )];
                    for (int _6678 = _11706; _6678 < _11707; ++_6678)
                    {
                      {
                        _ptr__6659[safe_add( _6651,_6662 )] = _ptr__6611[safe_add( _6607,_6678 )];
                        _ptr__6660[safe_add( _6654,_6662 )] = (_ptr__6612[safe_add( _6609,_6678 )] * 0.5);
                        int _11708 = _ptr__6610[safe_add( _6605,_6678 )];
                        int _11709 = _ptr__6610[safe_add( safe_add( _6605,_6678 ),(int)1 )];
                        for (int _6679 = _11708; _6679 < _11709; ++_6679)
                        {
                          {
                            _ptr__6658[safe_add( _6655,_6663 )] = _ptr__6610[safe_add( _6604,_6679 )];
                            _ptr__6660[safe_add( _6657,_6663 )] = _ptr__6612[safe_add( _6606,_6679 )];
                            ++ _6663;
                          }
                        }
                        _ptr__6658[safe_add( _6655,_6663 )] = 2;
                        _ptr__6660[safe_add( _6657,_6663 )] = 0.5;
                        ++ _6663;
                        _ptr__6658[safe_add( _6655,_6663 )] = 5;
                        ++ _6663;
                        _ptr__6658[safe_add( safe_add( _6656,_6662 ),(int)1 )] = _6663;
                        ++ _6662;
                      }
                    }
                  }
                }
                _ptr__6659[safe_add( _6653,_6664 )] = _ptr__6611[safe_add( _6608,_6666 )];
                _ptr__6658[safe_add( safe_add( _6650,_6664 ),(int)1 )] = _6662;
                ++ _6664;
                ++ _6665;
                ++ _6666;
              }
            }
            else
            {
              {
                if ((_6623 == (int)0))
                {
                  {
                    int _11710 = _ptr__6610[safe_add( _6603,_6666 )];
                    int _11711 = _ptr__6610[safe_add( safe_add( _6603,_6666 ),(int)1 )];
                    for (int _6680 = _11710; _6680 < _11711; ++_6680)
                    {
                      {
                        _ptr__6659[safe_add( _6651,_6662 )] = _ptr__6611[safe_add( _6607,_6680 )];
                        _ptr__6660[safe_add( _6654,_6662 )] = _ptr__6612[safe_add( _6609,_6680 )];
                        ++ _6662;
                      }
                    }
                  }
                }
                else
                {
                  {
                    int _11712 = _ptr__6610[safe_add( _6603,_6666 )];
                    int _11713 = _ptr__6610[safe_add( safe_add( _6603,_6666 ),(int)1 )];
                    for (int _6681 = _11712; _6681 < _11713; ++_6681)
                    {
                      {
                        _ptr__6659[safe_add( _6651,_6662 )] = _ptr__6611[safe_add( _6607,_6681 )];
                        _ptr__6660[safe_add( _6654,_6662 )] = _ptr__6612[safe_add( _6609,_6681 )];
                        int _11714 = _ptr__6610[safe_add( _6605,_6681 )];
                        int _11715 = _ptr__6610[safe_add( safe_add( _6605,_6681 ),(int)1 )];
                        for (int _6682 = _11714; _6682 < _11715; ++_6682)
                        {
                          {
                            _ptr__6658[safe_add( _6655,_6663 )] = _ptr__6610[safe_add( _6604,_6682 )];
                            _ptr__6660[safe_add( _6657,_6663 )] = _ptr__6612[safe_add( _6606,_6682 )];
                            ++ _6663;
                          }
                        }
                        _ptr__6658[safe_add( safe_add( _6656,_6662 ),(int)1 )] = _6663;
                        ++ _6662;
                      }
                    }
                  }
                }
                _ptr__6659[safe_add( _6653,_6664 )] = _ptr__6611[safe_add( _6608,_6666 )];
                _ptr__6658[safe_add( safe_add( _6650,_6664 ),(int)1 )] = _6662;
                ++ _6664;
                ++ _6665;
                ++ _6666;
              }
            }
          }
        }
        if ((_6662 != _6622))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid nzi"));
          }
        }
        {}
      }
    }
  }
  else
  {
    {
      _6621 = _6599;
      _6622 = safe_mul( _6598,(int)2 );
      int _11716;
      bool _11717 = (_6600 > (int)0);
      if (_11717)
      {
        _11716 = safe_add( safe_mul( (int)2,_6600 ),safe_mul( safe_mul( (int)2,(int)2 ),_6598 ) );
      }
      else
      {
        _11716 = (int)0;
      }
      _6623 = _11716;
      int _11718 = (int)0;
      int _11719 = _ptr__6624[(int)0];
      for (int _6683 = _11718; _6683 < _11719; ++_6683)
      {
        {
          int _11720 = (int)0;
          int _11721 = _ptr__6624[(int)2];
          for (int _6684 = _11720; _6684 < _11721; ++_6684)
          {
            {
              int _11722 = (int)0;
              int _11723 = _ptr__6624[(int)4];
              for (int _6685 = _11722; _6685 < _11723; ++_6685)
              {
                {
                  int _11724 = (int)0;
                  int _11725 = _ptr__6624[(int)1];
                  for (int _6686 = _11724; _6686 < _11725; ++_6686)
                  {
                    {
                      long long _6687 = safe_add( safe_add( safe_add( safe_add( safe_mul( _ptr__6626[(int)0],_6683 ),safe_mul( _ptr__6626[(int)1],_6686 ) ),safe_mul( _ptr__6626[(int)2],_6684 ) ),safe_mul( _ptr__6626[(int)3],_6686 ) ),safe_mul( _ptr__6626[(int)4],_6685 ) );
                      _6622 -= (_ptr__6610[safe_add( safe_add( _6603,_6687 ),(int)1 )] - _ptr__6610[safe_add( _6603,_6687 )]);
                      if ((_6600 > (int)0))
                      {
                        {
                          _6623 -= safe_add( (_ptr__6610[safe_add( _6605,_ptr__6610[safe_add( safe_add( _6603,_6687 ),(int)1 )] )] - _ptr__6610[safe_add( _6605,_ptr__6610[safe_add( _6603,_6687 )] )]),safe_mul( safe_mul( (int)2,(int)2 ),(_ptr__6610[safe_add( safe_add( _6603,_6687 ),(int)1 )] - _ptr__6610[safe_add( _6603,_6687 )]) ) );
                        }
                      }
                      {}
                    }
                  }
                }
              }
            }
          }
        }
      }
      _6593->alloc_expr(_6597,_6621,_6622,false,_6623);
      int _6688 = mosek::fusion::p_WorkStack::_get_impl(_6593)->ptr_base;
      int _6689 = mosek::fusion::p_WorkStack::_get_impl(_6593)->shape_base;
      int _6690 = mosek::fusion::p_WorkStack::_get_impl(_6593)->code_base;
      int _6691 = mosek::fusion::p_WorkStack::_get_impl(_6593)->codeptr_base;
      int _6692 = mosek::fusion::p_WorkStack::_get_impl(_6593)->nidxs_base;
      int _6693 = mosek::fusion::p_WorkStack::_get_impl(_6593)->sp_base;
      int _6694 = mosek::fusion::p_WorkStack::_get_impl(_6593)->cof_base;
      int _6695 = mosek::fusion::p_WorkStack::_get_impl(_6593)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _6696 = mosek::fusion::p_WorkStack::_get_impl(_6593)->i32;
      _checked_ptr_1<int> _ptr__6696(_6696 ? _6696->raw() : nullptr,_6696 ? _6696->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _6697 = mosek::fusion::p_WorkStack::_get_impl(_6593)->i64;
      _checked_ptr_1<long long> _ptr__6697(_6697 ? _6697->raw() : nullptr,_6697 ? _6697->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6698 = mosek::fusion::p_WorkStack::_get_impl(_6593)->f64;
      _checked_ptr_1<double> _ptr__6698(_6698 ? _6698->raw() : nullptr,_6698 ? _6698->size(0) : 0);
      int _6699 = (int)0;
      int _6700 = (int)0;
      int _6701 = (int)0;
      int _11726 = (int)0;
      int _11727 = _6597;
      for (int _6702 = _11726; _6702 < _11727; ++_6702)
      {
        {
          _ptr__6696[safe_add( _6689,_6702 )] = _ptr__6610[safe_add( _6602,_6702 )];
        }
      }
      _ptr__6696[_6688] = (int)0;
      if ((_6623 > (int)0))
      {
        {
          _ptr__6696[_6691] = (int)0;
        }
      }
      {}
      int _6703 = (int)0;
      int _11728 = (int)0;
      int _11729 = _ptr__6624[(int)0];
      for (int _6704 = _11728; _6704 < _11729; ++_6704)
      {
        {
          int _11730 = (int)0;
          int _11731 = _ptr__6624[(int)1];
          for (int _6705 = _11730; _6705 < _11731; ++_6705)
          {
            {
              int _11732 = (int)0;
              int _11733 = _ptr__6624[(int)2];
              for (int _6706 = _11732; _6706 < _11733; ++_6706)
              {
                {
                  int _11734 = (int)0;
                  int _11735 = _ptr__6624[(int)3];
                  for (int _6707 = _11734; _6707 < _11735; ++_6707)
                  {
                    {
                      int _11736 = (int)0;
                      int _11737 = _ptr__6624[(int)4];
                      for (int _6708 = _11736; _6708 < _11737; ++_6708)
                      {
                        {
                          if ((_6705 == _6707))
                          {
                            {
                              if ((_6623 == (int)0))
                              {
                                {
                                  int _11738 = _ptr__6610[safe_add( _6603,_6703 )];
                                  int _11739 = _ptr__6610[safe_add( safe_add( _6603,_6703 ),(int)1 )];
                                  for (int _6709 = _11738; _6709 < _11739; ++_6709)
                                  {
                                    {
                                      _ptr__6697[safe_add( _6692,_6699 )] = _ptr__6611[safe_add( _6607,_6709 )];
                                      _ptr__6698[safe_add( _6694,_6699 )] = _ptr__6612[safe_add( _6609,_6709 )];
                                      ++ _6699;
                                    }
                                  }
                                }
                              }
                              else
                              {
                                {
                                  int _11740 = _ptr__6610[safe_add( _6603,_6703 )];
                                  int _11741 = _ptr__6610[safe_add( safe_add( _6603,_6703 ),(int)1 )];
                                  for (int _6710 = _11740; _6710 < _11741; ++_6710)
                                  {
                                    {
                                      _ptr__6697[safe_add( _6692,_6699 )] = _ptr__6611[safe_add( _6607,_6710 )];
                                      _ptr__6698[safe_add( _6694,_6699 )] = _ptr__6612[safe_add( _6609,_6710 )];
                                      int _11742 = _ptr__6610[safe_add( _6605,_6710 )];
                                      int _11743 = _ptr__6610[safe_add( safe_add( _6605,_6710 ),(int)1 )];
                                      for (int _6711 = _11742; _6711 < _11743; ++_6711)
                                      {
                                        {
                                          _ptr__6696[safe_add( _6690,_6701 )] = _ptr__6610[safe_add( _6604,_6711 )];
                                          _ptr__6698[safe_add( _6695,_6701 )] = _ptr__6612[safe_add( _6606,_6711 )];
                                          ++ _6701;
                                        }
                                      }
                                      _ptr__6696[safe_add( safe_add( _6691,_6699 ),(int)1 )] = _6701;
                                      ++ _6699;
                                    }
                                  }
                                }
                              }
                              _ptr__6696[safe_add( safe_add( _6688,_6700 ),(int)1 )] = _6699;
                              ++ _6703;
                            }
                          }
                          else
                          {
                            {
                              long long _6712 = safe_add( safe_add( safe_add( safe_add( safe_mul( _6704,_ptr__6626[(int)0] ),safe_mul( _6707,_ptr__6626[(int)1] ) ),safe_mul( _6706,_ptr__6626[(int)2] ) ),safe_mul( _6705,_ptr__6626[(int)3] ) ),_6708 );
                              if ((_6623 == (int)0))
                              {
                                {
                                  int _11744 = _ptr__6610[safe_add( _6603,_6703 )];
                                  int _11745 = _ptr__6610[safe_add( safe_add( _6603,_6703 ),(int)1 )];
                                  for (int _6713 = _11744; _6713 < _11745; ++_6713)
                                  {
                                    {
                                      _ptr__6697[safe_add( _6692,_6699 )] = _ptr__6611[safe_add( _6607,_6713 )];
                                      _ptr__6698[safe_add( _6694,_6699 )] = (_ptr__6612[safe_add( _6609,_6713 )] * 0.5);
                                      ++ _6699;
                                    }
                                  }
                                  int _11746 = _ptr__6610[safe_add( _6603,_6712 )];
                                  int _11747 = _ptr__6610[safe_add( safe_add( _6603,_6712 ),(int)1 )];
                                  for (int _6714 = _11746; _6714 < _11747; ++_6714)
                                  {
                                    {
                                      _ptr__6697[safe_add( _6692,_6699 )] = _ptr__6611[safe_add( _6607,_6714 )];
                                      _ptr__6698[safe_add( _6694,_6699 )] = (_ptr__6612[safe_add( _6609,_6714 )] * 0.5);
                                      ++ _6699;
                                    }
                                  }
                                }
                              }
                              else
                              {
                                {
                                  int _11748 = _ptr__6610[safe_add( _6603,_6703 )];
                                  int _11749 = _ptr__6610[safe_add( safe_add( _6603,_6703 ),(int)1 )];
                                  for (int _6715 = _11748; _6715 < _11749; ++_6715)
                                  {
                                    {
                                      _ptr__6697[safe_add( _6692,_6699 )] = _ptr__6611[safe_add( _6607,_6715 )];
                                      _ptr__6698[safe_add( _6694,_6699 )] = (_ptr__6612[safe_add( _6609,_6715 )] * 0.5);
                                      int _11750 = _ptr__6610[safe_add( _6605,_6715 )];
                                      int _11751 = _ptr__6610[safe_add( safe_add( _6605,_6715 ),(int)1 )];
                                      for (int _6716 = _11750; _6716 < _11751; ++_6716)
                                      {
                                        {
                                          _ptr__6696[safe_add( _6690,_6701 )] = _ptr__6610[safe_add( _6604,_6716 )];
                                          _ptr__6698[safe_add( _6695,_6701 )] = _ptr__6612[safe_add( _6606,_6716 )];
                                          ++ _6701;
                                        }
                                      }
                                      _ptr__6696[safe_add( _6690,_6701 )] = 2;
                                      _ptr__6698[safe_add( _6695,_6701 )] = 0.5;
                                      ++ _6701;
                                      _ptr__6696[safe_add( _6690,_6701 )] = 5;
                                      ++ _6701;
                                      _ptr__6696[safe_add( safe_add( _6691,_6699 ),(int)1 )] = _6701;
                                      ++ _6699;
                                    }
                                  }
                                  int _11752 = _ptr__6610[safe_add( _6603,_6712 )];
                                  int _11753 = _ptr__6610[safe_add( safe_add( _6603,_6712 ),(int)1 )];
                                  for (int _6717 = _11752; _6717 < _11753; ++_6717)
                                  {
                                    {
                                      _ptr__6697[safe_add( _6692,_6699 )] = _ptr__6611[safe_add( _6607,_6717 )];
                                      _ptr__6698[safe_add( _6694,_6699 )] = (_ptr__6612[safe_add( _6609,_6717 )] * 0.5);
                                      int _11754 = _ptr__6610[safe_add( _6605,_6717 )];
                                      int _11755 = _ptr__6610[safe_add( safe_add( _6605,_6717 ),(int)1 )];
                                      for (int _6718 = _11754; _6718 < _11755; ++_6718)
                                      {
                                        {
                                          _ptr__6696[safe_add( _6690,_6701 )] = _ptr__6610[safe_add( _6604,_6718 )];
                                          _ptr__6698[safe_add( _6695,_6701 )] = _ptr__6612[safe_add( _6606,_6718 )];
                                          ++ _6701;
                                        }
                                      }
                                      _ptr__6696[safe_add( _6690,_6701 )] = 2;
                                      _ptr__6698[safe_add( _6695,_6701 )] = 0.5;
                                      ++ _6701;
                                      _ptr__6696[safe_add( _6690,_6701 )] = 5;
                                      ++ _6701;
                                      _ptr__6696[safe_add( safe_add( _6691,_6699 ),(int)1 )] = _6701;
                                      ++ _6699;
                                    }
                                  }
                                }
                              }
                              _ptr__6696[safe_add( safe_add( _6688,_6700 ),(int)1 )] = _6699;
                              ++ _6703;
                            }
                          }
                          ++ _6700;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if ((_6699 != _6622))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid nnz"));
        }
      }
      {}
      if ((_6700 != _6621))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid nelem"));
        }
      }
      {}
    }
  }
  _6595->clear();
  _6593->peek_expr();
  if ((mosek::fusion::p_WorkStack::_get_impl(_6593)->nnz != ((*mosek::fusion::p_WorkStack::_get_impl(_6593)->i32)(safe_add( mosek::fusion::p_WorkStack::_get_impl(_6593)->ptr_base,mosek::fusion::p_WorkStack::_get_impl(_6593)->nelem )))))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid ptr"));
    }
  }
  {}
  if ((((*mosek::fusion::p_WorkStack::_get_impl(_6593)->i32)(mosek::fusion::p_WorkStack::_get_impl(_6593)->ptr_base)) != (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid ptr"));
    }
  }
  {}
}
std::string mosek::fusion::ExprSymmetrize :: toString() { return mosek::fusion::p_ExprSymmetrize::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprSymmetrize::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprSymmetrize(symdim=("))->__mosek_2fusion_2Utils_2StringBuffer__a(dim0)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(dim1)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("),"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprSymmetrize::destroy(){expr.reset();}void mosek::fusion::ExprSymmetrize::destroy() { mosek::fusion::p_ExprSymmetrize::_get_impl(this)->destroy(); }mosek::fusion::ExprCondense::ExprCondense(mosek::fusion::p_ExprCondense *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprCondense()" << this << std::endl; */ }mosek::fusion::ExprCondense::~ExprCondense() {  /* std::cout << "~ExprCondense()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprCondense::p_ExprCondense  (::mosek::fusion::ExprCondense * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprCondense::t mosek::fusion::p_ExprCondense::_new_ExprCondense  (monty::rc_ptr< ::mosek::fusion::Expression > _6719){ return new mosek::fusion::ExprCondense(_6719); }mosek::fusion::ExprCondense::ExprCondense  (monty::rc_ptr< ::mosek::fusion::Expression > _6719) :    ExprCondense(new mosek::fusion::p_ExprCondense(this)){ mosek::fusion::p_ExprCondense::_get_impl(this)->_initialize(_6719); }void mosek::fusion::p_ExprCondense::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _6719){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_6719->getShape());
    mosek::fusion::p_ExprCondense::_get_impl(::mosek::fusion::ExprCondense::t(_pubthis))->expr = _6719;
  }
}void mosek::fusion::ExprCondense :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6720,monty::rc_ptr< ::mosek::fusion::WorkStack > _6721,monty::rc_ptr< ::mosek::fusion::WorkStack > _6722) { mosek::fusion::p_ExprCondense::_get_impl(this)->eval(_6720,_6721,_6722); }void mosek::fusion::p_ExprCondense::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6720,monty::rc_ptr< ::mosek::fusion::WorkStack > _6721,monty::rc_ptr< ::mosek::fusion::WorkStack > _6722){
  expr->eval(_6720,_6721,_6722);
  _6720->peek_expr();
  if (mosek::fusion::p_WorkStack::_get_impl(_6720)->hassp)
  {
    {
      int _6723 = _6720->popi32();
      _6720->popi32(_6723);
      int _6724 = _6720->popi32();
      int _6725 = _6720->popi32();
      _6720->popi32();
      _6720->popi64(_6724);
      _6720->pushi32((int)0);
      _6720->pushi32(_6725);
      _6720->pushi32(_6724);
      _6720->pushi32(_6724);
      _6720->pushi32((int)1);
      _6720->peek_expr();
    }
  }
  {}
}
std::string mosek::fusion::ExprCondense :: toString() { return mosek::fusion::p_ExprCondense::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprCondense::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprCondense("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprCondense::destroy(){expr.reset();}void mosek::fusion::ExprCondense::destroy() { mosek::fusion::p_ExprCondense::_get_impl(this)->destroy(); }mosek::fusion::ExprFromVar::ExprFromVar(mosek::fusion::p_ExprFromVar *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprFromVar()" << this << std::endl; */ }mosek::fusion::ExprFromVar::~ExprFromVar() {  /* std::cout << "~ExprFromVar()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprFromVar::p_ExprFromVar  (::mosek::fusion::ExprFromVar * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprFromVar::t mosek::fusion::p_ExprFromVar::_new_ExprFromVar  (monty::rc_ptr< ::mosek::fusion::Variable > _6726){ return new mosek::fusion::ExprFromVar(_6726); }mosek::fusion::ExprFromVar::ExprFromVar  (monty::rc_ptr< ::mosek::fusion::Variable > _6726) :    ExprFromVar(new mosek::fusion::p_ExprFromVar(this)){ mosek::fusion::p_ExprFromVar::_get_impl(this)->_initialize(_6726); }void mosek::fusion::p_ExprFromVar::_initialize  (monty::rc_ptr< ::mosek::fusion::Variable > _6726){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_6726->getShape());
    mosek::fusion::p_ExprFromVar::_get_impl(::mosek::fusion::ExprFromVar::t(_pubthis))->x = _6726;
  }
}void mosek::fusion::ExprFromVar :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6727,monty::rc_ptr< ::mosek::fusion::WorkStack > _6728,monty::rc_ptr< ::mosek::fusion::WorkStack > _6729) { mosek::fusion::p_ExprFromVar::_get_impl(this)->eval(_6727,_6728,_6729); }void mosek::fusion::p_ExprFromVar::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6727,monty::rc_ptr< ::mosek::fusion::WorkStack > _6728,monty::rc_ptr< ::mosek::fusion::WorkStack > _6729){
  std::shared_ptr< monty::ndarray< int,1 > > _6730 = _pubthis->getShape();
  _checked_ptr_1<int> _ptr__6730(_6730 ? _6730->raw() : nullptr,_6730 ? _6730->size(0) : 0);
  long long _6731 = ::mosek::fusion::p_Set::size(_6730);
  int _6732 = x->numInst();
  int _6733 = _6732;
  bool _6734 = (_6731 > _6732);
  _6727->alloc_expr((int)((_6730)->size(0)),_6732,_6733,_6734);
  int _6735 = mosek::fusion::p_WorkStack::_get_impl(_6727)->ptr_base;
  int _6736 = mosek::fusion::p_WorkStack::_get_impl(_6727)->nidxs_base;
  int _6737 = mosek::fusion::p_WorkStack::_get_impl(_6727)->sp_base;
  int _6738 = mosek::fusion::p_WorkStack::_get_impl(_6727)->cof_base;
  int _6739 = mosek::fusion::p_WorkStack::_get_impl(_6727)->shape_base;
  std::shared_ptr< monty::ndarray< int,1 > > _6740 = mosek::fusion::p_WorkStack::_get_impl(_6727)->i32;
  _checked_ptr_1<int> _ptr__6740(_6740 ? _6740->raw() : nullptr,_6740 ? _6740->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6741 = mosek::fusion::p_WorkStack::_get_impl(_6727)->i64;
  _checked_ptr_1<long long> _ptr__6741(_6741 ? _6741->raw() : nullptr,_6741 ? _6741->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6742 = mosek::fusion::p_WorkStack::_get_impl(_6727)->f64;
  _checked_ptr_1<double> _ptr__6742(_6742 ? _6742->raw() : nullptr,_6742 ? _6742->size(0) : 0);
  int _11756 = (int)0;
  int _11757 = (int)((_6730)->size(0));
  for (int _6743 = _11756; _6743 < _11757; ++_6743)
  {
    {
      _ptr__6740[safe_add( _6739,_6743 )] = _ptr__6730[_6743];
    }
  }
  {
    int _11758 = (int)0;
    int _11759 = safe_add( _6732,(int)1 );
    for (int _6744 = _11758; _6744 < _11759; ++_6744)
    {
      {
        _ptr__6740[safe_add( _6735,_6744 )] = _6744;
      }
    }
    int _11760 = (int)0;
    int _11761 = _6733;
    for (int _6745 = _11760; _6745 < _11761; ++_6745)
    {
      {
        _ptr__6742[safe_add( _6738,_6745 )] = 1.0;
      }
    }
  }
  if (_6734)
  {
    {
      x->inst(_6737,_6741,_6736,_6741);
    }
  }
  else
  {
    {
      x->inst(_6736,_6741);
    }
  }
}
std::string mosek::fusion::ExprFromVar :: toString() { return mosek::fusion::p_ExprFromVar::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprFromVar::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Expr("))->__mosek_2fusion_2Utils_2StringBuffer__a(x->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprFromVar::destroy(){x.reset();}void mosek::fusion::ExprFromVar::destroy() { mosek::fusion::p_ExprFromVar::_get_impl(this)->destroy(); }mosek::fusion::ExprReshape::ExprReshape(mosek::fusion::p_ExprReshape *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprReshape()" << this << std::endl; */ }mosek::fusion::ExprReshape::~ExprReshape() {  /* std::cout << "~ExprReshape()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprReshape::p_ExprReshape  (::mosek::fusion::ExprReshape * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprReshape::t mosek::fusion::p_ExprReshape::_new_ExprReshape  (std::shared_ptr< monty::ndarray< int,1 > > _6746,    monty::rc_ptr< ::mosek::fusion::Expression > _6747){ return new mosek::fusion::ExprReshape(_6746,_6747); }mosek::fusion::ExprReshape::ExprReshape  (std::shared_ptr< monty::ndarray< int,1 > > _6746,    monty::rc_ptr< ::mosek::fusion::Expression > _6747) :    ExprReshape(new mosek::fusion::p_ExprReshape(this)){ mosek::fusion::p_ExprReshape::_get_impl(this)->_initialize(_6746,_6747); }void mosek::fusion::p_ExprReshape::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _6746,    monty::rc_ptr< ::mosek::fusion::Expression > _6747){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__6746(_6746 ? _6746->raw() : nullptr, _6746 ? _6746->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::Utils::Tools::arraycopy(_6746));
    long long _6748 = _6747->getSize();
    if ((::mosek::fusion::p_Set::size(_6746) != _6747->getSize()))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Cannot reshape to mismatching shape"));
      }
    }
    {}
    mosek::fusion::p_ExprReshape::_get_impl(::mosek::fusion::ExprReshape::t(_pubthis))->e = _6747;
  }
}void mosek::fusion::ExprReshape :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6749,monty::rc_ptr< ::mosek::fusion::WorkStack > _6750,monty::rc_ptr< ::mosek::fusion::WorkStack > _6751) { mosek::fusion::p_ExprReshape::_get_impl(this)->eval(_6749,_6750,_6751); }void mosek::fusion::p_ExprReshape::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6749,monty::rc_ptr< ::mosek::fusion::WorkStack > _6750,monty::rc_ptr< ::mosek::fusion::WorkStack > _6751){
  std::shared_ptr< monty::ndarray< int,1 > > _6752 = _pubthis->getShape();
  _checked_ptr_1<int> _ptr__6752(_6752 ? _6752->raw() : nullptr,_6752 ? _6752->size(0) : 0);
  e->eval(_6749,_6750,_6751);
  _6749->peek_expr();
  int _6753 = _6749->popi32();
  long long _6754 = (int)1;
  int _11762 = (int)0;
  int _11763 = _6753;
  for (int _6755 = _11762; _6755 < _11763; ++_6755)
  {
    {
      _6754 *= _6749->popi32();
    }
  }
  if ((_6754 != _pubthis->getSize()))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("The two shapes have different sizes"));
    }
  }
  {}
  int _11764 = (int)0;
  int _11765 = (int)((_6752)->size(0));
  for (int _6756 = _11764; _6756 < _11765; ++_6756)
  {
    {
      _6749->pushi32(_ptr__6752[_6756]);
    }
  }
  _6749->pushi32((int)((_6752)->size(0)));
}
std::string mosek::fusion::ExprReshape :: toString() { return mosek::fusion::p_ExprReshape::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprReshape::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _6757 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprReshape(("));
  if ((_pubthis->getND() > (int)0))
  {
    {
      _6757->__mosek_2fusion_2Utils_2StringBuffer__a(_pubthis->getDim((int)0));
      int _11766 = (int)1;
      int _11767 = _pubthis->getND();
      for (int _6758 = _11766; _6758 < _11767; ++_6758)
      {
        {
          _6757->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(_pubthis->getDim(_6758));
        }
      }
    }
  }
  {}
  _6757->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("),"))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _6757->toString();
}
void mosek::fusion::p_ExprReshape::destroy(){e.reset();}void mosek::fusion::ExprReshape::destroy() { mosek::fusion::p_ExprReshape::_get_impl(this)->destroy(); }mosek::fusion::BaseExpression::BaseExpression(mosek::fusion::p_BaseExpression *_impl) : _impl(_impl) { /*std::cout << "BaseExpression() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::BaseExpression::~BaseExpression() { delete _impl; _impl = nullptr; }mosek::fusion::p_BaseExpression::p_BaseExpression  (::mosek::fusion::BaseExpression * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::p_BaseExpression::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _6759){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__6759(_6759 ? _6759->raw() : nullptr, _6759 ? _6759->size(0) : 0);
    mosek::fusion::p_BaseExpression::_get_impl(::mosek::fusion::BaseExpression::t(_pubthis))->shape = _6759;
  }
}std::string mosek::fusion::BaseExpression :: toString() { return mosek::fusion::p_BaseExpression::_get_impl(this)->toString(); }std::string mosek::fusion::p_BaseExpression::toString(){
  return std::string ("Expression()");
}
void mosek::fusion::p_BaseExpression::printStack(monty::rc_ptr< ::mosek::fusion::WorkStack > _6760){
  std::shared_ptr< monty::ndarray< int,1 > > _6761 = mosek::fusion::p_WorkStack::_get_impl(_6760)->i32;
  _checked_ptr_1<int> _ptr__6761(_6761 ? _6761->raw() : nullptr,_6761 ? _6761->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6762 = mosek::fusion::p_WorkStack::_get_impl(_6760)->i64;
  _checked_ptr_1<long long> _ptr__6762(_6762 ? _6762->raw() : nullptr,_6762 ? _6762->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6763 = mosek::fusion::p_WorkStack::_get_impl(_6760)->f64;
  _checked_ptr_1<double> _ptr__6763(_6763 ? _6763->raw() : nullptr,_6763 ? _6763->size(0) : 0);
  int _6764 = mosek::fusion::p_WorkStack::_get_impl(_6760)->ptr_base;
  int _6765 = mosek::fusion::p_WorkStack::_get_impl(_6760)->nidxs_base;
  int _6766 = mosek::fusion::p_WorkStack::_get_impl(_6760)->cof_base;
  int _6767 = mosek::fusion::p_WorkStack::_get_impl(_6760)->shape_base;
  int _6768 = mosek::fusion::p_WorkStack::_get_impl(_6760)->codeptr_base;
  int _6769 = mosek::fusion::p_WorkStack::_get_impl(_6760)->code_base;
  int _6770 = mosek::fusion::p_WorkStack::_get_impl(_6760)->cconst_base;
  int _6771 = mosek::fusion::p_WorkStack::_get_impl(_6760)->sp_base;
  int _6772 = mosek::fusion::p_WorkStack::_get_impl(_6760)->nelem;
  int _6773 = mosek::fusion::p_WorkStack::_get_impl(_6760)->nnz;
  int _6774 = mosek::fusion::p_WorkStack::_get_impl(_6760)->ncodeatom;
  int _6775 = mosek::fusion::p_WorkStack::_get_impl(_6760)->nd;
  bool _6776 = mosek::fusion::p_WorkStack::_get_impl(_6760)->hassp;
  std::vector<int> _11768;
  for (int _6777 = (int)0, _11769 = _6775; _6777 < _11769 ; ++_6777)
  {
    _11768.push_back(_ptr__6761[safe_add( _6767,_6777 )]);
  }
  auto _11770 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11768.size()),_11768.begin(),_11768.end()));
  std::vector<int> _11771;
  for (int _6778 = (int)0, _11772 = safe_add( _6772,(int)1 ); _6778 < _11772 ; ++_6778)
  {
    _11771.push_back(_ptr__6761[safe_add( _6764,_6778 )]);
  }
  auto _11773 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11771.size()),_11771.begin(),_11771.end()));
  ::mosek::fusion::p_Debug::o()->__mosek_2fusion_2Debug__p(std::string ("### "))->__mosek_2fusion_2Debug__p(_pubthis->toString())->__mosek_2fusion_2Debug__p(std::string (" ###"))->__mosek_2fusion_2Debug__lf()->__mosek_2fusion_2Debug__p(std::string ("  nelem     = "))->__mosek_2fusion_2Debug__p(_6772)->__mosek_2fusion_2Debug__lf()->__mosek_2fusion_2Debug__p(std::string ("  nnz       = "))->__mosek_2fusion_2Debug__p(_6773)->__mosek_2fusion_2Debug__lf()->__mosek_2fusion_2Debug__p(std::string ("  hassp     = "))->__mosek_2fusion_2Debug__p(_6776)->__mosek_2fusion_2Debug__p(std::string (" / "))->__mosek_2fusion_2Debug__p(_ptr__6761[((mosek::fusion::p_WorkStack::_get_impl(_6760)->pi32 - _6775) - (int)4)])->__mosek_2fusion_2Debug__lf()->__mosek_2fusion_2Debug__p(std::string ("  shape     = "))->__mosek_2fusion_2Debug__p(_11770)->__mosek_2fusion_2Debug__lf()->__mosek_2fusion_2Debug__p(std::string ("  ptr       = "))->__mosek_2fusion_2Debug__p(_11773)->__mosek_2fusion_2Debug__lf();
  if (mosek::fusion::p_WorkStack::_get_impl(_6760)->hassp)
  {
    {
      std::vector<long long> _11774;
      for (int _6779 = (int)0, _11775 = _6772; _6779 < _11775 ; ++_6779)
      {
        _11774.push_back(_ptr__6762[safe_add( _6771,_6779 )]);
      }
      auto _11776 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_11774.size()),_11774.begin(),_11774.end()));
      ::mosek::fusion::p_Debug::o()->__mosek_2fusion_2Debug__p(std::string ("  sp       = "))->__mosek_2fusion_2Debug__p(_11776)->__mosek_2fusion_2Debug__lf();
    }
  }
  {}
  int _11777 = (int)0;
  int _11778 = _6772;
  for (int _6780 = _11777; _6780 < _11778; ++_6780)
  {
    {
      ::mosek::fusion::p_Debug::o()->__mosek_2fusion_2Debug__p(std::string ("  row["))->__mosek_2fusion_2Debug__p(_6780)->__mosek_2fusion_2Debug__p(std::string ("]"))->__mosek_2fusion_2Debug__lf();
      std::vector<long long> _11779;
      for (int _6781 = _ptr__6761[safe_add( _6764,_6780 )], _11780 = _ptr__6761[safe_add( safe_add( _6764,_6780 ),(int)1 )]; _6781 < _11780 ; ++_6781)
      {
        _11779.push_back(_ptr__6762[safe_add( _6765,_6781 )]);
      }
      auto _11781 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_11779.size()),_11779.begin(),_11779.end()));
      std::vector<double> _11782;
      for (int _6782 = _ptr__6761[safe_add( _6764,_6780 )], _11783 = _ptr__6761[safe_add( safe_add( _6764,_6780 ),(int)1 )]; _6782 < _11783 ; ++_6782)
      {
        _11782.push_back(_ptr__6763[safe_add( _6766,_6782 )]);
      }
      auto _11784 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11782.size()),_11782.begin(),_11782.end()));
      ::mosek::fusion::p_Debug::o()->__mosek_2fusion_2Debug__p(std::string ("    nidx : "))->__mosek_2fusion_2Debug__p(_11781)->__mosek_2fusion_2Debug__lf()->__mosek_2fusion_2Debug__p(std::string ("    cof  : "))->__mosek_2fusion_2Debug__p(_11784)->__mosek_2fusion_2Debug__lf();
      if ((_6774 > (int)0))
      {
        {
          int _11785 = _ptr__6761[safe_add( _6764,_6780 )];
          int _11786 = _ptr__6761[safe_add( safe_add( _6764,_6780 ),(int)1 )];
          for (int _6783 = _11785; _6783 < _11786; ++_6783)
          {
            {
              std::vector<int> _11787;
              for (int _6784 = _ptr__6761[safe_add( _6768,_6783 )], _11788 = _ptr__6761[safe_add( safe_add( _6768,_6783 ),(int)1 )]; _6784 < _11788 ; ++_6784)
              {
                _11787.push_back(_ptr__6761[safe_add( _6769,_6784 )]);
              }
              auto _11789 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11787.size()),_11787.begin(),_11787.end()));
              std::vector<double> _11790;
              for (int _6785 = _ptr__6761[safe_add( _6768,_6783 )], _11791 = _ptr__6761[safe_add( safe_add( _6768,_6783 ),(int)1 )]; _6785 < _11791 ; ++_6785)
              {
                _11790.push_back(_ptr__6763[safe_add( _6770,_6785 )]);
              }
              auto _11792 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11790.size()),_11790.begin(),_11790.end()));
              ::mosek::fusion::p_Debug::o()->__mosek_2fusion_2Debug__p(std::string ("      code["))->__mosek_2fusion_2Debug__p(_ptr__6762[safe_add( _6765,_6783 )])->__mosek_2fusion_2Debug__p(std::string ("] "))->__mosek_2fusion_2Debug__p(_11789)->__mosek_2fusion_2Debug__p(_11792)->__mosek_2fusion_2Debug__lf();
            }
          }
        }
      }
      {}
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__pick(std::shared_ptr< monty::ndarray< int,2 > > _6789) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__pick(_6789); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::pick(std::shared_ptr< monty::ndarray< int,2 > > _6789) { return __mosek_2fusion_2BaseExpression__pick(_6789); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int,2 > > _6789) { return __mosek_2fusion_2BaseExpression__pick(_6789); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__pick(std::shared_ptr< monty::ndarray< int,2 > > _6789){
  return (::mosek::fusion::p_ExprPick::_new_ExprPick((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_6789)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__pick(std::shared_ptr< monty::ndarray< int,1 > > _6790) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__pick(_6790); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::pick(std::shared_ptr< monty::ndarray< int,1 > > _6790) { return __mosek_2fusion_2BaseExpression__pick(_6790); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int,1 > > _6790) { return __mosek_2fusion_2BaseExpression__pick(_6790); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__pick(std::shared_ptr< monty::ndarray< int,1 > > _6790){
  _checked_ptr_1<int> _ptr__6790(_6790 ? _6790->raw() : nullptr, _6790 ? _6790->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,2 > > _6791 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_6790)->size(0)),(int)1)));
  int _11793 = (int)0;
  int _11794 = (int)((_6790)->size(0));
  for (int _6792 = _11793; _6792 < _11794; ++_6792)
  {
    {
      ((*_6791)(_6792,(int)0)) = _ptr__6790[_6792];
    }
  }
  return (::mosek::fusion::p_ExprPick::_new_ExprPick((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_6791)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__index(std::shared_ptr< monty::ndarray< int,1 > > _6793) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__index(_6793); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::index(std::shared_ptr< monty::ndarray< int,1 > > _6793) { return __mosek_2fusion_2BaseExpression__index(_6793); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__index(std::shared_ptr< monty::ndarray< int,1 > > _6793) { return __mosek_2fusion_2BaseExpression__index(_6793); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__index(std::shared_ptr< monty::ndarray< int,1 > > _6793){
  _checked_ptr_1<int> _ptr__6793(_6793 ? _6793->raw() : nullptr, _6793 ? _6793->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,2 > > _6794 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)1,(int)((_6793)->size(0)))));
  int _11795 = (int)0;
  int _11796 = (int)((_6793)->size(0));
  for (int _6795 = _11795; _6795 < _11796; ++_6795)
  {
    {
      ((*_6794)((int)0,_6795)) = _ptr__6793[_6795];
    }
  }
  return (::mosek::fusion::p_ExprPick::_new_ExprPick((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_6794)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__index(int _6796) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__index(_6796); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::index(int _6796) { return __mosek_2fusion_2BaseExpression__index(_6796); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__index(int _6796) { return __mosek_2fusion_2BaseExpression__index(_6796); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__index(int _6796){
  std::shared_ptr< monty::ndarray< int,2 > > _6797 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)1,(int)1)));
  ((*_6797)((int)0,(int)0)) = _6796;
  return (::mosek::fusion::p_ExprPick::_new_ExprPick((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_6797)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__slice(std::shared_ptr< monty::ndarray< int,1 > > _6798,std::shared_ptr< monty::ndarray< int,1 > > _6799) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__slice(_6798,_6799); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::slice(std::shared_ptr< monty::ndarray< int,1 > > _6798,std::shared_ptr< monty::ndarray< int,1 > > _6799) { return __mosek_2fusion_2BaseExpression__slice(_6798,_6799); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__slice(std::shared_ptr< monty::ndarray< int,1 > > _6798,std::shared_ptr< monty::ndarray< int,1 > > _6799) { return __mosek_2fusion_2BaseExpression__slice(_6798,_6799); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__slice(std::shared_ptr< monty::ndarray< int,1 > > _6798,std::shared_ptr< monty::ndarray< int,1 > > _6799){
  _checked_ptr_1<int> _ptr__6798(_6798 ? _6798->raw() : nullptr, _6798 ? _6798->size(0) : 0);
  _checked_ptr_1<int> _ptr__6799(_6799 ? _6799->raw() : nullptr, _6799 ? _6799->size(0) : 0);
  return (::mosek::fusion::p_ExprSlice::_new_ExprSlice((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_6798,_6799)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__slice(int _6800,int _6801) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__slice(_6800,_6801); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::slice(int _6800,int _6801) { return __mosek_2fusion_2BaseExpression__slice(_6800,_6801); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__slice(int _6800,int _6801) { return __mosek_2fusion_2BaseExpression__slice(_6800,_6801); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__slice(int _6800,int _6801){
  return (::mosek::fusion::p_ExprSlice::_new_ExprSlice((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_6800)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_6801)}))).as<::mosek::fusion::Expression>();
}
long long mosek::fusion::BaseExpression :: getSize() { return mosek::fusion::p_BaseExpression::_get_impl(this)->getSize(); }long long mosek::fusion::p_BaseExpression::getSize(){
  return ::mosek::fusion::p_Set::size(shape);
}
int mosek::fusion::BaseExpression :: getND() { return mosek::fusion::p_BaseExpression::_get_impl(this)->getND(); }int mosek::fusion::p_BaseExpression::getND(){
  return (int)((shape)->size(0));
}
int mosek::fusion::BaseExpression :: getDim(int _6802) { return mosek::fusion::p_BaseExpression::_get_impl(this)->getDim(_6802); }int mosek::fusion::p_BaseExpression::getDim(int _6802){
  return ((*shape)(_6802));
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::BaseExpression :: getShape() { return mosek::fusion::p_BaseExpression::_get_impl(this)->getShape(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_BaseExpression::getShape(){
  return ::mosek::fusion::Utils::Tools::arraycopy(shape);
}
void mosek::fusion::p_BaseExpression::destroy(){shape.reset();}void mosek::fusion::BaseExpression::destroy() { mosek::fusion::p_BaseExpression::_get_impl(this)->destroy(); }mosek::fusion::WorkStack::WorkStack(mosek::fusion::p_WorkStack *_impl) : _impl(_impl) { /*std::cout << "WorkStack() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::WorkStack::~WorkStack() { delete _impl; _impl = nullptr; }mosek::fusion::p_WorkStack::p_WorkStack  (::mosek::fusion::WorkStack * _pubthis) :     _pubthis(_pubthis){}int mosek::fusion::WorkStack::get_code_base() { return _impl->code_base; }
void mosek::fusion::WorkStack::set_code_base(int _val) { _impl->code_base = _val; }
int mosek::fusion::WorkStack::get_cconst_base() { return _impl->cconst_base; }
void mosek::fusion::WorkStack::set_cconst_base(int _val) { _impl->cconst_base = _val; }
int mosek::fusion::WorkStack::get_codeptr_base() { return _impl->codeptr_base; }
void mosek::fusion::WorkStack::set_codeptr_base(int _val) { _impl->codeptr_base = _val; }
int mosek::fusion::WorkStack::get_cof_base() { return _impl->cof_base; }
void mosek::fusion::WorkStack::set_cof_base(int _val) { _impl->cof_base = _val; }
int mosek::fusion::WorkStack::get_nidxs_base() { return _impl->nidxs_base; }
void mosek::fusion::WorkStack::set_nidxs_base(int _val) { _impl->nidxs_base = _val; }
int mosek::fusion::WorkStack::get_sp_base() { return _impl->sp_base; }
void mosek::fusion::WorkStack::set_sp_base(int _val) { _impl->sp_base = _val; }
int mosek::fusion::WorkStack::get_shape_base() { return _impl->shape_base; }
void mosek::fusion::WorkStack::set_shape_base(int _val) { _impl->shape_base = _val; }
int mosek::fusion::WorkStack::get_ptr_base() { return _impl->ptr_base; }
void mosek::fusion::WorkStack::set_ptr_base(int _val) { _impl->ptr_base = _val; }
bool mosek::fusion::WorkStack::get_hassp() { return _impl->hassp; }
void mosek::fusion::WorkStack::set_hassp(bool _val) { _impl->hassp = _val; }
int mosek::fusion::WorkStack::get_ncodeatom() { return _impl->ncodeatom; }
void mosek::fusion::WorkStack::set_ncodeatom(int _val) { _impl->ncodeatom = _val; }
int mosek::fusion::WorkStack::get_nelem() { return _impl->nelem; }
void mosek::fusion::WorkStack::set_nelem(int _val) { _impl->nelem = _val; }
int mosek::fusion::WorkStack::get_nnz() { return _impl->nnz; }
void mosek::fusion::WorkStack::set_nnz(int _val) { _impl->nnz = _val; }
int mosek::fusion::WorkStack::get_nd() { return _impl->nd; }
void mosek::fusion::WorkStack::set_nd(int _val) { _impl->nd = _val; }
int mosek::fusion::WorkStack::get_pf64() { return _impl->pf64; }
void mosek::fusion::WorkStack::set_pf64(int _val) { _impl->pf64 = _val; }
int mosek::fusion::WorkStack::get_pi64() { return _impl->pi64; }
void mosek::fusion::WorkStack::set_pi64(int _val) { _impl->pi64 = _val; }
int mosek::fusion::WorkStack::get_pi32() { return _impl->pi32; }
void mosek::fusion::WorkStack::set_pi32(int _val) { _impl->pi32 = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::WorkStack::get_f64() { return _impl->f64; }
void mosek::fusion::WorkStack::set_f64(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->f64 = _val; }
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::WorkStack::get_i64() { return _impl->i64; }
void mosek::fusion::WorkStack::set_i64(std::shared_ptr< monty::ndarray< long long,1 > > _val) { _impl->i64 = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::WorkStack::get_i32() { return _impl->i32; }
void mosek::fusion::WorkStack::set_i32(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->i32 = _val; }
mosek::fusion::WorkStack::t mosek::fusion::p_WorkStack::_new_WorkStack  (){ return new mosek::fusion::WorkStack(); }mosek::fusion::WorkStack::WorkStack  () :    WorkStack(new mosek::fusion::p_WorkStack(this)){ mosek::fusion::p_WorkStack::_get_impl(this)->_initialize(); }void mosek::fusion::p_WorkStack::_initialize  (){monty::rc_reserve __reserve_this(_pubthis);   {
    i32 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)256)));
    i64 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)256)));
    f64 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)256)));
    pi32 = (int)0;
    pi64 = (int)0;
    pf64 = (int)0;
    nd = (int)0;
    nnz = (int)0;
    nelem = (int)0;
    hassp = false;
    ncodeatom = (int)0;
    ptr_base = (int)0;
    shape_base = (int)0;
    sp_base = (int)0;
    nidxs_base = (int)0;
    cof_base = (int)0;
    cconst_base = (int)0;
    code_base = (int)0;
    codeptr_base = (int)0;
  }
}std::string mosek::fusion::WorkStack :: formatCurrent() { return mosek::fusion::p_WorkStack::_get_impl(this)->formatCurrent(); }std::string mosek::fusion::p_WorkStack::formatCurrent(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _6803 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  std::vector<int> _11797;
  for (int _6804 = (int)0, _11798 = nd; _6804 < _11798 ; ++_6804)
  {
    _11797.push_back(((*i32)(safe_add( shape_base,_6804 ))));
  }
  auto _11799 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11797.size()),_11797.begin(),_11797.end()));
  std::vector<int> _11800;
  for (int _6805 = (int)0, _11801 = safe_add( nelem,(int)1 ); _6805 < _11801 ; ++_6805)
  {
    _11800.push_back(((*i32)(safe_add( ptr_base,_6805 ))));
  }
  auto _11802 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11800.size()),_11800.begin(),_11800.end()));
  _6803->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  nelem     = "))->__mosek_2fusion_2Utils_2StringBuffer__a(nelem)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  nnz       = "))->__mosek_2fusion_2Utils_2StringBuffer__a(nnz)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  hassp     = "))->__mosek_2fusion_2Utils_2StringBuffer__a(hassp)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" / "))->__mosek_2fusion_2Utils_2StringBuffer__a(hassp)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  shape     = "))->__mosek_2fusion_2Utils_2StringBuffer__a(_11799)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  ptr       = "))->__mosek_2fusion_2Utils_2StringBuffer__a(_11802)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"));
  if ((ncodeatom > (int)0))
  {
    {
      std::vector<int> _11803;
      for (int _6806 = (int)0, _11804 = safe_add( nnz,(int)1 ); _6806 < _11804 ; ++_6806)
      {
        _11803.push_back(((*i32)(safe_add( codeptr_base,_6806 ))));
      }
      auto _11805 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11803.size()),_11803.begin(),_11803.end()));
      _6803->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  codeptr   = "))->__mosek_2fusion_2Utils_2StringBuffer__a(_11805)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"));
    }
  }
  {}
  if (hassp)
  {
    {
      std::vector<long long> _11806;
      for (int _6807 = (int)0, _11807 = nelem; _6807 < _11807 ; ++_6807)
      {
        _11806.push_back(((*i64)(safe_add( sp_base,_6807 ))));
      }
      auto _11808 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_11806.size()),_11806.begin(),_11806.end()));
      _6803->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  sp        = "))->__mosek_2fusion_2Utils_2StringBuffer__a(_11808)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"));
    }
  }
  {}
  int _11809 = (int)0;
  int _11810 = nelem;
  for (int _6808 = _11809; _6808 < _11810; ++_6808)
  {
    {
      std::vector<long long> _11811;
      for (int _6809 = ((*i32)(safe_add( ptr_base,_6808 ))), _11812 = ((*i32)(safe_add( safe_add( ptr_base,_6808 ),(int)1 ))); _6809 < _11812 ; ++_6809)
      {
        _11811.push_back(((*i64)(safe_add( nidxs_base,_6809 ))));
      }
      auto _11813 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_11811.size()),_11811.begin(),_11811.end()));
      std::vector<double> _11814;
      for (int _6810 = ((*i32)(safe_add( ptr_base,_6808 ))), _11815 = ((*i32)(safe_add( safe_add( ptr_base,_6808 ),(int)1 ))); _6810 < _11815 ; ++_6810)
      {
        _11814.push_back(((*f64)(safe_add( cof_base,_6810 ))));
      }
      auto _11816 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11814.size()),_11814.begin(),_11814.end()));
      _6803->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  row["))->__mosek_2fusion_2Utils_2StringBuffer__a(_6808)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("    nidx : "))->__mosek_2fusion_2Utils_2StringBuffer__a(_11813)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("    cof  : "))->__mosek_2fusion_2Utils_2StringBuffer__a(_11816)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"));
      if ((ncodeatom > (int)0))
      {
        {
          int _11817 = ((*i32)(safe_add( ptr_base,_6808 )));
          int _11818 = ((*i32)(safe_add( safe_add( ptr_base,_6808 ),(int)1 )));
          for (int _6811 = _11817; _6811 < _11818; ++_6811)
          {
            {
              std::vector<int> _11819;
              for (int _6812 = ((*i32)(safe_add( codeptr_base,_6811 ))), _11820 = ((*i32)(safe_add( safe_add( codeptr_base,_6811 ),(int)1 ))); _6812 < _11820 ; ++_6812)
              {
                _11819.push_back(((*i32)(safe_add( code_base,_6812 ))));
              }
              auto _11821 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11819.size()),_11819.begin(),_11819.end()));
              std::vector<double> _11822;
              for (int _6813 = ((*i32)(safe_add( codeptr_base,_6811 ))), _11823 = ((*i32)(safe_add( safe_add( codeptr_base,_6811 ),(int)1 ))); _6813 < _11823 ; ++_6813)
              {
                _11822.push_back(((*f64)(safe_add( cconst_base,_6813 ))));
              }
              auto _11824 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11822.size()),_11822.begin(),_11822.end()));
              _6803->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("      code["))->__mosek_2fusion_2Utils_2StringBuffer__a(((*i64)(safe_add( nidxs_base,_6811 ))))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("] "))->__mosek_2fusion_2Utils_2StringBuffer__a(_11821)->__mosek_2fusion_2Utils_2StringBuffer__a(_11824)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"));
            }
          }
        }
      }
      {}
    }
  }
  return _6803->toString();
}
bool mosek::fusion::WorkStack :: peek_hassp() { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_hassp(); }bool mosek::fusion::p_WorkStack::peek_hassp(){
  return (_pubthis->peeki32(safe_add( (int)3,_pubthis->peek_nd() )) != (int)0);
}
int mosek::fusion::WorkStack :: peek_nnz() { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_nnz(); }int mosek::fusion::p_WorkStack::peek_nnz(){
  return _pubthis->peeki32(safe_add( (int)2,_pubthis->peek_nd() ));
}
int mosek::fusion::WorkStack :: peek_nelem() { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_nelem(); }int mosek::fusion::p_WorkStack::peek_nelem(){
  return _pubthis->peeki32(safe_add( (int)1,_pubthis->peek_nd() ));
}
int mosek::fusion::WorkStack :: peek_dim(int _6814) { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_dim(_6814); }int mosek::fusion::p_WorkStack::peek_dim(int _6814){
  return _pubthis->peeki32(safe_add( _6814,(int)1 ));
}
int mosek::fusion::WorkStack :: peek_nd() { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_nd(); }int mosek::fusion::p_WorkStack::peek_nd(){
  return _pubthis->peeki32();
}
void mosek::fusion::WorkStack :: alloc_expr(int _6815,int _6816,int _6817,bool _6818) { mosek::fusion::p_WorkStack::_get_impl(this)->alloc_expr(_6815,_6816,_6817,_6818); }void mosek::fusion::p_WorkStack::alloc_expr(int _6815,int _6816,int _6817,bool _6818){
  _pubthis->alloc_expr(_6815,_6816,_6817,_6818,(int)0);
}
void mosek::fusion::WorkStack :: alloc_expr(int _6819,int _6820,int _6821,bool _6822,int _6823) { mosek::fusion::p_WorkStack::_get_impl(this)->alloc_expr(_6819,_6820,_6821,_6822,_6823); }void mosek::fusion::p_WorkStack::alloc_expr(int _6819,int _6820,int _6821,bool _6822,int _6823){
  cof_base = _pubthis->allocf64(_6821);
  cconst_base = _pubthis->allocf64(_6823);
  nidxs_base = _pubthis->alloci64(_6821);
  int _11825;
  bool _11826 = _6822;
  if (_11826)
  {
    _11825 = _pubthis->alloci64(_6820);
  }
  else
  {
    _11825 = (-(int)9999);
  }
  sp_base = _11825;
  code_base = _pubthis->alloci32(_6823);
  int _11827;
  bool _11828 = (_6823 > (int)0);
  if (_11828)
  {
    _11827 = _pubthis->alloci32(safe_add( _6821,(int)1 ));
  }
  else
  {
    _11827 = (-(int)9999);
  }
  codeptr_base = _11827;
  ptr_base = _pubthis->alloci32(safe_add( _6820,(int)1 ));
  _pubthis->pushi32(_6823);
  int _11829;
  bool _11830 = _6822;
  if (_11830)
  {
    _11829 = (int)1;
  }
  else
  {
    _11829 = (int)0;
  }
  _pubthis->pushi32(_11829);
  _pubthis->pushi32(_6821);
  _pubthis->pushi32(_6820);
  shape_base = _pubthis->alloci32(_6819);
  _pubthis->pushi32(_6819);
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->ncodeatom = _6823;
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->nd = _6819;
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->nelem = _6820;
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->nnz = _6821;
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->hassp = _6822;
}
void mosek::fusion::WorkStack :: pop_expr() { mosek::fusion::p_WorkStack::_get_impl(this)->pop_expr(); }void mosek::fusion::p_WorkStack::pop_expr(){
  nd = _pubthis->popi32();
  shape_base = _pubthis->popi32(nd);
  nelem = _pubthis->popi32();
  nnz = _pubthis->popi32();
  hassp = (_pubthis->popi32() != (int)0);
  ncodeatom = _pubthis->popi32();
  ptr_base = _pubthis->popi32(safe_add( nelem,(int)1 ));
  int _11831;
  bool _11832 = (ncodeatom > (int)0);
  if (_11832)
  {
    _11831 = _pubthis->popi32(safe_add( nnz,(int)1 ));
  }
  else
  {
    _11831 = (-(int)9999);
  }
  codeptr_base = _11831;
  code_base = _pubthis->popi32(ncodeatom);
  int _11833;
  bool _11834 = hassp;
  if (_11834)
  {
    _11833 = _pubthis->popi64(nelem);
  }
  else
  {
    _11833 = (-(int)9999);
  }
  sp_base = _11833;
  nidxs_base = _pubthis->popi64(nnz);
  cconst_base = _pubthis->popf64(ncodeatom);
  cof_base = _pubthis->popf64(nnz);
}
void mosek::fusion::WorkStack :: move_expr(monty::rc_ptr< ::mosek::fusion::WorkStack > _6824) { mosek::fusion::p_WorkStack::_get_impl(this)->move_expr(_6824); }void mosek::fusion::p_WorkStack::move_expr(monty::rc_ptr< ::mosek::fusion::WorkStack > _6824){
  int _6825 = pi32;
  int _6826 = pi64;
  int _6827 = pf64;
  _pubthis->pop_expr();
  int _6828 = _6824->alloci32((_6825 - pi32));
  int _6829 = _6824->alloci64((_6826 - pi64));
  int _6830 = _6824->allocf64((_6827 - pf64));
  ::mosek::fusion::Utils::Tools::arraycopy(i32,pi32,mosek::fusion::p_WorkStack::_get_impl(_6824)->i32,_6828,(_6825 - pi32));
  ::mosek::fusion::Utils::Tools::arraycopy(i64,pi64,mosek::fusion::p_WorkStack::_get_impl(_6824)->i64,_6829,(_6826 - pi64));
  ::mosek::fusion::Utils::Tools::arraycopy(f64,pf64,mosek::fusion::p_WorkStack::_get_impl(_6824)->f64,_6830,(_6827 - pf64));
}
void mosek::fusion::WorkStack :: peek_expr() { mosek::fusion::p_WorkStack::_get_impl(this)->peek_expr(); }void mosek::fusion::p_WorkStack::peek_expr(){
  int _6831 = pi32;
  int _6832 = pi64;
  int _6833 = pf64;
  _pubthis->pop_expr();
  pi32 = _6831;
  pi64 = _6832;
  pf64 = _6833;
}
void mosek::fusion::WorkStack :: ensure_sparsity() { mosek::fusion::p_WorkStack::_get_impl(this)->ensure_sparsity(); }void mosek::fusion::p_WorkStack::ensure_sparsity(){
  int _6834 = ((*i32)((pi32 - (int)1)));
  bool _6835 = (((*i32)(((pi32 - _6834) - (int)3))) != (int)0);
  int _6836 = ((*i32)(((pi32 - _6834) - (int)1)));
  if ((!_6835))
  {
    {
      ((*i32)(((pi32 - _6834) - (int)3))) = (int)1;
      int _6837 = _pubthis->alloci64(_6836);
      int _11835 = (int)0;
      int _11836 = _6836;
      for (int _6838 = _11835; _6838 < _11836; ++_6838)
      {
        {
          ((*i64)(_6837)) = _6838;
        }
      }
    }
  }
  {}
}
void mosek::fusion::WorkStack :: clear() { mosek::fusion::p_WorkStack::_get_impl(this)->clear(); }void mosek::fusion::p_WorkStack::clear(){
  pi32 = (int)0;
  pi64 = (int)0;
  pf64 = (int)0;
}
int mosek::fusion::WorkStack :: allocf64(int _6839) { return mosek::fusion::p_WorkStack::_get_impl(this)->allocf64(_6839); }int mosek::fusion::p_WorkStack::allocf64(int _6839){
  _pubthis->ensuref64(_6839);
  int _6840 = pf64;
  pf64 += _6839;
  return _6840;
}
int mosek::fusion::WorkStack :: alloci64(int _6841) { return mosek::fusion::p_WorkStack::_get_impl(this)->alloci64(_6841); }int mosek::fusion::p_WorkStack::alloci64(int _6841){
  _pubthis->ensurei64(_6841);
  int _6842 = pi64;
  pi64 += _6841;
  return _6842;
}
int mosek::fusion::WorkStack :: alloci32(int _6843) { return mosek::fusion::p_WorkStack::_get_impl(this)->alloci32(_6843); }int mosek::fusion::p_WorkStack::alloci32(int _6843){
  if ((_6843 > (int)0))
  {
    {
      _pubthis->ensurei32(_6843);
      int _6844 = pi32;
      pi32 += _6843;
      return _6844;
    }
  }
  else
  {
    {
      return (int)0;
    }
  }
}
void mosek::fusion::WorkStack :: pushf64(double _6845) { mosek::fusion::p_WorkStack::_get_impl(this)->pushf64(_6845); }void mosek::fusion::p_WorkStack::pushf64(double _6845){
  _pubthis->ensuref64((int)1);
  ((*f64)(pf64)) = _6845;
  ++ pf64;
}
void mosek::fusion::WorkStack :: pushi64(long long _6846) { mosek::fusion::p_WorkStack::_get_impl(this)->pushi64(_6846); }void mosek::fusion::p_WorkStack::pushi64(long long _6846){
  _pubthis->ensurei64((int)1);
  ((*i64)(pi64)) = _6846;
  ++ pi64;
}
void mosek::fusion::WorkStack :: pushi32(int _6847) { mosek::fusion::p_WorkStack::_get_impl(this)->pushi32(_6847); }void mosek::fusion::p_WorkStack::pushi32(int _6847){
  _pubthis->ensurei32((int)1);
  ((*i32)(pi32)) = _6847;
  ++ pi32;
}
void mosek::fusion::WorkStack :: ensuref64(int _6848) { mosek::fusion::p_WorkStack::_get_impl(this)->ensuref64(_6848); }void mosek::fusion::p_WorkStack::ensuref64(int _6848){
  if ((safe_add( pf64,_6848 ) > (int)((f64)->size(0))))
  {
    {
      int _11837;
      bool _11838 = ((_6848 < (int)((f64)->size(0))) && ((int)((f64)->size(0)) < (int)0x3FFFFFFF));
      if (_11838)
      {
        _11837 = safe_mul( (int)((f64)->size(0)),(int)2 );
      }
      else
      {
        _11837 = safe_add( (int)((f64)->size(0)),_6848 );
      }
      int _6849 = _11837;
      std::shared_ptr< monty::ndarray< double,1 > > _6850 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6849)));
      _checked_ptr_1<double> _ptr__6850(_6850 ? _6850->raw() : nullptr,_6850 ? _6850->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(f64,(int)0,_6850,(int)0,pf64);
      f64 = _6850;
    }
  }
  {}
}
void mosek::fusion::WorkStack :: ensurei64(int _6851) { mosek::fusion::p_WorkStack::_get_impl(this)->ensurei64(_6851); }void mosek::fusion::p_WorkStack::ensurei64(int _6851){
  if ((safe_add( pi64,_6851 ) > (int)((i64)->size(0))))
  {
    {
      int _11839;
      bool _11840 = ((_6851 < (int)((i64)->size(0))) && ((int)((i64)->size(0)) < (int)0x3FFFFFFF));
      if (_11840)
      {
        _11839 = (int)((i64)->size(0));
      }
      else
      {
        _11839 = _6851;
      }
      int _6852 = safe_add( (int)((i64)->size(0)),_11839 );
      std::shared_ptr< monty::ndarray< long long,1 > > _6853 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6852)));
      _checked_ptr_1<long long> _ptr__6853(_6853 ? _6853->raw() : nullptr,_6853 ? _6853->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(i64,(int)0,_6853,(int)0,pi64);
      i64 = _6853;
    }
  }
  {}
}
void mosek::fusion::WorkStack :: ensurei32(int _6854) { mosek::fusion::p_WorkStack::_get_impl(this)->ensurei32(_6854); }void mosek::fusion::p_WorkStack::ensurei32(int _6854){
  if ((safe_add( pi32,_6854 ) > (int)((i32)->size(0))))
  {
    {
      int _11841;
      bool _11842 = ((_6854 < (int)((i32)->size(0))) && ((int)((i32)->size(0)) < (int)0x3FFFFFFF));
      if (_11842)
      {
        _11841 = safe_mul( (int)((i32)->size(0)),(int)2 );
      }
      else
      {
        _11841 = safe_add( (int)((i32)->size(0)),_6854 );
      }
      int _6855 = _11841;
      std::shared_ptr< monty::ndarray< int,1 > > _6856 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6855)));
      _checked_ptr_1<int> _ptr__6856(_6856 ? _6856->raw() : nullptr,_6856 ? _6856->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(i32,(int)0,_6856,(int)0,pi32);
      i32 = _6856;
    }
  }
  {}
}
int mosek::fusion::WorkStack :: popf64(int _6857) { return mosek::fusion::p_WorkStack::_get_impl(this)->popf64(_6857); }int mosek::fusion::p_WorkStack::popf64(int _6857){
  pf64 -= _6857;
  if ((pf64 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  return pf64;
}
int mosek::fusion::WorkStack :: popi64(int _6858) { return mosek::fusion::p_WorkStack::_get_impl(this)->popi64(_6858); }int mosek::fusion::p_WorkStack::popi64(int _6858){
  pi64 -= _6858;
  if ((pi64 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  return pi64;
}
int mosek::fusion::WorkStack :: popi32(int _6859) { return mosek::fusion::p_WorkStack::_get_impl(this)->popi32(_6859); }int mosek::fusion::p_WorkStack::popi32(int _6859){
  pi32 -= _6859;
  if ((pi32 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  return pi32;
}
void mosek::fusion::WorkStack :: popf64(int _6860,std::shared_ptr< monty::ndarray< double,1 > > _6861,int _6862) { mosek::fusion::p_WorkStack::_get_impl(this)->popf64(_6860,_6861,_6862); }void mosek::fusion::p_WorkStack::popf64(int _6860,std::shared_ptr< monty::ndarray< double,1 > > _6861,int _6862){
  _checked_ptr_1<double> _ptr__6861(_6861 ? _6861->raw() : nullptr, _6861 ? _6861->size(0) : 0);
  pf64 -= _6860;
  if ((pf64 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  ::mosek::fusion::Utils::Tools::arraycopy(f64,pf64,_6861,_6862,_6860);
}
void mosek::fusion::WorkStack :: popi64(int _6863,std::shared_ptr< monty::ndarray< long long,1 > > _6864,int _6865) { mosek::fusion::p_WorkStack::_get_impl(this)->popi64(_6863,_6864,_6865); }void mosek::fusion::p_WorkStack::popi64(int _6863,std::shared_ptr< monty::ndarray< long long,1 > > _6864,int _6865){
  _checked_ptr_1<long long> _ptr__6864(_6864 ? _6864->raw() : nullptr, _6864 ? _6864->size(0) : 0);
  pi64 -= _6863;
  if ((pi64 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  ::mosek::fusion::Utils::Tools::arraycopy(i64,pi64,_6864,_6865,_6863);
}
void mosek::fusion::WorkStack :: popi32(int _6866,std::shared_ptr< monty::ndarray< int,1 > > _6867,int _6868) { mosek::fusion::p_WorkStack::_get_impl(this)->popi32(_6866,_6867,_6868); }void mosek::fusion::p_WorkStack::popi32(int _6866,std::shared_ptr< monty::ndarray< int,1 > > _6867,int _6868){
  _checked_ptr_1<int> _ptr__6867(_6867 ? _6867->raw() : nullptr, _6867 ? _6867->size(0) : 0);
  pi32 -= _6866;
  if ((pi32 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  ::mosek::fusion::Utils::Tools::arraycopy(i32,pi32,_6867,_6868,_6866);
}
double mosek::fusion::WorkStack :: popf64() { return mosek::fusion::p_WorkStack::_get_impl(this)->popf64(); }double mosek::fusion::p_WorkStack::popf64(){
  -- pf64;
  if ((pf64 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  return ((*f64)(pf64));
}
long long mosek::fusion::WorkStack :: popi64() { return mosek::fusion::p_WorkStack::_get_impl(this)->popi64(); }long long mosek::fusion::p_WorkStack::popi64(){
  if ((pi64 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  -- pi64;
  return ((*i64)(pi64));
}
int mosek::fusion::WorkStack :: popi32() { return mosek::fusion::p_WorkStack::_get_impl(this)->popi32(); }int mosek::fusion::p_WorkStack::popi32(){
  -- pi32;
  if ((pi32 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  return ((*i32)(pi32));
}
double mosek::fusion::WorkStack :: peekf64() { return mosek::fusion::p_WorkStack::_get_impl(this)->peekf64(); }double mosek::fusion::p_WorkStack::peekf64(){
  return ((*f64)((pf64 - (int)1)));
}
long long mosek::fusion::WorkStack :: peeki64() { return mosek::fusion::p_WorkStack::_get_impl(this)->peeki64(); }long long mosek::fusion::p_WorkStack::peeki64(){
  return ((*i64)((pi64 - (int)1)));
}
int mosek::fusion::WorkStack :: peeki32() { return mosek::fusion::p_WorkStack::_get_impl(this)->peeki32(); }int mosek::fusion::p_WorkStack::peeki32(){
  return ((*i32)((pi32 - (int)1)));
}
double mosek::fusion::WorkStack :: peekf64(int _6869) { return mosek::fusion::p_WorkStack::_get_impl(this)->peekf64(_6869); }double mosek::fusion::p_WorkStack::peekf64(int _6869){
  return ((*f64)(((pf64 - _6869) - (int)1)));
}
long long mosek::fusion::WorkStack :: peeki64(int _6870) { return mosek::fusion::p_WorkStack::_get_impl(this)->peeki64(_6870); }long long mosek::fusion::p_WorkStack::peeki64(int _6870){
  return ((*i64)(((pi64 - _6870) - (int)1)));
}
int mosek::fusion::WorkStack :: peeki32(int _6871) { return mosek::fusion::p_WorkStack::_get_impl(this)->peeki32(_6871); }int mosek::fusion::p_WorkStack::peeki32(int _6871){
  return ((*i32)(((pi32 - _6871) - (int)1)));
}
void mosek::fusion::p_WorkStack::destroy(){f64.reset();i64.reset();i32.reset();}void mosek::fusion::WorkStack::destroy() { mosek::fusion::p_WorkStack::_get_impl(this)->destroy(); }mosek::fusion::SymmetricExpr::SymmetricExpr(mosek::fusion::p_SymmetricExpr *_impl) : _impl(_impl) { /*std::cout << "SymmetricExpr() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::SymmetricExpr::~SymmetricExpr() { delete _impl; _impl = nullptr; }mosek::fusion::p_SymmetricExpr::p_SymmetricExpr  (::mosek::fusion::SymmetricExpr * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::SymmetricExpr::t mosek::fusion::p_SymmetricExpr::_new_SymmetricExpr  (int _6872,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > > _6873,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6874,    monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _6875){ return new mosek::fusion::SymmetricExpr(_6872,_6873,_6874,_6875); }mosek::fusion::SymmetricExpr::SymmetricExpr  (int _6872,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > > _6873,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6874,    monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _6875) :    SymmetricExpr(new mosek::fusion::p_SymmetricExpr(this)){ mosek::fusion::p_SymmetricExpr::_get_impl(this)->_initialize(_6872,_6873,_6874,_6875); }void mosek::fusion::p_SymmetricExpr::_initialize  (int _6872,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > > _6873,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6874,    monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _6875){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_SymmetricExpr::_get_impl(::mosek::fusion::SymmetricExpr::t(_pubthis))->n = _6872;
    mosek::fusion::p_SymmetricExpr::_get_impl(::mosek::fusion::SymmetricExpr::t(_pubthis))->Ms = _6873;
    mosek::fusion::p_SymmetricExpr::_get_impl(::mosek::fusion::SymmetricExpr::t(_pubthis))->xs = _6874;
    mosek::fusion::p_SymmetricExpr::_get_impl(::mosek::fusion::SymmetricExpr::t(_pubthis))->b = _6875;
  }
}monty::rc_ptr< ::mosek::fusion::SymmetricExpr > mosek::fusion::p_SymmetricExpr::add(monty::rc_ptr< ::mosek::fusion::SymmetricExpr > _6876,monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _6877){
  if ((mosek::fusion::p_SymmetricExpr::_get_impl(_6876)->n != _6877->getdim()))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Dimension does not match"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _11843;
  bool _11844 = (NULL != mosek::fusion::p_SymmetricExpr::_get_impl(_6876)->b.get());
  if (_11844)
  {
    _11843 = mosek::fusion::p_SymmetricExpr::_get_impl(_6876)->b->__mosek_2fusion_2SymmetricMatrix__add(_6877);
  }
  else
  {
    _11843 = _6877;
  }
  return ::mosek::fusion::p_SymmetricExpr::_new_SymmetricExpr(mosek::fusion::p_SymmetricExpr::_get_impl(_6876)->n,mosek::fusion::p_SymmetricExpr::_get_impl(_6876)->Ms,mosek::fusion::p_SymmetricExpr::_get_impl(_6876)->xs,_11843);
}
monty::rc_ptr< ::mosek::fusion::SymmetricExpr > mosek::fusion::p_SymmetricExpr::mul(monty::rc_ptr< ::mosek::fusion::SymmetricExpr > _6878,double _6879){
  std::vector<monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >> _11845;
  for (int _6880 = (int)0, _11846 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_6878)->Ms)->size(0)); _6880 < _11846 ; ++_6880)
  {
    _11845.push_back(((*mosek::fusion::p_SymmetricExpr::_get_impl(_6878)->Ms)(_6880))->__mosek_2fusion_2SymmetricMatrix__mul(_6879));
  }
  auto _11847 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 >(monty::shape(_11845.size()),_11845.begin(),_11845.end()));
  monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _11848;
  bool _11849 = (NULL != mosek::fusion::p_SymmetricExpr::_get_impl(_6878)->b.get());
  if (_11849)
  {
    _11848 = mosek::fusion::p_SymmetricExpr::_get_impl(_6878)->b->__mosek_2fusion_2SymmetricMatrix__mul(_6879);
  }
  else
  {
    _11848 = nullptr;
  }
  return ::mosek::fusion::p_SymmetricExpr::_new_SymmetricExpr(mosek::fusion::p_SymmetricExpr::_get_impl(_6878)->n,_11847,mosek::fusion::p_SymmetricExpr::_get_impl(_6878)->xs,_11848);
}
monty::rc_ptr< ::mosek::fusion::SymmetricExpr > mosek::fusion::p_SymmetricExpr::add(monty::rc_ptr< ::mosek::fusion::SymmetricExpr > _6881,monty::rc_ptr< ::mosek::fusion::SymmetricExpr > _6882){
  if ((mosek::fusion::p_SymmetricExpr::_get_impl(_6881)->n != mosek::fusion::p_SymmetricExpr::_get_impl(_6882)->n))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions of operands"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > > _6883 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 >(monty::shape(safe_add( (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_6881)->Ms)->size(0)),(int)((mosek::fusion::p_SymmetricExpr::_get_impl(_6882)->Ms)->size(0)) ))));
  std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6884 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(safe_add( (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_6881)->xs)->size(0)),(int)((mosek::fusion::p_SymmetricExpr::_get_impl(_6882)->xs)->size(0)) ))));
  int _6885 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_6881)->Ms)->size(0));
  int _11850 = (int)0;
  int _11851 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_6881)->Ms)->size(0));
  for (int _6886 = _11850; _6886 < _11851; ++_6886)
  {
    {
      ((*_6883)(_6886)) = ((*mosek::fusion::p_SymmetricExpr::_get_impl(_6881)->Ms)(_6886));
    }
  }
  int _11852 = (int)0;
  int _11853 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_6882)->Ms)->size(0));
  for (int _6887 = _11852; _6887 < _11853; ++_6887)
  {
    {
      ((*_6883)(safe_add( _6887,_6885 ))) = ((*mosek::fusion::p_SymmetricExpr::_get_impl(_6882)->Ms)(_6887));
    }
  }
  int _6888 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_6881)->xs)->size(0));
  int _11854 = (int)0;
  int _11855 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_6881)->xs)->size(0));
  for (int _6889 = _11854; _6889 < _11855; ++_6889)
  {
    {
      ((*_6884)(_6889)) = ((*mosek::fusion::p_SymmetricExpr::_get_impl(_6881)->xs)(_6889));
    }
  }
  int _11856 = (int)0;
  int _11857 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_6882)->xs)->size(0));
  for (int _6890 = _11856; _6890 < _11857; ++_6890)
  {
    {
      ((*_6884)(safe_add( _6890,_6888 ))) = ((*mosek::fusion::p_SymmetricExpr::_get_impl(_6882)->xs)(_6890));
    }
  }
  monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _11858;
  bool _11859 = ((NULL == mosek::fusion::p_SymmetricExpr::_get_impl(_6881)->b.get()) && (NULL == mosek::fusion::p_SymmetricExpr::_get_impl(_6882)->b.get()));
  if (_11859)
  {
    _11858 = nullptr;
  }
  else
  {
    monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _11860;
    bool _11861 = ((NULL != mosek::fusion::p_SymmetricExpr::_get_impl(_6881)->b.get()) && (NULL != mosek::fusion::p_SymmetricExpr::_get_impl(_6882)->b.get()));
    if (_11861)
    {
      _11860 = mosek::fusion::p_SymmetricExpr::_get_impl(_6881)->b->__mosek_2fusion_2SymmetricMatrix__add(mosek::fusion::p_SymmetricExpr::_get_impl(_6882)->b);
    }
    else
    {
      monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _11862;
      bool _11863 = (NULL != mosek::fusion::p_SymmetricExpr::_get_impl(_6881)->b.get());
      if (_11863)
      {
        _11862 = mosek::fusion::p_SymmetricExpr::_get_impl(_6881)->b;
      }
      else
      {
        _11862 = mosek::fusion::p_SymmetricExpr::_get_impl(_6882)->b;
      }
      _11860 = _11862;
    }
    _11858 = _11860;
  }
  monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _6891 = _11858;
  return ::mosek::fusion::p_SymmetricExpr::_new_SymmetricExpr(mosek::fusion::p_SymmetricExpr::_get_impl(_6881)->n,_6883,_6884,_6891);
}
std::string mosek::fusion::SymmetricExpr :: toString() { return mosek::fusion::p_SymmetricExpr::_get_impl(this)->toString(); }std::string mosek::fusion::p_SymmetricExpr::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _6892 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _6892->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("SymmetricExpr( ("))->__mosek_2fusion_2Utils_2StringBuffer__a(n)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(n)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") )"));
  return _6892->toString();
}
void mosek::fusion::p_SymmetricExpr::destroy(){xs.reset();b.reset();Ms.reset();}void mosek::fusion::SymmetricExpr::destroy() { mosek::fusion::p_SymmetricExpr::_get_impl(this)->destroy(); }mosek::fusion::Expr::Expr(mosek::fusion::p_Expr *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "Expr()" << this << std::endl; */ }mosek::fusion::Expr::~Expr() {  /* std::cout << "~Expr()" << this << std::endl << std::flush; */ }mosek::fusion::p_Expr::p_Expr  (::mosek::fusion::Expr * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::Expr::t mosek::fusion::p_Expr::_new_Expr  (std::shared_ptr< monty::ndarray< long long,1 > > _6893,    std::shared_ptr< monty::ndarray< long long,1 > > _6894,    std::shared_ptr< monty::ndarray< double,1 > > _6895,    std::shared_ptr< monty::ndarray< double,1 > > _6896,    std::shared_ptr< monty::ndarray< int,1 > > _6897,    std::shared_ptr< monty::ndarray< long long,1 > > _6898){ return new mosek::fusion::Expr(_6893,_6894,_6895,_6896,_6897,_6898); }mosek::fusion::Expr::Expr  (std::shared_ptr< monty::ndarray< long long,1 > > _6893,    std::shared_ptr< monty::ndarray< long long,1 > > _6894,    std::shared_ptr< monty::ndarray< double,1 > > _6895,    std::shared_ptr< monty::ndarray< double,1 > > _6896,    std::shared_ptr< monty::ndarray< int,1 > > _6897,    std::shared_ptr< monty::ndarray< long long,1 > > _6898) :    Expr(new mosek::fusion::p_Expr(this)){ mosek::fusion::p_Expr::_get_impl(this)->_initialize(_6893,_6894,_6895,_6896,_6897,_6898); }void mosek::fusion::p_Expr::_initialize  (std::shared_ptr< monty::ndarray< long long,1 > > _6893,    std::shared_ptr< monty::ndarray< long long,1 > > _6894,    std::shared_ptr< monty::ndarray< double,1 > > _6895,    std::shared_ptr< monty::ndarray< double,1 > > _6896,    std::shared_ptr< monty::ndarray< int,1 > > _6897,    std::shared_ptr< monty::ndarray< long long,1 > > _6898){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__6893(_6893 ? _6893->raw() : nullptr, _6893 ? _6893->size(0) : 0);
    _checked_ptr_1<long long> _ptr__6894(_6894 ? _6894->raw() : nullptr, _6894 ? _6894->size(0) : 0);
    _checked_ptr_1<double> _ptr__6895(_6895 ? _6895->raw() : nullptr, _6895 ? _6895->size(0) : 0);
    _checked_ptr_1<double> _ptr__6896(_6896 ? _6896->raw() : nullptr, _6896 ? _6896->size(0) : 0);
    _checked_ptr_1<int> _ptr__6897(_6897 ? _6897->raw() : nullptr, _6897 ? _6897->size(0) : 0);
    _checked_ptr_1<long long> _ptr__6898(_6898 ? _6898->raw() : nullptr, _6898 ? _6898->size(0) : 0);
    std::shared_ptr< monty::ndarray< int,1 > > _11864;
    bool _11865 = (NULL != _6897.get());
    if (_11865)
    {
      _11864 = ::mosek::fusion::Utils::Tools::arraycopy(_6897);
    }
    else
    {
      _11864 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(((int)((_6893)->size(0)) - (int)1))});
    }
    std::shared_ptr< monty::ndarray< long long,1 > > _11866;
    bool _11867 = (NULL != _6898.get());
    if (_11867)
    {
      _11866 = ::mosek::fusion::Utils::Tools::arraycopy(_6898);
    }
    else
    {
      _11866 = nullptr;
    }
    mosek::fusion::p_Expr::_initialize(::mosek::fusion::Utils::Tools::arraycopy(_6893),::mosek::fusion::Utils::Tools::arraycopy(_6894),::mosek::fusion::Utils::Tools::arraycopy(_6895),::mosek::fusion::Utils::Tools::arraycopy(_6896),_11864,_11866,(int)1);
    int _6899 = ((int)((_6893)->size(0)) - (int)1);
    if ((_6899 < (int)0))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid ptrb"));
      }
    }
    {}
    long long _6900 = _ptr__6893[_6899];
    if (((_6900 < (int)0) || ((_6900 != (int)((_6895)->size(0))) || (_6900 != (int)((_6894)->size(0))))))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid ptrb construction"));
      }
    }
    {}
    bool _6901 = true;
    bool _6902 = true;
    bool _6903 = true;
    std::shared_ptr< monty::ndarray< int,1 > > _6904 = mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->shape;
    _checked_ptr_1<int> _ptr__6904(_6904 ? _6904->raw() : nullptr,_6904 ? _6904->size(0) : 0);
    long long _6905 = ::mosek::fusion::p_Set::size(_6904);
    {
      int _11868 = (int)0;
      int _11869 = (int)((_6904)->size(0));
      for (int _6906 = _11868; _6906 < _11869; ++_6906)
      {
        {
          _6902 = (_6902 && (_ptr__6904[_6906] >= (int)0));
        }
      }
      int _11870 = (int)0;
      int _11871 = _6899;
      for (int _6907 = _11870; _6907 < _11871; ++_6907)
      {
        {
          _6901 = (_6901 && (_ptr__6893[_6907] <= _ptr__6893[safe_add( _6907,(int)1 )]));
        }
      }
      if (((NULL != _6898.get()) && ((int)((_6898)->size(0)) > (int)0)))
      {
        {
          _6903 = ((_ptr__6898[(int)0] >= (int)0) && (_ptr__6898[(_6899 - (int)1)] < _6905));
          int _11872 = (int)0;
          int _11873 = (_6899 - (int)1);
          for (int _6908 = _11872; _6908 < _11873; ++_6908)
          {
            {
              _6903 = (_6903 && (_ptr__6898[_6908] < _ptr__6898[safe_add( _6908,(int)1 )]));
            }
          }
        }
      }
      {}
    }
    if ((!_6902))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid shape"));
      }
    }
    {}
    if ((!_6901))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid ptrb"));
      }
    }
    {}
    if ((!_6903))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid sparsity pattern"));
      }
    }
    {}
  }
}mosek::fusion::Expr::t mosek::fusion::p_Expr::_new_Expr  (std::shared_ptr< monty::ndarray< long long,1 > > _6909,    std::shared_ptr< monty::ndarray< long long,1 > > _6910,    std::shared_ptr< monty::ndarray< double,1 > > _6911,    std::shared_ptr< monty::ndarray< double,1 > > _6912,    std::shared_ptr< monty::ndarray< int,1 > > _6913,    std::shared_ptr< monty::ndarray< long long,1 > > _6914,    int _6915){ return new mosek::fusion::Expr(_6909,_6910,_6911,_6912,_6913,_6914,_6915); }mosek::fusion::Expr::Expr  (std::shared_ptr< monty::ndarray< long long,1 > > _6909,    std::shared_ptr< monty::ndarray< long long,1 > > _6910,    std::shared_ptr< monty::ndarray< double,1 > > _6911,    std::shared_ptr< monty::ndarray< double,1 > > _6912,    std::shared_ptr< monty::ndarray< int,1 > > _6913,    std::shared_ptr< monty::ndarray< long long,1 > > _6914,    int _6915) :    Expr(new mosek::fusion::p_Expr(this)){ mosek::fusion::p_Expr::_get_impl(this)->_initialize(_6909,_6910,_6911,_6912,_6913,_6914,_6915); }void mosek::fusion::p_Expr::_initialize  (std::shared_ptr< monty::ndarray< long long,1 > > _6909,    std::shared_ptr< monty::ndarray< long long,1 > > _6910,    std::shared_ptr< monty::ndarray< double,1 > > _6911,    std::shared_ptr< monty::ndarray< double,1 > > _6912,    std::shared_ptr< monty::ndarray< int,1 > > _6913,    std::shared_ptr< monty::ndarray< long long,1 > > _6914,    int _6915){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__6909(_6909 ? _6909->raw() : nullptr, _6909 ? _6909->size(0) : 0);
    _checked_ptr_1<long long> _ptr__6910(_6910 ? _6910->raw() : nullptr, _6910 ? _6910->size(0) : 0);
    _checked_ptr_1<double> _ptr__6911(_6911 ? _6911->raw() : nullptr, _6911 ? _6911->size(0) : 0);
    _checked_ptr_1<double> _ptr__6912(_6912 ? _6912->raw() : nullptr, _6912 ? _6912->size(0) : 0);
    _checked_ptr_1<int> _ptr__6913(_6913 ? _6913->raw() : nullptr, _6913 ? _6913->size(0) : 0);
    _checked_ptr_1<long long> _ptr__6914(_6914 ? _6914->raw() : nullptr, _6914 ? _6914->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_6913);
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->shape = _6913;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->ptrb = _6909;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->subj = _6910;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->cof_v = _6911;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->bfix = _6912;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->inst = _6914;
    if ((NULL == mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->shape.get()))
    {
      {
        throw ::mosek::fusion::UnexpectedError(std::string ("Internal: NULL shape"));
      }
    }
    {}
  }
}mosek::fusion::Expr::t mosek::fusion::p_Expr::_new_Expr  (monty::rc_ptr< ::mosek::fusion::Expression > _6916){ return new mosek::fusion::Expr(_6916); }mosek::fusion::Expr::Expr  (monty::rc_ptr< ::mosek::fusion::Expression > _6916) :    Expr(new mosek::fusion::p_Expr(this)){ mosek::fusion::p_Expr::_get_impl(this)->_initialize(_6916); }void mosek::fusion::p_Expr::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _6916){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_6916->getShape());
    monty::rc_ptr< ::mosek::fusion::Expression > _11874 = _6916;
    if (false) {}
    else if (nullptr != dynamic_cast<::mosek::fusion::Expr*>(_11874.get()))
    {
      ::mosek::fusion::Expr::t _6917 (dynamic_cast<::mosek::fusion::Expr*>(_11874.get()));
      {
        shape = mosek::fusion::p_Expr::_get_impl(_6917)->shape;
        ptrb = mosek::fusion::p_Expr::_get_impl(_6917)->ptrb;
        subj = mosek::fusion::p_Expr::_get_impl(_6917)->subj;
        cof_v = mosek::fusion::p_Expr::_get_impl(_6917)->cof_v;
        bfix = mosek::fusion::p_Expr::_get_impl(_6917)->bfix;
        inst = mosek::fusion::p_Expr::_get_impl(_6917)->inst;
      }
    }
    else
    {
      mosek::fusion::Expression::t _6918 = _11874;
      {
        monty::rc_ptr< ::mosek::fusion::WorkStack > _6919 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
        monty::rc_ptr< ::mosek::fusion::WorkStack > _6920 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
        monty::rc_ptr< ::mosek::fusion::WorkStack > _6921 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
        _6918->eval(_6921,_6920,_6919);
        int _6922 = _6921->popi32();
        int _6923 = _6921->popi32(_6922);
        int _6924 = _6921->popi32();
        int _6925 = _6921->popi32();
        bool _6926 = (_6921->popi32() != (int)0);
        int _6927 = _6921->popi32(safe_add( _6924,(int)1 ));
        int _11875;
        bool _11876 = _6926;
        if (_11876)
        {
          _11875 = _6921->popi64(_6924);
        }
        else
        {
          _11875 = (int)0;
        }
        int _6928 = _11875;
        int _6929 = _6921->popi64(_6925);
        int _6930 = _6921->popf64(_6924);
        int _6931 = _6921->popf64(_6925);
        std::shared_ptr< monty::ndarray< int,1 > > _6932 = mosek::fusion::p_WorkStack::_get_impl(_6921)->i32;
        _checked_ptr_1<int> _ptr__6932(_6932 ? _6932->raw() : nullptr,_6932 ? _6932->size(0) : 0);
        std::shared_ptr< monty::ndarray< long long,1 > > _6933 = mosek::fusion::p_WorkStack::_get_impl(_6921)->i64;
        _checked_ptr_1<long long> _ptr__6933(_6933 ? _6933->raw() : nullptr,_6933 ? _6933->size(0) : 0);
        std::shared_ptr< monty::ndarray< double,1 > > _6934 = mosek::fusion::p_WorkStack::_get_impl(_6921)->f64;
        _checked_ptr_1<double> _ptr__6934(_6934 ? _6934->raw() : nullptr,_6934 ? _6934->size(0) : 0);
        std::vector<int> _11877;
        for (int _6935 = (int)0, _11878 = _6922; _6935 < _11878 ; ++_6935)
        {
          _11877.push_back(_ptr__6932[safe_add( _6923,_6935 )]);
        }
        auto _11879 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11877.size()),_11877.begin(),_11877.end()));
        shape = _11879;
        std::vector<long long> _11880;
        for (int _6936 = (int)0, _11881 = safe_add( _6924,(int)1 ); _6936 < _11881 ; ++_6936)
        {
          _11880.push_back(_ptr__6932[safe_add( _6927,_6936 )]);
        }
        auto _11882 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_11880.size()),_11880.begin(),_11880.end()));
        ptrb = _11882;
        std::vector<long long> _11883;
        for (int _6937 = (int)0, _11884 = _6925; _6937 < _11884 ; ++_6937)
        {
          _11883.push_back(_ptr__6933[safe_add( _6929,_6937 )]);
        }
        auto _11885 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_11883.size()),_11883.begin(),_11883.end()));
        subj = _11885;
        std::vector<double> _11886;
        for (int _6938 = (int)0, _11887 = _6925; _6938 < _11887 ; ++_6938)
        {
          _11886.push_back(_ptr__6934[safe_add( _6931,_6938 )]);
        }
        auto _11888 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11886.size()),_11886.begin(),_11886.end()));
        cof_v = _11888;
        std::vector<double> _11889;
        for (int _6939 = (int)0, _11890 = _6925; _6939 < _11890 ; ++_6939)
        {
          _11889.push_back(_ptr__6934[safe_add( _6930,_6939 )]);
        }
        auto _11891 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11889.size()),_11889.begin(),_11889.end()));
        bfix = _11891;
        std::shared_ptr< monty::ndarray< long long,1 > > _11892;
        bool _11893 = _6926;
        if (_11893)
        {
          std::vector<long long> _11894;
          for (int _6940 = (int)0, _11895 = _6925; _6940 < _11895 ; ++_6940)
          {
            _11894.push_back(_ptr__6933[safe_add( _6928,_6940 )]);
          }
          auto _11896 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_11894.size()),_11894.begin(),_11894.end()));
          _11892 = _11896;
        }
        else
        {
          _11892 = nullptr;
        }
        inst = _11892;
      }
    }
    if ((NULL == shape.get()))
    {
      {
        throw ::mosek::fusion::UnexpectedError(std::string ("Internal: NULL shape"));
      }
    }
    {}
  }
}long long mosek::fusion::p_Expr::prod(std::shared_ptr< monty::ndarray< int,1 > > _6941){
  _checked_ptr_1<int> _ptr__6941(_6941 ? _6941->raw() : nullptr, _6941 ? _6941->size(0) : 0);
  int _6942 = (int)1;
  int _11897 = (int)0;
  int _11898 = (int)((_6941)->size(0));
  for (int _6943 = _11897; _6943 < _11898; ++_6943)
  {
    {
      _6942 *= _ptr__6941[_6943];
    }
  }
  return _6942;
}
std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > mosek::fusion::p_Expr::varstack(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >,1 > > _6944){
  std::vector<monty::rc_ptr< ::mosek::fusion::Variable >> _11899;
  for (int _6945 = (int)0, _11900 = (int)((_6944)->size(0)); _6945 < _11900 ; ++_6945)
  {
    for (int _6946 = (int)0, _11901 = (int)((((*_6944)(_6945)))->size(0)); _6946 < _11901 ; ++_6946)
    {
      _11899.push_back(((*((*_6944)(_6945)))(_6946)));
    }
  }
  auto _11902 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(_11899.size()),_11899.begin(),_11899.end()));
  return _11902;
}
std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > mosek::fusion::p_Expr::varstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6947,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6948){
  if ((NULL == _6947.get()))
  {
    {
      return _6948;
    }
  }
  else if((NULL == _6948.get()))
  {
    {
      return _6947;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6949 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(safe_add( (int)((_6947)->size(0)),(int)((_6948)->size(0)) ))));
      int _11903 = (int)0;
      int _11904 = (int)((_6947)->size(0));
      for (int _6950 = _11903; _6950 < _11904; ++_6950)
      {
        {
          ((*_6949)(_6950)) = ((*_6947)(_6950));
        }
      }
      int _11905 = (int)0;
      int _11906 = (int)((_6948)->size(0));
      for (int _6951 = _11905; _6951 < _11906; ++_6951)
      {
        {
          ((*_6949)(safe_add( _6951,(int)((_6947)->size(0)) ))) = ((*_6948)(_6951));
        }
      }
      return _6949;
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::condense  ( monty::rc_ptr< ::mosek::fusion::Expression > _6952) { return mosek::fusion::p_Expr::condense(_6952); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::condense(monty::rc_ptr< ::mosek::fusion::Expression > _6952){
  return (::mosek::fusion::p_ExprCondense::_new_ExprCondense(_6952)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::flatten  ( monty::rc_ptr< ::mosek::fusion::Expression > _6953) { return mosek::fusion::p_Expr::flatten(_6953); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::flatten(monty::rc_ptr< ::mosek::fusion::Expression > _6953){
  if ((NULL == _6953.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for flatten may not be null"));
    }
  }
  {}
  long long _6954 = _6953->getSize();
  if ((!(_6954 <= (int)0x7fffffff)))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Maximum dimension size exceeded"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::reshape(_6953,(int)_6954);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::reshape  ( monty::rc_ptr< ::mosek::fusion::Expression > _6955,    int _6956,    int _6957) { return mosek::fusion::p_Expr::reshape(_6955,_6956,_6957); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::reshape(monty::rc_ptr< ::mosek::fusion::Expression > _6955,int _6956,int _6957){
  if ((NULL == _6955.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for reshape may not be null"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::reshape(_6955,::mosek::fusion::p_Set::make(_6956,_6957));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::reshape  ( monty::rc_ptr< ::mosek::fusion::Expression > _6958,    int _6959) { return mosek::fusion::p_Expr::reshape(_6958,_6959); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::reshape(monty::rc_ptr< ::mosek::fusion::Expression > _6958,int _6959){
  if ((NULL == _6958.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for reshape may not be null"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::reshape(_6958,::mosek::fusion::p_Set::make(_6959));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::reshape  ( monty::rc_ptr< ::mosek::fusion::Expression > _6960,    std::shared_ptr< monty::ndarray< int,1 > > _6961) { return mosek::fusion::p_Expr::reshape(_6960,_6961); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::reshape(monty::rc_ptr< ::mosek::fusion::Expression > _6960,std::shared_ptr< monty::ndarray< int,1 > > _6961){
  _checked_ptr_1<int> _ptr__6961(_6961 ? _6961->raw() : nullptr, _6961 ? _6961->size(0) : 0);
  return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(_6961,_6960)).as<::mosek::fusion::Expression>();
}
long long mosek::fusion::Expr :: size() { return mosek::fusion::p_Expr::_get_impl(this)->size(); }long long mosek::fusion::p_Expr::size(){
  return ((long long)((ptrb)->size(0)) - (int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::zeros  ( std::shared_ptr< monty::ndarray< int,1 > > _6962) { return mosek::fusion::p_Expr::zeros(_6962); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::zeros(std::shared_ptr< monty::ndarray< int,1 > > _6962){
  _checked_ptr_1<int> _ptr__6962(_6962 ? _6962->raw() : nullptr, _6962 ? _6962->size(0) : 0);
  return ::mosek::fusion::p_Expr::constTerm(_6962,(double)((int)0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::zeros  ( int _6963) { return mosek::fusion::p_Expr::zeros(_6963); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::zeros(int _6963){
  return ::mosek::fusion::p_Expr::constTerm(_6963,(double)((int)0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::ones  ( ) { return mosek::fusion::p_Expr::ones(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::ones(){
  return ::mosek::fusion::p_Expr::constTerm((double)((int)1));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::ones  ( std::shared_ptr< monty::ndarray< int,1 > > _6964,    std::shared_ptr< monty::ndarray< int,2 > > _6965) { return mosek::fusion::p_Expr::ones(_6964,_6965); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::ones(std::shared_ptr< monty::ndarray< int,1 > > _6964,std::shared_ptr< monty::ndarray< int,2 > > _6965){
  _checked_ptr_1<int> _ptr__6964(_6964 ? _6964->raw() : nullptr, _6964 ? _6964->size(0) : 0);
  return ::mosek::fusion::p_Expr::constTerm(_6964,_6965,(double)((int)1));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::ones  ( std::shared_ptr< monty::ndarray< int,1 > > _6966) { return mosek::fusion::p_Expr::ones(_6966); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::ones(std::shared_ptr< monty::ndarray< int,1 > > _6966){
  _checked_ptr_1<int> _ptr__6966(_6966 ? _6966->raw() : nullptr, _6966 ? _6966->size(0) : 0);
  return ::mosek::fusion::p_Expr::constTerm(_6966,(double)((int)1));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::ones  ( int _6967) { return mosek::fusion::p_Expr::ones(_6967); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::ones(int _6967){
  return ::mosek::fusion::p_Expr::constTerm(_6967,(double)((int)1));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6968) { return mosek::fusion::p_Expr::constTerm(_6968); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6968){
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(mosek::fusion::p_NDSparseArray::_get_impl(_6968)->dims,mosek::fusion::p_NDSparseArray::_get_impl(_6968)->inst,mosek::fusion::p_NDSparseArray::_get_impl(_6968)->cof)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( monty::rc_ptr< ::mosek::fusion::Matrix > _6969) { return mosek::fusion::p_Expr::constTerm(_6969); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(monty::rc_ptr< ::mosek::fusion::Matrix > _6969){
  int _6970 = _6969->numRows();
  int _6971 = _6969->numColumns();
  std::shared_ptr< monty::ndarray< int,1 > > _6972 = ::mosek::fusion::p_Set::make(_6970,_6971);
  _checked_ptr_1<int> _ptr__6972(_6972 ? _6972->raw() : nullptr,_6972 ? _6972->size(0) : 0);
  if (_6969->isSparse())
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _6973 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6969->numNonzeros())));
      _checked_ptr_1<double> _ptr__6973(_6973 ? _6973->raw() : nullptr,_6973 ? _6973->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _6974 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6969->numNonzeros())));
      _checked_ptr_1<int> _ptr__6974(_6974 ? _6974->raw() : nullptr,_6974 ? _6974->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _6975 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6969->numNonzeros())));
      _checked_ptr_1<int> _ptr__6975(_6975 ? _6975->raw() : nullptr,_6975 ? _6975->size(0) : 0);
      _6969->getDataAsTriplets(_6975,_6974,_6973);
      std::vector<long long> _11907;
      for (int _6977 = (int)0, _11908 = (int)((_6974)->size(0)); _6977 < _11908 ; ++_6977)
      {
        _11907.push_back(safe_add( safe_mul( _ptr__6975[_6977],_6971 ),_ptr__6974[_6977] ));
      }
      auto _11909 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_11907.size()),_11907.begin(),_11907.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _6976 = _11909;
      _checked_ptr_1<long long> _ptr__6976(_6976 ? _6976->raw() : nullptr,_6976 ? _6976->size(0) : 0);
      return (::mosek::fusion::p_ExprConst::_new_ExprConst(_6972,_6976,_6973)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprConst::_new_ExprConst(_6972,nullptr,_6969->getDataAsArray())).as<::mosek::fusion::Expression>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( double _6978) { return mosek::fusion::p_Expr::constTerm(_6978); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(double _6978){
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),nullptr,_6978)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( std::shared_ptr< monty::ndarray< int,1 > > _6979,    std::shared_ptr< monty::ndarray< int,2 > > _6980,    double _6981) { return mosek::fusion::p_Expr::constTerm(_6979,_6980,_6981); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< int,1 > > _6979,std::shared_ptr< monty::ndarray< int,2 > > _6980,double _6981){
  _checked_ptr_1<int> _ptr__6979(_6979 ? _6979->raw() : nullptr, _6979 ? _6979->size(0) : 0);
  int _6982 = (int)((_6980)->size(0));
  int _6983 = (int)((_6979)->size(0));
  std::shared_ptr< monty::ndarray< long long,1 > > _6984 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6982)));
  _checked_ptr_1<long long> _ptr__6984(_6984 ? _6984->raw() : nullptr,_6984 ? _6984->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6985 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6983)));
  _checked_ptr_1<long long> _ptr__6985(_6985 ? _6985->raw() : nullptr,_6985 ? _6985->size(0) : 0);
  _ptr__6985[(_6983 - (int)1)] = (int)1;
  int _11910 = (int)1;
  int _11911 = _6983;
  for (int _6986 = _11910; _6986 < _11911; ++_6986)
  {
    {
      _ptr__6985[((_6983 - _6986) - (int)1)] = safe_mul( _ptr__6985[(_6983 - _6986)],_ptr__6979[(_6983 - _6986)] );
    }
  }
  int _11912 = (int)0;
  int _11913 = _6982;
  for (int _6987 = _11912; _6987 < _11913; ++_6987)
  {
    {
      int _11914 = (int)0;
      int _11915 = _6983;
      for (int _6988 = _11914; _6988 < _11915; ++_6988)
      {
        {
          _ptr__6984[_6987] += safe_mul( _ptr__6985[_6988],((*_6980)(_6987,_6988)) );
        }
      }
    }
  }
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(_6979,_6984,_6981)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( std::shared_ptr< monty::ndarray< int,1 > > _6989,    std::shared_ptr< monty::ndarray< int,2 > > _6990,    std::shared_ptr< monty::ndarray< double,1 > > _6991) { return mosek::fusion::p_Expr::constTerm(_6989,_6990,_6991); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< int,1 > > _6989,std::shared_ptr< monty::ndarray< int,2 > > _6990,std::shared_ptr< monty::ndarray< double,1 > > _6991){
  _checked_ptr_1<int> _ptr__6989(_6989 ? _6989->raw() : nullptr, _6989 ? _6989->size(0) : 0);
  _checked_ptr_1<double> _ptr__6991(_6991 ? _6991->raw() : nullptr, _6991 ? _6991->size(0) : 0);
  int _6992 = (int)((_6990)->size(0));
  int _6993 = (int)((_6989)->size(0));
  std::shared_ptr< monty::ndarray< long long,1 > > _6994 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6992)));
  _checked_ptr_1<long long> _ptr__6994(_6994 ? _6994->raw() : nullptr,_6994 ? _6994->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6995 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6993)));
  _checked_ptr_1<long long> _ptr__6995(_6995 ? _6995->raw() : nullptr,_6995 ? _6995->size(0) : 0);
  _ptr__6995[(_6993 - (int)1)] = (int)1;
  int _11916 = (int)1;
  int _11917 = _6993;
  for (int _6996 = _11916; _6996 < _11917; ++_6996)
  {
    {
      _ptr__6995[((_6993 - _6996) - (int)1)] = safe_mul( _ptr__6995[(_6993 - _6996)],_ptr__6989[(_6993 - _6996)] );
    }
  }
  int _11918 = (int)0;
  int _11919 = _6992;
  for (int _6997 = _11918; _6997 < _11919; ++_6997)
  {
    {
      int _11920 = (int)0;
      int _11921 = _6993;
      for (int _6998 = _11920; _6998 < _11921; ++_6998)
      {
        {
          _ptr__6994[_6997] += safe_mul( _ptr__6995[_6998],((*_6990)(_6997,_6998)) );
        }
      }
    }
  }
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(_6989,_6994,_6991)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( std::shared_ptr< monty::ndarray< int,1 > > _6999,    double _7000) { return mosek::fusion::p_Expr::constTerm(_6999,_7000); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< int,1 > > _6999,double _7000){
  _checked_ptr_1<int> _ptr__6999(_6999 ? _6999->raw() : nullptr, _6999 ? _6999->size(0) : 0);
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(_6999,nullptr,_7000)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( int _7001,    double _7002) { return mosek::fusion::p_Expr::constTerm(_7001,_7002); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(int _7001,double _7002){
  std::vector<double> _11922;
  for (int _7003 = (int)0, _11923 = _7001; _7003 < _11923 ; ++_7003)
  {
    _11922.push_back(_7002);
  }
  auto _11924 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11922.size()),_11922.begin(),_11922.end()));
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7001)}),nullptr,_11924)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( std::shared_ptr< monty::ndarray< double,2 > > _7004) { return mosek::fusion::p_Expr::constTerm(_7004); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< double,2 > > _7004){
  std::vector<double> _11925;
  for (int _7005 = (int)0, _11926 = (int)((_7004)->size(0)); _7005 < _11926 ; ++_7005)
  {
    for (int _7006 = (int)0, _11927 = (int)((_7004)->size(1)); _7006 < _11927 ; ++_7006)
    {
      _11925.push_back(((*_7004)(_7005,_7006)));
    }
  }
  auto _11928 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11925.size()),_11925.begin(),_11925.end()));
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_7004)->size(0))),(int)((int)((_7004)->size(1)))}),nullptr,_11928)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( std::shared_ptr< monty::ndarray< double,1 > > _7007) { return mosek::fusion::p_Expr::constTerm(_7007); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< double,1 > > _7007){
  _checked_ptr_1<double> _ptr__7007(_7007 ? _7007->raw() : nullptr, _7007 ? _7007->size(0) : 0);
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_7007)->size(0)))}),nullptr,_7007)).as<::mosek::fusion::Expression>();
}
long long mosek::fusion::Expr :: numNonzeros() { return mosek::fusion::p_Expr::_get_impl(this)->numNonzeros(); }long long mosek::fusion::p_Expr::numNonzeros(){
  return (long long)((cof_v)->size(0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sum  ( monty::rc_ptr< ::mosek::fusion::Expression > _7008,    int _7009) { return mosek::fusion::p_Expr::sum(_7008,_7009); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sum(monty::rc_ptr< ::mosek::fusion::Expression > _7008,int _7009){
  return (::mosek::fusion::p_ExprSumReduce::_new_ExprSumReduce(_7009,_7008)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sum  ( monty::rc_ptr< ::mosek::fusion::Expression > _7010) { return mosek::fusion::p_Expr::sum(_7010); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sum(monty::rc_ptr< ::mosek::fusion::Expression > _7010){
  return (::mosek::fusion::p_ExprSumReduce::_new_ExprSumReduce((int)0,::mosek::fusion::p_Expr::flatten(_7010))).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::neg  ( monty::rc_ptr< ::mosek::fusion::Expression > _7011) { return mosek::fusion::p_Expr::neg(_7011); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::neg(monty::rc_ptr< ::mosek::fusion::Expression > _7011){
  return (::mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst((double)((-(int)1)),_7011)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(bool _7012,monty::rc_ptr< ::mosek::fusion::Matrix > _7013,monty::rc_ptr< ::mosek::fusion::Expression > _7014){
  long long _7015 = _7013->numNonzeros();
  int _7016 = _7013->numRows();
  int _7017 = _7013->numColumns();
  std::shared_ptr< monty::ndarray< double,1 > > _7018 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7015)));
  _checked_ptr_1<double> _ptr__7018(_7018 ? _7018->raw() : nullptr,_7018 ? _7018->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7019 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7015)));
  _checked_ptr_1<int> _ptr__7019(_7019 ? _7019->raw() : nullptr,_7019 ? _7019->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7020 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7015)));
  _checked_ptr_1<int> _ptr__7020(_7020 ? _7020->raw() : nullptr,_7020 ? _7020->size(0) : 0);
  _7013->getDataAsTriplets(_7020,_7019,_7018);
  if (_7012)
  {
    {
      return (::mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft(_7016,_7017,_7020,_7019,_7018,_7014)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight(_7016,_7017,_7020,_7019,_7018,_7014)).as<::mosek::fusion::Expression>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Variable > _7021,    monty::rc_ptr< ::mosek::fusion::Parameter > _7022) { return mosek::fusion::p_Expr::mulDiag(_7021,_7022); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Variable > _7021,monty::rc_ptr< ::mosek::fusion::Parameter > _7022){
  return (::mosek::fusion::p_ExprMulParamDiagRight::_new_ExprMulParamDiagRight(_7021->__mosek_2fusion_2Variable__asExpr(),_7022)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Parameter > _7023,    monty::rc_ptr< ::mosek::fusion::Variable > _7024) { return mosek::fusion::p_Expr::mulDiag(_7023,_7024); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Parameter > _7023,monty::rc_ptr< ::mosek::fusion::Variable > _7024){
  return (::mosek::fusion::p_ExprMulParamDiagLeft::_new_ExprMulParamDiagLeft(_7023,_7024->__mosek_2fusion_2Variable__asExpr())).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Expression > _7025,    monty::rc_ptr< ::mosek::fusion::Parameter > _7026) { return mosek::fusion::p_Expr::mulDiag(_7025,_7026); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Expression > _7025,monty::rc_ptr< ::mosek::fusion::Parameter > _7026){
  return (::mosek::fusion::p_ExprMulParamDiagRight::_new_ExprMulParamDiagRight(_7025,_7026)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Parameter > _7027,    monty::rc_ptr< ::mosek::fusion::Expression > _7028) { return mosek::fusion::p_Expr::mulDiag(_7027,_7028); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Parameter > _7027,monty::rc_ptr< ::mosek::fusion::Expression > _7028){
  return (::mosek::fusion::p_ExprMulParamDiagLeft::_new_ExprMulParamDiagLeft(_7027,_7028)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Variable > _7029,    monty::rc_ptr< ::mosek::fusion::Matrix > _7030) { return mosek::fusion::p_Expr::mulDiag(_7029,_7030); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Variable > _7029,monty::rc_ptr< ::mosek::fusion::Matrix > _7030){
  return ::mosek::fusion::p_Expr::mulDiag(false,_7030,_7029->__mosek_2fusion_2Variable__asExpr());
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7031,    monty::rc_ptr< ::mosek::fusion::Variable > _7032) { return mosek::fusion::p_Expr::mulDiag(_7031,_7032); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Matrix > _7031,monty::rc_ptr< ::mosek::fusion::Variable > _7032){
  return ::mosek::fusion::p_Expr::mulDiag(true,_7031,_7032->__mosek_2fusion_2Variable__asExpr());
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Expression > _7033,    monty::rc_ptr< ::mosek::fusion::Matrix > _7034) { return mosek::fusion::p_Expr::mulDiag(_7033,_7034); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Expression > _7033,monty::rc_ptr< ::mosek::fusion::Matrix > _7034){
  return ::mosek::fusion::p_Expr::mulDiag(false,_7034,_7033);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7035,    monty::rc_ptr< ::mosek::fusion::Expression > _7036) { return mosek::fusion::p_Expr::mulDiag(_7035,_7036); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Matrix > _7035,monty::rc_ptr< ::mosek::fusion::Expression > _7036){
  return ::mosek::fusion::p_Expr::mulDiag(true,_7035,_7036);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Variable > _7037,    std::shared_ptr< monty::ndarray< double,2 > > _7038) { return mosek::fusion::p_Expr::mulDiag(_7037,_7038); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Variable > _7037,std::shared_ptr< monty::ndarray< double,2 > > _7038){
  std::vector<int> _11929;
  for (int _7039 = (int)0, _11930 = (int)((_7038)->size(0)); _7039 < _11930 ; ++_7039)
  {
    for (int _7040 = (int)0, _11931 = (int)((_7038)->size(1)); _7040 < _11931 ; ++_7040)
    {
      _11929.push_back(_7039);
    }
  }
  auto _11932 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11929.size()),_11929.begin(),_11929.end()));
  std::vector<int> _11933;
  for (int _7041 = (int)0, _11934 = (int)((_7038)->size(0)); _7041 < _11934 ; ++_7041)
  {
    for (int _7042 = (int)0, _11935 = (int)((_7038)->size(1)); _7042 < _11935 ; ++_7042)
    {
      _11933.push_back(_7042);
    }
  }
  auto _11936 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11933.size()),_11933.begin(),_11933.end()));
  std::vector<double> _11937;
  for (int _7043 = (int)0, _11938 = (int)((_7038)->size(0)); _7043 < _11938 ; ++_7043)
  {
    for (int _7044 = (int)0, _11939 = (int)((_7038)->size(1)); _7044 < _11939 ; ++_7044)
    {
      _11937.push_back(((*_7038)(_7043,_7044)));
    }
  }
  auto _11940 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11937.size()),_11937.begin(),_11937.end()));
  return (::mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight((int)((_7038)->size(0)),(int)((_7038)->size(1)),_11932,_11936,_11940,_7037->__mosek_2fusion_2Variable__asExpr())).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Expression > _7045,    std::shared_ptr< monty::ndarray< double,2 > > _7046) { return mosek::fusion::p_Expr::mulDiag(_7045,_7046); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Expression > _7045,std::shared_ptr< monty::ndarray< double,2 > > _7046){
  std::vector<int> _11941;
  for (int _7047 = (int)0, _11942 = (int)((_7046)->size(0)); _7047 < _11942 ; ++_7047)
  {
    for (int _7048 = (int)0, _11943 = (int)((_7046)->size(1)); _7048 < _11943 ; ++_7048)
    {
      _11941.push_back(_7047);
    }
  }
  auto _11944 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11941.size()),_11941.begin(),_11941.end()));
  std::vector<int> _11945;
  for (int _7049 = (int)0, _11946 = (int)((_7046)->size(0)); _7049 < _11946 ; ++_7049)
  {
    for (int _7050 = (int)0, _11947 = (int)((_7046)->size(1)); _7050 < _11947 ; ++_7050)
    {
      _11945.push_back(_7050);
    }
  }
  auto _11948 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11945.size()),_11945.begin(),_11945.end()));
  std::vector<double> _11949;
  for (int _7051 = (int)0, _11950 = (int)((_7046)->size(0)); _7051 < _11950 ; ++_7051)
  {
    for (int _7052 = (int)0, _11951 = (int)((_7046)->size(1)); _7052 < _11951 ; ++_7052)
    {
      _11949.push_back(((*_7046)(_7051,_7052)));
    }
  }
  auto _11952 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11949.size()),_11949.begin(),_11949.end()));
  return (::mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight((int)((_7046)->size(0)),(int)((_7046)->size(1)),_11944,_11948,_11952,_7045)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( std::shared_ptr< monty::ndarray< double,2 > > _7053,    monty::rc_ptr< ::mosek::fusion::Variable > _7054) { return mosek::fusion::p_Expr::mulDiag(_7053,_7054); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(std::shared_ptr< monty::ndarray< double,2 > > _7053,monty::rc_ptr< ::mosek::fusion::Variable > _7054){
  std::vector<int> _11953;
  for (int _7055 = (int)0, _11954 = (int)((_7053)->size(0)); _7055 < _11954 ; ++_7055)
  {
    for (int _7056 = (int)0, _11955 = (int)((_7053)->size(1)); _7056 < _11955 ; ++_7056)
    {
      _11953.push_back(_7055);
    }
  }
  auto _11956 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11953.size()),_11953.begin(),_11953.end()));
  std::vector<int> _11957;
  for (int _7057 = (int)0, _11958 = (int)((_7053)->size(0)); _7057 < _11958 ; ++_7057)
  {
    for (int _7058 = (int)0, _11959 = (int)((_7053)->size(1)); _7058 < _11959 ; ++_7058)
    {
      _11957.push_back(_7058);
    }
  }
  auto _11960 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11957.size()),_11957.begin(),_11957.end()));
  std::vector<double> _11961;
  for (int _7059 = (int)0, _11962 = (int)((_7053)->size(0)); _7059 < _11962 ; ++_7059)
  {
    for (int _7060 = (int)0, _11963 = (int)((_7053)->size(1)); _7060 < _11963 ; ++_7060)
    {
      _11961.push_back(((*_7053)(_7059,_7060)));
    }
  }
  auto _11964 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11961.size()),_11961.begin(),_11961.end()));
  return (::mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft((int)((_7053)->size(0)),(int)((_7053)->size(1)),_11956,_11960,_11964,_7054->__mosek_2fusion_2Variable__asExpr())).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( std::shared_ptr< monty::ndarray< double,2 > > _7061,    monty::rc_ptr< ::mosek::fusion::Expression > _7062) { return mosek::fusion::p_Expr::mulDiag(_7061,_7062); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(std::shared_ptr< monty::ndarray< double,2 > > _7061,monty::rc_ptr< ::mosek::fusion::Expression > _7062){
  std::vector<int> _11965;
  for (int _7063 = (int)0, _11966 = (int)((_7061)->size(0)); _7063 < _11966 ; ++_7063)
  {
    for (int _7064 = (int)0, _11967 = (int)((_7061)->size(1)); _7064 < _11967 ; ++_7064)
    {
      _11965.push_back(_7063);
    }
  }
  auto _11968 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11965.size()),_11965.begin(),_11965.end()));
  std::vector<int> _11969;
  for (int _7065 = (int)0, _11970 = (int)((_7061)->size(0)); _7065 < _11970 ; ++_7065)
  {
    for (int _7066 = (int)0, _11971 = (int)((_7061)->size(1)); _7066 < _11971 ; ++_7066)
    {
      _11969.push_back(_7066);
    }
  }
  auto _11972 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11969.size()),_11969.begin(),_11969.end()));
  std::vector<double> _11973;
  for (int _7067 = (int)0, _11974 = (int)((_7061)->size(0)); _7067 < _11974 ; ++_7067)
  {
    for (int _7068 = (int)0, _11975 = (int)((_7061)->size(1)); _7068 < _11975 ; ++_7068)
    {
      _11973.push_back(((*_7061)(_7067,_7068)));
    }
  }
  auto _11976 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11973.size()),_11973.begin(),_11973.end()));
  return (::mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft((int)((_7061)->size(0)),(int)((_7061)->size(1)),_11968,_11972,_11976,_7062)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_(monty::rc_ptr< ::mosek::fusion::Matrix > _7069,monty::rc_ptr< ::mosek::fusion::Expression > _7070){
  std::shared_ptr< monty::ndarray< int,1 > > _7071 = _7070->getShape();
  _checked_ptr_1<int> _ptr__7071(_7071 ? _7071->raw() : nullptr,_7071 ? _7071->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::Expression > _7072 = _7070;
  if (((int)((_7071)->size(0)) == (int)1))
  {
    {
      _7071 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__7071[(int)0]),(int)((int)1)});
      _ptr__7071.update(_7071 ? _7071->raw() : nullptr, _7071 ? _7071->size(0) : 0);
      _7072 = (::mosek::fusion::p_ExprReshape::_new_ExprReshape(_7071,_7070)).as<::mosek::fusion::Expression>();
    }
  }
  {}
  if ((((int)((_7071)->size(0)) != (int)2) || ((_7069->numRows() != _ptr__7071[(int)0]) || (_7069->numColumns() != _ptr__7071[(int)1]))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));
    }
  }
  {}
  int _7073 = _7069->numColumns();
  long long _7074 = _7069->numNonzeros();
  std::shared_ptr< monty::ndarray< int,1 > > _7075 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7074)));
  _checked_ptr_1<int> _ptr__7075(_7075 ? _7075->raw() : nullptr,_7075 ? _7075->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7076 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7074)));
  _checked_ptr_1<int> _ptr__7076(_7076 ? _7076->raw() : nullptr,_7076 ? _7076->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7077 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7074)));
  _checked_ptr_1<double> _ptr__7077(_7077 ? _7077->raw() : nullptr,_7077 ? _7077->size(0) : 0);
  _7069->getDataAsTriplets(_7075,_7076,_7077);
  std::vector<long long> _11977;
  for (long long _7078 = (int)0, _11978 = _7074; _7078 < _11978 ; ++_7078)
  {
    _11977.push_back(safe_add( safe_mul( _ptr__7075[_7078],_7073 ),_ptr__7076[_7078] ));
  }
  auto _11979 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_11977.size()),_11977.begin(),_11977.end()));
  return (::mosek::fusion::p_ExprMulElement::_new_ExprMulElement(_7077,_11979,_7072,(int)1)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_(std::shared_ptr< monty::ndarray< double,1 > > _7079,monty::rc_ptr< ::mosek::fusion::Expression > _7080){
  _checked_ptr_1<double> _ptr__7079(_7079 ? _7079->raw() : nullptr, _7079 ? _7079->size(0) : 0);
  if (((NULL == _7079.get()) || (NULL == _7080.get())))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for mulElm may not be null"));
    }
  }
  {}
  if (((_7080->getND() == (int)0) && ((int)((_7079)->size(0)) == (int)1)))
  {
    {
      return (::mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst(_ptr__7079[(int)0],_7080)).as<::mosek::fusion::Expression>();
    }
  }
  else if(((_7080->getND() != (int)1) || (_7080->getDim((int)0) != (int)((_7079)->size(0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));
    }
  }
  else
  {
    {
      std::vector<long long> _11980;
      for (int _7081 = (int)0, _11981 = (int)((_7079)->size(0)); _7081 < _11981 ; ++_7081)
      {
        _11980.push_back(_7081);
      }
      auto _11982 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_11980.size()),_11980.begin(),_11980.end()));
      return (::mosek::fusion::p_ExprMulElement::_new_ExprMulElement(_7079,_11982,_7080)).as<::mosek::fusion::Expression>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7082,monty::rc_ptr< ::mosek::fusion::Expression > _7083){
  if (((NULL == _7082.get()) || (NULL == _7083.get())))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for mulElm may not be null"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _7084 = _7083->getShape();
  _checked_ptr_1<int> _ptr__7084(_7084 ? _7084->raw() : nullptr,_7084 ? _7084->size(0) : 0);
  if (((int)((_7084)->size(0)) != (int)((mosek::fusion::p_NDSparseArray::_get_impl(_7082)->dims)->size(0))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Dimension mismatch"));
    }
  }
  {}
  int _11983 = (int)0;
  int _11984 = (int)((mosek::fusion::p_NDSparseArray::_get_impl(_7082)->dims)->size(0));
  for (int _7085 = _11983; _7085 < _11984; ++_7085)
  {
    {
      if ((((*mosek::fusion::p_NDSparseArray::_get_impl(_7082)->dims)(_7085)) != _ptr__7084[_7085]))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_ExprMulElement::_new_ExprMulElement(mosek::fusion::p_NDSparseArray::_get_impl(_7082)->cof,mosek::fusion::p_NDSparseArray::_get_impl(_7082)->inst,_7083)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Expression > _7086,    double _7087) { return mosek::fusion::p_Expr::mul(_7086,_7087); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _7086,double _7087){
  return (::mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst(_7087,_7086)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( double _7088,    monty::rc_ptr< ::mosek::fusion::Expression > _7089) { return mosek::fusion::p_Expr::mul(_7088,_7089); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(double _7088,monty::rc_ptr< ::mosek::fusion::Expression > _7089){
  return (::mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst(_7088,_7089)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Expression > _7090,    std::shared_ptr< monty::ndarray< double,1 > > _7091) { return mosek::fusion::p_Expr::mul(_7090,_7091); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _7090,std::shared_ptr< monty::ndarray< double,1 > > _7091){
  _checked_ptr_1<double> _ptr__7091(_7091 ? _7091->raw() : nullptr, _7091 ? _7091->size(0) : 0);
  return ::mosek::fusion::p_Expr::mul(false,_7091,_7090);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( std::shared_ptr< monty::ndarray< double,1 > > _7092,    monty::rc_ptr< ::mosek::fusion::Expression > _7093) { return mosek::fusion::p_Expr::mul(_7092,_7093); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(std::shared_ptr< monty::ndarray< double,1 > > _7092,monty::rc_ptr< ::mosek::fusion::Expression > _7093){
  _checked_ptr_1<double> _ptr__7092(_7092 ? _7092->raw() : nullptr, _7092 ? _7092->size(0) : 0);
  return ::mosek::fusion::p_Expr::mul(true,_7092,_7093);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Expression > _7094,    std::shared_ptr< monty::ndarray< double,2 > > _7095) { return mosek::fusion::p_Expr::mul(_7094,_7095); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _7094,std::shared_ptr< monty::ndarray< double,2 > > _7095){
  return ::mosek::fusion::p_Expr::mul(false,_7095,_7094);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( std::shared_ptr< monty::ndarray< double,2 > > _7096,    monty::rc_ptr< ::mosek::fusion::Expression > _7097) { return mosek::fusion::p_Expr::mul(_7096,_7097); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(std::shared_ptr< monty::ndarray< double,2 > > _7096,monty::rc_ptr< ::mosek::fusion::Expression > _7097){
  return ::mosek::fusion::p_Expr::mul(true,_7096,_7097);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Expression > _7098,    monty::rc_ptr< ::mosek::fusion::Matrix > _7099) { return mosek::fusion::p_Expr::mul(_7098,_7099); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _7098,monty::rc_ptr< ::mosek::fusion::Matrix > _7099){
  return ::mosek::fusion::p_Expr::mul(false,_7099,_7098);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7100,    monty::rc_ptr< ::mosek::fusion::Expression > _7101) { return mosek::fusion::p_Expr::mul(_7100,_7101); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Matrix > _7100,monty::rc_ptr< ::mosek::fusion::Expression > _7101){
  return ::mosek::fusion::p_Expr::mul(true,_7100,_7101);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(bool _7102,std::shared_ptr< monty::ndarray< double,1 > > _7103,monty::rc_ptr< ::mosek::fusion::Expression > _7104){
  _checked_ptr_1<double> _ptr__7103(_7103 ? _7103->raw() : nullptr, _7103 ? _7103->size(0) : 0);
  int _7105 = (int)((_7103)->size(0));
  int _7106 = _7105;
  std::shared_ptr< monty::ndarray< double,1 > > _7107 = ::mosek::fusion::Utils::Tools::arraycopy(_7103);
  _checked_ptr_1<double> _ptr__7107(_7107 ? _7107->raw() : nullptr,_7107 ? _7107->size(0) : 0);
  int _7108 = _7104->getND();
  if ((_7108 == (int)0))
  {
    {
      std::vector<int> _11985;
      for (int _7109 = (int)0, _11986 = _7105; _7109 < _11986 ; ++_7109)
      {
        _11985.push_back(_7109);
      }
      auto _11987 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11985.size()),_11985.begin(),_11985.end()));
      std::vector<int> _11988;
      for (int _7110 = (int)0, _11989 = _7105; _7110 < _11989 ; ++_7110)
      {
        _11988.push_back((int)0);
      }
      auto _11990 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11988.size()),_11988.begin(),_11988.end()));
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7105)}),(::mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul(_7105,(int)1,_11987,_11990,_7107,_7104,(int)1)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7108 != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  else if((_7102 && (_7104->getDim((int)0) == (int)((_7103)->size(0)))))
  {
    {
      std::vector<int> _11991;
      for (int _7111 = (int)0, _11992 = _7105; _7111 < _11992 ; ++_7111)
      {
        _11991.push_back((int)0);
      }
      auto _11993 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11991.size()),_11991.begin(),_11991.end()));
      std::vector<int> _11994;
      for (int _7112 = (int)0, _11995 = _7105; _7112 < _11995 ; ++_7112)
      {
        _11994.push_back(_7112);
      }
      auto _11996 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11994.size()),_11994.begin(),_11994.end()));
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7104->getDim((int)1))}),(::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft((int)1,_7105,_11993,_11996,_7107,_7104)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7102 && (_7104->getDim((int)0) == (int)1)))
  {
    {
      std::vector<int> _11997;
      for (int _7113 = (int)0, _11998 = _7105; _7113 < _11998 ; ++_7113)
      {
        _11997.push_back(_7113);
      }
      auto _11999 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11997.size()),_11997.begin(),_11997.end()));
      std::vector<int> _12000;
      for (int _7114 = (int)0, _12001 = _7105; _7114 < _12001 ; ++_7114)
      {
        _12000.push_back((int)0);
      }
      auto _12002 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12000.size()),_12000.begin(),_12000.end()));
      return (::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft(_7105,(int)1,_11999,_12002,_7107,_7104,(int)1)).as<::mosek::fusion::Expression>();
    }
  }
  else if(((!_7102) && (_7104->getDim((int)1) == _7105)))
  {
    {
      std::vector<int> _12003;
      for (int _7115 = (int)0, _12004 = _7105; _7115 < _12004 ; ++_7115)
      {
        _12003.push_back(_7115);
      }
      auto _12005 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12003.size()),_12003.begin(),_12003.end()));
      std::vector<int> _12006;
      for (int _7116 = (int)0, _12007 = _7105; _7116 < _12007 ; ++_7116)
      {
        _12006.push_back((int)0);
      }
      auto _12008 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12006.size()),_12006.begin(),_12006.end()));
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7104->getDim((int)0))}),(::mosek::fusion::p_ExprMulRight::_new_ExprMulRight(_7105,(int)1,_12005,_12008,_7107,_7104)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if(((!_7102) && (_7104->getDim((int)1) == (int)1)))
  {
    {
      std::vector<int> _12009;
      for (int _7117 = (int)0, _12010 = _7105; _7117 < _12010 ; ++_7117)
      {
        _12009.push_back((int)0);
      }
      auto _12011 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12009.size()),_12009.begin(),_12009.end()));
      std::vector<int> _12012;
      for (int _7118 = (int)0, _12013 = _7105; _7118 < _12013 ; ++_7118)
      {
        _12012.push_back(_7118);
      }
      auto _12014 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12012.size()),_12012.begin(),_12012.end()));
      return (::mosek::fusion::p_ExprMulRight::_new_ExprMulRight((int)1,_7105,_12011,_12014,_7107,_7104,(int)1)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(bool _7119,std::shared_ptr< monty::ndarray< double,2 > > _7120,monty::rc_ptr< ::mosek::fusion::Expression > _7121){
  int _7122 = (int)((_7120)->size(0));
  int _7123 = (int)((_7120)->size(1));
  int _7124 = safe_mul( _7122,_7123 );
  std::vector<int> _12015;
  for (int _7126 = (int)0, _12016 = _7122; _7126 < _12016 ; ++_7126)
  {
    for (int _7127 = (int)0, _12017 = _7123; _7127 < _12017 ; ++_7127)
    {
      _12015.push_back(_7126);
    }
  }
  auto _12018 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12015.size()),_12015.begin(),_12015.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _7125 = _12018;
  _checked_ptr_1<int> _ptr__7125(_7125 ? _7125->raw() : nullptr,_7125 ? _7125->size(0) : 0);
  std::vector<int> _12019;
  for (int _7129 = (int)0, _12020 = _7122; _7129 < _12020 ; ++_7129)
  {
    for (int _7130 = (int)0, _12021 = _7123; _7130 < _12021 ; ++_7130)
    {
      _12019.push_back(_7130);
    }
  }
  auto _12022 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12019.size()),_12019.begin(),_12019.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _7128 = _12022;
  _checked_ptr_1<int> _ptr__7128(_7128 ? _7128->raw() : nullptr,_7128 ? _7128->size(0) : 0);
  std::vector<double> _12023;
  for (int _7132 = (int)0, _12024 = _7122; _7132 < _12024 ; ++_7132)
  {
    for (int _7133 = (int)0, _12025 = _7123; _7133 < _12025 ; ++_7133)
    {
      _12023.push_back(((*_7120)(_7132,_7133)));
    }
  }
  auto _12026 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12023.size()),_12023.begin(),_12023.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _7131 = _12026;
  _checked_ptr_1<double> _ptr__7131(_7131 ? _7131->raw() : nullptr,_7131 ? _7131->size(0) : 0);
  long long _7134 = _7121->getSize();
  std::shared_ptr< monty::ndarray< int,1 > > _7135 = _7121->getShape();
  _checked_ptr_1<int> _ptr__7135(_7135 ? _7135->raw() : nullptr,_7135 ? _7135->size(0) : 0);
  if (((int)((_7135)->size(0)) == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul(_7122,_7123,_7125,_7128,_7131,_7121,(int)1)).as<::mosek::fusion::Expression>();
    }
  }
  else if(_7119)
  {
    {
      if (((int)((_7135)->size(0)) == (int)1))
      {
        {
          return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_7120)->size(0)))}),(::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft(_7122,_7123,_7125,_7128,_7131,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__7135[(int)0]),(int)((int)1)}),_7121)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
        }
      }
      else if(((int)((_7135)->size(0)) == (int)2))
      {
        {
          return (::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft(_7122,_7123,_7125,_7128,_7131,_7121)).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
        }
      }
    }
  }
  else
  {
    {
      if (((int)((_7135)->size(0)) == (int)1))
      {
        {
          return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_7120)->size(1)))}),(::mosek::fusion::p_ExprMulRight::_new_ExprMulRight(_7122,_7123,_7125,_7128,_7131,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(_ptr__7135[(int)0])}),_7121)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
        }
      }
      else if(((int)((_7135)->size(0)) == (int)2))
      {
        {
          return (::mosek::fusion::p_ExprMulRight::_new_ExprMulRight(_7122,_7123,_7125,_7128,_7131,_7121)).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(bool _7136,monty::rc_ptr< ::mosek::fusion::Matrix > _7137,monty::rc_ptr< ::mosek::fusion::Expression > _7138){
  long long _7139 = _7137->numNonzeros();
  std::shared_ptr< monty::ndarray< int,1 > > _7140 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7139)));
  _checked_ptr_1<int> _ptr__7140(_7140 ? _7140->raw() : nullptr,_7140 ? _7140->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7141 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7139)));
  _checked_ptr_1<int> _ptr__7141(_7141 ? _7141->raw() : nullptr,_7141 ? _7141->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7142 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7139)));
  _checked_ptr_1<double> _ptr__7142(_7142 ? _7142->raw() : nullptr,_7142 ? _7142->size(0) : 0);
  int _7143 = _7137->numRows();
  int _7144 = _7137->numColumns();
  _7137->getDataAsTriplets(_7140,_7141,_7142);
  int _7145 = _7138->getND();
  if ((_7145 == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul(_7143,_7144,_7140,_7141,_7142,_7138)).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7145 == (int)1))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _7146 = _7138->getShape();
      _checked_ptr_1<int> _ptr__7146(_7146 ? _7146->raw() : nullptr,_7146 ? _7146->size(0) : 0);
      if (_7136)
      {
        {
          return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7143)}),(::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft(_7143,_7144,_7140,_7141,_7142,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__7146[(int)0]),(int)((int)1)}),_7138)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7144)}),(::mosek::fusion::p_ExprMulRight::_new_ExprMulRight(_7143,_7144,_7140,_7141,_7142,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(_ptr__7146[(int)0])}),_7138)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
  else if((_7145 == (int)2))
  {
    {
      if (_7136)
      {
        {
          return (::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft(_7143,_7144,_7140,_7141,_7142,_7138)).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          return (::mosek::fusion::p_ExprMulRight::_new_ExprMulRight(_7143,_7144,_7140,_7141,_7142,_7138)).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions for multiplication"));
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Variable > _7147,    monty::rc_ptr< ::mosek::fusion::Matrix > _7148) { return mosek::fusion::p_Expr::mul(_7147,_7148); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Variable > _7147,monty::rc_ptr< ::mosek::fusion::Matrix > _7148){
  int _7149 = _7148->numRows();
  int _7150 = _7148->numColumns();
  std::shared_ptr< monty::ndarray< double,1 > > _7151 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7148->numNonzeros())));
  _checked_ptr_1<double> _ptr__7151(_7151 ? _7151->raw() : nullptr,_7151 ? _7151->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7152 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7148->numNonzeros())));
  _checked_ptr_1<int> _ptr__7152(_7152 ? _7152->raw() : nullptr,_7152 ? _7152->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7153 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7148->numNonzeros())));
  _checked_ptr_1<int> _ptr__7153(_7153 ? _7153->raw() : nullptr,_7153 ? _7153->size(0) : 0);
  _7148->getDataAsTriplets(_7153,_7152,_7151);
  return ::mosek::fusion::p_Expr::mul(false,_7149,_7150,_7153,_7152,_7151,_7147);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7154,    monty::rc_ptr< ::mosek::fusion::Variable > _7155) { return mosek::fusion::p_Expr::mul(_7154,_7155); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Matrix > _7154,monty::rc_ptr< ::mosek::fusion::Variable > _7155){
  int _7156 = _7154->numRows();
  int _7157 = _7154->numColumns();
  std::shared_ptr< monty::ndarray< double,1 > > _7158 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7154->numNonzeros())));
  _checked_ptr_1<double> _ptr__7158(_7158 ? _7158->raw() : nullptr,_7158 ? _7158->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7159 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7154->numNonzeros())));
  _checked_ptr_1<int> _ptr__7159(_7159 ? _7159->raw() : nullptr,_7159 ? _7159->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7160 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7154->numNonzeros())));
  _checked_ptr_1<int> _ptr__7160(_7160 ? _7160->raw() : nullptr,_7160 ? _7160->size(0) : 0);
  _7154->getDataAsTriplets(_7160,_7159,_7158);
  return ::mosek::fusion::p_Expr::mul(true,_7156,_7157,_7160,_7159,_7158,_7155);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(bool _7161,int _7162,int _7163,std::shared_ptr< monty::ndarray< int,1 > > _7164,std::shared_ptr< monty::ndarray< int,1 > > _7165,std::shared_ptr< monty::ndarray< double,1 > > _7166,monty::rc_ptr< ::mosek::fusion::Variable > _7167){
  _checked_ptr_1<int> _ptr__7164(_7164 ? _7164->raw() : nullptr, _7164 ? _7164->size(0) : 0);
  _checked_ptr_1<int> _ptr__7165(_7165 ? _7165->raw() : nullptr, _7165 ? _7165->size(0) : 0);
  _checked_ptr_1<double> _ptr__7166(_7166 ? _7166->raw() : nullptr, _7166 ? _7166->size(0) : 0);
  if ((_7167->getND() == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprMulScalarVar::_new_ExprMulScalarVar(_7162,_7163,_7164,_7165,_7166,_7167)).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7167->getND() == (int)1))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _7168 = _7167->getShape();
      _checked_ptr_1<int> _ptr__7168(_7168 ? _7168->raw() : nullptr,_7168 ? _7168->size(0) : 0);
      int _12027;
      bool _12028 = _7161;
      if (_12028)
      {
        _12027 = _7162;
      }
      else
      {
        _12027 = _7163;
      }
      std::shared_ptr< monty::ndarray< int,1 > > _12029;
      bool _12030 = _7161;
      if (_12030)
      {
        _12029 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__7168[(int)0]),(int)((int)1)});
      }
      else
      {
        _12029 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(_ptr__7168[(int)0])});
      }
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_12027)}),(::mosek::fusion::p_ExprMulVar::_new_ExprMulVar(_7161,_7162,_7163,_7164,_7165,_7166,::mosek::fusion::p_Var::reshape(_7167,_12029))).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprMulVar::_new_ExprMulVar(_7161,_7162,_7163,_7164,_7165,_7166,_7167)).as<::mosek::fusion::Expression>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Expression > _7169,    monty::rc_ptr< ::mosek::fusion::Parameter > _7170) { return mosek::fusion::p_Expr::mul(_7169,_7170); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _7169,monty::rc_ptr< ::mosek::fusion::Parameter > _7170){
  if (((_7170->getND() == (int)2) && (_7169->getND() == (int)2)))
  {
    {
      return (::mosek::fusion::p_ExprMulParamRight::_new_ExprMulParamRight(_7169,_7170)).as<::mosek::fusion::Expression>();
    }
  }
  else if(((_7170->getND() == (int)1) && (_7169->getND() == (int)2)))
  {
    {
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7169->getDim((int)0))}),(::mosek::fusion::p_ExprMulParamRight::_new_ExprMulParamRight(_7169,_7170->__mosek_2fusion_2Parameter__reshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7170->getDim((int)0)),(int)((int)1)})))).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if(((_7170->getND() == (int)2) && (_7169->getND() == (int)1)))
  {
    {
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7170->getDim((int)1))}),(::mosek::fusion::p_ExprMulParamRight::_new_ExprMulParamRight((::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(_7169->getDim((int)0))}),_7169)).as<::mosek::fusion::Expression>(),_7170)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7170->getND() == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprMulParamScalar::_new_ExprMulParamScalar(_7170,_7169)).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7169->getND() == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprMulParamScalarExpr::_new_ExprMulParamScalarExpr(_7170,_7169)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Parameter > _7171,    monty::rc_ptr< ::mosek::fusion::Expression > _7172) { return mosek::fusion::p_Expr::mul(_7171,_7172); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Parameter > _7171,monty::rc_ptr< ::mosek::fusion::Expression > _7172){
  if (((_7171->getND() == (int)2) && (_7172->getND() == (int)2)))
  {
    {
      return (::mosek::fusion::p_ExprMulParamLeft::_new_ExprMulParamLeft(_7171,_7172)).as<::mosek::fusion::Expression>();
    }
  }
  else if(((_7171->getND() == (int)1) && (_7172->getND() == (int)2)))
  {
    {
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7172->getDim((int)1))}),(::mosek::fusion::p_ExprMulParamLeft::_new_ExprMulParamLeft(_7171->__mosek_2fusion_2Parameter__reshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(_7171->getDim((int)0))})),_7172)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if(((_7171->getND() == (int)2) && (_7172->getND() == (int)1)))
  {
    {
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7171->getDim((int)0))}),(::mosek::fusion::p_ExprMulParamLeft::_new_ExprMulParamLeft(_7171,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7172->getDim((int)0)),(int)((int)1)}),_7172)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7171->getND() == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprMulParamScalar::_new_ExprMulParamScalar(_7171,_7172)).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7172->getND() == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprMulParamScalarExpr::_new_ExprMulParamScalarExpr(_7171,_7172)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Expression > _7173,    monty::rc_ptr< ::mosek::fusion::Matrix > _7174) { return mosek::fusion::p_Expr::dot(_7173,_7174); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _7173,monty::rc_ptr< ::mosek::fusion::Matrix > _7174){
  long long _7175 = _7174->numNonzeros();
  if ((!_7174->isSparse()))
  {
    {
      std::vector<long long> _12031;
      for (long long _7176 = (int)0, _12032 = _7175; _7176 < _12032 ; ++_7176)
      {
        _12031.push_back(_7176);
      }
      auto _12033 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_12031.size()),_12031.begin(),_12031.end()));
      return (::mosek::fusion::p_ExprInner::_new_ExprInner(_7173,_12033,_7174->getDataAsArray())).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _7177 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7175)));
      _checked_ptr_1<int> _ptr__7177(_7177 ? _7177->raw() : nullptr,_7177 ? _7177->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _7178 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7175)));
      _checked_ptr_1<int> _ptr__7178(_7178 ? _7178->raw() : nullptr,_7178 ? _7178->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _7179 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7175)));
      _checked_ptr_1<double> _ptr__7179(_7179 ? _7179->raw() : nullptr,_7179 ? _7179->size(0) : 0);
      int _7180 = _7174->numColumns();
      _7174->getDataAsTriplets(_7177,_7178,_7179);
      std::vector<long long> _12034;
      for (int _7181 = (int)0, _12035 = (int)((_7177)->size(0)); _7181 < _12035 ; ++_7181)
      {
        _12034.push_back(safe_add( safe_mul( _ptr__7177[_7181],_7180 ),_ptr__7178[_7181] ));
      }
      auto _12036 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_12034.size()),_12034.begin(),_12034.end()));
      return (::mosek::fusion::p_ExprInner::_new_ExprInner(_7173,_12036,_7179)).as<::mosek::fusion::Expression>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Expression > _7182,    std::shared_ptr< monty::ndarray< double,2 > > _7183) { return mosek::fusion::p_Expr::dot(_7182,_7183); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _7182,std::shared_ptr< monty::ndarray< double,2 > > _7183){
  std::vector<long long> _12037;
  for (int _7184 = (int)0, _12038 = safe_mul( (int)((_7183)->size(0)),(int)((_7183)->size(1)) ); _7184 < _12038 ; ++_7184)
  {
    _12037.push_back(_7184);
  }
  auto _12039 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_12037.size()),_12037.begin(),_12037.end()));
  std::vector<double> _12040;
  for (int _7185 = (int)0, _12041 = (int)((_7183)->size(0)); _7185 < _12041 ; ++_7185)
  {
    for (int _7186 = (int)0, _12042 = (int)((_7183)->size(1)); _7186 < _12042 ; ++_7186)
    {
      _12040.push_back(((*_7183)(_7185,_7186)));
    }
  }
  auto _12043 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12040.size()),_12040.begin(),_12040.end()));
  return (::mosek::fusion::p_ExprInner::_new_ExprInner(_7182,_12039,_12043)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Expression > _7187,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7188) { return mosek::fusion::p_Expr::dot(_7187,_7188); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _7187,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7188){
  return (::mosek::fusion::p_ExprInner::_new_ExprInner(_7187,mosek::fusion::p_NDSparseArray::_get_impl(_7188)->inst,mosek::fusion::p_NDSparseArray::_get_impl(_7188)->cof)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Expression > _7189,    std::shared_ptr< monty::ndarray< double,1 > > _7190) { return mosek::fusion::p_Expr::dot(_7189,_7190); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _7189,std::shared_ptr< monty::ndarray< double,1 > > _7190){
  _checked_ptr_1<double> _ptr__7190(_7190 ? _7190->raw() : nullptr, _7190 ? _7190->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7191 = _7189->getShape();
  _checked_ptr_1<int> _ptr__7191(_7191 ? _7191->raw() : nullptr,_7191 ? _7191->size(0) : 0);
  if (((_7189->getSize() == (int)((_7190)->size(0))) && ((int)((_7191)->size(0)) > (int)1)))
  {
    {
      int _7192 = (int)0;
      int _12044 = (int)0;
      int _12045 = (int)((_7191)->size(0));
      for (int _7193 = _12044; _7193 < _12045; ++_7193)
      {
        {
          if ((_ptr__7191[_7193] > (int)1))
          {
            {
              ++ _7192;
            }
          }
          {}
        }
      }
      if ((_7192 > (int)1))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _7194 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)_7189->getSize())});
          _checked_ptr_1<int> _ptr__7194(_7194 ? _7194->raw() : nullptr,_7194 ? _7194->size(0) : 0);
          return (::mosek::fusion::p_ExprInner::_new_ExprInner((::mosek::fusion::p_ExprReshape::_new_ExprReshape(_7194,_7189)).as<::mosek::fusion::Expression>(),_7190)).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprInner::_new_ExprInner(_7189,_7190)).as<::mosek::fusion::Expression>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7195,    monty::rc_ptr< ::mosek::fusion::Expression > _7196) { return mosek::fusion::p_Expr::dot(_7195,_7196); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Matrix > _7195,monty::rc_ptr< ::mosek::fusion::Expression > _7196){
  return ::mosek::fusion::p_Expr::dot(_7196,_7195);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7197,    monty::rc_ptr< ::mosek::fusion::Expression > _7198) { return mosek::fusion::p_Expr::dot(_7197,_7198); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7197,monty::rc_ptr< ::mosek::fusion::Expression > _7198){
  return ::mosek::fusion::p_Expr::dot(_7198,_7197);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( std::shared_ptr< monty::ndarray< double,2 > > _7199,    monty::rc_ptr< ::mosek::fusion::Expression > _7200) { return mosek::fusion::p_Expr::dot(_7199,_7200); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(std::shared_ptr< monty::ndarray< double,2 > > _7199,monty::rc_ptr< ::mosek::fusion::Expression > _7200){
  return ::mosek::fusion::p_Expr::dot(_7200,_7199);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( std::shared_ptr< monty::ndarray< double,1 > > _7201,    monty::rc_ptr< ::mosek::fusion::Expression > _7202) { return mosek::fusion::p_Expr::dot(_7201,_7202); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(std::shared_ptr< monty::ndarray< double,1 > > _7201,monty::rc_ptr< ::mosek::fusion::Expression > _7202){
  _checked_ptr_1<double> _ptr__7201(_7201 ? _7201->raw() : nullptr, _7201 ? _7201->size(0) : 0);
  return ::mosek::fusion::p_Expr::dot(_7202,_7201);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Expression > _7203,    monty::rc_ptr< ::mosek::fusion::Parameter > _7204) { return mosek::fusion::p_Expr::dot(_7203,_7204); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _7203,monty::rc_ptr< ::mosek::fusion::Parameter > _7204){
  return (::mosek::fusion::p_ExprDotParam::_new_ExprDotParam(_7204,_7203)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Parameter > _7205,    monty::rc_ptr< ::mosek::fusion::Expression > _7206) { return mosek::fusion::p_Expr::dot(_7205,_7206); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Parameter > _7205,monty::rc_ptr< ::mosek::fusion::Expression > _7206){
  return (::mosek::fusion::p_ExprDotParam::_new_ExprDotParam(_7205,_7206)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( monty::rc_ptr< ::mosek::fusion::Parameter > _7207,    monty::rc_ptr< ::mosek::fusion::Expression > _7208) { return mosek::fusion::p_Expr::outer(_7207,_7208); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(monty::rc_ptr< ::mosek::fusion::Parameter > _7207,monty::rc_ptr< ::mosek::fusion::Expression > _7208){
  std::shared_ptr< monty::ndarray< int,1 > > _7209 = _7208->getShape();
  _checked_ptr_1<int> _ptr__7209(_7209 ? _7209->raw() : nullptr,_7209 ? _7209->size(0) : 0);
  if ((!(((int)((_7209)->size(0)) == (int)1) || (((int)((_7209)->size(0)) == (int)2) && (_ptr__7209[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Expression argument must be one-dimensional"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _7210 = _7207->getShape();
  _checked_ptr_1<int> _ptr__7210(_7210 ? _7210->raw() : nullptr,_7210 ? _7210->size(0) : 0);
  if ((!((_7207->getND() == (int)1) || ((_7207->getND() == (int)2) && (_ptr__7210[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Parameter argument must be one-dimensional"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::mul(_7207->__mosek_2fusion_2Parameter__reshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__7210[(int)0]),(int)((int)1)})),::mosek::fusion::p_Expr::reshape(_7208,(int)1,_ptr__7209[(int)0]));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( monty::rc_ptr< ::mosek::fusion::Expression > _7211,    monty::rc_ptr< ::mosek::fusion::Parameter > _7212) { return mosek::fusion::p_Expr::outer(_7211,_7212); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(monty::rc_ptr< ::mosek::fusion::Expression > _7211,monty::rc_ptr< ::mosek::fusion::Parameter > _7212){
  std::shared_ptr< monty::ndarray< int,1 > > _7213 = _7211->getShape();
  _checked_ptr_1<int> _ptr__7213(_7213 ? _7213->raw() : nullptr,_7213 ? _7213->size(0) : 0);
  if ((!((_7211->getND() == (int)1) || ((_7211->getND() == (int)2) && (_ptr__7213[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Expression argument must be one-dimensional"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _7214 = _7212->getShape();
  _checked_ptr_1<int> _ptr__7214(_7214 ? _7214->raw() : nullptr,_7214 ? _7214->size(0) : 0);
  if ((!((_7212->getND() == (int)1) || ((_7212->getND() == (int)2) && (_ptr__7214[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Parameter argument must be one-dimensional"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::mul(::mosek::fusion::p_Expr::reshape(_7211,_ptr__7213[(int)0],(int)1),_7212->__mosek_2fusion_2Parameter__reshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(_ptr__7214[(int)0])})));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7215,    monty::rc_ptr< ::mosek::fusion::Expression > _7216) { return mosek::fusion::p_Expr::outer(_7215,_7216); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(monty::rc_ptr< ::mosek::fusion::Matrix > _7215,monty::rc_ptr< ::mosek::fusion::Expression > _7216){
  std::shared_ptr< monty::ndarray< int,1 > > _7217 = _7216->getShape();
  _checked_ptr_1<int> _ptr__7217(_7217 ? _7217->raw() : nullptr,_7217 ? _7217->size(0) : 0);
  if ((!(((int)((_7217)->size(0)) == (int)1) || (((int)((_7217)->size(0)) == (int)2) && (_ptr__7217[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Expression argument must be one-dimensional"));
    }
  }
  {}
  if ((mosek::fusion::p_Matrix::_get_impl(_7215)->dimj != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Constant matrix must be a column-vector"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::mul(_7215,::mosek::fusion::p_Expr::reshape(_7216,(int)1,_ptr__7217[(int)0]));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( monty::rc_ptr< ::mosek::fusion::Expression > _7218,    monty::rc_ptr< ::mosek::fusion::Matrix > _7219) { return mosek::fusion::p_Expr::outer(_7218,_7219); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(monty::rc_ptr< ::mosek::fusion::Expression > _7218,monty::rc_ptr< ::mosek::fusion::Matrix > _7219){
  std::shared_ptr< monty::ndarray< int,1 > > _7220 = _7218->getShape();
  _checked_ptr_1<int> _ptr__7220(_7220 ? _7220->raw() : nullptr,_7220 ? _7220->size(0) : 0);
  if ((!((_7218->getND() == (int)1) || ((_7218->getND() == (int)2) && (_ptr__7220[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Expression argument must be one-dimensional"));
    }
  }
  {}
  if ((mosek::fusion::p_Matrix::_get_impl(_7219)->dimj != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Constant matrix must be a column-vector"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::mul(::mosek::fusion::p_Expr::reshape(_7218,_ptr__7220[(int)0],(int)1),_7219->__mosek_2fusion_2Matrix__transpose());
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( std::shared_ptr< monty::ndarray< double,1 > > _7221,    monty::rc_ptr< ::mosek::fusion::Expression > _7222) { return mosek::fusion::p_Expr::outer(_7221,_7222); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(std::shared_ptr< monty::ndarray< double,1 > > _7221,monty::rc_ptr< ::mosek::fusion::Expression > _7222){
  _checked_ptr_1<double> _ptr__7221(_7221 ? _7221->raw() : nullptr, _7221 ? _7221->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7223 = _7222->getShape();
  _checked_ptr_1<int> _ptr__7223(_7223 ? _7223->raw() : nullptr,_7223 ? _7223->size(0) : 0);
  if ((!((_7222->getND() == (int)1) || ((_7222->getND() == (int)2) && (_ptr__7223[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Expression argument must be one-dimensional"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::mul(::mosek::fusion::p_Matrix::dense((int)((_7221)->size(0)),(int)1,_7221),::mosek::fusion::p_Expr::reshape(_7222,(int)1,_ptr__7223[(int)0]));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( monty::rc_ptr< ::mosek::fusion::Expression > _7224,    std::shared_ptr< monty::ndarray< double,1 > > _7225) { return mosek::fusion::p_Expr::outer(_7224,_7225); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(monty::rc_ptr< ::mosek::fusion::Expression > _7224,std::shared_ptr< monty::ndarray< double,1 > > _7225){
  _checked_ptr_1<double> _ptr__7225(_7225 ? _7225->raw() : nullptr, _7225 ? _7225->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7226 = _7224->getShape();
  _checked_ptr_1<int> _ptr__7226(_7226 ? _7226->raw() : nullptr,_7226 ? _7226->size(0) : 0);
  if ((!((_7224->getND() == (int)1) || ((_7224->getND() == (int)2) && (_ptr__7226[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Expression argument must be one-dimensional"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::mul(::mosek::fusion::p_Expr::reshape(_7224,_ptr__7226[(int)0],(int)1),::mosek::fusion::p_Matrix::dense((int)1,(int)((_7225)->size(0)),_7225));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer_(int _7227,std::shared_ptr< monty::ndarray< long long,1 > > _7228,std::shared_ptr< monty::ndarray< long long,1 > > _7229,std::shared_ptr< monty::ndarray< double,1 > > _7230,std::shared_ptr< monty::ndarray< double,1 > > _7231,std::shared_ptr< monty::ndarray< long long,1 > > _7232,std::shared_ptr< monty::ndarray< double,1 > > _7233,std::shared_ptr< monty::ndarray< int,1 > > _7234,int _7235,bool _7236){
  _checked_ptr_1<long long> _ptr__7228(_7228 ? _7228->raw() : nullptr, _7228 ? _7228->size(0) : 0);
  _checked_ptr_1<long long> _ptr__7229(_7229 ? _7229->raw() : nullptr, _7229 ? _7229->size(0) : 0);
  _checked_ptr_1<double> _ptr__7230(_7230 ? _7230->raw() : nullptr, _7230 ? _7230->size(0) : 0);
  _checked_ptr_1<double> _ptr__7231(_7231 ? _7231->raw() : nullptr, _7231 ? _7231->size(0) : 0);
  _checked_ptr_1<long long> _ptr__7232(_7232 ? _7232->raw() : nullptr, _7232 ? _7232->size(0) : 0);
  _checked_ptr_1<double> _ptr__7233(_7233 ? _7233->raw() : nullptr, _7233 ? _7233->size(0) : 0);
  _checked_ptr_1<int> _ptr__7234(_7234 ? _7234->raw() : nullptr, _7234 ? _7234->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _12046;
  bool _12047 = (!_7236);
  if (_12047)
  {
    _12046 = ::mosek::fusion::p_Set::make(_7227,_7235);
  }
  else
  {
    _12046 = ::mosek::fusion::p_Set::make(_7235,_7227);
  }
  std::shared_ptr< monty::ndarray< int,1 > > _7237 = _12046;
  _checked_ptr_1<int> _ptr__7237(_7237 ? _7237->raw() : nullptr,_7237 ? _7237->size(0) : 0);
  int _7238 = safe_mul( (int)((_7233)->size(0)),(int)((_7232)->size(0)) );
  int _7239 = safe_mul( (int)((_7233)->size(0)),(int)((_7229)->size(0)) );
  std::shared_ptr< monty::ndarray< long long,1 > > _7240 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7238)));
  _checked_ptr_1<long long> _ptr__7240(_7240 ? _7240->raw() : nullptr,_7240 ? _7240->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _12048;
  bool _12049 = (NULL != _7231.get());
  if (_12049)
  {
    _12048 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7238)));
  }
  else
  {
    _12048 = nullptr;
  }
  std::shared_ptr< monty::ndarray< double,1 > > _7241 = _12048;
  _checked_ptr_1<double> _ptr__7241(_7241 ? _7241->raw() : nullptr,_7241 ? _7241->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7242 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7239)));
  _checked_ptr_1<double> _ptr__7242(_7242 ? _7242->raw() : nullptr,_7242 ? _7242->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _7243 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7239)));
  _checked_ptr_1<long long> _ptr__7243(_7243 ? _7243->raw() : nullptr,_7243 ? _7243->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _7244 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _7238,(int)1 ))));
  _checked_ptr_1<long long> _ptr__7244(_7244 ? _7244->raw() : nullptr,_7244 ? _7244->size(0) : 0);
  int _7245 = (int)_ptr__7244[((int)((_7244)->size(0)) - (int)1)];
  if ((!_7236))
  {
    {
      long long _7246 = (long long)0;
      long long _7247 = (long long)0;
      int _12050 = (int)0;
      int _12051 = (int)((_7232)->size(0));
      for (int _7248 = _12050; _7248 < _12051; ++_7248)
      {
        {
          long long _7249 = (_ptr__7228[safe_add( _7248,(int)1 )] - _ptr__7228[_7248]);
          int _12052 = (int)0;
          int _12053 = (int)((_7233)->size(0));
          for (int _7250 = _12052; _7250 < _12053; ++_7250)
          {
            {
              _ptr__7232[_7246] = safe_add( safe_mul( _ptr__7232[_7248],_7235 ),_ptr__7234[_7250] );
              _ptr__7244[safe_add( _7246,(int)1 )] = safe_add( _ptr__7244[_7246],_7249 );
              ++ _7246;
              long long _12054 = _ptr__7228[_7248];
              long long _12055 = _ptr__7228[safe_add( _7248,(int)1 )];
              for (long long _7251 = _12054; _7251 < _12055; ++_7251)
              {
                {
                  _ptr__7243[_7247] = _ptr__7229[_7251];
                  _ptr__7242[_7247] = (_ptr__7230[_7251] * _ptr__7233[_7250]);
                  ++ _7247;
                }
              }
            }
          }
        }
      }
      if ((NULL != _7241.get()))
      {
        {
          int _7252 = (int)0;
          int _12056 = (int)0;
          int _12057 = (int)((_7232)->size(0));
          for (int _7253 = _12056; _7253 < _12057; ++_7253)
          {
            {
              int _12058 = (int)0;
              int _12059 = (int)((_7233)->size(0));
              for (int _7254 = _12058; _7254 < _12059; ++_7254)
              {
                {
                  _ptr__7241[_7252] = (_ptr__7233[_7254] * _ptr__7231[_7253]);
                  ++ _7252;
                }
              }
            }
          }
        }
      }
      {}
    }
  }
  else
  {
    {
      long long _7255 = (long long)0;
      long long _7256 = (long long)0;
      int _12060 = (int)0;
      int _12061 = (int)((_7233)->size(0));
      for (int _7257 = _12060; _7257 < _12061; ++_7257)
      {
        {
          double _7258 = _ptr__7233[_7257];
          ::mosek::fusion::Utils::Tools::arraycopy(_7229,(long long)((int)0),_7243,_7256,(long long)(_7245));
          int _12062 = (int)0;
          int _12063 = _7245;
          for (int _7259 = _12062; _7259 < _12063; ++_7259)
          {
            {
              _ptr__7242[safe_add( _7256,_7259 )] = (_ptr__7230[_7259] * _ptr__7233[_7257]);
            }
          }
          int _12064 = (int)0;
          int _12065 = (int)((_7232)->size(0));
          for (int _7260 = _12064; _7260 < _12065; ++_7260)
          {
            {
              long long _7261 = (_ptr__7228[safe_add( _7260,(int)1 )] - _ptr__7228[_7260]);
              _ptr__7232[_7255] = safe_add( safe_mul( _ptr__7232[_7260],_7235 ),_ptr__7234[_7257] );
              _ptr__7244[safe_add( _7255,(int)1 )] = safe_add( _ptr__7244[_7255],_7261 );
              ++ _7255;
            }
          }
          _7256 += _7245;
        }
      }
      if ((NULL != _7241.get()))
      {
        {
          int _7262 = (int)0;
          int _12066 = (int)0;
          int _12067 = (int)((_7233)->size(0));
          for (int _7263 = _12066; _7263 < _12067; ++_7263)
          {
            {
              double _7264 = _ptr__7233[_7263];
              int _12068 = (int)0;
              int _12069 = (int)((_7232)->size(0));
              for (int _7265 = _12068; _7265 < _12069; ++_7265)
              {
                {
                  _ptr__7241[_7262] = (_ptr__7231[_7265] * _7264);
                  ++ _7262;
                }
              }
            }
          }
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_Expr::_new_Expr(_7244,_7243,_7242,_7241,_7237,_7240)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer_(monty::rc_ptr< ::mosek::fusion::Variable > _7266,int _7267,std::shared_ptr< monty::ndarray< double,1 > > _7268,std::shared_ptr< monty::ndarray< int,1 > > _7269,int _7270,bool _7271){
  _checked_ptr_1<double> _ptr__7268(_7268 ? _7268->raw() : nullptr, _7268 ? _7268->size(0) : 0);
  _checked_ptr_1<int> _ptr__7269(_7269 ? _7269->raw() : nullptr, _7269 ? _7269->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _12070;
  bool _12071 = (!_7271);
  if (_12071)
  {
    _12070 = ::mosek::fusion::p_Set::make(_7267,_7270);
  }
  else
  {
    _12070 = ::mosek::fusion::p_Set::make(_7270,_7267);
  }
  std::shared_ptr< monty::ndarray< int,1 > > _7272 = _12070;
  _checked_ptr_1<int> _ptr__7272(_7272 ? _7272->raw() : nullptr,_7272 ? _7272->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _12072;
  bool _12073 = (_7270 == (int)((_7268)->size(0)));
  if (_12073)
  {
    _12072 = nullptr;
  }
  else
  {
    _12072 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( (int)((_7268)->size(0)),_7267 ))));
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _7273 = _12072;
  _checked_ptr_1<long long> _ptr__7273(_7273 ? _7273->raw() : nullptr,_7273 ? _7273->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7274 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( (int)((_7268)->size(0)),_7267 ))));
  _checked_ptr_1<double> _ptr__7274(_7274 ? _7274->raw() : nullptr,_7274 ? _7274->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7275 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( (int)((_7268)->size(0)),_7267 ))));
  _checked_ptr_1<double> _ptr__7275(_7275 ? _7275->raw() : nullptr,_7275 ? _7275->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _7276 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( (int)((_7268)->size(0)),_7267 ))));
  _checked_ptr_1<long long> _ptr__7276(_7276 ? _7276->raw() : nullptr,_7276 ? _7276->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _7277 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( safe_mul( (int)((_7268)->size(0)),_7267 ),(int)1 ))));
  _checked_ptr_1<long long> _ptr__7277(_7277 ? _7277->raw() : nullptr,_7277 ? _7277->size(0) : 0);
  if ((_7270 == (int)((_7268)->size(0))))
  {
    {
      long long _7278 = (long long)0;
      if ((!_7271))
      {
        {
          int _12074 = (int)0;
          int _12075 = _7267;
          for (int _7279 = _12074; _7279 < _12075; ++_7279)
          {
            {
              int _12076 = (int)0;
              int _12077 = _7270;
              for (int _7280 = _12076; _7280 < _12077; ++_7280)
              {
                {
                  _ptr__7277[safe_add( _7278,(int)1 )] = safe_add( _7278,(int)1 );
                  _ptr__7276[_7278] = (long long)_7279;
                  _ptr__7275[_7278] = _ptr__7268[_7280];
                  ++ _7278;
                }
              }
            }
          }
        }
      }
      else
      {
        {
          int _12078 = (int)0;
          int _12079 = _7270;
          for (int _7281 = _12078; _7281 < _12079; ++_7281)
          {
            {
              int _12080 = (int)0;
              int _12081 = _7267;
              for (int _7282 = _12080; _7282 < _12081; ++_7282)
              {
                {
                  _ptr__7277[safe_add( _7278,(int)1 )] = safe_add( _7278,(int)1 );
                  _ptr__7276[_7278] = (long long)_7282;
                  _ptr__7275[_7278] = _ptr__7268[_7281];
                  ++ _7278;
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    {
      long long _7283 = (long long)0;
      if ((!_7271))
      {
        {
          int _12082 = (int)0;
          int _12083 = _7267;
          for (int _7284 = _12082; _7284 < _12083; ++_7284)
          {
            {
              int _12084 = (int)0;
              int _12085 = (int)((_7268)->size(0));
              for (int _7285 = _12084; _7285 < _12085; ++_7285)
              {
                {
                  _ptr__7277[safe_add( _7283,(int)1 )] = safe_add( _7283,(int)1 );
                  _ptr__7276[_7283] = (long long)_7284;
                  _ptr__7275[_7283] = _ptr__7268[_7285];
                  _ptr__7273[_7283] = safe_add( safe_mul( _7284,_7270 ),_ptr__7269[_7285] );
                  ++ _7283;
                }
              }
            }
          }
        }
      }
      else
      {
        {
          int _12086 = (int)0;
          int _12087 = (int)((_7268)->size(0));
          for (int _7286 = _12086; _7286 < _12087; ++_7286)
          {
            {
              int _12088 = (int)0;
              int _12089 = _7267;
              for (int _7287 = _12088; _7287 < _12089; ++_7287)
              {
                {
                  _ptr__7277[safe_add( _7283,(int)1 )] = safe_add( _7283,(int)1 );
                  _ptr__7276[_7283] = (long long)_7287;
                  _ptr__7275[_7283] = _ptr__7268[_7286];
                  _ptr__7273[_7283] = safe_add( safe_mul( _ptr__7269[_7286],_7267 ),_7287 );
                  ++ _7283;
                }
              }
            }
          }
        }
      }
    }
  }
  return (::mosek::fusion::p_Expr::_new_Expr(_7277,_7276,_7275,_7274,_7272,_7273)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >,1 > > _7288) { return mosek::fusion::p_Expr::stack(_7288); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >,1 > > _7288){
  if ((NULL == _7288.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Argument exprs may not be null"));
    }
  }
  {}
  int _12090 = (int)0;
  int _12091 = (int)((_7288)->size(0));
  for (int _7289 = _12090; _7289 < _12091; ++_7289)
  {
    {
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7290 = ((*_7288)(_7289));
      if ((NULL == _7290.get()))
      {
        {
          throw monty::NullPointerException(std::string ("Arguments for stack may not be null"));
        }
      }
      {}
      int _12092 = (int)0;
      int _12093 = (int)((_7290)->size(0));
      for (int _7291 = _12092; _7291 < _12093; ++_7291)
      {
        {
          if ((NULL == ((*_7290)(_7291)).get()))
          {
            {
              throw monty::NullPointerException(std::string ("Arguments for stack may not be null"));
            }
          }
          {}
        }
      }
    }
  }
  std::vector<monty::rc_ptr< ::mosek::fusion::Expression >> _12094;
  for (int _7293 = (int)0, _12095 = (int)((_7288)->size(0)); _7293 < _12095 ; ++_7293)
  {
    _12094.push_back(::mosek::fusion::p_Expr::stack_(((*_7288)(_7293)),(int)1));
  }
  auto _12096 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_12094.size()),_12094.begin(),_12094.end()));
  std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7292 = _12096;
  return ::mosek::fusion::p_Expr::stack_(_7292,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _7294,    double _7295,    double _7296) { return mosek::fusion::p_Expr::vstack(_7294,_7295,_7296); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _7294,double _7295,double _7296){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7294).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7295).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7296).get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _7297,    double _7298,    monty::rc_ptr< ::mosek::fusion::Expression > _7299) { return mosek::fusion::p_Expr::vstack(_7297,_7298,_7299); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _7297,double _7298,monty::rc_ptr< ::mosek::fusion::Expression > _7299){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7297).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7298).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7299.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _7300,    monty::rc_ptr< ::mosek::fusion::Expression > _7301,    double _7302) { return mosek::fusion::p_Expr::vstack(_7300,_7301,_7302); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _7300,monty::rc_ptr< ::mosek::fusion::Expression > _7301,double _7302){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7300).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7301.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7302).get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _7303,    monty::rc_ptr< ::mosek::fusion::Expression > _7304,    monty::rc_ptr< ::mosek::fusion::Expression > _7305) { return mosek::fusion::p_Expr::vstack(_7303,_7304,_7305); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _7303,monty::rc_ptr< ::mosek::fusion::Expression > _7304,monty::rc_ptr< ::mosek::fusion::Expression > _7305){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7303).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7304.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7305.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _7306,    double _7307,    double _7308) { return mosek::fusion::p_Expr::vstack(_7306,_7307,_7308); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _7306,double _7307,double _7308){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7306.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7307).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7308).get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _7309,    double _7310,    monty::rc_ptr< ::mosek::fusion::Expression > _7311) { return mosek::fusion::p_Expr::vstack(_7309,_7310,_7311); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _7309,double _7310,monty::rc_ptr< ::mosek::fusion::Expression > _7311){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7309.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7310).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7311.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _7312,    monty::rc_ptr< ::mosek::fusion::Expression > _7313,    double _7314) { return mosek::fusion::p_Expr::vstack(_7312,_7313,_7314); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _7312,monty::rc_ptr< ::mosek::fusion::Expression > _7313,double _7314){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7312.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7313.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7314).get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _7315,    monty::rc_ptr< ::mosek::fusion::Expression > _7316,    monty::rc_ptr< ::mosek::fusion::Expression > _7317) { return mosek::fusion::p_Expr::vstack(_7315,_7316,_7317); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _7315,monty::rc_ptr< ::mosek::fusion::Expression > _7316,monty::rc_ptr< ::mosek::fusion::Expression > _7317){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7315.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7316.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7317.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _7318,    monty::rc_ptr< ::mosek::fusion::Expression > _7319) { return mosek::fusion::p_Expr::vstack(_7318,_7319); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _7318,monty::rc_ptr< ::mosek::fusion::Expression > _7319){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7318).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7319.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _7320,    double _7321) { return mosek::fusion::p_Expr::vstack(_7320,_7321); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _7320,double _7321){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7320.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7321).get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _7322,    monty::rc_ptr< ::mosek::fusion::Expression > _7323) { return mosek::fusion::p_Expr::vstack(_7322,_7323); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _7322,monty::rc_ptr< ::mosek::fusion::Expression > _7323){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7322.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7323.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7324) { return mosek::fusion::p_Expr::vstack(_7324); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7324){
  if ((NULL == _7324.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Argument exprs may not be null"));
    }
  }
  {}
  int _12097 = (int)0;
  int _12098 = (int)((_7324)->size(0));
  for (int _7325 = _12097; _7325 < _12098; ++_7325)
  {
    {
      if ((NULL == ((*_7324)(_7325)).get()))
      {
        {
          throw monty::NullPointerException(std::string ("Arguments for vstack may not be null"));
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Expr::stack_(_7324,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _7326,    monty::rc_ptr< ::mosek::fusion::Expression > _7327,    monty::rc_ptr< ::mosek::fusion::Expression > _7328) { return mosek::fusion::p_Expr::hstack(_7326,_7327,_7328); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _7326,monty::rc_ptr< ::mosek::fusion::Expression > _7327,monty::rc_ptr< ::mosek::fusion::Expression > _7328){
  if (((NULL == _7326.get()) || ((NULL == _7327.get()) || (NULL == _7328.get()))))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments e1, e2 and e3 may not be null"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7326.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7327.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7328.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _7329,    monty::rc_ptr< ::mosek::fusion::Expression > _7330,    double _7331) { return mosek::fusion::p_Expr::hstack(_7329,_7330,_7331); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _7329,monty::rc_ptr< ::mosek::fusion::Expression > _7330,double _7331){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7329.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7330.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7331).get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _7332,    double _7333,    monty::rc_ptr< ::mosek::fusion::Expression > _7334) { return mosek::fusion::p_Expr::hstack(_7332,_7333,_7334); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _7332,double _7333,monty::rc_ptr< ::mosek::fusion::Expression > _7334){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7332.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7333).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7334.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _7335,    double _7336,    double _7337) { return mosek::fusion::p_Expr::hstack(_7335,_7336,_7337); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _7335,double _7336,double _7337){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7335.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7336).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7337).get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _7338,    monty::rc_ptr< ::mosek::fusion::Expression > _7339,    monty::rc_ptr< ::mosek::fusion::Expression > _7340) { return mosek::fusion::p_Expr::hstack(_7338,_7339,_7340); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(double _7338,monty::rc_ptr< ::mosek::fusion::Expression > _7339,monty::rc_ptr< ::mosek::fusion::Expression > _7340){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7338).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7339.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7340.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _7341,    monty::rc_ptr< ::mosek::fusion::Expression > _7342,    double _7343) { return mosek::fusion::p_Expr::hstack(_7341,_7342,_7343); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(double _7341,monty::rc_ptr< ::mosek::fusion::Expression > _7342,double _7343){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7341).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7342.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7343).get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _7344,    double _7345,    monty::rc_ptr< ::mosek::fusion::Expression > _7346) { return mosek::fusion::p_Expr::hstack(_7344,_7345,_7346); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(double _7344,double _7345,monty::rc_ptr< ::mosek::fusion::Expression > _7346){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7344).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7345).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7346.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _7347,    monty::rc_ptr< ::mosek::fusion::Expression > _7348) { return mosek::fusion::p_Expr::hstack(_7347,_7348); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(double _7347,monty::rc_ptr< ::mosek::fusion::Expression > _7348){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7347).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7348.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _7349,    double _7350) { return mosek::fusion::p_Expr::hstack(_7349,_7350); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _7349,double _7350){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7349.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7350).get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _7351,    monty::rc_ptr< ::mosek::fusion::Expression > _7352) { return mosek::fusion::p_Expr::hstack(_7351,_7352); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _7351,monty::rc_ptr< ::mosek::fusion::Expression > _7352){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7351.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7352.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7353) { return mosek::fusion::p_Expr::hstack(_7353); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7353){
  if ((NULL == _7353.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Argument exprs may not be null"));
    }
  }
  {}
  int _12099 = (int)0;
  int _12100 = (int)((_7353)->size(0));
  for (int _7354 = _12099; _7354 < _12100; ++_7354)
  {
    {
      if ((NULL == ((*_7353)(_7354)).get()))
      {
        {
          throw monty::NullPointerException(std::string ("Arguments for hstack may not be null"));
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Expr::stack_(_7353,(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _7355,    monty::rc_ptr< ::mosek::fusion::Expression > _7356,    monty::rc_ptr< ::mosek::fusion::Expression > _7357,    monty::rc_ptr< ::mosek::fusion::Expression > _7358) { return mosek::fusion::p_Expr::stack(_7355,_7356,_7357,_7358); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _7355,monty::rc_ptr< ::mosek::fusion::Expression > _7356,monty::rc_ptr< ::mosek::fusion::Expression > _7357,monty::rc_ptr< ::mosek::fusion::Expression > _7358){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7356.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7357.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7358.get())}),_7355);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _7359,    monty::rc_ptr< ::mosek::fusion::Expression > _7360,    monty::rc_ptr< ::mosek::fusion::Expression > _7361,    double _7362) { return mosek::fusion::p_Expr::stack(_7359,_7360,_7361,_7362); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _7359,monty::rc_ptr< ::mosek::fusion::Expression > _7360,monty::rc_ptr< ::mosek::fusion::Expression > _7361,double _7362){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7360.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7361.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7362).get())}),_7359);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _7363,    monty::rc_ptr< ::mosek::fusion::Expression > _7364,    double _7365,    monty::rc_ptr< ::mosek::fusion::Expression > _7366) { return mosek::fusion::p_Expr::stack(_7363,_7364,_7365,_7366); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _7363,monty::rc_ptr< ::mosek::fusion::Expression > _7364,double _7365,monty::rc_ptr< ::mosek::fusion::Expression > _7366){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7364.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7365).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7366.get())}),_7363);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _7367,    monty::rc_ptr< ::mosek::fusion::Expression > _7368,    double _7369,    double _7370) { return mosek::fusion::p_Expr::stack(_7367,_7368,_7369,_7370); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _7367,monty::rc_ptr< ::mosek::fusion::Expression > _7368,double _7369,double _7370){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7368.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7369).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7370).get())}),_7367);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _7371,    double _7372,    monty::rc_ptr< ::mosek::fusion::Expression > _7373,    monty::rc_ptr< ::mosek::fusion::Expression > _7374) { return mosek::fusion::p_Expr::stack(_7371,_7372,_7373,_7374); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _7371,double _7372,monty::rc_ptr< ::mosek::fusion::Expression > _7373,monty::rc_ptr< ::mosek::fusion::Expression > _7374){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7372).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7373.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7374.get())}),_7371);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _7375,    double _7376,    monty::rc_ptr< ::mosek::fusion::Expression > _7377,    double _7378) { return mosek::fusion::p_Expr::stack(_7375,_7376,_7377,_7378); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _7375,double _7376,monty::rc_ptr< ::mosek::fusion::Expression > _7377,double _7378){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7376).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7377.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7378).get())}),_7375);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _7379,    double _7380,    double _7381,    monty::rc_ptr< ::mosek::fusion::Expression > _7382) { return mosek::fusion::p_Expr::stack(_7379,_7380,_7381,_7382); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _7379,double _7380,double _7381,monty::rc_ptr< ::mosek::fusion::Expression > _7382){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7380).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7381).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7382.get())}),_7379);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _7383,    double _7384,    monty::rc_ptr< ::mosek::fusion::Expression > _7385) { return mosek::fusion::p_Expr::stack(_7383,_7384,_7385); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _7383,double _7384,monty::rc_ptr< ::mosek::fusion::Expression > _7385){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7384).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7385.get())}),_7383);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _7386,    monty::rc_ptr< ::mosek::fusion::Expression > _7387,    double _7388) { return mosek::fusion::p_Expr::stack(_7386,_7387,_7388); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _7386,monty::rc_ptr< ::mosek::fusion::Expression > _7387,double _7388){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7387.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7388).get())}),_7386);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _7389,    monty::rc_ptr< ::mosek::fusion::Expression > _7390,    monty::rc_ptr< ::mosek::fusion::Expression > _7391) { return mosek::fusion::p_Expr::stack(_7389,_7390,_7391); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _7389,monty::rc_ptr< ::mosek::fusion::Expression > _7390,monty::rc_ptr< ::mosek::fusion::Expression > _7391){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7390.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7391.get())}),_7389);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _7392,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7393) { return mosek::fusion::p_Expr::stack(_7392,_7393); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _7392,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7393){
  return ::mosek::fusion::p_Expr::stack_(_7393,_7392);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7394,int _7395){
  if (((int)((_7394)->size(0)) == (int)1))
  {
    {
      return ((*_7394)((int)0));
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprStack::_new_ExprStack(::mosek::fusion::p_Expr::promote(_7394,_7395),_7395)).as<::mosek::fusion::Expression>();
    }
  }
}
std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > mosek::fusion::p_Expr::promote(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7396,int _7397){
  int _7398 = (int)((_7396)->size(0));
  std::vector<int> _12101;
  for (int _7400 = (int)0, _12102 = _7398; _7400 < _12102 ; ++_7400)
  {
    _12101.push_back(((*_7396)(_7400))->getND());
  }
  auto _12103 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12101.size()),_12101.begin(),_12101.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _7399 = _12103;
  _checked_ptr_1<int> _ptr__7399(_7399 ? _7399->raw() : nullptr,_7399 ? _7399->size(0) : 0);
  int _7401 = _ptr__7399[(int)0];
  int _7402 = _ptr__7399[(int)0];
  int _12104 = (int)1;
  int _12105 = _7398;
  for (int _7403 = _12104; _7403 < _12105; ++_7403)
  {
    {
      if ((_ptr__7399[_7403] < _7402))
      {
        {
          _7402 = _ptr__7399[_7403];
        }
      }
      {}
      if ((_ptr__7399[_7403] > _7401))
      {
        {
          _7401 = _ptr__7399[_7403];
        }
      }
      {}
    }
  }
  if ((_7401 < _7397))
  {
    {
      _7401 = _7397;
    }
  }
  {}
  if ((_7402 < _7401))
  {
    {
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7404 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_7398)));
      std::shared_ptr< monty::ndarray< int,1 > > _7405 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7401)));
      _checked_ptr_1<int> _ptr__7405(_7405 ? _7405->raw() : nullptr,_7405 ? _7405->size(0) : 0);
      int _12106 = (int)0;
      int _12107 = _7398;
      for (int _7406 = _12106; _7406 < _12107; ++_7406)
      {
        {
          if ((((*_7396)(_7406))->getND() == _7401))
          {
            {
              ((*_7404)(_7406)) = ((*_7396)(_7406));
            }
          }
          else
          {
            {
              std::shared_ptr< monty::ndarray< int,1 > > _7407 = ((*_7396)(_7406))->getShape();
              _checked_ptr_1<int> _ptr__7407(_7407 ? _7407->raw() : nullptr,_7407 ? _7407->size(0) : 0);
              int _12108 = (int)0;
              int _12109 = (int)((_7407)->size(0));
              for (int _7408 = _12108; _7408 < _12109; ++_7408)
              {
                {
                  _ptr__7405[_7408] = _ptr__7407[_7408];
                }
              }
              int _12110 = (int)((_7407)->size(0));
              int _12111 = _7401;
              for (int _7409 = _12110; _7409 < _12111; ++_7409)
              {
                {
                  _ptr__7405[_7409] = (int)1;
                }
              }
              ((*_7404)(_7406)) = (::mosek::fusion::p_ExprReshape::_new_ExprReshape(_7405,((*_7396)(_7406)))).as<::mosek::fusion::Expression>();
            }
          }
        }
      }
      return _7404;
    }
  }
  else
  {
    {
      return _7396;
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::repeat  ( monty::rc_ptr< ::mosek::fusion::Variable > _7410,    int _7411,    int _7412) { return mosek::fusion::p_Expr::repeat(_7410,_7411,_7412); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::repeat(monty::rc_ptr< ::mosek::fusion::Variable > _7410,int _7411,int _7412){
  return ::mosek::fusion::p_Expr::repeat(_7410->__mosek_2fusion_2Variable__asExpr(),_7411,_7412);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::repeat  ( monty::rc_ptr< ::mosek::fusion::Expression > _7413,    int _7414,    int _7415) { return mosek::fusion::p_Expr::repeat(_7413,_7414,_7415); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::repeat(monty::rc_ptr< ::mosek::fusion::Expression > _7413,int _7414,int _7415){
  if ((_7414 <= (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Cannot repeat Expression 0 or less times"));
    }
  }
  {}
  if (((_7415 < (int)0) || (_7415 > _7413->getND())))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid stacking dimension"));
    }
  }
  else
  {
    {
      if ((_7415 == _7413->getND()))
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _7416 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _7415,(int)1 ))));
          _checked_ptr_1<int> _ptr__7416(_7416 ? _7416->raw() : nullptr,_7416 ? _7416->size(0) : 0);
          int _12112 = (int)0;
          int _12113 = _7415;
          for (int _7417 = _12112; _7417 < _12113; ++_7417)
          {
            {
              _ptr__7416[_7417] = _7413->getDim(_7417);
            }
          }
          _ptr__7416[_7415] = (int)1;
          return (::mosek::fusion::p_ExprRepeat::_new_ExprRepeat(::mosek::fusion::p_Expr::reshape(_7413,_7416),_7415,_7414)).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          return (::mosek::fusion::p_ExprRepeat::_new_ExprRepeat(_7413,_7415,_7414)).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7418) { return mosek::fusion::p_Expr::add(_7418); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7418){
  std::vector<double> _12114;
  for (int _7419 = (int)0, _12115 = (int)((_7418)->size(0)); _7419 < _12115 ; ++_7419)
  {
    _12114.push_back(1.0);
  }
  auto _12116 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12114.size()),_12114.begin(),_12114.end()));
  return (::mosek::fusion::p_ExprWSum::_new_ExprWSum(_7418,_12116)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _7420) { return mosek::fusion::p_Expr::add(_7420); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _7420){
  if ((NULL == _7420.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Argument vs may not be null"));
    }
  }
  {}
  if (((int)((_7420)->size(0)) == (int)0))
  {
    {
      return (::mosek::fusion::p_Expr::_new_Expr(std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)((int)0)}),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),nullptr,::mosek::fusion::p_Set::make((int)0),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),(int)1)).as<::mosek::fusion::Expression>();
    }
  }
  {}
  if ((((int)((_7420)->size(0)) > (int)0) && (NULL == ((*_7420)((int)0)).get())))
  {
    {
      throw monty::NullPointerException(std::string ("Argument vs may contain null"));
    }
  }
  {}
  int _7421 = ((*_7420)((int)0))->getND();
  int _12117 = (int)1;
  int _12118 = (int)((_7420)->size(0));
  for (int _7422 = _12117; _7422 < _12118; ++_7422)
  {
    {
      if ((_7421 < ((*_7420)(_7422))->getND()))
      {
        {
          _7421 = ((*_7420)(_7422))->getND();
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,2 > > _7423 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_7420)->size(0)),_7421)));
  int _12119 = (int)0;
  int _12120 = (int)((_7420)->size(0));
  for (int _7424 = _12119; _7424 < _12120; ++_7424)
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _7425 = ((*_7420)(_7424))->getShape();
      _checked_ptr_1<int> _ptr__7425(_7425 ? _7425->raw() : nullptr,_7425 ? _7425->size(0) : 0);
      int _12121 = (int)0;
      int _12122 = (int)((_7425)->size(0));
      for (int _7426 = _12121; _7426 < _12122; ++_7426)
      {
        {
          ((*_7423)(_7424,_7426)) = _ptr__7425[_7426];
        }
      }
      int _12123 = (int)((_7425)->size(0));
      int _12124 = _7421;
      for (int _7427 = _12123; _7427 < _12124; ++_7427)
      {
        {
          ((*_7423)(_7424,_7427)) = (int)1;
        }
      }
    }
  }
  int _12125 = (int)1;
  int _12126 = (int)((_7420)->size(0));
  for (int _7428 = _12125; _7428 < _12126; ++_7428)
  {
    {
      int _12127 = (int)0;
      int _12128 = _7421;
      for (int _7429 = _12127; _7429 < _12128; ++_7429)
      {
        {
          if ((((*_7423)((int)0,_7429)) != ((*_7423)(_7428,_7429))))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
            }
          }
          {}
        }
      }
    }
  }
  std::vector<int> _12129;
  for (int _7431 = (int)0, _12130 = _7421; _7431 < _12130 ; ++_7431)
  {
    _12129.push_back(((*_7423)((int)0,_7431)));
  }
  auto _12131 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12129.size()),_12129.begin(),_12129.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _7430 = _12131;
  _checked_ptr_1<int> _ptr__7430(_7430 ? _7430->raw() : nullptr,_7430 ? _7430->size(0) : 0);
  int _7432 = (int)1;
  int _12132 = (int)0;
  int _12133 = _7421;
  for (int _7433 = _12132; _7433 < _12133; ++_7433)
  {
    {
      _7432 *= _ptr__7430[_7433];
    }
  }
  int _7434 = (int)0;
  int _7435 = (int)0;
  int _12134 = (int)0;
  int _12135 = (int)((_7420)->size(0));
  for (int _7436 = _12134; _7436 < _12135; ++_7436)
  {
    {
      int _7437 = ((*_7420)(_7436))->numInst();
      _7434 += _7437;
      int _12136;
      bool _12137 = (_7435 > _7437);
      if (_12137)
      {
        _12136 = _7435;
      }
      else
      {
        _12136 = _7437;
      }
      _7435 = _12136;
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _7438 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _7432,(int)1 ))));
  _checked_ptr_1<long long> _ptr__7438(_7438 ? _7438->raw() : nullptr,_7438 ? _7438->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _7439 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7434)));
  _checked_ptr_1<long long> _ptr__7439(_7439 ? _7439->raw() : nullptr,_7439 ? _7439->size(0) : 0);
  std::vector<double> _12138;
  for (int _7441 = (int)0, _12139 = _7434; _7441 < _12139 ; ++_7441)
  {
    _12138.push_back(1.0);
  }
  auto _12140 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12138.size()),_12138.begin(),_12138.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _7440 = _12140;
  _checked_ptr_1<double> _ptr__7440(_7440 ? _7440->raw() : nullptr,_7440 ? _7440->size(0) : 0);
  {
    std::shared_ptr< monty::ndarray< long long,1 > > _7442 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7435)));
    _checked_ptr_1<long long> _ptr__7442(_7442 ? _7442->raw() : nullptr,_7442 ? _7442->size(0) : 0);
    std::shared_ptr< monty::ndarray< long long,1 > > _7443 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7435)));
    _checked_ptr_1<long long> _ptr__7443(_7443 ? _7443->raw() : nullptr,_7443 ? _7443->size(0) : 0);
    int _12141 = (int)0;
    int _12142 = (int)((_7420)->size(0));
    for (int _7444 = _12141; _7444 < _12142; ++_7444)
    {
      {
        int _7445 = ((*_7420)(_7444))->inst((int)0,_7442,(int)0,_7443);
        int _12143 = (int)0;
        int _12144 = _7445;
        for (int _7446 = _12143; _7446 < _12144; ++_7446)
        {
          {
            _ptr__7438[safe_add( _ptr__7442[_7446],(int)1 )] += (int)1;
          }
        }
      }
    }
    int _12145 = (int)0;
    int _12146 = _7432;
    for (int _7447 = _12145; _7447 < _12146; ++_7447)
    {
      {
        _ptr__7438[safe_add( _7447,(int)1 )] += _ptr__7438[_7447];
      }
    }
    int _12147 = (int)0;
    int _12148 = (int)((_7420)->size(0));
    for (int _7448 = _12147; _7448 < _12148; ++_7448)
    {
      {
        int _7449 = ((*_7420)(_7448))->inst((int)0,_7442,(int)0,_7443);
        int _12149 = (int)0;
        int _12150 = _7449;
        for (int _7450 = _12149; _7450 < _12150; ++_7450)
        {
          {
            _ptr__7439[_ptr__7438[_ptr__7442[_7450]]] = _ptr__7443[_7450];
            ++ _ptr__7438[_ptr__7442[_7450]];
          }
        }
      }
    }
    int _12151 = (int)0;
    int _12152 = _7432;
    for (int _7451 = _12151; _7451 < _12152; ++_7451)
    {
      {
        _ptr__7438[(_7432 - _7451)] = _ptr__7438[((_7432 - _7451) - (int)1)];
      }
    }
    _ptr__7438[(int)0] = (int)0;
  }
  std::vector<double> _12153;
  for (int _7452 = (int)0, _12154 = _7432; _7452 < _12154 ; ++_7452)
  {
    _12153.push_back(0.0);
  }
  auto _12155 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12153.size()),_12153.begin(),_12153.end()));
  return (::mosek::fusion::p_Expr::_new_Expr(_7438,_7439,_7440,_12155,_7430,nullptr,(int)1)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add_(monty::rc_ptr< ::mosek::fusion::Expression > _7453,double _7454,monty::rc_ptr< ::mosek::fusion::Expression > _7455,double _7456){
  int _7457 = _7453->getND();
  int _7458 = _7455->getND();
  if ((_7457 == _7458))
  {
    {
      return (::mosek::fusion::p_ExprAdd::_new_ExprAdd(_7453,_7455,_7454,_7456)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      int _12156;
      bool _12157 = (_7457 > _7458);
      if (_12157)
      {
        _12156 = _7457;
      }
      else
      {
        _12156 = _7458;
      }
      int _7459 = _12156;
      std::shared_ptr< monty::ndarray< int,1 > > _7460 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7459)));
      _checked_ptr_1<int> _ptr__7460(_7460 ? _7460->raw() : nullptr,_7460 ? _7460->size(0) : 0);
      if ((_7457 < _7458))
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _7461 = _7453->getShape();
          _checked_ptr_1<int> _ptr__7461(_7461 ? _7461->raw() : nullptr,_7461 ? _7461->size(0) : 0);
          int _12158 = (int)0;
          int _12159 = _7457;
          for (int _7462 = _12158; _7462 < _12159; ++_7462)
          {
            {
              _ptr__7460[_7462] = _ptr__7461[_7462];
            }
          }
          int _12160 = _7457;
          int _12161 = _7459;
          for (int _7463 = _12160; _7463 < _12161; ++_7463)
          {
            {
              _ptr__7460[_7463] = (int)1;
            }
          }
          return (::mosek::fusion::p_ExprAdd::_new_ExprAdd((::mosek::fusion::p_ExprReshape::_new_ExprReshape(_7460,_7453)).as<::mosek::fusion::Expression>(),_7455,_7454,_7456)).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _7464 = _7455->getShape();
          _checked_ptr_1<int> _ptr__7464(_7464 ? _7464->raw() : nullptr,_7464 ? _7464->size(0) : 0);
          int _12162 = (int)0;
          int _12163 = _7458;
          for (int _7465 = _12162; _7465 < _12163; ++_7465)
          {
            {
              _ptr__7460[_7465] = _ptr__7464[_7465];
            }
          }
          int _12164 = _7458;
          int _12165 = _7459;
          for (int _7466 = _12164; _7466 < _12165; ++_7466)
          {
            {
              _ptr__7460[_7466] = (int)1;
            }
          }
          return (::mosek::fusion::p_ExprAdd::_new_ExprAdd(_7453,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(_7460,_7455)).as<::mosek::fusion::Expression>(),_7454,_7456)).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::transpose  ( monty::rc_ptr< ::mosek::fusion::Expression > _7467) { return mosek::fusion::p_Expr::transpose(_7467); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::transpose(monty::rc_ptr< ::mosek::fusion::Expression > _7467){
  if ((_7467->getND() == (int)0))
  {
    {
      return _7467;
    }
  }
  else if((_7467->getND() == (int)1))
  {
    {
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(_7467->getDim((int)0))}),_7467)).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7467->getND() == (int)2))
  {
    {
      return (::mosek::fusion::p_ExprTranspose::_new_ExprTranspose(_7467)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Incorrect number of dimensions for transpose"));
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7468,    monty::rc_ptr< ::mosek::fusion::Expression > _7469) { return mosek::fusion::p_Expr::mulElm(_7468,_7469); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Matrix > _7468,monty::rc_ptr< ::mosek::fusion::Expression > _7469){
  return ::mosek::fusion::p_Expr::mulElm_(_7468,_7469);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7470,    monty::rc_ptr< ::mosek::fusion::Expression > _7471) { return mosek::fusion::p_Expr::mulElm(_7470,_7471); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7470,monty::rc_ptr< ::mosek::fusion::Expression > _7471){
  return ::mosek::fusion::p_Expr::mulElm_(_7470,_7471);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( std::shared_ptr< monty::ndarray< double,2 > > _7472,    monty::rc_ptr< ::mosek::fusion::Expression > _7473) { return mosek::fusion::p_Expr::mulElm(_7472,_7473); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(std::shared_ptr< monty::ndarray< double,2 > > _7472,monty::rc_ptr< ::mosek::fusion::Expression > _7473){
  return ::mosek::fusion::p_Expr::mulElm_(::mosek::fusion::p_Matrix::dense(_7472),_7473);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( std::shared_ptr< monty::ndarray< double,1 > > _7474,    monty::rc_ptr< ::mosek::fusion::Expression > _7475) { return mosek::fusion::p_Expr::mulElm(_7474,_7475); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(std::shared_ptr< monty::ndarray< double,1 > > _7474,monty::rc_ptr< ::mosek::fusion::Expression > _7475){
  _checked_ptr_1<double> _ptr__7474(_7474 ? _7474->raw() : nullptr, _7474 ? _7474->size(0) : 0);
  return ::mosek::fusion::p_Expr::mulElm_(_7474,_7475);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Expression > _7476,    monty::rc_ptr< ::mosek::fusion::Matrix > _7477) { return mosek::fusion::p_Expr::mulElm(_7476,_7477); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _7476,monty::rc_ptr< ::mosek::fusion::Matrix > _7477){
  return ::mosek::fusion::p_Expr::mulElm_(_7477,_7476);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Expression > _7478,    std::shared_ptr< monty::ndarray< double,2 > > _7479) { return mosek::fusion::p_Expr::mulElm(_7478,_7479); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _7478,std::shared_ptr< monty::ndarray< double,2 > > _7479){
  return ::mosek::fusion::p_Expr::mulElm_(::mosek::fusion::p_Matrix::dense(_7479),_7478);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Expression > _7480,    std::shared_ptr< monty::ndarray< double,1 > > _7481) { return mosek::fusion::p_Expr::mulElm(_7480,_7481); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _7480,std::shared_ptr< monty::ndarray< double,1 > > _7481){
  _checked_ptr_1<double> _ptr__7481(_7481 ? _7481->raw() : nullptr, _7481 ? _7481->size(0) : 0);
  return ::mosek::fusion::p_Expr::mulElm_(_7481,_7480);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Expression > _7482,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7483) { return mosek::fusion::p_Expr::mulElm(_7482,_7483); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _7482,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7483){
  return ::mosek::fusion::p_Expr::mulElm_(_7483,_7482);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Parameter > _7484,    monty::rc_ptr< ::mosek::fusion::Expression > _7485) { return mosek::fusion::p_Expr::mulElm(_7484,_7485); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Parameter > _7484,monty::rc_ptr< ::mosek::fusion::Expression > _7485){
  return (::mosek::fusion::p_ExprMulParamElem::_new_ExprMulParamElem(_7484,_7485)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Expression > _7486,    monty::rc_ptr< ::mosek::fusion::Parameter > _7487) { return mosek::fusion::p_Expr::mulElm(_7486,_7487); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _7486,monty::rc_ptr< ::mosek::fusion::Parameter > _7487){
  return (::mosek::fusion::p_ExprMulParamElem::_new_ExprMulParamElem(_7487,_7486)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7488,    monty::rc_ptr< ::mosek::fusion::Expression > _7489) { return mosek::fusion::p_Expr::sub(_7488,_7489); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7488,monty::rc_ptr< ::mosek::fusion::Expression > _7489){
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_7488),1.0,_7489,(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _7490,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7491) { return mosek::fusion::p_Expr::sub(_7490,_7491); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _7490,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7491){
  return ::mosek::fusion::p_Expr::add_(_7490,1.0,::mosek::fusion::p_Expr::constTerm(_7491),(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7492,    monty::rc_ptr< ::mosek::fusion::Expression > _7493) { return mosek::fusion::p_Expr::sub(_7492,_7493); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Matrix > _7492,monty::rc_ptr< ::mosek::fusion::Expression > _7493){
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_7492),1.0,_7493,(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _7494,    monty::rc_ptr< ::mosek::fusion::Matrix > _7495) { return mosek::fusion::p_Expr::sub(_7494,_7495); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _7494,monty::rc_ptr< ::mosek::fusion::Matrix > _7495){
  return ::mosek::fusion::p_Expr::add_(_7494,1.0,::mosek::fusion::p_Expr::constTerm(_7495),(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( double _7496,    monty::rc_ptr< ::mosek::fusion::Expression > _7497) { return mosek::fusion::p_Expr::sub(_7496,_7497); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(double _7496,monty::rc_ptr< ::mosek::fusion::Expression > _7497){
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_7497->getShape(),_7496),1.0,_7497,(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _7498,    double _7499) { return mosek::fusion::p_Expr::sub(_7498,_7499); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _7498,double _7499){
  return ::mosek::fusion::p_Expr::add_(_7498,1.0,::mosek::fusion::p_Expr::constTerm(_7498->getShape(),_7499),(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( std::shared_ptr< monty::ndarray< double,2 > > _7500,    monty::rc_ptr< ::mosek::fusion::Expression > _7501) { return mosek::fusion::p_Expr::sub(_7500,_7501); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(std::shared_ptr< monty::ndarray< double,2 > > _7500,monty::rc_ptr< ::mosek::fusion::Expression > _7501){
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_7500),1.0,_7501,(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( std::shared_ptr< monty::ndarray< double,1 > > _7502,    monty::rc_ptr< ::mosek::fusion::Expression > _7503) { return mosek::fusion::p_Expr::sub(_7502,_7503); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(std::shared_ptr< monty::ndarray< double,1 > > _7502,monty::rc_ptr< ::mosek::fusion::Expression > _7503){
  _checked_ptr_1<double> _ptr__7502(_7502 ? _7502->raw() : nullptr, _7502 ? _7502->size(0) : 0);
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_7502),1.0,_7503,(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _7504,    std::shared_ptr< monty::ndarray< double,2 > > _7505) { return mosek::fusion::p_Expr::sub(_7504,_7505); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _7504,std::shared_ptr< monty::ndarray< double,2 > > _7505){
  return ::mosek::fusion::p_Expr::add_(_7504,1.0,::mosek::fusion::p_Expr::constTerm(_7505),(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _7506,    std::shared_ptr< monty::ndarray< double,1 > > _7507) { return mosek::fusion::p_Expr::sub(_7506,_7507); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _7506,std::shared_ptr< monty::ndarray< double,1 > > _7507){
  _checked_ptr_1<double> _ptr__7507(_7507 ? _7507->raw() : nullptr, _7507 ? _7507->size(0) : 0);
  return ::mosek::fusion::p_Expr::add_(_7506,1.0,::mosek::fusion::p_Expr::constTerm(_7507),(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _7508,    monty::rc_ptr< ::mosek::fusion::Expression > _7509) { return mosek::fusion::p_Expr::sub(_7508,_7509); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _7508,monty::rc_ptr< ::mosek::fusion::Expression > _7509){
  return ::mosek::fusion::p_Expr::add_(_7508,1.0,_7509,(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7510,    monty::rc_ptr< ::mosek::fusion::Expression > _7511) { return mosek::fusion::p_Expr::add(_7510,_7511); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7510,monty::rc_ptr< ::mosek::fusion::Expression > _7511){
  return ::mosek::fusion::p_Expr::add_(_7511,1.0,::mosek::fusion::p_Expr::constTerm(_7510),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _7512,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7513) { return mosek::fusion::p_Expr::add(_7512,_7513); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _7512,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7513){
  return ::mosek::fusion::p_Expr::add_(_7512,1.0,::mosek::fusion::p_Expr::constTerm(_7513),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7514,    monty::rc_ptr< ::mosek::fusion::Expression > _7515) { return mosek::fusion::p_Expr::add(_7514,_7515); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Matrix > _7514,monty::rc_ptr< ::mosek::fusion::Expression > _7515){
  return ::mosek::fusion::p_Expr::add_(_7515,1.0,::mosek::fusion::p_Expr::constTerm(_7514),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _7516,    monty::rc_ptr< ::mosek::fusion::Matrix > _7517) { return mosek::fusion::p_Expr::add(_7516,_7517); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _7516,monty::rc_ptr< ::mosek::fusion::Matrix > _7517){
  return ::mosek::fusion::p_Expr::add_(_7516,1.0,::mosek::fusion::p_Expr::constTerm(_7517),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( double _7518,    monty::rc_ptr< ::mosek::fusion::Expression > _7519) { return mosek::fusion::p_Expr::add(_7518,_7519); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(double _7518,monty::rc_ptr< ::mosek::fusion::Expression > _7519){
  return ::mosek::fusion::p_Expr::add_(_7519,1.0,::mosek::fusion::p_Expr::constTerm(_7519->getShape(),_7518),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _7520,    double _7521) { return mosek::fusion::p_Expr::add(_7520,_7521); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _7520,double _7521){
  return ::mosek::fusion::p_Expr::add_(_7520,1.0,::mosek::fusion::p_Expr::constTerm(_7520->getShape(),_7521),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( std::shared_ptr< monty::ndarray< double,2 > > _7522,    monty::rc_ptr< ::mosek::fusion::Expression > _7523) { return mosek::fusion::p_Expr::add(_7522,_7523); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(std::shared_ptr< monty::ndarray< double,2 > > _7522,monty::rc_ptr< ::mosek::fusion::Expression > _7523){
  return ::mosek::fusion::p_Expr::add_(_7523,1.0,::mosek::fusion::p_Expr::constTerm(_7522),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( std::shared_ptr< monty::ndarray< double,1 > > _7524,    monty::rc_ptr< ::mosek::fusion::Expression > _7525) { return mosek::fusion::p_Expr::add(_7524,_7525); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(std::shared_ptr< monty::ndarray< double,1 > > _7524,monty::rc_ptr< ::mosek::fusion::Expression > _7525){
  _checked_ptr_1<double> _ptr__7524(_7524 ? _7524->raw() : nullptr, _7524 ? _7524->size(0) : 0);
  return ::mosek::fusion::p_Expr::add_(_7525,1.0,::mosek::fusion::p_Expr::constTerm(_7524),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _7526,    std::shared_ptr< monty::ndarray< double,2 > > _7527) { return mosek::fusion::p_Expr::add(_7526,_7527); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _7526,std::shared_ptr< monty::ndarray< double,2 > > _7527){
  return ::mosek::fusion::p_Expr::add_(_7526,1.0,::mosek::fusion::p_Expr::constTerm(_7527),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _7528,    std::shared_ptr< monty::ndarray< double,1 > > _7529) { return mosek::fusion::p_Expr::add(_7528,_7529); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _7528,std::shared_ptr< monty::ndarray< double,1 > > _7529){
  _checked_ptr_1<double> _ptr__7529(_7529 ? _7529->raw() : nullptr, _7529 ? _7529->size(0) : 0);
  return ::mosek::fusion::p_Expr::add_(_7528,1.0,::mosek::fusion::p_Expr::constTerm(_7529),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _7530,    monty::rc_ptr< ::mosek::fusion::Expression > _7531) { return mosek::fusion::p_Expr::add(_7530,_7531); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _7530,monty::rc_ptr< ::mosek::fusion::Expression > _7531){
  return ::mosek::fusion::p_Expr::add_(_7530,1.0,_7531,1.0);
}
int mosek::fusion::Expr :: getND() { return mosek::fusion::p_Expr::_get_impl(this)->getND(); }int mosek::fusion::p_Expr::getND(){
  return (int)((shape)->size(0));
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Expr :: getShape() { return mosek::fusion::p_Expr::_get_impl(this)->getShape(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Expr::getShape(){
  return ::mosek::fusion::Utils::Tools::arraycopy(shape);
}
void mosek::fusion::Expr :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _7532,monty::rc_ptr< ::mosek::fusion::WorkStack > _7533,monty::rc_ptr< ::mosek::fusion::WorkStack > _7534) { mosek::fusion::p_Expr::_get_impl(this)->eval(_7532,_7533,_7534); }void mosek::fusion::p_Expr::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _7532,monty::rc_ptr< ::mosek::fusion::WorkStack > _7533,monty::rc_ptr< ::mosek::fusion::WorkStack > _7534){
  int _7535 = ((int)((ptrb)->size(0)) - (int)1);
  int _7536 = safe_add( (int)((*ptrb)(_7535)),_7535 );
  int _7537 = (int)((shape)->size(0));
  _7532->alloc_expr(_7537,_7535,_7536,(NULL != inst.get()));
  int _7538 = mosek::fusion::p_WorkStack::_get_impl(_7532)->ptr_base;
  int _7539 = mosek::fusion::p_WorkStack::_get_impl(_7532)->nidxs_base;
  int _7540 = mosek::fusion::p_WorkStack::_get_impl(_7532)->sp_base;
  int _7541 = mosek::fusion::p_WorkStack::_get_impl(_7532)->cof_base;
  int _7542 = mosek::fusion::p_WorkStack::_get_impl(_7532)->shape_base;
  std::shared_ptr< monty::ndarray< int,1 > > _7543 = mosek::fusion::p_WorkStack::_get_impl(_7532)->i32;
  _checked_ptr_1<int> _ptr__7543(_7543 ? _7543->raw() : nullptr,_7543 ? _7543->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _7544 = mosek::fusion::p_WorkStack::_get_impl(_7532)->i64;
  _checked_ptr_1<long long> _ptr__7544(_7544 ? _7544->raw() : nullptr,_7544 ? _7544->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7545 = mosek::fusion::p_WorkStack::_get_impl(_7532)->f64;
  _checked_ptr_1<double> _ptr__7545(_7545 ? _7545->raw() : nullptr,_7545 ? _7545->size(0) : 0);
  {
    int _12166 = (int)0;
    int _12167 = _7537;
    for (int _7546 = _12166; _7546 < _12167; ++_7546)
    {
      {
        _ptr__7543[safe_add( _7542,_7546 )] = ((*shape)(_7546));
      }
    }
    _ptr__7543[_7538] = (int)0;
    int _7547 = (int)0;
    int _12168 = (int)0;
    int _12169 = _7535;
    for (int _7548 = _12168; _7548 < _12169; ++_7548)
    {
      {
        long long _12170 = ((*ptrb)(_7548));
        long long _12171 = ((*ptrb)(safe_add( _7548,(int)1 )));
        for (long long _7549 = _12170; _7549 < _12171; ++_7549)
        {
          {
            _ptr__7544[safe_add( _7539,_7547 )] = ((*subj)(_7549));
            _ptr__7545[safe_add( _7541,_7547 )] = ((*cof_v)(_7549));
            ++ _7547;
          }
        }
        _ptr__7544[safe_add( _7539,_7547 )] = (int)0;
        _ptr__7545[safe_add( _7541,_7547 )] = ((*bfix)(_7548));
        ++ _7547;
        _ptr__7543[safe_add( safe_add( _7538,_7548 ),(int)1 )] = _7547;
      }
    }
  }
}
void mosek::fusion::p_Expr::validateData(std::shared_ptr< monty::ndarray< long long,1 > > _7550,std::shared_ptr< monty::ndarray< long long,1 > > _7551,std::shared_ptr< monty::ndarray< double,1 > > _7552,std::shared_ptr< monty::ndarray< double,1 > > _7553,std::shared_ptr< monty::ndarray< int,1 > > _7554,std::shared_ptr< monty::ndarray< long long,1 > > _7555){
  _checked_ptr_1<long long> _ptr__7550(_7550 ? _7550->raw() : nullptr, _7550 ? _7550->size(0) : 0);
  _checked_ptr_1<long long> _ptr__7551(_7551 ? _7551->raw() : nullptr, _7551 ? _7551->size(0) : 0);
  _checked_ptr_1<double> _ptr__7552(_7552 ? _7552->raw() : nullptr, _7552 ? _7552->size(0) : 0);
  _checked_ptr_1<double> _ptr__7553(_7553 ? _7553->raw() : nullptr, _7553 ? _7553->size(0) : 0);
  _checked_ptr_1<int> _ptr__7554(_7554 ? _7554->raw() : nullptr, _7554 ? _7554->size(0) : 0);
  _checked_ptr_1<long long> _ptr__7555(_7555 ? _7555->raw() : nullptr, _7555 ? _7555->size(0) : 0);
  if ((NULL == _7554.get()))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'shape' in expression is null"));
    }
  }
  {}
  int _7556 = ((int)((_7550)->size(0)) - (int)1);
  long long _7557 = _ptr__7550[((int)((_7550)->size(0)) - (int)1)];
  int _7558 = (int)((_7554)->size(0));
  long long _7559 = (long long)1;
  int _12172 = (int)0;
  int _12173 = _7558;
  for (int _7560 = _12172; _7560 < _12173; ++_7560)
  {
    {
      _7559 *= _ptr__7554[_7560];
    }
  }
  if (((int)((_7550)->size(0)) < (int)1))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'ptrb' in expression has wrong size"));
    }
  }
  {}
  if ((_7557 != (int)((_7551)->size(0))))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'subj' in expression has wrong size"));
    }
  }
  {}
  if ((_7557 != (int)((_7552)->size(0))))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'cof' in expression has wrong size"));
    }
  }
  {}
  if (((NULL == _7553.get()) || (_7556 != (int)((_7553)->size(0)))))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'bfix' in expression has wrong length"));
    }
  }
  {}
  if (((NULL != _7555.get()) && ((int)((_7555)->size(0)) < _7559)))
  {
    {
      if (((int)((_7555)->size(0)) != ((int)((_7550)->size(0)) - (int)1)))
      {
        {
          throw ::mosek::fusion::ExpressionError(std::string ("Array 'inst' in expression has wrong length"));
        }
      }
      {}
      if (((int)((_7555)->size(0)) > (int)0))
      {
        {
          if (((_ptr__7555[(int)0] < (int)0) || (_ptr__7555[(int)0] >= _7559)))
          {
            {
              throw ::mosek::fusion::ExpressionError(std::string ("Array 'inst' contains an invalid index"));
            }
          }
          {}
          bool _7561 = true;
          long long _7562 = _7559;
          int _12174 = (int)1;
          int _12175 = (int)((_7555)->size(0));
          for (int _7563 = _12174; _7563 < _12175; ++_7563)
          {
            {
              _7561 = (_7561 && ((_ptr__7555[_7563] >= (int)0) && ((_ptr__7555[_7563] < _7562) && (_ptr__7555[_7563] > _ptr__7555[(_7563 - (int)1)]))));
            }
          }
          if ((!_7561))
          {
            {
              throw ::mosek::fusion::ExpressionError(std::string ("Invalid array 'inst'"));
            }
          }
          {}
        }
      }
      {}
    }
  }
  else
  {
    {
      if ((_7559 != ((long long)((_7550)->size(0)) - (int)1)))
      {
        {
          throw ::mosek::fusion::ExpressionError(std::string ("Array 'ptrb' in expression has wrong length"));
        }
      }
      {}
    }
  }
  bool _7564 = false;
  bool _7565 = false;
  if ((_ptr__7550[(int)0] != (long long)0))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Invalid 'ptrb' argument in expression"));
    }
  }
  {}
  bool _7566 = true;
  int _12176 = (int)0;
  int _12177 = _7556;
  for (int _7567 = _12176; _7567 < _12177; ++_7567)
  {
    {
      _7566 = (_7566 && (_ptr__7550[_7567] <= _ptr__7550[safe_add( _7567,(int)1 )]));
    }
  }
  if ((!_7566))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Invalid 'ptrb' argument in expression"));
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Expr::extractModel(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _7568){
  monty::rc_ptr< ::mosek::fusion::Model > _12178;
  bool _12179 = ((NULL == _7568.get()) || ((int)((_7568)->size(0)) == (int)0));
  if (_12179)
  {
    _12178 = nullptr;
  }
  else
  {
    _12178 = ((*_7568)((int)0))->__mosek_2fusion_2Variable__getModel();
  }
  return _12178;
}
void mosek::fusion::p_Expr::destroy(){inst.reset();cof_v.reset();subj.reset();ptrb.reset();bfix.reset();shape.reset();}void mosek::fusion::Expr::destroy() { mosek::fusion::p_Expr::_get_impl(this)->destroy(); }monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::pick(std::shared_ptr< monty::ndarray< int,2 > > _7569) { return __mosek_2fusion_2Expression__pick(_7569); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::pick(std::shared_ptr< monty::ndarray< int,1 > > _7570) { return __mosek_2fusion_2Expression__pick(_7570); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::index(std::shared_ptr< monty::ndarray< int,1 > > _7571) { return __mosek_2fusion_2Expression__index(_7571); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::index(int _7572) { return __mosek_2fusion_2Expression__index(_7572); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::slice(std::shared_ptr< monty::ndarray< int,1 > > _7573,std::shared_ptr< monty::ndarray< int,1 > > _7574) { return __mosek_2fusion_2Expression__slice(_7573,_7574); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::slice(int _7575,int _7576) { return __mosek_2fusion_2Expression__slice(_7575,_7576); }
mosek::fusion::SymmetricMatrix::SymmetricMatrix(mosek::fusion::p_SymmetricMatrix *_impl) : _impl(_impl) { /*std::cout << "SymmetricMatrix() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::SymmetricMatrix::~SymmetricMatrix() { delete _impl; _impl = nullptr; }mosek::fusion::p_SymmetricMatrix::p_SymmetricMatrix  (::mosek::fusion::SymmetricMatrix * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::SymmetricMatrix::t mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix  (int _7581,    int _7582,    std::shared_ptr< monty::ndarray< int,1 > > _7583,    std::shared_ptr< monty::ndarray< int,1 > > _7584,    std::shared_ptr< monty::ndarray< double,1 > > _7585,    std::shared_ptr< monty::ndarray< int,1 > > _7586,    std::shared_ptr< monty::ndarray< int,1 > > _7587,    std::shared_ptr< monty::ndarray< double,1 > > _7588,    double _7589){ return new mosek::fusion::SymmetricMatrix(_7581,_7582,_7583,_7584,_7585,_7586,_7587,_7588,_7589); }mosek::fusion::SymmetricMatrix::SymmetricMatrix  (int _7581,    int _7582,    std::shared_ptr< monty::ndarray< int,1 > > _7583,    std::shared_ptr< monty::ndarray< int,1 > > _7584,    std::shared_ptr< monty::ndarray< double,1 > > _7585,    std::shared_ptr< monty::ndarray< int,1 > > _7586,    std::shared_ptr< monty::ndarray< int,1 > > _7587,    std::shared_ptr< monty::ndarray< double,1 > > _7588,    double _7589) :    SymmetricMatrix(new mosek::fusion::p_SymmetricMatrix(this)){ mosek::fusion::p_SymmetricMatrix::_get_impl(this)->_initialize(_7581,_7582,_7583,_7584,_7585,_7586,_7587,_7588,_7589); }void mosek::fusion::p_SymmetricMatrix::_initialize  (int _7581,    int _7582,    std::shared_ptr< monty::ndarray< int,1 > > _7583,    std::shared_ptr< monty::ndarray< int,1 > > _7584,    std::shared_ptr< monty::ndarray< double,1 > > _7585,    std::shared_ptr< monty::ndarray< int,1 > > _7586,    std::shared_ptr< monty::ndarray< int,1 > > _7587,    std::shared_ptr< monty::ndarray< double,1 > > _7588,    double _7589){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__7583(_7583 ? _7583->raw() : nullptr, _7583 ? _7583->size(0) : 0);
    _checked_ptr_1<int> _ptr__7584(_7584 ? _7584->raw() : nullptr, _7584 ? _7584->size(0) : 0);
    _checked_ptr_1<double> _ptr__7585(_7585 ? _7585->raw() : nullptr, _7585 ? _7585->size(0) : 0);
    _checked_ptr_1<int> _ptr__7586(_7586 ? _7586->raw() : nullptr, _7586 ? _7586->size(0) : 0);
    _checked_ptr_1<int> _ptr__7587(_7587 ? _7587->raw() : nullptr, _7587 ? _7587->size(0) : 0);
    _checked_ptr_1<double> _ptr__7588(_7588 ? _7588->raw() : nullptr, _7588 ? _7588->size(0) : 0);
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->d0 = _7581;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->d1 = _7582;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->usubi = _7583;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->usubj = _7584;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->uval = _7585;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->vsubi = _7586;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->vsubj = _7587;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->vval = _7588;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->scale = _7589;
    nnz = (-(int)1);
  }
}monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::rankOne  ( int _7590,    std::shared_ptr< monty::ndarray< int,1 > > _7591,    std::shared_ptr< monty::ndarray< double,1 > > _7592) { return mosek::fusion::p_SymmetricMatrix::rankOne(_7590,_7591,_7592); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::rankOne(int _7590,std::shared_ptr< monty::ndarray< int,1 > > _7591,std::shared_ptr< monty::ndarray< double,1 > > _7592){
  _checked_ptr_1<int> _ptr__7591(_7591 ? _7591->raw() : nullptr, _7591 ? _7591->size(0) : 0);
  _checked_ptr_1<double> _ptr__7592(_7592 ? _7592->raw() : nullptr, _7592 ? _7592->size(0) : 0);
  if (((int)((_7591)->size(0)) != (int)((_7592)->size(0))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching array lengths"));
    }
  }
  {}
  int _12180 = (int)0;
  int _12181 = (int)((_7591)->size(0));
  for (int _7593 = _12180; _7593 < _12181; ++_7593)
  {
    {
      if (((_ptr__7591[_7593] < (int)0) || (_ptr__7591[_7593] >= _7590)))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Invalid index in argument 'sub'"));
        }
      }
      {}
    }
  }
  std::vector<int> _12182;
  for (int _7595 = (int)0, _12183 = (int)((_7591)->size(0)); _7595 < _12183 ; ++_7595)
  {
    _12182.push_back(_ptr__7591[_7595]);
  }
  auto _12184 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12182.size()),_12182.begin(),_12182.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _7594 = _12184;
  _checked_ptr_1<int> _ptr__7594(_7594 ? _7594->raw() : nullptr,_7594 ? _7594->size(0) : 0);
  std::vector<int> _12185;
  for (int _7597 = (int)0, _12186 = (int)((_7591)->size(0)); _7597 < _12186 ; ++_7597)
  {
    _12185.push_back((int)1);
  }
  auto _12187 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12185.size()),_12185.begin(),_12185.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _7596 = _12187;
  _checked_ptr_1<int> _ptr__7596(_7596 ? _7596->raw() : nullptr,_7596 ? _7596->size(0) : 0);
  std::vector<double> _12188;
  for (int _7599 = (int)0, _12189 = (int)((_7592)->size(0)); _7599 < _12189 ; ++_7599)
  {
    _12188.push_back(_ptr__7592[_7599]);
  }
  auto _12190 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12188.size()),_12188.begin(),_12188.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _7598 = _12190;
  _checked_ptr_1<double> _ptr__7598(_7598 ? _7598->raw() : nullptr,_7598 ? _7598->size(0) : 0);
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_7590,(int)1,_7594,_7596,_7598,_7594,_7596,_7598,1.0);
}
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::rankOne  ( std::shared_ptr< monty::ndarray< double,1 > > _7600) { return mosek::fusion::p_SymmetricMatrix::rankOne(_7600); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::rankOne(std::shared_ptr< monty::ndarray< double,1 > > _7600){
  _checked_ptr_1<double> _ptr__7600(_7600 ? _7600->raw() : nullptr, _7600 ? _7600->size(0) : 0);
  int _7601 = (int)((_7600)->size(0));
  std::vector<int> _12191;
  for (int _7603 = (int)0, _12192 = _7601; _7603 < _12192 ; ++_7603)
  {
    _12191.push_back(_7603);
  }
  auto _12193 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12191.size()),_12191.begin(),_12191.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _7602 = _12193;
  _checked_ptr_1<int> _ptr__7602(_7602 ? _7602->raw() : nullptr,_7602 ? _7602->size(0) : 0);
  std::vector<int> _12194;
  for (int _7605 = (int)0, _12195 = _7601; _7605 < _12195 ; ++_7605)
  {
    _12194.push_back((int)1);
  }
  auto _12196 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12194.size()),_12194.begin(),_12194.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _7604 = _12196;
  _checked_ptr_1<int> _ptr__7604(_7604 ? _7604->raw() : nullptr,_7604 ? _7604->size(0) : 0);
  std::vector<double> _12197;
  for (int _7607 = (int)0, _12198 = _7601; _7607 < _12198 ; ++_7607)
  {
    _12197.push_back(_ptr__7600[_7607]);
  }
  auto _12199 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12197.size()),_12197.begin(),_12197.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _7606 = _12199;
  _checked_ptr_1<double> _ptr__7606(_7606 ? _7606->raw() : nullptr,_7606 ? _7606->size(0) : 0);
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_7601,(int)1,_7602,_7604,_7606,_7602,_7604,_7606,1.0);
}
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::antiDiag  ( std::shared_ptr< monty::ndarray< double,1 > > _7608) { return mosek::fusion::p_SymmetricMatrix::antiDiag(_7608); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::antiDiag(std::shared_ptr< monty::ndarray< double,1 > > _7608){
  _checked_ptr_1<double> _ptr__7608(_7608 ? _7608->raw() : nullptr, _7608 ? _7608->size(0) : 0);
  int _7609 = (int)((_7608)->size(0));
  std::vector<int> _12200;
  for (int _7611 = (int)0, _12201 = _7609; _7611 < _12201 ; ++_7611)
  {
    _12200.push_back(_7611);
  }
  auto _12202 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12200.size()),_12200.begin(),_12200.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _7610 = _12202;
  _checked_ptr_1<int> _ptr__7610(_7610 ? _7610->raw() : nullptr,_7610 ? _7610->size(0) : 0);
  std::vector<int> _12203;
  for (int _7612 = (int)0, _12204 = _7609; _7612 < _12204 ; ++_7612)
  {
    _12203.push_back((_7609 - _7612));
  }
  auto _12205 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12203.size()),_12203.begin(),_12203.end()));
  std::vector<double> _12206;
  for (int _7613 = (int)0, _12207 = _7609; _7613 < _12207 ; ++_7613)
  {
    _12206.push_back(_ptr__7608[_7613]);
  }
  auto _12208 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12206.size()),_12206.begin(),_12206.end()));
  std::vector<double> _12209;
  for (int _7614 = (int)0, _12210 = _7609; _7614 < _12210 ; ++_7614)
  {
    _12209.push_back(1.0);
  }
  auto _12211 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12209.size()),_12209.begin(),_12209.end()));
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_7609,_7609,_7610,_12205,_12208,_7610,_7610,_12211,1.0);
}
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::diag  ( std::shared_ptr< monty::ndarray< double,1 > > _7615) { return mosek::fusion::p_SymmetricMatrix::diag(_7615); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::diag(std::shared_ptr< monty::ndarray< double,1 > > _7615){
  _checked_ptr_1<double> _ptr__7615(_7615 ? _7615->raw() : nullptr, _7615 ? _7615->size(0) : 0);
  int _7616 = (int)((_7615)->size(0));
  std::vector<int> _12212;
  for (int _7618 = (int)0, _12213 = _7616; _7618 < _12213 ; ++_7618)
  {
    _12212.push_back(_7618);
  }
  auto _12214 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12212.size()),_12212.begin(),_12212.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _7617 = _12214;
  _checked_ptr_1<int> _ptr__7617(_7617 ? _7617->raw() : nullptr,_7617 ? _7617->size(0) : 0);
  std::vector<double> _12215;
  for (int _7619 = (int)0, _12216 = _7616; _7619 < _12216 ; ++_7619)
  {
    _12215.push_back(_ptr__7615[_7619]);
  }
  auto _12217 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12215.size()),_12215.begin(),_12215.end()));
  std::vector<double> _12218;
  for (int _7620 = (int)0, _12219 = _7616; _7620 < _12219 ; ++_7620)
  {
    _12218.push_back(1.0);
  }
  auto _12220 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12218.size()),_12218.begin(),_12218.end()));
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_7616,_7616,_7617,_7617,_12217,_7617,_7617,_12220,1.0);
}
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix :: __mosek_2fusion_2SymmetricMatrix__add(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _7621) { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->__mosek_2fusion_2SymmetricMatrix__add(_7621); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::add(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _7621) { return __mosek_2fusion_2SymmetricMatrix__add(_7621); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::__mosek_2fusion_2SymmetricMatrix__add(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _7621){
  int _7622 = _pubthis->getdim();
  if ((_7621->getdim() != _7622))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions"));
    }
  }
  {}
  int _7623 = (int)((usubi)->size(0));
  int _7624 = (int)((mosek::fusion::p_SymmetricMatrix::_get_impl(_7621)->usubi)->size(0));
  int _7625 = safe_add( _7623,_7624 );
  int _7626 = (int)((vsubi)->size(0));
  int _7627 = (int)((mosek::fusion::p_SymmetricMatrix::_get_impl(_7621)->vsubi)->size(0));
  int _7628 = safe_add( _7626,_7627 );
  std::shared_ptr< monty::ndarray< double,1 > > _7629 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7628)));
  _checked_ptr_1<double> _ptr__7629(_7629 ? _7629->raw() : nullptr,_7629 ? _7629->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7630 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7628)));
  _checked_ptr_1<int> _ptr__7630(_7630 ? _7630->raw() : nullptr,_7630 ? _7630->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7631 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7628)));
  _checked_ptr_1<int> _ptr__7631(_7631 ? _7631->raw() : nullptr,_7631 ? _7631->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7632 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7625)));
  _checked_ptr_1<double> _ptr__7632(_7632 ? _7632->raw() : nullptr,_7632 ? _7632->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7633 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7625)));
  _checked_ptr_1<int> _ptr__7633(_7633 ? _7633->raw() : nullptr,_7633 ? _7633->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7634 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7625)));
  _checked_ptr_1<int> _ptr__7634(_7634 ? _7634->raw() : nullptr,_7634 ? _7634->size(0) : 0);
  ::mosek::fusion::Utils::Tools::arraycopy(usubi,(int)0,_7634,(int)0,_7623);
  ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_7621)->usubi,(int)0,_7634,_7623,_7624);
  ::mosek::fusion::Utils::Tools::arraycopy(usubj,(int)0,_7633,(int)0,_7623);
  int _12221 = (int)0;
  int _12222 = _7624;
  for (int _7635 = _12221; _7635 < _12222; ++_7635)
  {
    {
      _ptr__7633[safe_add( _7635,_7623 )] = safe_add( ((*mosek::fusion::p_SymmetricMatrix::_get_impl(_7621)->usubj)(_7635)),d1 );
    }
  }
  if (((scale > 1.0) || (scale < 1.0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(uval,(int)0,_7632,(int)0,_7623);
    }
  }
  else
  {
    {
      int _12223 = (int)0;
      int _12224 = _7623;
      for (int _7636 = _12223; _7636 < _12224; ++_7636)
      {
        {
          _ptr__7632[_7636] = (scale * ((*uval)(_7636)));
        }
      }
    }
  }
  if (((mosek::fusion::p_SymmetricMatrix::_get_impl(_7621)->scale > 1.0) || (mosek::fusion::p_SymmetricMatrix::_get_impl(_7621)->scale < 1.0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_7621)->uval,(int)0,_7632,_7623,_7624);
    }
  }
  else
  {
    {
      int _12225 = (int)0;
      int _12226 = _7624;
      for (int _7637 = _12225; _7637 < _12226; ++_7637)
      {
        {
          _ptr__7632[safe_add( _7637,_7623 )] = (mosek::fusion::p_SymmetricMatrix::_get_impl(_7621)->scale * ((*mosek::fusion::p_SymmetricMatrix::_get_impl(_7621)->uval)(_7637)));
        }
      }
    }
  }
  ::mosek::fusion::Utils::Tools::arraycopy(usubi,(int)0,_7634,(int)0,_7623);
  int _12227 = (int)0;
  int _12228 = _7627;
  for (int _7638 = _12227; _7638 < _12228; ++_7638)
  {
    {
      _ptr__7631[safe_add( _7638,_7626 )] = safe_add( ((*mosek::fusion::p_SymmetricMatrix::_get_impl(_7621)->vsubi)(_7638)),mosek::fusion::p_SymmetricMatrix::_get_impl(_7621)->d1 );
    }
  }
  ::mosek::fusion::Utils::Tools::arraycopy(vsubj,(int)0,_7630,(int)0,_7626);
  ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_7621)->vsubj,_7626,_7630,_7626,_7627);
  if (((scale > 1.0) || (scale < 1.0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(vval,(int)0,_7629,(int)0,_7626);
    }
  }
  else
  {
    {
      int _12229 = (int)0;
      int _12230 = _7626;
      for (int _7639 = _12229; _7639 < _12230; ++_7639)
      {
        {
          _ptr__7629[_7639] = (scale * ((*vval)(_7639)));
        }
      }
    }
  }
  if (((mosek::fusion::p_SymmetricMatrix::_get_impl(_7621)->scale > 1.0) || (mosek::fusion::p_SymmetricMatrix::_get_impl(_7621)->scale < 1.0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_7621)->vval,(int)0,_7629,_7626,_7627);
    }
  }
  else
  {
    {
      int _12231 = (int)0;
      int _12232 = _7627;
      for (int _7640 = _12231; _7640 < _12232; ++_7640)
      {
        {
          _ptr__7629[safe_add( _7640,_7626 )] = (mosek::fusion::p_SymmetricMatrix::_get_impl(_7621)->scale * ((*mosek::fusion::p_SymmetricMatrix::_get_impl(_7621)->vval)(_7640)));
        }
      }
    }
  }
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(d0,safe_add( d1,mosek::fusion::p_SymmetricMatrix::_get_impl(_7621)->d1 ),_7634,_7633,_7632,_7631,_7630,_7629,1.0);
}
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix :: __mosek_2fusion_2SymmetricMatrix__sub(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _7641) { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->__mosek_2fusion_2SymmetricMatrix__sub(_7641); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::sub(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _7641) { return __mosek_2fusion_2SymmetricMatrix__sub(_7641); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::__mosek_2fusion_2SymmetricMatrix__sub(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _7641){
  return _pubthis->__mosek_2fusion_2SymmetricMatrix__add(_7641->__mosek_2fusion_2SymmetricMatrix__mul((-1.0)));
}
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix :: __mosek_2fusion_2SymmetricMatrix__mul(double _7642) { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->__mosek_2fusion_2SymmetricMatrix__mul(_7642); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::mul(double _7642) { return __mosek_2fusion_2SymmetricMatrix__mul(_7642); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::__mosek_2fusion_2SymmetricMatrix__mul(double _7642){
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(d0,d1,usubi,usubj,uval,vsubi,vsubj,vval,(scale * _7642));
}
int mosek::fusion::SymmetricMatrix :: getdim() { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->getdim(); }int mosek::fusion::p_SymmetricMatrix::getdim(){
  return d0;
}
void mosek::fusion::p_SymmetricMatrix::destroy(){vval.reset();vsubj.reset();vsubi.reset();uval.reset();usubj.reset();usubi.reset();}void mosek::fusion::SymmetricMatrix::destroy() { mosek::fusion::p_SymmetricMatrix::_get_impl(this)->destroy(); }mosek::fusion::NDSparseArray::NDSparseArray(mosek::fusion::p_NDSparseArray *_impl) : _impl(_impl) { /*std::cout << "NDSparseArray() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::NDSparseArray::~NDSparseArray() { delete _impl; _impl = nullptr; }mosek::fusion::p_NDSparseArray::p_NDSparseArray  (::mosek::fusion::NDSparseArray * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::NDSparseArray::t mosek::fusion::p_NDSparseArray::_new_NDSparseArray  (std::shared_ptr< monty::ndarray< int,1 > > _7643,    std::shared_ptr< monty::ndarray< int,2 > > _7644,    std::shared_ptr< monty::ndarray< double,1 > > _7645){ return new mosek::fusion::NDSparseArray(_7643,_7644,_7645); }mosek::fusion::NDSparseArray::NDSparseArray  (std::shared_ptr< monty::ndarray< int,1 > > _7643,    std::shared_ptr< monty::ndarray< int,2 > > _7644,    std::shared_ptr< monty::ndarray< double,1 > > _7645) :    NDSparseArray(new mosek::fusion::p_NDSparseArray(this)){ mosek::fusion::p_NDSparseArray::_get_impl(this)->_initialize(_7643,_7644,_7645); }void mosek::fusion::p_NDSparseArray::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _7643,    std::shared_ptr< monty::ndarray< int,2 > > _7644,    std::shared_ptr< monty::ndarray< double,1 > > _7645){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__7643(_7643 ? _7643->raw() : nullptr, _7643 ? _7643->size(0) : 0);
    _checked_ptr_1<double> _ptr__7645(_7645 ? _7645->raw() : nullptr, _7645 ? _7645->size(0) : 0);
    std::shared_ptr< monty::ndarray< long long,1 > > _7646 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_7644)->size(0)))));
    _checked_ptr_1<long long> _ptr__7646(_7646 ? _7646->raw() : nullptr,_7646 ? _7646->size(0) : 0);
    size = (long long)1;
    int _12233 = (int)0;
    int _12234 = (int)((_7643)->size(0));
    for (int _7647 = _12233; _7647 < _12234; ++_7647)
    {
      {
        size = safe_mul( size,_ptr__7643[_7647] );
      }
    }
    int _7648 = (int)((_7643)->size(0));
    if (((int)((_7644)->size(0)) != (int)((_7645)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching data array length"));
      }
    }
    {}
    if (((int)((_7644)->size(1)) != _7648))
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("An index key in sub has wrong length"));
      }
    }
    {}
    bool _7649 = false;
    int _12235 = (int)0;
    int _12236 = (int)((_7644)->size(0));
    for (int _7650 = _12235; _7650 < _12236; ++_7650)
    {
      {
        int _12237 = (int)0;
        int _12238 = (int)((_7644)->size(1));
        for (int _7651 = _12237; _7651 < _12238; ++_7651)
        {
          {
            if (((((*_7644)(_7650,_7651)) < (int)0) || (((*_7644)(_7650,_7651)) >= _ptr__7643[_7651])))
            {
              {
                _7649 = true;
              }
            }
            {}
          }
        }
      }
    }
    if (_7649)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("An index in sub is out of bounds"));
      }
    }
    {}
    int _12239 = (int)0;
    int _12240 = (int)((_7644)->size(0));
    for (int _7652 = _12239; _7652 < _12240; ++_7652)
    {
      {
        long long _7653 = (long long)0;
        int _12241 = (int)0;
        int _12242 = (int)((_7644)->size(1));
        for (int _7654 = _12241; _7654 < _12242; ++_7654)
        {
          {
            _7653 = safe_add( safe_mul( _7653,_ptr__7643[_7654] ),((*_7644)(_7652,_7654)) );
          }
        }
        _ptr__7646[_7652] = _7653;
      }
    }
    dims = ::mosek::fusion::Utils::Tools::arraycopy(_7643);
    bool _7655 = true;
    int _12243 = (int)1;
    int _12244 = (int)((_7646)->size(0));
    for (int _7656 = _12243; _7656 < _12244; ++_7656)
    {
      {
        _7655 = (_7655 && (_ptr__7646[_7656] >= _ptr__7646[(_7656 - (int)1)]));
      }
    }
    if (_7655)
    {
      {
        int _7657 = (int)1;
        int _12245 = (int)1;
        int _12246 = (int)((_7646)->size(0));
        for (int _7658 = _12245; _7658 < _12246; ++_7658)
        {
          {
            if ((_ptr__7646[(_7658 - (int)1)] < _ptr__7646[_7658]))
            {
              {
                ++ _7657;
              }
            }
            {}
          }
        }
        if ((_7657 == (int)((_7646)->size(0))))
        {
          {
            inst = ::mosek::fusion::Utils::Tools::arraycopy(_7646);
            cof = ::mosek::fusion::Utils::Tools::arraycopy(_7645);
          }
        }
        else
        {
          {
            inst = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7657)));
            ((*inst)((int)0)) = _ptr__7646[(int)0];
            cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7657)));
            ((*cof)((int)0)) = _ptr__7645[(int)0];
            int _7659 = (int)0;
            int _12247 = (int)1;
            int _12248 = (int)((_7646)->size(0));
            for (int _7660 = _12247; _7660 < _12248; ++_7660)
            {
              {
                if ((_ptr__7646[_7660] > _ptr__7646[(_7660 - (int)1)]))
                {
                  {
                    ++ _7659;
                    ((*inst)(_7659)) = _ptr__7646[_7660];
                    ((*cof)(_7659)) = _ptr__7645[_7660];
                  }
                }
                else
                {
                  {
                    ((*cof)(_7659)) = (((*cof)(_7659)) + _ptr__7645[_7660]);
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      {
        std::shared_ptr< monty::ndarray< long long,1 > > _7661 = ::mosek::fusion::Utils::Tools::range((long long)((_7646)->size(0)));
        _checked_ptr_1<long long> _ptr__7661(_7661 ? _7661->raw() : nullptr,_7661 ? _7661->size(0) : 0);
        ::mosek::fusion::p_CommonTools::argQsort(_7661,_7646,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)0,(long long)((_7646)->size(0)));
        int _7662 = (int)1;
        int _12249 = (int)1;
        int _12250 = (int)((_7646)->size(0));
        for (int _7663 = _12249; _7663 < _12250; ++_7663)
        {
          {
            if ((_ptr__7646[_ptr__7661[(_7663 - (int)1)]] < _ptr__7646[_ptr__7661[_7663]]))
            {
              {
                ++ _7662;
              }
            }
            {}
          }
        }
        inst = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7662)));
        ((*inst)((int)0)) = _ptr__7646[_ptr__7661[(int)0]];
        cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7662)));
        ((*cof)((int)0)) = _ptr__7645[_ptr__7661[(int)0]];
        int _7664 = (int)0;
        int _12251 = (int)1;
        int _12252 = (int)((_7646)->size(0));
        for (int _7665 = _12251; _7665 < _12252; ++_7665)
        {
          {
            if ((_ptr__7646[_ptr__7661[_7665]] > _ptr__7646[_ptr__7661[(_7665 - (int)1)]]))
            {
              {
                ++ _7664;
                ((*inst)(_7664)) = _ptr__7646[_ptr__7661[_7665]];
                ((*cof)(_7664)) = _ptr__7645[_ptr__7661[_7665]];
              }
            }
            else
            {
              {
                ((*cof)(_7664)) = (((*cof)(_7664)) + _ptr__7645[_ptr__7661[_7665]]);
              }
            }
          }
        }
      }
    }
  }
}mosek::fusion::NDSparseArray::t mosek::fusion::p_NDSparseArray::_new_NDSparseArray  (std::shared_ptr< monty::ndarray< int,1 > > _7666,    std::shared_ptr< monty::ndarray< long long,1 > > _7667,    std::shared_ptr< monty::ndarray< double,1 > > _7668){ return new mosek::fusion::NDSparseArray(_7666,_7667,_7668); }mosek::fusion::NDSparseArray::NDSparseArray  (std::shared_ptr< monty::ndarray< int,1 > > _7666,    std::shared_ptr< monty::ndarray< long long,1 > > _7667,    std::shared_ptr< monty::ndarray< double,1 > > _7668) :    NDSparseArray(new mosek::fusion::p_NDSparseArray(this)){ mosek::fusion::p_NDSparseArray::_get_impl(this)->_initialize(_7666,_7667,_7668); }void mosek::fusion::p_NDSparseArray::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _7666,    std::shared_ptr< monty::ndarray< long long,1 > > _7667,    std::shared_ptr< monty::ndarray< double,1 > > _7668){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__7666(_7666 ? _7666->raw() : nullptr, _7666 ? _7666->size(0) : 0);
    _checked_ptr_1<long long> _ptr__7667(_7667 ? _7667->raw() : nullptr, _7667 ? _7667->size(0) : 0);
    _checked_ptr_1<double> _ptr__7668(_7668 ? _7668->raw() : nullptr, _7668 ? _7668->size(0) : 0);
    size = (long long)1;
    int _12253 = (int)0;
    int _12254 = (int)((_7666)->size(0));
    for (int _7669 = _12253; _7669 < _12254; ++_7669)
    {
      {
        size = safe_mul( size,_ptr__7666[_7669] );
      }
    }
    int _7670 = (int)((_7667)->size(0));
    if ((_7670 != (int)((_7668)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching data array length"));
      }
    }
    {}
    {
      bool _7671 = false;
      int _12255 = (int)0;
      int _12256 = _7670;
      for (int _7672 = _12255; _7672 < _12256; ++_7672)
      {
        {
          _7671 = (_7671 || ((_ptr__7667[_7672] < (int)0) || (_ptr__7667[_7672] >= size)));
        }
      }
      if (_7671)
      {
        {
          throw ::mosek::fusion::IndexError(std::string ("An index in inst is out of bounds"));
        }
      }
      {}
    }
    dims = ::mosek::fusion::Utils::Tools::arraycopy(_7666);
    bool _7673 = true;
    int _12257 = (int)1;
    int _12258 = (int)((_7667)->size(0));
    for (int _7674 = _12257; _7674 < _12258; ++_7674)
    {
      {
        _7673 = (_7673 && (_ptr__7667[_7674] >= _ptr__7667[(_7674 - (int)1)]));
      }
    }
    if (_7673)
    {
      {
        int _7675 = (int)1;
        int _12259 = (int)1;
        int _12260 = (int)((_7667)->size(0));
        for (int _7676 = _12259; _7676 < _12260; ++_7676)
        {
          {
            if ((_ptr__7667[(_7676 - (int)1)] < _ptr__7667[_7676]))
            {
              {
                ++ _7675;
              }
            }
            {}
          }
        }
        if ((_7675 == (int)((_7667)->size(0))))
        {
          {
            inst = ::mosek::fusion::Utils::Tools::arraycopy(_7667);
            cof = ::mosek::fusion::Utils::Tools::arraycopy(_7668);
          }
        }
        else
        {
          {
            inst = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7675)));
            ((*inst)((int)0)) = _ptr__7667[(int)0];
            cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7675)));
            ((*cof)((int)0)) = _ptr__7668[(int)0];
            int _7677 = (int)0;
            int _12261 = (int)1;
            int _12262 = (int)((_7667)->size(0));
            for (int _7678 = _12261; _7678 < _12262; ++_7678)
            {
              {
                if ((_ptr__7667[_7678] > _ptr__7667[(_7678 - (int)1)]))
                {
                  {
                    ++ _7677;
                    ((*inst)(_7677)) = _ptr__7667[_7678];
                    ((*cof)(_7677)) = _ptr__7668[_7678];
                  }
                }
                else
                {
                  {
                    ((*cof)(_7677)) = (((*cof)(_7677)) + _ptr__7668[_7678]);
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      {
        std::shared_ptr< monty::ndarray< long long,1 > > _7679 = ::mosek::fusion::Utils::Tools::range((long long)((_7667)->size(0)));
        _checked_ptr_1<long long> _ptr__7679(_7679 ? _7679->raw() : nullptr,_7679 ? _7679->size(0) : 0);
        ::mosek::fusion::p_CommonTools::argQsort(_7679,_7667,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)0,(long long)((_7667)->size(0)));
        int _7680 = (int)1;
        int _12263 = (int)1;
        int _12264 = (int)((_7667)->size(0));
        for (int _7681 = _12263; _7681 < _12264; ++_7681)
        {
          {
            if ((_ptr__7667[_ptr__7679[(_7681 - (int)1)]] < _ptr__7667[_ptr__7679[_7681]]))
            {
              {
                ++ _7680;
              }
            }
            {}
          }
        }
        inst = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7680)));
        ((*inst)((int)0)) = _ptr__7667[_ptr__7679[(int)0]];
        cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7680)));
        ((*cof)((int)0)) = _ptr__7668[_ptr__7679[(int)0]];
        int _7682 = (int)0;
        int _12265 = (int)1;
        int _12266 = (int)((_7667)->size(0));
        for (int _7683 = _12265; _7683 < _12266; ++_7683)
        {
          {
            if ((_ptr__7667[_ptr__7679[_7683]] > ((*inst)(_ptr__7679[(_7683 - (int)1)]))))
            {
              {
                ++ _7682;
                ((*inst)(_7682)) = _ptr__7667[_ptr__7679[_7683]];
                ((*cof)(_7682)) = _ptr__7668[_ptr__7679[_7683]];
              }
            }
            else
            {
              {
                ((*cof)(_7682)) = (((*cof)(_7682)) + _ptr__7668[_ptr__7679[_7683]]);
              }
            }
          }
        }
      }
    }
  }
}mosek::fusion::NDSparseArray::t mosek::fusion::p_NDSparseArray::_new_NDSparseArray  (monty::rc_ptr< ::mosek::fusion::Matrix > _7684){ return new mosek::fusion::NDSparseArray(_7684); }mosek::fusion::NDSparseArray::NDSparseArray  (monty::rc_ptr< ::mosek::fusion::Matrix > _7684) :    NDSparseArray(new mosek::fusion::p_NDSparseArray(this)){ mosek::fusion::p_NDSparseArray::_get_impl(this)->_initialize(_7684); }void mosek::fusion::p_NDSparseArray::_initialize  (monty::rc_ptr< ::mosek::fusion::Matrix > _7684){monty::rc_reserve __reserve_this(_pubthis);   {
    long long _7685 = _7684->numNonzeros();
    int _7686 = _7684->numColumns();
    int _7687 = _7684->numRows();
    std::shared_ptr< monty::ndarray< double,1 > > _7688 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7685)));
    _checked_ptr_1<double> _ptr__7688(_7688 ? _7688->raw() : nullptr,_7688 ? _7688->size(0) : 0);
    std::shared_ptr< monty::ndarray< int,1 > > _7689 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7685)));
    _checked_ptr_1<int> _ptr__7689(_7689 ? _7689->raw() : nullptr,_7689 ? _7689->size(0) : 0);
    std::shared_ptr< monty::ndarray< int,1 > > _7690 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7685)));
    _checked_ptr_1<int> _ptr__7690(_7690 ? _7690->raw() : nullptr,_7690 ? _7690->size(0) : 0);
    _7684->getDataAsTriplets(_7690,_7689,_7688);
    size = safe_mul( (long long)_7684->numRows(),(long long)_7684->numColumns() );
    dims = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7687),(int)(_7686)});
    std::vector<long long> _12267;
    for (long long _7691 = (long long)0, _12268 = _7685; _7691 < _12268 ; ++_7691)
    {
      _12267.push_back(safe_add( safe_mul( (long long)_ptr__7690[_7691],_7686 ),(long long)_ptr__7689[_7691] ));
    }
    auto _12269 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_12267.size()),_12267.begin(),_12267.end()));
    inst = _12269;
    cof = _7688;
  }
}monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::NDSparseArray::make  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7692) { return mosek::fusion::p_NDSparseArray::make(_7692); }monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::p_NDSparseArray::make(monty::rc_ptr< ::mosek::fusion::Matrix > _7692){
  return ::mosek::fusion::p_NDSparseArray::_new_NDSparseArray(_7692);
}
monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::NDSparseArray::make  ( std::shared_ptr< monty::ndarray< int,1 > > _7693,    std::shared_ptr< monty::ndarray< long long,1 > > _7694,    std::shared_ptr< monty::ndarray< double,1 > > _7695) { return mosek::fusion::p_NDSparseArray::make(_7693,_7694,_7695); }monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::p_NDSparseArray::make(std::shared_ptr< monty::ndarray< int,1 > > _7693,std::shared_ptr< monty::ndarray< long long,1 > > _7694,std::shared_ptr< monty::ndarray< double,1 > > _7695){
  _checked_ptr_1<int> _ptr__7693(_7693 ? _7693->raw() : nullptr, _7693 ? _7693->size(0) : 0);
  _checked_ptr_1<long long> _ptr__7694(_7694 ? _7694->raw() : nullptr, _7694 ? _7694->size(0) : 0);
  _checked_ptr_1<double> _ptr__7695(_7695 ? _7695->raw() : nullptr, _7695 ? _7695->size(0) : 0);
  return ::mosek::fusion::p_NDSparseArray::_new_NDSparseArray(_7693,_7694,_7695);
}
monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::NDSparseArray::make  ( std::shared_ptr< monty::ndarray< int,1 > > _7696,    std::shared_ptr< monty::ndarray< int,2 > > _7697,    std::shared_ptr< monty::ndarray< double,1 > > _7698) { return mosek::fusion::p_NDSparseArray::make(_7696,_7697,_7698); }monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::p_NDSparseArray::make(std::shared_ptr< monty::ndarray< int,1 > > _7696,std::shared_ptr< monty::ndarray< int,2 > > _7697,std::shared_ptr< monty::ndarray< double,1 > > _7698){
  _checked_ptr_1<int> _ptr__7696(_7696 ? _7696->raw() : nullptr, _7696 ? _7696->size(0) : 0);
  _checked_ptr_1<double> _ptr__7698(_7698 ? _7698->raw() : nullptr, _7698 ? _7698->size(0) : 0);
  return ::mosek::fusion::p_NDSparseArray::_new_NDSparseArray(_7696,_7697,_7698);
}
void mosek::fusion::p_NDSparseArray::destroy(){cof.reset();inst.reset();dims.reset();}void mosek::fusion::NDSparseArray::destroy() { mosek::fusion::p_NDSparseArray::_get_impl(this)->destroy(); }mosek::fusion::DenseMatrix::DenseMatrix(mosek::fusion::p_DenseMatrix *_impl) : mosek::fusion::Matrix(_impl) { /*std::cout << "DenseMatrix()" << this << std::endl; */ }mosek::fusion::DenseMatrix::~DenseMatrix() {  /* std::cout << "~DenseMatrix()" << this << std::endl << std::flush; */ }mosek::fusion::p_DenseMatrix::p_DenseMatrix  (::mosek::fusion::DenseMatrix * _pubthis) :     mosek::fusion::p_Matrix(_pubthis),    _pubthis(_pubthis){}mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix  (int _7699,    int _7700,    std::shared_ptr< monty::ndarray< double,1 > > _7701){ return new mosek::fusion::DenseMatrix(_7699,_7700,_7701); }mosek::fusion::DenseMatrix::DenseMatrix  (int _7699,    int _7700,    std::shared_ptr< monty::ndarray< double,1 > > _7701) :    DenseMatrix(new mosek::fusion::p_DenseMatrix(this)){ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_7699,_7700,_7701); }void mosek::fusion::p_DenseMatrix::_initialize  (int _7699,    int _7700,    std::shared_ptr< monty::ndarray< double,1 > > _7701){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__7701(_7701 ? _7701->raw() : nullptr, _7701 ? _7701->size(0) : 0);
    mosek::fusion::p_Matrix::_initialize(_7699,_7700);
    nnz = (long long)safe_mul( _7699,_7700 );
    data = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( _7699,_7700 ))));
    ::mosek::fusion::Utils::Tools::arraycopy(_7701,(int)0,data,(int)0,safe_mul( _7699,_7700 ));
  }
}mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix  (monty::rc_ptr< ::mosek::fusion::Matrix > _7702){ return new mosek::fusion::DenseMatrix(_7702); }mosek::fusion::DenseMatrix::DenseMatrix  (monty::rc_ptr< ::mosek::fusion::Matrix > _7702) :    DenseMatrix(new mosek::fusion::p_DenseMatrix(this)){ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_7702); }void mosek::fusion::p_DenseMatrix::_initialize  (monty::rc_ptr< ::mosek::fusion::Matrix > _7702){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_Matrix::_initialize(mosek::fusion::p_Matrix::_get_impl(_7702)->dimi,mosek::fusion::p_Matrix::_get_impl(_7702)->dimj);
    monty::rc_ptr< ::mosek::fusion::Matrix > _12270 = _7702;
    if (false) {}
    else if (nullptr != dynamic_cast<::mosek::fusion::DenseMatrix*>(_12270.get()))
    {
      ::mosek::fusion::DenseMatrix::t _7703 (dynamic_cast<::mosek::fusion::DenseMatrix*>(_12270.get()));
      {
        data = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_DenseMatrix::_get_impl(_7703)->data);
      }
    }
    else if (nullptr != dynamic_cast<::mosek::fusion::SparseMatrix*>(_12270.get()))
    {
      ::mosek::fusion::SparseMatrix::t _7704 (dynamic_cast<::mosek::fusion::SparseMatrix*>(_12270.get()));
      {
        data = ::mosek::fusion::Utils::Tools::zeros(safe_mul( mosek::fusion::p_Matrix::_get_impl(_7704)->dimi,mosek::fusion::p_Matrix::_get_impl(_7704)->dimj ));
        long long _12271 = (long long)0;
        long long _12272 = mosek::fusion::p_SparseMatrix::_get_impl(_7704)->nnz;
        for (long long _7706 = _12271; _7706 < _12272; ++_7706)
        {
          {
            ((*data)(safe_add( safe_mul( ((*mosek::fusion::p_SparseMatrix::_get_impl(_7704)->subi)(_7706)),dimj ),((*mosek::fusion::p_SparseMatrix::_get_impl(_7704)->subj)(_7706)) ))) = ((*mosek::fusion::p_SparseMatrix::_get_impl(_7704)->val)(_7706));
          }
        }
      }
    }
    else
    {
      mosek::fusion::Matrix::t _7705 = _12270;
      {
        throw ::mosek::fusion::MatrixError(std::string ("Unknown matrix type."));
      }
    }
    nnz = (long long)safe_mul( dimi,dimj );
  }
}mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix  (std::shared_ptr< monty::ndarray< double,2 > > _7707){ return new mosek::fusion::DenseMatrix(_7707); }mosek::fusion::DenseMatrix::DenseMatrix  (std::shared_ptr< monty::ndarray< double,2 > > _7707) :    DenseMatrix(new mosek::fusion::p_DenseMatrix(this)){ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_7707); }void mosek::fusion::p_DenseMatrix::_initialize  (std::shared_ptr< monty::ndarray< double,2 > > _7707){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_Matrix::_initialize((int)((_7707)->size(0)),(int)((_7707)->size(1)));
    std::vector<double> _12273;
    for (int _7708 = (int)0, _12274 = dimi; _7708 < _12274 ; ++_7708)
    {
      for (int _7709 = (int)0, _12275 = dimj; _7709 < _12275 ; ++_7709)
      {
        _12273.push_back(((*_7707)(_7708,_7709)));
      }
    }
    auto _12276 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12273.size()),_12273.begin(),_12273.end()));
    data = _12276;
    nnz = (long long)safe_mul( dimi,dimj );
  }
}mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix  (int _7710,    int _7711,    double _7712){ return new mosek::fusion::DenseMatrix(_7710,_7711,_7712); }mosek::fusion::DenseMatrix::DenseMatrix  (int _7710,    int _7711,    double _7712) :    DenseMatrix(new mosek::fusion::p_DenseMatrix(this)){ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_7710,_7711,_7712); }void mosek::fusion::p_DenseMatrix::_initialize  (int _7710,    int _7711,    double _7712){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_Matrix::_initialize(_7710,_7711);
    std::vector<double> _12277;
    for (int _7713 = (int)0, _12278 = _7710; _7713 < _12278 ; ++_7713)
    {
      for (int _7714 = (int)0, _12279 = _7711; _7714 < _12279 ; ++_7714)
      {
        _12277.push_back(_7712);
      }
    }
    auto _12280 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12277.size()),_12277.begin(),_12277.end()));
    data = _12280;
    nnz = (long long)safe_mul( _7710,_7711 );
  }
}std::string mosek::fusion::DenseMatrix :: toString() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->toString(); }std::string mosek::fusion::p_DenseMatrix::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _7715 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _7715->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("DenseMatrix("));
  _7715->__mosek_2fusion_2Utils_2StringBuffer__a(dimi);
  _7715->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","));
  _7715->__mosek_2fusion_2Utils_2StringBuffer__a(dimj);
  _7715->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (": "));
  int _7716 = (int)0;
  {
    int _7717 = (int)0;
    for(;(_7717 < dimi);++ _7717)
    {
      {
        if ((_7717 > (int)0))
        {
          {
            _7715->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","));
          }
        }
        {}
        _7715->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("[ "));
        _7715->__mosek_2fusion_2Utils_2StringBuffer__a(((*data)(_7716)));
        ++ _7716;
        {
          int _7718 = (int)1;
          for(;(_7718 < dimj);++ _7718)
          {
            {
              _7715->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","));
              _7715->__mosek_2fusion_2Utils_2StringBuffer__a(((*data)(_7716)));
              ++ _7716;
            }
          }
        }
        _7715->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" ]"));
      }
    }
  }
  _7715->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _7715->toString();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::DenseMatrix :: __mosek_2fusion_2DenseMatrix__transpose() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->__mosek_2fusion_2DenseMatrix__transpose(); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::DenseMatrix::transpose() { return __mosek_2fusion_2DenseMatrix__transpose(); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::DenseMatrix::__mosek_2fusion_2Matrix__transpose() { return __mosek_2fusion_2DenseMatrix__transpose(); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_DenseMatrix::__mosek_2fusion_2DenseMatrix__transpose(){
  std::shared_ptr< monty::ndarray< double,1 > > _7719 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( dimi,dimj ))));
  _checked_ptr_1<double> _ptr__7719(_7719 ? _7719->raw() : nullptr,_7719 ? _7719->size(0) : 0);
  int _7720 = (int)0;
  int _7721 = dimi;
  int _12281 = (int)0;
  int _12282 = dimi;
  for (int _7722 = _12281; _7722 < _12282; ++_7722)
  {
    {
      int _7723 = _7722;
      int _12283 = (int)0;
      int _12284 = dimj;
      for (int _7724 = _12283; _7724 < _12284; ++_7724)
      {
        {
          _ptr__7719[_7723] = ((*data)(_7720));
          _7723 = safe_add( _7723,_7721 );
          ++ _7720;
        }
      }
    }
  }
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(dimj,dimi,_7719)).as<::mosek::fusion::Matrix>();
}
bool mosek::fusion::DenseMatrix :: isSparse() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->isSparse(); }bool mosek::fusion::p_DenseMatrix::isSparse(){
  return false;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::DenseMatrix :: getDataAsArray() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->getDataAsArray(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_DenseMatrix::getDataAsArray(){
  return ::mosek::fusion::Utils::Tools::arraycopy(data);
}
void mosek::fusion::DenseMatrix :: getDataAsTriplets(std::shared_ptr< monty::ndarray< int,1 > > _7725,std::shared_ptr< monty::ndarray< int,1 > > _7726,std::shared_ptr< monty::ndarray< double,1 > > _7727) { mosek::fusion::p_DenseMatrix::_get_impl(this)->getDataAsTriplets(_7725,_7726,_7727); }void mosek::fusion::p_DenseMatrix::getDataAsTriplets(std::shared_ptr< monty::ndarray< int,1 > > _7725,std::shared_ptr< monty::ndarray< int,1 > > _7726,std::shared_ptr< monty::ndarray< double,1 > > _7727){
  _checked_ptr_1<int> _ptr__7725(_7725 ? _7725->raw() : nullptr, _7725 ? _7725->size(0) : 0);
  _checked_ptr_1<int> _ptr__7726(_7726 ? _7726->raw() : nullptr, _7726 ? _7726->size(0) : 0);
  _checked_ptr_1<double> _ptr__7727(_7727 ? _7727->raw() : nullptr, _7727 ? _7727->size(0) : 0);
  if ((((int)((_7725)->size(0)) < nnz) || (((int)((_7726)->size(0)) < nnz) || ((int)((_7727)->size(0)) < nnz))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Output arrays are not long enough."));
    }
  }
  {}
  ::mosek::fusion::Utils::Tools::arraycopy(data,(int)0,_7727,(int)0,(int)((data)->size(0)));
  int _7728 = (int)0;
  int _12285 = (int)0;
  int _12286 = dimi;
  for (int _7729 = _12285; _7729 < _12286; ++_7729)
  {
    {
      int _12287 = (int)0;
      int _12288 = dimj;
      for (int _7730 = _12287; _7730 < _12288; ++_7730)
      {
        {
          _ptr__7725[_7728] = _7729;
          _ptr__7726[_7728] = _7730;
          ++ _7728;
        }
      }
    }
  }
}
double mosek::fusion::DenseMatrix :: get(int _7731,int _7732) { return mosek::fusion::p_DenseMatrix::_get_impl(this)->get(_7731,_7732); }double mosek::fusion::p_DenseMatrix::get(int _7731,int _7732){
  return ((*data)(safe_add( safe_mul( _7731,dimj ),_7732 )));
}
long long mosek::fusion::DenseMatrix :: numNonzeros() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->numNonzeros(); }long long mosek::fusion::p_DenseMatrix::numNonzeros(){
  return (long long)safe_mul( dimi,dimj );
}
void mosek::fusion::p_DenseMatrix::destroy(){data.reset();}void mosek::fusion::DenseMatrix::destroy() { mosek::fusion::p_DenseMatrix::_get_impl(this)->destroy(); }mosek::fusion::SparseMatrix::SparseMatrix(mosek::fusion::p_SparseMatrix *_impl) : mosek::fusion::Matrix(_impl) { /*std::cout << "SparseMatrix()" << this << std::endl; */ }mosek::fusion::SparseMatrix::~SparseMatrix() {  /* std::cout << "~SparseMatrix()" << this << std::endl << std::flush; */ }mosek::fusion::p_SparseMatrix::p_SparseMatrix  (::mosek::fusion::SparseMatrix * _pubthis) :     mosek::fusion::p_Matrix(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SparseMatrix::t mosek::fusion::p_SparseMatrix::_new_SparseMatrix  (int _7733,    int _7734,    std::shared_ptr< monty::ndarray< int,1 > > _7735,    std::shared_ptr< monty::ndarray< int,1 > > _7736,    std::shared_ptr< monty::ndarray< double,1 > > _7737,    long long _7738){ return new mosek::fusion::SparseMatrix(_7733,_7734,_7735,_7736,_7737,_7738); }mosek::fusion::SparseMatrix::SparseMatrix  (int _7733,    int _7734,    std::shared_ptr< monty::ndarray< int,1 > > _7735,    std::shared_ptr< monty::ndarray< int,1 > > _7736,    std::shared_ptr< monty::ndarray< double,1 > > _7737,    long long _7738) :    SparseMatrix(new mosek::fusion::p_SparseMatrix(this)){ mosek::fusion::p_SparseMatrix::_get_impl(this)->_initialize(_7733,_7734,_7735,_7736,_7737,_7738); }void mosek::fusion::p_SparseMatrix::_initialize  (int _7733,    int _7734,    std::shared_ptr< monty::ndarray< int,1 > > _7735,    std::shared_ptr< monty::ndarray< int,1 > > _7736,    std::shared_ptr< monty::ndarray< double,1 > > _7737,    long long _7738){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__7735(_7735 ? _7735->raw() : nullptr, _7735 ? _7735->size(0) : 0);
    _checked_ptr_1<int> _ptr__7736(_7736 ? _7736->raw() : nullptr, _7736 ? _7736->size(0) : 0);
    _checked_ptr_1<double> _ptr__7737(_7737 ? _7737->raw() : nullptr, _7737 ? _7737->size(0) : 0);
    mosek::fusion::p_Matrix::_initialize(_7733,_7734);
    if ((_7738 > (int)0))
    {
      {
        if ((((int)((_7735)->size(0)) < _7738) || (((int)((_7736)->size(0)) < _7738) || ((int)((_7737)->size(0)) < _7738))))
        {
          {
            throw ::mosek::fusion::SparseFormatError(std::string ("Mismatching arrays in sparse data."));
          }
        }
        {}
        bool _7739 = false;
        long long _12289 = (long long)0;
        long long _12290 = _7738;
        for (long long _7740 = _12289; _7740 < _12290; ++_7740)
        {
          {
            if (((_ptr__7735[_7740] < (int)0) || ((_ptr__7735[_7740] >= dimi) || ((_ptr__7736[_7740] < (int)0) || (_ptr__7736[_7740] >= dimj)))))
            {
              {
                _7739 = true;
              }
            }
            {}
          }
        }
        if (_7739)
        {
          {
            throw ::mosek::fusion::SparseFormatError(std::string ("Subscript out of bounds."));
          }
        }
        {}
        std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _7741 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 >(monty::shape((int)1)));
        std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _7742 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 >(monty::shape((int)1)));
        std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _7743 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 >(monty::shape((int)1)));
        ::mosek::fusion::p_CommonTools::tripletSort(_7735,_7736,_7737,_7741,_7742,_7743,_7738,dimi,dimj);
        subi = ((*_7741)((int)0));
        subj = ((*_7742)((int)0));
        val = ((*_7743)((int)0));
        nnz = (long long)((val)->size(0));
      }
    }
    else
    {
      {
        subi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
        subj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
        val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0)));
        nnz = (long long)0;
      }
    }
  }
}mosek::fusion::SparseMatrix::t mosek::fusion::p_SparseMatrix::_new_SparseMatrix  (int _7744,    int _7745,    std::shared_ptr< monty::ndarray< int,1 > > _7746,    std::shared_ptr< monty::ndarray< int,1 > > _7747,    std::shared_ptr< monty::ndarray< double,1 > > _7748){ return new mosek::fusion::SparseMatrix(_7744,_7745,_7746,_7747,_7748); }mosek::fusion::SparseMatrix::SparseMatrix  (int _7744,    int _7745,    std::shared_ptr< monty::ndarray< int,1 > > _7746,    std::shared_ptr< monty::ndarray< int,1 > > _7747,    std::shared_ptr< monty::ndarray< double,1 > > _7748) :    SparseMatrix(new mosek::fusion::p_SparseMatrix(this)){ mosek::fusion::p_SparseMatrix::_get_impl(this)->_initialize(_7744,_7745,_7746,_7747,_7748); }void mosek::fusion::p_SparseMatrix::_initialize  (int _7744,    int _7745,    std::shared_ptr< monty::ndarray< int,1 > > _7746,    std::shared_ptr< monty::ndarray< int,1 > > _7747,    std::shared_ptr< monty::ndarray< double,1 > > _7748){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__7746(_7746 ? _7746->raw() : nullptr, _7746 ? _7746->size(0) : 0);
    _checked_ptr_1<int> _ptr__7747(_7747 ? _7747->raw() : nullptr, _7747 ? _7747->size(0) : 0);
    _checked_ptr_1<double> _ptr__7748(_7748 ? _7748->raw() : nullptr, _7748 ? _7748->size(0) : 0);
    mosek::fusion::p_Matrix::_initialize(_7744,_7745);
    int _7749 = (int)0;
    int _12291 = (int)0;
    int _12292 = (int)((_7748)->size(0));
    for (int _7750 = _12291; _7750 < _12292; ++_7750)
    {
      {
        if (((_ptr__7748[_7750] > (int)0) || (_ptr__7748[_7750] < (int)0)))
        {
          {
            ++ _7749;
          }
        }
        {}
      }
    }
    if (((_7749 > (int)0) && (_7749 < (int)((_7746)->size(0)))))
    {
      {
        subi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7749)));
        subj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7749)));
        val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7749)));
        nnz = _7749;
        int _7751 = (int)0;
        int _12293 = (int)0;
        int _12294 = (int)((_7748)->size(0));
        for (int _7752 = _12293; _7752 < _12294; ++_7752)
        {
          {
            if (((_ptr__7748[_7752] < (int)0) || (_ptr__7748[_7752] > (int)0)))
            {
              {
                ((*val)(_7751)) = _ptr__7748[_7752];
                ((*subj)(_7751)) = _ptr__7747[_7752];
                ((*subi)(_7751)) = _ptr__7746[_7752];
                ++ _7751;
              }
            }
            {}
          }
        }
      }
    }
    else
    {
      {
        subi = _7746;
        subj = _7747;
        val = _7748;
        if ((NULL == _7746.get()))
        {
          {
            nnz = (long long)0;
          }
        }
        else
        {
          {
            nnz = (long long)((subi)->size(0));
          }
        }
      }
    }
  }
}std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_SparseMatrix::formPtrb(){
  std::shared_ptr< monty::ndarray< long long,1 > > _7753 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( dimi,(int)1 ))));
  _checked_ptr_1<long long> _ptr__7753(_7753 ? _7753->raw() : nullptr,_7753 ? _7753->size(0) : 0);
  long long _7754 = (long long)0;
  int _12295 = (int)0;
  int _12296 = dimi;
  for (int _7755 = _12295; _7755 < _12296; ++_7755)
  {
    {
      _ptr__7753[_7755] = _7754;
      {
        for(;((_7754 < nnz) && (((*subi)(_7754)) == _7755));++ _7754)
        {
          {
          }
        }
      }
    }
  }
  _ptr__7753[dimi] = _7754;
  return _7753;
}
std::string mosek::fusion::SparseMatrix :: toString() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->toString(); }std::string mosek::fusion::p_SparseMatrix::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _7756 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _7756->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("SparseMatrix("))->__mosek_2fusion_2Utils_2StringBuffer__a(dimi)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(dimj)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (", ["));
  if (((NULL != subi.get()) && ((int)((subi)->size(0)) > (int)0)))
  {
    {
      _7756->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("("))->__mosek_2fusion_2Utils_2StringBuffer__a(((*subi)((int)0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*subj)((int)0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*val)((int)0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
      int _12297 = (int)1;
      int _12298 = (int)((subi)->size(0));
      for (int _7757 = _12297; _7757 < _12298; ++_7757)
      {
        {
          _7756->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",("))->__mosek_2fusion_2Utils_2StringBuffer__a(((*subi)(_7757)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*subj)(_7757)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*val)(_7757)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
        }
      }
    }
  }
  {}
  _7756->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" ])"));
  return _7756->toString();
}
long long mosek::fusion::SparseMatrix :: numNonzeros() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->numNonzeros(); }long long mosek::fusion::p_SparseMatrix::numNonzeros(){
  return nnz;
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::SparseMatrix :: __mosek_2fusion_2SparseMatrix__transpose() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->__mosek_2fusion_2SparseMatrix__transpose(); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::SparseMatrix::transpose() { return __mosek_2fusion_2SparseMatrix__transpose(); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::SparseMatrix::__mosek_2fusion_2Matrix__transpose() { return __mosek_2fusion_2SparseMatrix__transpose(); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_SparseMatrix::__mosek_2fusion_2SparseMatrix__transpose(){
  return ::mosek::fusion::p_Matrix::sparse(dimj,dimi,subj,subi,val);
}
bool mosek::fusion::SparseMatrix :: isSparse() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->isSparse(); }bool mosek::fusion::p_SparseMatrix::isSparse(){
  return true;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SparseMatrix :: getDataAsArray() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->getDataAsArray(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_SparseMatrix::getDataAsArray(){
  std::shared_ptr< monty::ndarray< double,1 > > _7758 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( dimi,dimj ))));
  _checked_ptr_1<double> _ptr__7758(_7758 ? _7758->raw() : nullptr,_7758 ? _7758->size(0) : 0);
  int _12299 = (int)0;
  int _12300 = (int)((subi)->size(0));
  for (int _7759 = _12299; _7759 < _12300; ++_7759)
  {
    {
      _ptr__7758[safe_add( safe_mul( ((*subi)(_7759)),dimj ),((*subj)(_7759)) )] = ((*val)(_7759));
    }
  }
  return _7758;
}
void mosek::fusion::SparseMatrix :: getDataAsTriplets(std::shared_ptr< monty::ndarray< int,1 > > _7760,std::shared_ptr< monty::ndarray< int,1 > > _7761,std::shared_ptr< monty::ndarray< double,1 > > _7762) { mosek::fusion::p_SparseMatrix::_get_impl(this)->getDataAsTriplets(_7760,_7761,_7762); }void mosek::fusion::p_SparseMatrix::getDataAsTriplets(std::shared_ptr< monty::ndarray< int,1 > > _7760,std::shared_ptr< monty::ndarray< int,1 > > _7761,std::shared_ptr< monty::ndarray< double,1 > > _7762){
  _checked_ptr_1<int> _ptr__7760(_7760 ? _7760->raw() : nullptr, _7760 ? _7760->size(0) : 0);
  _checked_ptr_1<int> _ptr__7761(_7761 ? _7761->raw() : nullptr, _7761 ? _7761->size(0) : 0);
  _checked_ptr_1<double> _ptr__7762(_7762 ? _7762->raw() : nullptr, _7762 ? _7762->size(0) : 0);
  if ((((long long)((_7760)->size(0)) < nnz) || (((long long)((_7761)->size(0)) < nnz) || ((long long)((_7762)->size(0)) < nnz))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Output arrays are not long enough."));
    }
  }
  {}
  if (((NULL != subi.get()) && ((int)((subi)->size(0)) > (int)0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(subi,(long long)0,_7760,(long long)0,nnz);
      ::mosek::fusion::Utils::Tools::arraycopy(subj,(long long)0,_7761,(long long)0,nnz);
      ::mosek::fusion::Utils::Tools::arraycopy(val,(long long)0,_7762,(long long)0,nnz);
    }
  }
  {}
}
double mosek::fusion::SparseMatrix :: get(int _7763,int _7764) { return mosek::fusion::p_SparseMatrix::_get_impl(this)->get(_7763,_7764); }double mosek::fusion::p_SparseMatrix::get(int _7763,int _7764){
  if (((_7763 < (int)0) || ((_7763 >= dimi) || ((_7764 < (int)0) || (_7764 >= dimj)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Index out if bounds"));
    }
  }
  {}
  int _7765 = (int)((subi)->size(0));
  int _7766 = (int)0;
  while ( ((_7765 - _7766) > (int)1) )
  {
    {
      int _7767 = (safe_add( _7766,_7765 ) / (int)2);
      if (((((*subi)(_7767)) < _7763) || ((((*subi)(_7767)) == _7763) && (((*subj)(_7767)) < _7764))))
      {
        {
          _7766 = _7767;
        }
      }
      else if(((((*subi)(_7767)) > _7763) || ((((*subi)(_7767)) == _7763) && (((*subj)(_7767)) > _7764))))
      {
        {
          _7765 = _7767;
        }
      }
      else
      {
        {
          return ((*val)(_7767));
        }
      }
    }
  }
  if (((((*subi)(_7766)) == _7763) && (((*subj)(_7766)) == _7764)))
  {
    {
      return ((*val)(_7766));
    }
  }
  else
  {
    {
      return 0.0;
    }
  }
}
void mosek::fusion::p_SparseMatrix::destroy(){val.reset();subj.reset();subi.reset();}void mosek::fusion::SparseMatrix::destroy() { mosek::fusion::p_SparseMatrix::_get_impl(this)->destroy(); }mosek::fusion::Matrix::Matrix(mosek::fusion::p_Matrix *_impl) : _impl(_impl) { /*std::cout << "Matrix() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Matrix::~Matrix() { delete _impl; _impl = nullptr; }mosek::fusion::p_Matrix::p_Matrix  (::mosek::fusion::Matrix * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::p_Matrix::_initialize  (int _7768,    int _7769){monty::rc_reserve __reserve_this(_pubthis);   {
    if (((_7768 < (int)0) || (_7769 < (int)0)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid dimensions"));
      }
    }
    {}
    dimi = _7768;
    dimj = _7769;
  }
}std::string mosek::fusion::Matrix :: toString() { return mosek::fusion::p_Matrix::_get_impl(this)->toString(); }std::string mosek::fusion::p_Matrix::toString(){
  return std::string ("");
}
void mosek::fusion::p_Matrix::switchDims(){
  int _7770 = dimi;
  dimi = dimj;
  dimj = _7770;
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( int _7771,    monty::rc_ptr< ::mosek::fusion::Matrix > _7772) { return mosek::fusion::p_Matrix::diag(_7771,_7772); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(int _7771,monty::rc_ptr< ::mosek::fusion::Matrix > _7772){
  std::vector<monty::rc_ptr< ::mosek::fusion::Matrix >> _12301;
  for (int _7773 = (int)0, _12302 = _7771; _7773 < _12302 ; ++_7773)
  {
    _12301.push_back(_7772);
  }
  auto _12303 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 >(monty::shape(_12301.size()),_12301.begin(),_12301.end()));
  return ::mosek::fusion::p_Matrix::diag(_12303);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > > _7774) { return mosek::fusion::p_Matrix::diag(_7774); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > > _7774){
  std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > > _7775 = _7774;
  long long _7776 = (long long)0;
  int _7777 = (int)0;
  int _7778 = (int)0;
  int _12304 = (int)0;
  int _12305 = (int)((_7774)->size(0));
  for (int _7779 = _12304; _7779 < _12305; ++_7779)
  {
    {
      _7778 = safe_add( _7778,mosek::fusion::p_Matrix::_get_impl(((*_7774)(_7779)))->dimi );
      _7777 = safe_add( _7777,mosek::fusion::p_Matrix::_get_impl(((*_7774)(_7779)))->dimj );
      _7776 = safe_add( _7776,((*_7774)(_7779))->numNonzeros() );
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _7780 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7776)));
  _checked_ptr_1<int> _ptr__7780(_7780 ? _7780->raw() : nullptr,_7780 ? _7780->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7781 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7776)));
  _checked_ptr_1<int> _ptr__7781(_7781 ? _7781->raw() : nullptr,_7781 ? _7781->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7782 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7776)));
  _checked_ptr_1<double> _ptr__7782(_7782 ? _7782->raw() : nullptr,_7782 ? _7782->size(0) : 0);
  {
    int _7783 = (int)0;
    int _7784 = (int)0;
    long long _7785 = (long long)0;
    int _12306 = (int)0;
    int _12307 = (int)((_7774)->size(0));
    for (int _7786 = _12306; _7786 < _12307; ++_7786)
    {
      {
        long long _7787 = ((*_7774)(_7786))->numNonzeros();
        std::shared_ptr< monty::ndarray< double,1 > > _7788 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7787)));
        _checked_ptr_1<double> _ptr__7788(_7788 ? _7788->raw() : nullptr,_7788 ? _7788->size(0) : 0);
        std::shared_ptr< monty::ndarray< int,1 > > _7789 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7787)));
        _checked_ptr_1<int> _ptr__7789(_7789 ? _7789->raw() : nullptr,_7789 ? _7789->size(0) : 0);
        std::shared_ptr< monty::ndarray< int,1 > > _7790 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7787)));
        _checked_ptr_1<int> _ptr__7790(_7790 ? _7790->raw() : nullptr,_7790 ? _7790->size(0) : 0);
        ((*_7774)(_7786))->getDataAsTriplets(_7790,_7789,_7788);
        ::mosek::fusion::Utils::Tools::arraycopy(_7788,(long long)0,_7782,_7785,_7787);
        long long _12308 = (long long)0;
        long long _12309 = _7787;
        for (long long _7791 = _12308; _7791 < _12309; ++_7791)
        {
          {
            _ptr__7780[safe_add( _7785,_7791 )] = safe_add( _ptr__7790[_7791],_7784 );
            _ptr__7781[safe_add( _7785,_7791 )] = safe_add( _ptr__7790[_7791],_7783 );
          }
        }
        _7785 = safe_add( _7785,_7787 );
        _7784 = safe_add( _7784,mosek::fusion::p_Matrix::_get_impl(((*_7774)(_7786)))->dimi );
        _7783 = safe_add( _7783,mosek::fusion::p_Matrix::_get_impl(((*_7774)(_7786)))->dimj );
      }
    }
  }
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_7778,_7777,_7780,_7781,_7782)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag  ( int _7792,    double _7793,    int _7794) { return mosek::fusion::p_Matrix::antidiag(_7792,_7793,_7794); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag(int _7792,double _7793,int _7794){
  if (((_7794 < _7792) && (_7794 >= (int)0)))
  {
    {
      return ::mosek::fusion::p_Matrix::antidiag(::mosek::fusion::Utils::Tools::makevector(_7793,(_7792 - _7794)),_7794);
    }
  }
  else if(((_7794 > (-_7792)) && (_7794 < (int)0)))
  {
    {
      return ::mosek::fusion::p_Matrix::antidiag(::mosek::fusion::Utils::Tools::makevector(_7793,safe_add( _7792,_7794 )),_7794);
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Diagonal index out of bounds"));
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag  ( int _7795,    double _7796) { return mosek::fusion::p_Matrix::antidiag(_7795,_7796); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag(int _7795,double _7796){
  return ::mosek::fusion::p_Matrix::antidiag(::mosek::fusion::Utils::Tools::makevector(_7796,_7795),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( int _7797,    double _7798,    int _7799) { return mosek::fusion::p_Matrix::diag(_7797,_7798,_7799); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(int _7797,double _7798,int _7799){
  if (((_7799 < _7797) && (_7799 >= (int)0)))
  {
    {
      return ::mosek::fusion::p_Matrix::diag(::mosek::fusion::Utils::Tools::makevector(_7798,(_7797 - _7799)),_7799);
    }
  }
  else if(((_7799 > (-_7797)) && (_7799 < (int)0)))
  {
    {
      return ::mosek::fusion::p_Matrix::diag(::mosek::fusion::Utils::Tools::makevector(_7798,safe_add( _7797,_7799 )),_7799);
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Diagonal index out of bounds"));
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( int _7800,    double _7801) { return mosek::fusion::p_Matrix::diag(_7800,_7801); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(int _7800,double _7801){
  return ::mosek::fusion::p_Matrix::diag(::mosek::fusion::Utils::Tools::makevector(_7801,_7800),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag  ( std::shared_ptr< monty::ndarray< double,1 > > _7802,    int _7803) { return mosek::fusion::p_Matrix::antidiag(_7802,_7803); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag(std::shared_ptr< monty::ndarray< double,1 > > _7802,int _7803){
  _checked_ptr_1<double> _ptr__7802(_7802 ? _7802->raw() : nullptr, _7802 ? _7802->size(0) : 0);
  int _12310;
  bool _12311 = (_7803 > (int)0);
  if (_12311)
  {
    _12310 = _7803;
  }
  else
  {
    _12310 = (-_7803);
  }
  int _7804 = _12310;
  int _7805 = safe_add( (int)((_7802)->size(0)),_7804 );
  int _7806 = (int)((_7802)->size(0));
  if ((_7803 >= (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _7807 = ::mosek::fusion::Utils::Tools::range(_7803,safe_add( _7806,_7803 ));
      _checked_ptr_1<int> _ptr__7807(_7807 ? _7807->raw() : nullptr,_7807 ? _7807->size(0) : 0);
      std::vector<int> _12312;
      for (int _7809 = (int)1, _12313 = safe_add( _7806,(int)1 ); _7809 < _12313 ; ++_7809)
      {
        _12312.push_back((safe_add( _7806,_7803 ) - _7809));
      }
      auto _12314 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12312.size()),_12312.begin(),_12312.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _7808 = _12314;
      _checked_ptr_1<int> _ptr__7808(_7808 ? _7808->raw() : nullptr,_7808 ? _7808->size(0) : 0);
      return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_7805,_7805,_7807,_7808,_7802)).as<::mosek::fusion::Matrix>();
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _7810 = ::mosek::fusion::Utils::Tools::range((int)0,_7806);
      _checked_ptr_1<int> _ptr__7810(_7810 ? _7810->raw() : nullptr,_7810 ? _7810->size(0) : 0);
      std::vector<int> _12315;
      for (int _7812 = (int)1, _12316 = safe_add( _7806,(int)1 ); _7812 < _12316 ; ++_7812)
      {
        _12315.push_back((_7806 - _7812));
      }
      auto _12317 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12315.size()),_12315.begin(),_12315.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _7811 = _12317;
      _checked_ptr_1<int> _ptr__7811(_7811 ? _7811->raw() : nullptr,_7811 ? _7811->size(0) : 0);
      return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_7805,_7805,_7810,_7811,_7802)).as<::mosek::fusion::Matrix>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag  ( std::shared_ptr< monty::ndarray< double,1 > > _7813) { return mosek::fusion::p_Matrix::antidiag(_7813); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag(std::shared_ptr< monty::ndarray< double,1 > > _7813){
  _checked_ptr_1<double> _ptr__7813(_7813 ? _7813->raw() : nullptr, _7813 ? _7813->size(0) : 0);
  return ::mosek::fusion::p_Matrix::antidiag(_7813,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( std::shared_ptr< monty::ndarray< double,1 > > _7814,    int _7815) { return mosek::fusion::p_Matrix::diag(_7814,_7815); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(std::shared_ptr< monty::ndarray< double,1 > > _7814,int _7815){
  _checked_ptr_1<double> _ptr__7814(_7814 ? _7814->raw() : nullptr, _7814 ? _7814->size(0) : 0);
  int _12318;
  bool _12319 = (_7815 > (int)0);
  if (_12319)
  {
    _12318 = _7815;
  }
  else
  {
    _12318 = (-_7815);
  }
  int _7816 = _12318;
  int _7817 = safe_add( (int)((_7814)->size(0)),_7816 );
  int _7818 = (int)((_7814)->size(0));
  if ((_7815 >= (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _7819 = ::mosek::fusion::Utils::Tools::range((int)0,_7818);
      _checked_ptr_1<int> _ptr__7819(_7819 ? _7819->raw() : nullptr,_7819 ? _7819->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _7820 = ::mosek::fusion::Utils::Tools::range(_7816,safe_add( _7818,_7816 ));
      _checked_ptr_1<int> _ptr__7820(_7820 ? _7820->raw() : nullptr,_7820 ? _7820->size(0) : 0);
      return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_7817,_7817,_7819,_7820,_7814)).as<::mosek::fusion::Matrix>();
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _7821 = ::mosek::fusion::Utils::Tools::range(_7816,safe_add( _7818,_7816 ));
      _checked_ptr_1<int> _ptr__7821(_7821 ? _7821->raw() : nullptr,_7821 ? _7821->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _7822 = ::mosek::fusion::Utils::Tools::range((int)0,_7818);
      _checked_ptr_1<int> _ptr__7822(_7822 ? _7822->raw() : nullptr,_7822 ? _7822->size(0) : 0);
      return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_7817,_7817,_7821,_7822,_7814)).as<::mosek::fusion::Matrix>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( std::shared_ptr< monty::ndarray< double,1 > > _7823) { return mosek::fusion::p_Matrix::diag(_7823); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(std::shared_ptr< monty::ndarray< double,1 > > _7823){
  _checked_ptr_1<double> _ptr__7823(_7823 ? _7823->raw() : nullptr, _7823 ? _7823->size(0) : 0);
  return ::mosek::fusion::p_Matrix::diag(_7823,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::ones  ( int _7824,    int _7825) { return mosek::fusion::p_Matrix::ones(_7824,_7825); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::ones(int _7824,int _7825){
  return ::mosek::fusion::p_Matrix::dense(_7824,_7825,1.0);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::eye  ( int _7826) { return mosek::fusion::p_Matrix::eye(_7826); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::eye(int _7826){
  std::vector<double> _12320;
  for (int _7827 = (int)0, _12321 = _7826; _7827 < _12321 ; ++_7827)
  {
    _12320.push_back(1.0);
  }
  auto _12322 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12320.size()),_12320.begin(),_12320.end()));
  return ::mosek::fusion::p_Matrix::diag(_12322);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7828) { return mosek::fusion::p_Matrix::dense(_7828); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense(monty::rc_ptr< ::mosek::fusion::Matrix > _7828){
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_7828)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense  ( int _7829,    int _7830,    double _7831) { return mosek::fusion::p_Matrix::dense(_7829,_7830,_7831); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense(int _7829,int _7830,double _7831){
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_7829,_7830,_7831)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense  ( int _7832,    int _7833,    std::shared_ptr< monty::ndarray< double,1 > > _7834) { return mosek::fusion::p_Matrix::dense(_7832,_7833,_7834); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense(int _7832,int _7833,std::shared_ptr< monty::ndarray< double,1 > > _7834){
  _checked_ptr_1<double> _ptr__7834(_7834 ? _7834->raw() : nullptr, _7834 ? _7834->size(0) : 0);
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_7832,_7833,_7834)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense  ( std::shared_ptr< monty::ndarray< double,2 > > _7835) { return mosek::fusion::p_Matrix::dense(_7835); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense(std::shared_ptr< monty::ndarray< double,2 > > _7835){
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_7835)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7836) { return mosek::fusion::p_Matrix::sparse(_7836); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(monty::rc_ptr< ::mosek::fusion::Matrix > _7836){
  std::shared_ptr< monty::ndarray< int,1 > > _7837 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7836->numNonzeros())));
  _checked_ptr_1<int> _ptr__7837(_7837 ? _7837->raw() : nullptr,_7837 ? _7837->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7838 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7836->numNonzeros())));
  _checked_ptr_1<int> _ptr__7838(_7838 ? _7838->raw() : nullptr,_7838 ? _7838->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7839 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7836->numNonzeros())));
  _checked_ptr_1<double> _ptr__7839(_7839 ? _7839->raw() : nullptr,_7839 ? _7839->size(0) : 0);
  _7836->getDataAsTriplets(_7837,_7838,_7839);
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_7836->numRows(),_7836->numColumns(),_7837,_7838,_7839)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > >,1 > > _7840) { return mosek::fusion::p_Matrix::sparse(_7840); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > >,1 > > _7840){
  int _7841 = (int)((_7840)->size(0));
  int _7842 = (int)((((*_7840)((int)0)))->size(0));
  std::shared_ptr< monty::ndarray< int,1 > > _7843 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7841)));
  _checked_ptr_1<int> _ptr__7843(_7843 ? _7843->raw() : nullptr,_7843 ? _7843->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7844 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7842)));
  _checked_ptr_1<int> _ptr__7844(_7844 ? _7844->raw() : nullptr,_7844 ? _7844->size(0) : 0);
  long long _7845 = (long long)0;
  int _7846 = (int)0;
  {
    int _7847 = (int)0;
    for(;(_7847 < _7841);++ _7847)
    {
      {
        {
          int _7848 = (int)0;
          for(;(_7848 < _7842);++ _7848)
          {
            {
              monty::rc_ptr< ::mosek::fusion::Matrix > _7849 = ((*((*_7840)(_7847)))(_7848));
              if ((NULL != _7849.get()))
              {
                {
                  if ((_ptr__7844[_7848] == (int)0))
                  {
                    {
                      _ptr__7844[_7848] = mosek::fusion::p_Matrix::_get_impl(_7849)->dimj;
                    }
                  }
                  else if((_ptr__7844[_7848] != mosek::fusion::p_Matrix::_get_impl(_7849)->dimj))
                  {
                    {
                      throw ::mosek::fusion::SparseFormatError(std::string ("Sparse matrix construction blocks are not aligned"));
                    }
                  }
                  {}
                  if ((_ptr__7843[_7847] == (int)0))
                  {
                    {
                      _ptr__7843[_7847] = mosek::fusion::p_Matrix::_get_impl(_7849)->dimi;
                    }
                  }
                  else if((_ptr__7843[_7847] != mosek::fusion::p_Matrix::_get_impl(_7849)->dimi))
                  {
                    {
                      throw ::mosek::fusion::SparseFormatError(std::string ("Sparse matrix construction blocks are not aligned"));
                    }
                  }
                  {}
                  _7845 = safe_add( _7845,_7849->numNonzeros() );
                }
              }
              {}
              ++ _7846;
            }
          }
        }
      }
    }
  }
  std::shared_ptr< monty::ndarray< double,1 > > _7850 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7845)));
  _checked_ptr_1<double> _ptr__7850(_7850 ? _7850->raw() : nullptr,_7850 ? _7850->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7851 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7845)));
  _checked_ptr_1<int> _ptr__7851(_7851 ? _7851->raw() : nullptr,_7851 ? _7851->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7852 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7845)));
  _checked_ptr_1<int> _ptr__7852(_7852 ? _7852->raw() : nullptr,_7852 ? _7852->size(0) : 0);
  int _7853 = (int)0;
  int _7854 = (int)0;
  {
    int _7855 = (int)0;
    for(;(_7855 < _7841);++ _7855)
    {
      {
        std::shared_ptr< monty::ndarray< int,1 > > _7856 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7842)));
        _checked_ptr_1<int> _ptr__7856(_7856 ? _7856->raw() : nullptr,_7856 ? _7856->size(0) : 0);
        {
          int _7857 = (int)0;
          for(;(_7857 < _ptr__7843[_7855]);++ _7857)
          {
            {
              int _7858 = (int)0;
              {
                int _7859 = (int)0;
                for(;(_7859 < _7842);++ _7859)
                {
                  {
                    monty::rc_ptr< ::mosek::fusion::Matrix > _7860 = ((*((*_7840)(_7855)))(_7859));
                    if ((NULL != _7860.get()))
                    {
                      {
                        monty::rc_ptr< ::mosek::fusion::Matrix > _12323 = _7860;
                        if (false) {}
                        else if (nullptr != dynamic_cast<::mosek::fusion::DenseMatrix*>(_12323.get()))
                        {
                          ::mosek::fusion::DenseMatrix::t _7861 (dynamic_cast<::mosek::fusion::DenseMatrix*>(_12323.get()));
                          {
                            int _7864 = _ptr__7856[_7859];
                            {
                              int _7865 = (int)0;
                              for(;(_7865 < mosek::fusion::p_Matrix::_get_impl(_7861)->dimj);++ _7865)
                              {
                                {
                                  _ptr__7850[_7853] = ((*mosek::fusion::p_DenseMatrix::_get_impl(_7861)->data)(_7864));
                                  _ptr__7851[_7853] = safe_add( _7854,_7857 );
                                  _ptr__7852[_7853] = safe_add( _7858,_7865 );
                                  ++ _7864;
                                  ++ _7853;
                                }
                              }
                            }
                            _ptr__7856[_7859] = _7864;
                          }
                        }
                        else if (nullptr != dynamic_cast<::mosek::fusion::SparseMatrix*>(_12323.get()))
                        {
                          ::mosek::fusion::SparseMatrix::t _7862 (dynamic_cast<::mosek::fusion::SparseMatrix*>(_12323.get()));
                          {
                            int _7866;
                            {
                              _7866 = _ptr__7856[_7859];
                              for(;((_7866 < mosek::fusion::p_SparseMatrix::_get_impl(_7862)->nnz) && (((*mosek::fusion::p_SparseMatrix::_get_impl(_7862)->subi)(_7866)) == _7857));++ _7866)
                              {
                                {
                                  _ptr__7850[_7853] = ((*mosek::fusion::p_SparseMatrix::_get_impl(_7862)->val)(_7866));
                                  _ptr__7852[_7853] = safe_add( ((*mosek::fusion::p_SparseMatrix::_get_impl(_7862)->subj)(_7866)),_7858 );
                                  _ptr__7851[_7853] = safe_add( _7854,_7857 );
                                  ++ _7853;
                                }
                              }
                            }
                            _ptr__7856[_7859] = _7866;
                          }
                        }
                        else
                        {
                          mosek::fusion::Matrix::t _7863 = _12323;
                          {
                            throw ::mosek::fusion::MatrixError(std::string ("Unknown matrix type."));
                          }
                        }
                      }
                    }
                    {}
                    _7858 = safe_add( _7858,_ptr__7844[_7859] );
                  }
                }
              }
            }
          }
        }
        _7854 = safe_add( _7854,_ptr__7843[_7855] );
      }
    }
  }
  int _7867 = (int)0;
  int _7868 = (int)0;
  {
    int _7869 = (int)0;
    for(;(_7869 < _7841);++ _7869)
    {
      {
        _7867 = safe_add( _7867,_ptr__7843[_7869] );
      }
    }
  }
  {
    int _7870 = (int)0;
    for(;(_7870 < _7842);++ _7870)
    {
      {
        _7868 = safe_add( _7868,_ptr__7844[_7870] );
      }
    }
  }
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_7867,_7868,_7851,_7852,_7850)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( std::shared_ptr< monty::ndarray< double,2 > > _7871) { return mosek::fusion::p_Matrix::sparse(_7871); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(std::shared_ptr< monty::ndarray< double,2 > > _7871){
  int _7872 = (int)((_7871)->size(0));
  int _7873 = (int)((_7871)->size(1));
  long long _7874 = (long long)safe_mul( _7872,_7873 );
  int _7875 = (int)0;
  std::shared_ptr< monty::ndarray< int,1 > > _7876 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7874)));
  _checked_ptr_1<int> _ptr__7876(_7876 ? _7876->raw() : nullptr,_7876 ? _7876->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7877 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7874)));
  _checked_ptr_1<int> _ptr__7877(_7877 ? _7877->raw() : nullptr,_7877 ? _7877->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7878 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7874)));
  _checked_ptr_1<double> _ptr__7878(_7878 ? _7878->raw() : nullptr,_7878 ? _7878->size(0) : 0);
  {
    int _7879 = (int)0;
    for(;(_7879 < _7872);++ _7879)
    {
      {
        {
          int _7880 = (int)0;
          for(;(_7880 < _7873);++ _7880)
          {
            {
              _ptr__7876[_7875] = _7879;
              _ptr__7877[_7875] = _7880;
              _ptr__7878[_7875] = ((*_7871)(_7879,_7880));
              ++ _7875;
            }
          }
        }
      }
    }
  }
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_7872,_7873,_7876,_7877,_7878)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( int _7881,    int _7882) { return mosek::fusion::p_Matrix::sparse(_7881,_7882); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(int _7881,int _7882){
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_7881,_7882,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),(long long)0)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( int _7883,    int _7884,    std::shared_ptr< monty::ndarray< int,1 > > _7885,    std::shared_ptr< monty::ndarray< int,1 > > _7886,    double _7887) { return mosek::fusion::p_Matrix::sparse(_7883,_7884,_7885,_7886,_7887); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(int _7883,int _7884,std::shared_ptr< monty::ndarray< int,1 > > _7885,std::shared_ptr< monty::ndarray< int,1 > > _7886,double _7887){
  _checked_ptr_1<int> _ptr__7885(_7885 ? _7885->raw() : nullptr, _7885 ? _7885->size(0) : 0);
  _checked_ptr_1<int> _ptr__7886(_7886 ? _7886->raw() : nullptr, _7886 ? _7886->size(0) : 0);
  int _7888 = (int)0;
  if ((NULL != _7885.get()))
  {
    {
      _7888 = (int)((_7885)->size(0));
    }
  }
  else if((NULL != _7886.get()))
  {
    {
      _7888 = (int)((_7886)->size(0));
    }
  }
  {}
  return ::mosek::fusion::p_Matrix::sparse(_7883,_7884,_7885,_7886,::mosek::fusion::Utils::Tools::makevector(_7887,_7888));
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( std::shared_ptr< monty::ndarray< int,1 > > _7889,    std::shared_ptr< monty::ndarray< int,1 > > _7890,    double _7891) { return mosek::fusion::p_Matrix::sparse(_7889,_7890,_7891); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(std::shared_ptr< monty::ndarray< int,1 > > _7889,std::shared_ptr< monty::ndarray< int,1 > > _7890,double _7891){
  _checked_ptr_1<int> _ptr__7889(_7889 ? _7889->raw() : nullptr, _7889 ? _7889->size(0) : 0);
  _checked_ptr_1<int> _ptr__7890(_7890 ? _7890->raw() : nullptr, _7890 ? _7890->size(0) : 0);
  int _7892 = (int)0;
  int _7893 = (int)0;
  int _7894 = (int)((_7889)->size(0));
  if ((_7894 > (int)((_7890)->size(0))))
  {
    {
      _7894 = (int)((_7890)->size(0));
    }
  }
  {}
  int _12324 = (int)0;
  int _12325 = _7894;
  for (int _7895 = _12324; _7895 < _12325; ++_7895)
  {
    {
      if ((_7893 < _ptr__7889[_7895]))
      {
        {
          _7893 = _ptr__7889[_7895];
        }
      }
      {}
      if ((_7892 < _ptr__7890[_7895]))
      {
        {
          _7892 = _ptr__7890[_7895];
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Matrix::sparse(safe_add( _7893,(int)1 ),safe_add( _7892,(int)1 ),_7889,_7890,_7891);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( std::shared_ptr< monty::ndarray< int,1 > > _7896,    std::shared_ptr< monty::ndarray< int,1 > > _7897,    std::shared_ptr< monty::ndarray< double,1 > > _7898) { return mosek::fusion::p_Matrix::sparse(_7896,_7897,_7898); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(std::shared_ptr< monty::ndarray< int,1 > > _7896,std::shared_ptr< monty::ndarray< int,1 > > _7897,std::shared_ptr< monty::ndarray< double,1 > > _7898){
  _checked_ptr_1<int> _ptr__7896(_7896 ? _7896->raw() : nullptr, _7896 ? _7896->size(0) : 0);
  _checked_ptr_1<int> _ptr__7897(_7897 ? _7897->raw() : nullptr, _7897 ? _7897->size(0) : 0);
  _checked_ptr_1<double> _ptr__7898(_7898 ? _7898->raw() : nullptr, _7898 ? _7898->size(0) : 0);
  int _7899 = (int)0;
  int _7900 = (int)0;
  int _7901 = (int)((_7896)->size(0));
  if ((_7901 > (int)((_7897)->size(0))))
  {
    {
      _7901 = (int)((_7897)->size(0));
    }
  }
  {}
  if ((_7901 > (int)((_7898)->size(0))))
  {
    {
      _7901 = (int)((_7898)->size(0));
    }
  }
  {}
  int _12326 = (int)0;
  int _12327 = _7901;
  for (int _7902 = _12326; _7902 < _12327; ++_7902)
  {
    {
      if ((_7900 < _ptr__7896[_7902]))
      {
        {
          _7900 = _ptr__7896[_7902];
        }
      }
      {}
      if ((_7899 < _ptr__7897[_7902]))
      {
        {
          _7899 = _ptr__7897[_7902];
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Matrix::sparse(safe_add( _7900,(int)1 ),safe_add( _7899,(int)1 ),_7896,_7897,_7898);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( int _7903,    int _7904,    std::shared_ptr< monty::ndarray< int,1 > > _7905,    std::shared_ptr< monty::ndarray< int,1 > > _7906,    std::shared_ptr< monty::ndarray< double,1 > > _7907) { return mosek::fusion::p_Matrix::sparse(_7903,_7904,_7905,_7906,_7907); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(int _7903,int _7904,std::shared_ptr< monty::ndarray< int,1 > > _7905,std::shared_ptr< monty::ndarray< int,1 > > _7906,std::shared_ptr< monty::ndarray< double,1 > > _7907){
  _checked_ptr_1<int> _ptr__7905(_7905 ? _7905->raw() : nullptr, _7905 ? _7905->size(0) : 0);
  _checked_ptr_1<int> _ptr__7906(_7906 ? _7906->raw() : nullptr, _7906 ? _7906->size(0) : 0);
  _checked_ptr_1<double> _ptr__7907(_7907 ? _7907->raw() : nullptr, _7907 ? _7907->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _12328;
  bool _12329 = (NULL != _7907.get());
  if (_12329)
  {
    _12328 = _7907;
  }
  else
  {
    _12328 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0)));
  }
  std::shared_ptr< monty::ndarray< double,1 > > _7908 = _12328;
  _checked_ptr_1<double> _ptr__7908(_7908 ? _7908->raw() : nullptr,_7908 ? _7908->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _12330;
  bool _12331 = (NULL != _7906.get());
  if (_12331)
  {
    _12330 = _7906;
  }
  else
  {
    _12330 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
  }
  std::shared_ptr< monty::ndarray< int,1 > > _7909 = _12330;
  _checked_ptr_1<int> _ptr__7909(_7909 ? _7909->raw() : nullptr,_7909 ? _7909->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _12332;
  bool _12333 = (NULL != _7905.get());
  if (_12333)
  {
    _12332 = _7905;
  }
  else
  {
    _12332 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
  }
  std::shared_ptr< monty::ndarray< int,1 > > _7910 = _12332;
  _checked_ptr_1<int> _ptr__7910(_7910 ? _7910->raw() : nullptr,_7910 ? _7910->size(0) : 0);
  long long _7911 = (long long)((_7910)->size(0));
  if ((((long long)((_7909)->size(0)) != _7911) || ((long long)((_7908)->size(0)) != _7911)))
  {
    {
      throw ::mosek::fusion::SparseFormatError(std::string ("Arrays defining sparse data have different lengths"));
    }
  }
  {}
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_7903,_7904,_7910,_7909,_7908,_7911)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix :: transpose() { return __mosek_2fusion_2Matrix__transpose(); }
int mosek::fusion::Matrix :: numColumns() { return mosek::fusion::p_Matrix::_get_impl(this)->numColumns(); }int mosek::fusion::p_Matrix::numColumns(){
  return dimj;
}
int mosek::fusion::Matrix :: numRows() { return mosek::fusion::p_Matrix::_get_impl(this)->numRows(); }int mosek::fusion::p_Matrix::numRows(){
  return dimi;
}
void mosek::fusion::p_Matrix::destroy(){}void mosek::fusion::Matrix::destroy() { mosek::fusion::p_Matrix::_get_impl(this)->destroy(); }mosek::fusion::UnimplementedError::UnimplementedError  ( const std::string &  _7917) : RuntimeException(_7917)  {
  }
mosek::fusion::FatalError::FatalError  ( const std::string &  _7918) : RuntimeException(_7918)  {
  }
mosek::fusion::UnexpectedError::UnexpectedError  ( ::mosek::fusion::FusionException _7919) : RuntimeException(_7919.toString())  {
  }
mosek::fusion::UnexpectedError::UnexpectedError  ( const std::string &  _7920) : RuntimeException(_7920)  {
  }
mosek::fusion::SparseFormatError::SparseFormatError  ( const std::string &  _7921) : mosek::fusion::FusionRuntimeException(_7921)  {
  }
mosek::fusion::SolutionError::SolutionError  ( ) : mosek::fusion::FusionException(std::string ("Solution is invalid or undefined"))  {
  }
mosek::fusion::SolutionError::SolutionError  ( const std::string &  _7922) : mosek::fusion::FusionException(_7922)  {
  }
mosek::fusion::SliceError::SliceError  ( ) : mosek::fusion::FusionRuntimeException(std::string ("Invalid slice range"))  {
  }
mosek::fusion::SliceError::SliceError  ( const std::string &  _7923) : mosek::fusion::FusionRuntimeException(_7923)  {
  }
mosek::fusion::UpdateError::UpdateError  ( ) : mosek::fusion::FusionRuntimeException(std::string ("Cannot update parameterized item"))  {
  }
mosek::fusion::UpdateError::UpdateError  ( const std::string &  _7924) : mosek::fusion::FusionRuntimeException(_7924)  {
  }
mosek::fusion::SetDefinitionError::SetDefinitionError  ( const std::string &  _7925) : mosek::fusion::FusionRuntimeException(_7925)  {
  }
mosek::fusion::OptimizeError::OptimizeError  ( const std::string &  _7926) : mosek::fusion::FusionRuntimeException(_7926)  {
  }
mosek::fusion::NameError::NameError  ( const std::string &  _7927) : mosek::fusion::FusionRuntimeException(_7927)  {
  }
mosek::fusion::DeletionError::DeletionError  ( const std::string &  _7928) : mosek::fusion::FusionRuntimeException(_7928)  {
  }
mosek::fusion::ModelError::ModelError  ( const std::string &  _7929) : mosek::fusion::FusionRuntimeException(_7929)  {
  }
mosek::fusion::MatrixError::MatrixError  ( const std::string &  _7930) : mosek::fusion::FusionRuntimeException(_7930)  {
  }
mosek::fusion::DimensionError::DimensionError  ( const std::string &  _7931) : mosek::fusion::FusionRuntimeException(_7931)  {
  }
mosek::fusion::LengthError::LengthError  ( const std::string &  _7932) : mosek::fusion::FusionRuntimeException(_7932)  {
  }
mosek::fusion::RangeError::RangeError  ( const std::string &  _7933) : mosek::fusion::FusionRuntimeException(_7933)  {
  }
mosek::fusion::IndexError::IndexError  ( const std::string &  _7934) : mosek::fusion::FusionRuntimeException(_7934)  {
  }
mosek::fusion::DomainError::DomainError  ( const std::string &  _7935) : mosek::fusion::FusionRuntimeException(_7935)  {
  }
mosek::fusion::ValueConversionError::ValueConversionError  ( const std::string &  _7936) : mosek::fusion::FusionRuntimeException(_7936)  {
  }
mosek::fusion::ParameterError::ParameterError  ( const std::string &  _7937) : mosek::fusion::FusionRuntimeException(_7937)  {
  }
mosek::fusion::ExpressionError::ExpressionError  ( const std::string &  _7938) : mosek::fusion::FusionRuntimeException(_7938)  {
  }
mosek::fusion::IOError::IOError  ( const std::string &  _7939) : mosek::fusion::FusionRuntimeException(_7939)  {
  }
mosek::fusion::FusionRuntimeException::FusionRuntimeException  ( const std::string &  _7940) : RuntimeException(_7940)  {
    msg = _7940;
  }
std::string mosek::fusion::FusionRuntimeException::toString(){
  return msg;
}
mosek::fusion::FusionException::FusionException  ( const std::string &  _7941) : Exception(_7941)  {
    msg = _7941;
  }
std::string mosek::fusion::FusionException::toString(){
  return msg;
}
mosek::fusion::LinkedBlocks::LinkedBlocks(mosek::fusion::p_LinkedBlocks *_impl) : _impl(_impl) { /*std::cout << "LinkedBlocks() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::LinkedBlocks::~LinkedBlocks() { delete _impl; _impl = nullptr; }mosek::fusion::p_LinkedBlocks::p_LinkedBlocks  (::mosek::fusion::LinkedBlocks * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::LinkedBlocks::t mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks  (){ return new mosek::fusion::LinkedBlocks(); }mosek::fusion::LinkedBlocks::LinkedBlocks  () :    LinkedBlocks(new mosek::fusion::p_LinkedBlocks(this)){ mosek::fusion::p_LinkedBlocks::_get_impl(this)->_initialize(); }void mosek::fusion::p_LinkedBlocks::_initialize  (){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_LinkedBlocks::_initialize((int)0);
  }
}mosek::fusion::LinkedBlocks::t mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks  (int _7942){ return new mosek::fusion::LinkedBlocks(_7942); }mosek::fusion::LinkedBlocks::LinkedBlocks  (int _7942) :    LinkedBlocks(new mosek::fusion::p_LinkedBlocks(this)){ mosek::fusion::p_LinkedBlocks::_get_impl(this)->_initialize(_7942); }void mosek::fusion::p_LinkedBlocks::_initialize  (int _7942){monty::rc_reserve __reserve_this(_pubthis);   {
    ints = ::mosek::fusion::p_LinkedInts::_new_LinkedInts(_7942);
    blocks = ::mosek::fusion::p_LinkedInts::_new_LinkedInts((int)128);
    bsize = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)128)));
    bfirst = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)128)));
  }
}mosek::fusion::LinkedBlocks::t mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks  (monty::rc_ptr< ::mosek::fusion::LinkedBlocks > _7943){ return new mosek::fusion::LinkedBlocks(_7943); }mosek::fusion::LinkedBlocks::LinkedBlocks  (monty::rc_ptr< ::mosek::fusion::LinkedBlocks > _7943) :    LinkedBlocks(new mosek::fusion::p_LinkedBlocks(this)){ mosek::fusion::p_LinkedBlocks::_get_impl(this)->_initialize(_7943); }void mosek::fusion::p_LinkedBlocks::_initialize  (monty::rc_ptr< ::mosek::fusion::LinkedBlocks > _7943){monty::rc_reserve __reserve_this(_pubthis);   {
    ints = ::mosek::fusion::p_LinkedInts::_new_LinkedInts(mosek::fusion::p_LinkedBlocks::_get_impl(_7943)->ints);
    blocks = ::mosek::fusion::p_LinkedInts::_new_LinkedInts(mosek::fusion::p_LinkedBlocks::_get_impl(_7943)->blocks);
    bsize = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinkedBlocks::_get_impl(_7943)->bsize);
    bfirst = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinkedBlocks::_get_impl(_7943)->bfirst);
  }
}void mosek::fusion::LinkedBlocks :: free(int _7944) { mosek::fusion::p_LinkedBlocks::_get_impl(this)->free(_7944); }void mosek::fusion::p_LinkedBlocks::free(int _7944){
  int _7945 = ((*bfirst)(_7944));
  ints->free(_7945,((*bsize)(_7944)));
  ((*bsize)(_7944)) = (-(int)1);
  ((*bfirst)(_7944)) = (-(int)1);
  blocks->free(_7944,(int)1);
}
int mosek::fusion::LinkedBlocks :: alloc(int _7946) { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->alloc(_7946); }int mosek::fusion::p_LinkedBlocks::alloc(int _7946){
  int _12334;
  bool _12335 = (_7946 > (int)0);
  if (_12335)
  {
    _12334 = ints->alloc(_7946);
  }
  else
  {
    _12334 = (-(int)1);
  }
  int _7947 = _12334;
  int _7948 = blocks->alloc();
  if ((blocks->capacity() > (int)((bsize)->size(0))))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _7949 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(blocks->capacity())));
      _checked_ptr_1<int> _ptr__7949(_7949 ? _7949->raw() : nullptr,_7949 ? _7949->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _7950 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(blocks->capacity())));
      _checked_ptr_1<int> _ptr__7950(_7950 ? _7950->raw() : nullptr,_7950 ? _7950->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(bsize,(int)0,_7949,(int)0,(int)((bsize)->size(0)));
      ::mosek::fusion::Utils::Tools::arraycopy(bfirst,(int)0,_7950,(int)0,(int)((bfirst)->size(0)));
      bsize = _7949;
      bfirst = _7950;
    }
  }
  {}
  ((*bfirst)(_7948)) = _7947;
  ((*bsize)(_7948)) = _7946;
  return _7948;
}
int mosek::fusion::LinkedBlocks :: maxidx(int _7951) { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->maxidx(_7951); }int mosek::fusion::p_LinkedBlocks::maxidx(int _7951){
  return ints->maxidx(((*bfirst)(_7951)),((*bsize)(_7951)));
}
void mosek::fusion::LinkedBlocks :: get(int _7952,std::shared_ptr< monty::ndarray< int,1 > > _7953,int _7954) { mosek::fusion::p_LinkedBlocks::_get_impl(this)->get(_7952,_7953,_7954); }void mosek::fusion::p_LinkedBlocks::get(int _7952,std::shared_ptr< monty::ndarray< int,1 > > _7953,int _7954){
  _checked_ptr_1<int> _ptr__7953(_7953 ? _7953->raw() : nullptr, _7953 ? _7953->size(0) : 0);
  ints->get(((*bfirst)(_7952)),((*bsize)(_7952)),_7953,_7954);
}
int mosek::fusion::LinkedBlocks :: numblocks() { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->numblocks(); }int mosek::fusion::p_LinkedBlocks::numblocks(){
  return (int)((bsize)->size(0));
}
int mosek::fusion::LinkedBlocks :: blocksize(int _7955) { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->blocksize(_7955); }int mosek::fusion::p_LinkedBlocks::blocksize(int _7955){
  return ((*bsize)(_7955));
}
int mosek::fusion::LinkedBlocks :: capacity() { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->capacity(); }int mosek::fusion::p_LinkedBlocks::capacity(){
  return ints->capacity();
}
bool mosek::fusion::LinkedBlocks :: validate() { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->validate(); }bool mosek::fusion::p_LinkedBlocks::validate(){
  return (ints->validate() && blocks->validate());
}
void mosek::fusion::p_LinkedBlocks::destroy(){bfirst.reset();bsize.reset();blocks.reset();ints.reset();}void mosek::fusion::LinkedBlocks::destroy() { mosek::fusion::p_LinkedBlocks::_get_impl(this)->destroy(); }mosek::fusion::LinkedInts::LinkedInts(mosek::fusion::p_LinkedInts *_impl) : _impl(_impl) { /*std::cout << "LinkedInts() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::LinkedInts::~LinkedInts() { delete _impl; _impl = nullptr; }mosek::fusion::p_LinkedInts::p_LinkedInts  (::mosek::fusion::LinkedInts * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::LinkedInts::t mosek::fusion::p_LinkedInts::_new_LinkedInts  (int _7956){ return new mosek::fusion::LinkedInts(_7956); }mosek::fusion::LinkedInts::LinkedInts  (int _7956) :    LinkedInts(new mosek::fusion::p_LinkedInts(this)){ mosek::fusion::p_LinkedInts::_get_impl(this)->_initialize(_7956); }void mosek::fusion::p_LinkedInts::_initialize  (int _7956){monty::rc_reserve __reserve_this(_pubthis);   {
    int _12336;
    bool _12337 = (_7956 > (int)0);
    if (_12337)
    {
      _12336 = _7956;
    }
    else
    {
      _12336 = (int)128;
    }
    int _7957 = _12336;
    next = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7957)));
    prev = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7957)));
    first_used = (-(int)1);
    first_free = (int)0;
    last_free = (_7957 - (int)1);
    int _12338 = (int)1;
    int _12339 = _7957;
    for (int _7958 = _12338; _7958 < _12339; ++_7958)
    {
      {
        ((*prev)(_7958)) = (_7958 - (int)1);
        ((*next)((_7958 - (int)1))) = _7958;
      }
    }
    ((*prev)((int)0)) = (-(int)1);
    ((*next)((_7957 - (int)1))) = (-(int)1);
    nfree = _7957;
  }
}mosek::fusion::LinkedInts::t mosek::fusion::p_LinkedInts::_new_LinkedInts  (){ return new mosek::fusion::LinkedInts(); }mosek::fusion::LinkedInts::LinkedInts  () :    LinkedInts(new mosek::fusion::p_LinkedInts(this)){ mosek::fusion::p_LinkedInts::_get_impl(this)->_initialize(); }void mosek::fusion::p_LinkedInts::_initialize  (){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_LinkedInts::_initialize((int)128);
  }
}mosek::fusion::LinkedInts::t mosek::fusion::p_LinkedInts::_new_LinkedInts  (monty::rc_ptr< ::mosek::fusion::LinkedInts > _7959){ return new mosek::fusion::LinkedInts(_7959); }mosek::fusion::LinkedInts::LinkedInts  (monty::rc_ptr< ::mosek::fusion::LinkedInts > _7959) :    LinkedInts(new mosek::fusion::p_LinkedInts(this)){ mosek::fusion::p_LinkedInts::_get_impl(this)->_initialize(_7959); }void mosek::fusion::p_LinkedInts::_initialize  (monty::rc_ptr< ::mosek::fusion::LinkedInts > _7959){monty::rc_reserve __reserve_this(_pubthis);   {
    next = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinkedInts::_get_impl(_7959)->next);
    prev = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinkedInts::_get_impl(_7959)->prev);
    first_used = mosek::fusion::p_LinkedInts::_get_impl(_7959)->first_used;
    first_free = mosek::fusion::p_LinkedInts::_get_impl(_7959)->first_free;
    last_free = mosek::fusion::p_LinkedInts::_get_impl(_7959)->last_free;
    nfree = mosek::fusion::p_LinkedInts::_get_impl(_7959)->nfree;
  }
}void mosek::fusion::LinkedInts :: free(int _7960,int _7961) { mosek::fusion::p_LinkedInts::_get_impl(this)->free(_7960,_7961); }void mosek::fusion::p_LinkedInts::free(int _7960,int _7961){
  int _7962 = _7960;
  int _7963 = _7962;
  int _12340 = (int)0;
  int _12341 = (_7961 - (int)1);
  for (int _7964 = _12340; _7964 < _12341; ++_7964)
  {
    {
      _7963 = ((*next)(_7963));
    }
  }
  int _7965 = ((*prev)(_7962));
  int _7966 = ((*next)(_7963));
  if ((_7965 >= (int)0))
  {
    {
      ((*next)(_7965)) = _7966;
    }
  }
  else
  {
    {
      first_used = _7966;
    }
  }
  if ((_7966 >= (int)0))
  {
    {
      ((*prev)(_7966)) = _7965;
    }
  }
  {}
  ((*prev)(_7962)) = (-(int)1);
  ((*next)(_7963)) = first_free;
  if ((first_free >= (int)0))
  {
    {
      ((*prev)(first_free)) = _7963;
    }
  }
  {}
  first_free = _7962;
  nfree += _7961;
}
int mosek::fusion::LinkedInts :: alloc() { return mosek::fusion::p_LinkedInts::_get_impl(this)->alloc(); }int mosek::fusion::p_LinkedInts::alloc(){
  return allocblock((int)1);
}
int mosek::fusion::LinkedInts :: alloc(int _7967) { return mosek::fusion::p_LinkedInts::_get_impl(this)->alloc(_7967); }int mosek::fusion::p_LinkedInts::alloc(int _7967){
  return allocblock(_7967);
}
void mosek::fusion::LinkedInts :: alloc(int _7968,std::shared_ptr< monty::ndarray< int,1 > > _7969,int _7970) { mosek::fusion::p_LinkedInts::_get_impl(this)->alloc(_7968,_7969,_7970); }void mosek::fusion::p_LinkedInts::alloc(int _7968,std::shared_ptr< monty::ndarray< int,1 > > _7969,int _7970){
  _checked_ptr_1<int> _ptr__7969(_7969 ? _7969->raw() : nullptr, _7969 ? _7969->size(0) : 0);
  int _7971 = allocblock(_7968);
  int _12342 = (int)0;
  int _12343 = _7968;
  for (int _7972 = _12342; _7972 < _12343; ++_7972)
  {
    {
      _ptr__7969[safe_add( _7972,_7970 )] = _7971;
      _7971 = ((*next)(_7971));
    }
  }
}
void mosek::fusion::LinkedInts :: get(int _7973,int _7974,std::shared_ptr< monty::ndarray< int,1 > > _7975,int _7976) { mosek::fusion::p_LinkedInts::_get_impl(this)->get(_7973,_7974,_7975,_7976); }void mosek::fusion::p_LinkedInts::get(int _7973,int _7974,std::shared_ptr< monty::ndarray< int,1 > > _7975,int _7976){
  _checked_ptr_1<int> _ptr__7975(_7975 ? _7975->raw() : nullptr, _7975 ? _7975->size(0) : 0);
  int _7977 = _7973;
  int _12344 = (int)0;
  int _12345 = _7974;
  for (int _7978 = _12344; _7978 < _12345; ++_7978)
  {
    {
      _ptr__7975[safe_add( _7978,_7976 )] = _7977;
      _7977 = ((*next)(_7977));
    }
  }
}
int mosek::fusion::LinkedInts :: maxidx(int _7979,int _7980) { return mosek::fusion::p_LinkedInts::_get_impl(this)->maxidx(_7979,_7980); }int mosek::fusion::p_LinkedInts::maxidx(int _7979,int _7980){
  int _7981 = _7979;
  int _7982 = _7979;
  int _12346 = (int)1;
  int _12347 = _7980;
  for (int _7983 = _12346; _7983 < _12347; ++_7983)
  {
    {
      _7982 = ((*next)(_7982));
      if ((_7981 < _7982))
      {
        {
          _7981 = _7982;
        }
      }
      {}
    }
  }
  return _7981;
}
int mosek::fusion::p_LinkedInts::allocblock(int _7984){
  int _7985 = (int)((next)->size(0));
  if ((nfree < _7984))
  {
    {
      int _7986 = (_7984 - nfree);
      if ((_7986 < _7985))
      {
        {
          _7986 = _7985;
        }
      }
      {}
      recap(safe_add( _7986,_7985 ));
    }
  }
  {}
  int _7987 = first_free;
  int _7988 = _7987;
  int _12348 = (int)0;
  int _12349 = (_7984 - (int)1);
  for (int _7989 = _12348; _7989 < _12349; ++_7989)
  {
    {
      _7988 = ((*next)(_7988));
    }
  }
  first_free = ((*next)(_7988));
  if ((first_free < (int)0))
  {
    {
      last_free = (-(int)1);
    }
  }
  else
  {
    {
      ((*prev)(first_free)) = (-(int)1);
    }
  }
  ((*next)(_7988)) = first_used;
  if ((first_used >= (int)0))
  {
    {
      ((*prev)(first_used)) = _7988;
    }
  }
  {}
  first_used = _7987;
  nfree -= _7984;
  return _7987;
}
void mosek::fusion::p_LinkedInts::recap(int _7990){
  int _7991 = (int)((next)->size(0));
  if ((_7990 > _7991))
  {
    {
      next = ::mosek::fusion::p_CommonTools::resize(next,_7990);
      prev = ::mosek::fusion::p_CommonTools::resize(prev,_7990);
      int _12350 = _7991;
      int _12351 = (_7990 - (int)1);
      for (int _7992 = _12350; _7992 < _12351; ++_7992)
      {
        {
          ((*next)(_7992)) = safe_add( _7992,(int)1 );
          ((*prev)(safe_add( _7992,(int)1 ))) = _7992;
        }
      }
      ((*next)((_7990 - (int)1))) = (-(int)1);
      ((*prev)(_7991)) = last_free;
      if ((last_free < (int)0))
      {
        {
          first_free = _7991;
        }
      }
      else
      {
        {
          ((*next)(last_free)) = _7991;
        }
      }
      last_free = (_7990 - (int)1);
      nfree += (_7990 - _7991);
    }
  }
  {}
}
int mosek::fusion::LinkedInts :: capacity() { return mosek::fusion::p_LinkedInts::_get_impl(this)->capacity(); }int mosek::fusion::p_LinkedInts::capacity(){
  return (int)((next)->size(0));
}
bool mosek::fusion::LinkedInts :: validate() { return mosek::fusion::p_LinkedInts::_get_impl(this)->validate(); }bool mosek::fusion::p_LinkedInts::validate(){
  std::shared_ptr< monty::ndarray< bool,1 > > _7993 = std::shared_ptr< monty::ndarray< bool,1 > >(new monty::ndarray< bool,1 >(monty::shape((int)((next)->size(0)))));
  int _7994 = first_used;
  while ( (_7994 >= (int)0) )
  {
    {
      ((*_7993)(_7994)) = true;
      _7994 = ((*next)(_7994));
      if (((_7994 >= (int)0) && ((*_7993)(_7994))))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("used list/next is inconsistent"));
        }
      }
      {}
    }
  }
  _7994 = first_free;
  int _7995 = (int)0;
  while ( (_7994 >= (int)0) )
  {
    {
      ++ _7995;
      ((*_7993)(_7994)) = true;
      _7994 = ((*next)(_7994));
      if (((_7994 >= (int)0) && ((*_7993)(_7994))))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("free list/next is inconsistent"));
        }
      }
      {}
    }
  }
  if ((_7995 != nfree))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("free next list did not contain nfree elements"));
    }
  }
  {}
  int _12352 = (int)0;
  int _12353 = (int)((_7993)->size(0));
  for (int _7996 = _12352; _7996 < _12353; ++_7996)
  {
    {
      if ((!((*_7993)(_7994))))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("elements missing from used+free list"));
        }
      }
      {}
    }
  }
  int _12354 = (int)0;
  int _12355 = (int)((_7993)->size(0));
  for (int _7997 = _12354; _7997 < _12355; ++_7997)
  {
    {
      ((*_7993)(_7997)) = false;
    }
  }
  _7994 = last_free;
  int _7998 = (int)0;
  while ( (_7994 >= (int)0) )
  {
    {
      ++ _7998;
      ((*_7993)(_7994)) = true;
      _7994 = ((*prev)(_7994));
      if (((_7994 >= (int)0) && ((*_7993)(_7994))))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("prev list is inconsistent"));
        }
      }
      {}
    }
  }
  if ((_7998 != nfree))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("free prev list did not contain nfree elements"));
    }
  }
  {}
  return true;
}
void mosek::fusion::p_LinkedInts::destroy(){prev.reset();next.reset();}void mosek::fusion::LinkedInts::destroy() { mosek::fusion::p_LinkedInts::_get_impl(this)->destroy(); }mosek::fusion::Parameters::Parameters(mosek::fusion::p_Parameters *_impl) : _impl(_impl) { /*std::cout << "Parameters() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Parameters::~Parameters() { delete _impl; _impl = nullptr; }mosek::fusion::p_Parameters::p_Parameters  (::mosek::fusion::Parameters * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::Parameters::setParameter  ( monty::rc_ptr< ::mosek::fusion::Model > _7999,    const std::string & _8000,    double _8001) { mosek::fusion::p_Parameters::setParameter(_7999,_8000,_8001); }void mosek::fusion::p_Parameters::setParameter(monty::rc_ptr< ::mosek::fusion::Model > _7999,const std::string & _8000,double _8001){
  if (false)
  {
    {
    }
  }
  else if((_8000 == std::string ("autoUpdateSolInfo")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (autoUpdateSolInfo)"));
    }
  }
  else if((_8000 == std::string ("removeUnusedSolutions")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (removeUnusedSolutions)"));
    }
  }
  {}
  if ((_8000 == std::string ("numThreads")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8002 = _8001;
          if (((int)0 <= _8002))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_NUM_THREADS"),_8002);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
        }
      }
    }
  }
  else if((_8000 == std::string ("intpntMultiThread")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMultiThread)"));
    }
  }
  {}
  if ((_8000 == std::string ("mtSpincount")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8003 = _8001;
          if ((((int)0 <= _8003) && (_8003 <= (int)1000000000)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_MT_SPINCOUNT"),_8003);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
        }
      }
    }
  }
  else if((_8000 == std::string ("optimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizer)"));
    }
  }
  {}
  if ((_8000 == std::string ("biMaxIterations")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8004 = _8001;
          if (((int)0 <= _8004))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_BI_MAX_ITERATIONS"),_8004);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("licenseTrhExpiryWrn")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8005 = _8001;
          if (((int)0 <= _8005))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_TRH_EXPIRY_WRN"),_8005);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("logCutSecondOpt")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8006 = _8001;
          if (((int)0 <= _8006))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_LOG_CUT_SECOND_OPT"),_8006);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("logResponse")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8007 = _8001;
          if (((int)0 <= _8007))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_LOG_RESPONSE"),_8007);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));
        }
      }
    }
  }
  else if((_8000 == std::string ("logLocalInfo")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logLocalInfo)"));
    }
  }
  {}
  if ((_8000 == std::string ("logBi")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8008 = _8001;
          if (((int)0 <= _8008))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI"),_8008);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("logBiFreq")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8009 = _8001;
          if (((int)0 <= _8009))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI_FREQ"),_8009);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
        }
      }
    }
  }
  else if((_8000 == std::string ("biCleanOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biCleanOptimizer)"));
    }
  }
  else if((_8000 == std::string ("intpntStartingPoint")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntStartingPoint)"));
    }
  }
  else if((_8000 == std::string ("intpntDiffStep")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntDiffStep)"));
    }
  }
  else if((_8000 == std::string ("intpntScaling")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntScaling)"));
    }
  }
  else if((_8000 == std::string ("intpntSolveForm")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntSolveForm)"));
    }
  }
  {}
  if ((_8000 == std::string ("logIntpnt")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8010 = _8001;
          if (((int)0 <= _8010))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_LOG_INTPNT"),_8010);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("intpntMaxIterations")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8011 = _8001;
          if (((int)0 <= _8011))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_ITERATIONS"),_8011);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("intpntOffColTrh")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8012 = _8001;
          if (((int)0 <= _8012))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_OFF_COL_TRH"),_8012);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
        }
      }
    }
  }
  else if((_8000 == std::string ("intpntOrderMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderMethod)"));
    }
  }
  {}
  if ((_8000 == std::string ("intpntOrderGpNumSeeds")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8013 = _8001;
          if (((int)0 <= _8013))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_ORDER_GP_NUM_SEEDS"),_8013);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
        }
      }
    }
  }
  else if((_8000 == std::string ("intpntBasis")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntBasis)"));
    }
  }
  else if((_8000 == std::string ("biIgnoreMaxIter")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreMaxIter)"));
    }
  }
  else if((_8000 == std::string ("biIgnoreNumError")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreNumError)"));
    }
  }
  {}
  if ((_8000 == std::string ("intpntMaxNumCor")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8014 = _8001;
          if (((-(int)1) <= _8014))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_NUM_COR"),_8014);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
        }
      }
    }
  }
  else if((_8000 == std::string ("presolveUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveUse)"));
    }
  }
  {}
  if ((_8000 == std::string ("presolveLevel")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8015 = _8001;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LEVEL"),_8015);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("logPresolve")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8016 = _8001;
          if (((int)0 <= _8016))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_LOG_PRESOLVE"),_8016);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
        }
      }
    }
  }
  else if((_8000 == std::string ("presolveLindepUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepUse)"));
    }
  }
  {}
  if ((_8000 == std::string ("presolveMaxNumPass")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8017 = _8001;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_MAX_NUM_PASS"),_8017);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("presolveEliminatorMaxNumTries")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8018 = _8001;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_NUM_TRIES"),_8018);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("presolveEliminatorMaxFill")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8019 = _8001;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_FILL"),_8019);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("simPrimalCrash")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8020 = _8001;
          if (((int)0 <= _8020))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_CRASH"),_8020);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("logSim")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8021 = _8001;
          if (((int)0 <= _8021))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM"),_8021);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("logSimMinor")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8022 = _8001;
          if (((int)0 <= _8022))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_MINOR"),_8022);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("logSimFreq")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8023 = _8001;
          if (((int)0 <= _8023))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_FREQ"),_8023);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("simPrimalRestrictSelection")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8024 = _8001;
          if ((((int)0 <= _8024) && (_8024 <= (int)100)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_RESTRICT_SELECTION"),_8024);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
        }
      }
    }
  }
  else if((_8000 == std::string ("simPrimalSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalSelection)"));
    }
  }
  {}
  if ((_8000 == std::string ("simDualRestrictSelection")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8025 = _8001;
          if ((((int)0 <= _8025) && (_8025 <= (int)100)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_RESTRICT_SELECTION"),_8025);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
        }
      }
    }
  }
  else if((_8000 == std::string ("simDualSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualSelection)"));
    }
  }
  {}
  if ((_8000 == std::string ("simMaxIterations")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8026 = _8001;
          if (((int)0 <= _8026))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_ITERATIONS"),_8026);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
        }
      }
    }
  }
  else if((_8000 == std::string ("simHotstartLu")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstartLu)"));
    }
  }
  {}
  if ((_8000 == std::string ("simRefactorFreq")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8027 = _8001;
          if (((int)0 <= _8027))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFACTOR_FREQ"),_8027);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("simSeed")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8028 = _8001;
          if ((((int)0 <= _8028) && (_8028 <= (int)32749)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_SIM_SEED"),_8028);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
        }
      }
    }
  }
  else if((_8000 == std::string ("mioMode")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMode)"));
    }
  }
  {}
  if ((_8000 == std::string ("logMio")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8029 = _8001;
          if (((int)0 <= _8029))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO"),_8029);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("logMioFreq")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8030 = _8001;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO_FREQ"),_8030);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("mioMaxNumRelaxs")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8031 = _8001;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_RELAXS"),_8031);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("mioMaxNumBranches")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8032 = _8001;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_BRANCHES"),_8032);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("mioMaxNumRootCutRounds")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8033 = _8001;
          if (((int)0 <= _8033))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_ROOT_CUT_ROUNDS"),_8033);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("mioMaxNumSolutions")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8034 = _8001;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_SOLUTIONS"),_8034);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
        }
      }
    }
  }
  else if((_8000 == std::string ("mioNodeSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeSelection)"));
    }
  }
  {}
  if ((_8000 == std::string ("mioHeuristicLevel")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8035 = _8001;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_MIO_HEURISTIC_LEVEL"),_8035);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("mioProbingLevel")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8036 = _8001;
          if ((((-(int)1) <= _8036) && (_8036 <= (int)3)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROBING_LEVEL"),_8036);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("mioCutSelectionLevel")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8037 = _8001;
          if ((((-(int)1) <= _8037) && (_8037 <= (int)1)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_SELECTION_LEVEL"),_8037);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("mioVbDetectionLevel")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8038 = _8001;
          if ((((-(int)1) <= _8038) && (_8038 <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_MIO_VB_DETECTION_LEVEL"),_8038);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
        }
      }
    }
  }
  else if((_8000 == std::string ("mioBranchDir")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioBranchDir)"));
    }
  }
  else if((_8000 == std::string ("mioRootOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootOptimizer)"));
    }
  }
  else if((_8000 == std::string ("mioNodeOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeOptimizer)"));
    }
  }
  else if((_8000 == std::string ("mioPerspectiveReformulate")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPerspectiveReformulate)"));
    }
  }
  else if((_8000 == std::string ("mioPropagateObjectiveConstraint")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPropagateObjectiveConstraint)"));
    }
  }
  {}
  if ((_8000 == std::string ("mioSeed")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8039 = _8001;
          if (((int)0 <= _8039))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_MIO_SEED"),_8039);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
        }
      }
    }
  }
  else if((_8000 == std::string ("mioConicOuterApproximation")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConicOuterApproximation)"));
    }
  }
  else if((_8000 == std::string ("writeLpQuotedNames")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpQuotedNames)"));
    }
  }
  {}
  if ((_8000 == std::string ("writeLpLineWidth")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8040 = _8001;
          if (((int)40 <= _8040))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_LINE_WIDTH"),_8040);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("writeLpTermsPerLine")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8041 = _8001;
          if (((int)0 <= _8041))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_TERMS_PER_LINE"),_8041);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));
        }
      }
    }
  }
  else if((_8000 == std::string ("writeLpFullObj")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpFullObj)"));
    }
  }
  {}
  if ((_8000 == std::string ("logInfeasAna")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8042 = _8001;
          if (((int)0 <= _8042))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_LOG_INFEAS_ANA"),_8042);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));
        }
      }
    }
  }
  else if((_8000 == std::string ("licenseWait")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseWait)"));
    }
  }
  else if((_8000 == std::string ("licenseSuppressExpireWrns")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseSuppressExpireWrns)"));
    }
  }
  {}
  if ((_8000 == std::string ("licensePauseTime")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8043 = _8001;
          if ((((int)0 <= _8043) && (_8043 <= (int)1000000)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_PAUSE_TIME"),_8043);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
        }
      }
    }
  }
  else if((_8000 == std::string ("licenseDebug")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseDebug)"));
    }
  }
  {}
  if ((_8000 == std::string ("log")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8044 = _8001;
          if (((int)0 <= _8044))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_LOG"),_8044);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("logExpand")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8045 = _8001;
          if (((int)0 <= _8045))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_LOG_EXPAND"),_8045);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("logFile")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8046 = _8001;
          if (((int)0 <= _8046))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_LOG_FILE"),_8046);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("logOrder")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8047 = _8001;
          if (((int)0 <= _8047))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_LOG_ORDER"),_8047);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
        }
      }
    }
  }
  else if((_8000 == std::string ("simScaling")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScaling)"));
    }
  }
  else if((_8000 == std::string ("simScalingMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScalingMethod)"));
    }
  }
  {}
  if ((_8000 == std::string ("simPrimalPhaseoneMethod")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8048 = _8001;
          if ((((int)0 <= _8048) && (_8048 <= (int)10)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_PHASEONE_METHOD"),_8048);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("simDualPhaseoneMethod")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8049 = _8001;
          if ((((int)0 <= _8049) && (_8049 <= (int)10)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_PHASEONE_METHOD"),_8049);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("simMaxNumSetbacks")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8050 = _8001;
          if (((int)0 <= _8050))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_NUM_SETBACKS"),_8050);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
        }
      }
    }
  }
  else if((_8000 == std::string ("simHotstart")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstart)"));
    }
  }
  else if((_8000 == std::string ("simBasisFactorUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simBasisFactorUse)"));
    }
  }
  else if((_8000 == std::string ("simDegen")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDegen)"));
    }
  }
  else if((_8000 == std::string ("simReformulation")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simReformulation)"));
    }
  }
  else if((_8000 == std::string ("simExploitDupvec")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simExploitDupvec)"));
    }
  }
  else if((_8000 == std::string ("simSaveLu")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSaveLu)"));
    }
  }
  else if((_8000 == std::string ("simNonSingular")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simNonSingular)"));
    }
  }
  {}
  if ((_8000 == std::string ("simDualCrash")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8051 = _8001;
          if (((int)0 <= _8051))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_CRASH"),_8051);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
        }
      }
    }
  }
  else if((_8000 == std::string ("infeasPreferPrimal")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (infeasPreferPrimal)"));
    }
  }
  {}
  if ((_8000 == std::string ("mioRootRepeatPresolveLevel")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8052 = _8001;
          if ((((-(int)1) <= _8052) && (_8052 <= (int)1)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_REPEAT_PRESOLVE_LEVEL"),_8052);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));
        }
      }
    }
  }
  else if((_8000 == std::string ("mioCutCmir")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutCmir)"));
    }
  }
  else if((_8000 == std::string ("mioCutClique")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutClique)"));
    }
  }
  else if((_8000 == std::string ("mioCutImpliedBound")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutImpliedBound)"));
    }
  }
  else if((_8000 == std::string ("mioCutKnapsackCover")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutKnapsackCover)"));
    }
  }
  else if((_8000 == std::string ("mioCutGmi")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutGmi)"));
    }
  }
  {}
  if ((_8000 == std::string ("presolveLindepRelWorkTrh")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8053 = _8001;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_REL_WORK_TRH"),_8053);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("presolveLindepAbsWorkTrh")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8054 = _8001;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_ABS_WORK_TRH"),_8054);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
        }
      }
    }
  }
  else if((_8000 == std::string ("cacheLicense")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (cacheLicense)"));
    }
  }
  else if((_8000 == std::string ("intpntRegularizationUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntRegularizationUse)"));
    }
  }
  else if((_8000 == std::string ("simSolveForm")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSolveForm)"));
    }
  }
  else if((_8000 == std::string ("simSwitchOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSwitchOptimizer)"));
    }
  }
  {}
  if ((_8000 == std::string ("mioRinsMaxNodes")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8055 = _8001;
          if (((-(int)1) <= _8055))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_MIO_RINS_MAX_NODES"),_8055);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("mioFeaspumpLevel")))
  {
    {
      if (((_8001 - (int)_8001) == 0.0))
      {
        {
          double _8056 = _8001;
          if ((((-(int)1) <= _8056) && (_8056 <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_IPAR_MIO_FEASPUMP_LEVEL"),_8056);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("optimizerMaxTime")))
  {
    {
      double _8057 = _8001;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_DPAR_OPTIMIZER_MAX_TIME"),_8057);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("lowerObjCut")))
  {
    {
      double _8058 = _8001;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT"),_8058);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("upperObjCut")))
  {
    {
      double _8059 = _8001;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT"),_8059);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("upperObjCutFiniteTrh")))
  {
    {
      double _8060 = _8001;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT_FINITE_TRH"),_8060);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("lowerObjCutFiniteTrh")))
  {
    {
      double _8061 = _8001;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT_FINITE_TRH"),_8061);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("intpntTolRelGap")))
  {
    {
      double _8062 = _8001;
      if ((1.000000e-14 <= _8062))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_GAP"),_8062);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("intpntTolStepSize")))
  {
    {
      double _8063 = _8001;
      if (((0.000000e+00 <= _8063) && (_8063 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_STEP_SIZE"),_8063);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("simLuTolRelPiv")))
  {
    {
      double _8064 = _8001;
      if (((1.000000e-06 <= _8064) && (_8064 <= 9.999990e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_DPAR_SIM_LU_TOL_REL_PIV"),_8064);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("intpntTolRelStep")))
  {
    {
      double _8065 = _8001;
      if (((1.000000e-04 <= _8065) && (_8065 <= 9.999990e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_STEP"),_8065);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("intpntTolPath")))
  {
    {
      double _8066 = _8001;
      if (((0.000000e+00 <= _8066) && (_8066 <= 9.999000e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PATH"),_8066);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("intpntTolPfeas")))
  {
    {
      double _8067 = _8001;
      if (((0.000000e+00 <= _8067) && (_8067 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PFEAS"),_8067);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("intpntTolDfeas")))
  {
    {
      double _8068 = _8001;
      if (((0.000000e+00 <= _8068) && (_8068 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DFEAS"),_8068);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("intpntTolMuRed")))
  {
    {
      double _8069 = _8001;
      if (((0.000000e+00 <= _8069) && (_8069 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_MU_RED"),_8069);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("intpntTolInfeas")))
  {
    {
      double _8070 = _8001;
      if (((0.000000e+00 <= _8070) && (_8070 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_INFEAS"),_8070);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("intpntCoTolRelGap")))
  {
    {
      double _8071 = _8001;
      if (((0.000000e+00 <= _8071) && (_8071 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_REL_GAP"),_8071);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("intpntCoTolPfeas")))
  {
    {
      double _8072 = _8001;
      if (((0.000000e+00 <= _8072) && (_8072 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_PFEAS"),_8072);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("intpntCoTolDfeas")))
  {
    {
      double _8073 = _8001;
      if (((0.000000e+00 <= _8073) && (_8073 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_DFEAS"),_8073);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("intpntCoTolMuRed")))
  {
    {
      double _8074 = _8001;
      if (((0.000000e+00 <= _8074) && (_8074 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_MU_RED"),_8074);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("intpntCoTolNearRel")))
  {
    {
      double _8075 = _8001;
      if ((1.000000e+00 <= _8075))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_NEAR_REL"),_8075);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("intpntCoTolInfeas")))
  {
    {
      double _8076 = _8001;
      if (((0.000000e+00 <= _8076) && (_8076 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_INFEAS"),_8076);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("intpntTolPsafe")))
  {
    {
      double _8077 = _8001;
      if ((1.000000e-04 <= _8077))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PSAFE"),_8077);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("intpntTolDsafe")))
  {
    {
      double _8078 = _8001;
      if ((1.000000e-04 <= _8078))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DSAFE"),_8078);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("mioMaxTime")))
  {
    {
      double _8079 = _8001;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_DPAR_MIO_MAX_TIME"),_8079);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("mioRelGapConst")))
  {
    {
      double _8080 = _8001;
      if ((1.000000e-15 <= _8080))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_DPAR_MIO_REL_GAP_CONST"),_8080);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("mioTolRelGap")))
  {
    {
      double _8081 = _8001;
      if ((0.000000e+00 <= _8081))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_GAP"),_8081);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("mioTolAbsGap")))
  {
    {
      double _8082 = _8001;
      if ((0.000000e+00 <= _8082))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_GAP"),_8082);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("mioTolAbsRelaxInt")))
  {
    {
      double _8083 = _8001;
      if ((1.000000e-09 <= _8083))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_RELAX_INT"),_8083);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("basisTolX")))
  {
    {
      double _8084 = _8001;
      if ((1.000000e-09 <= _8084))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_X"),_8084);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("basisTolS")))
  {
    {
      double _8085 = _8001;
      if ((1.000000e-09 <= _8085))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_S"),_8085);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("basisRelTolS")))
  {
    {
      double _8086 = _8001;
      if ((0.000000e+00 <= _8086))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_DPAR_BASIS_REL_TOL_S"),_8086);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("presolveTolX")))
  {
    {
      double _8087 = _8001;
      if ((0.000000e+00 <= _8087))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_X"),_8087);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("presolveTolS")))
  {
    {
      double _8088 = _8001;
      if ((0.000000e+00 <= _8088))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_S"),_8088);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("presolveTolAij")))
  {
    {
      double _8089 = _8001;
      if ((1.000000e-15 <= _8089))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_AIJ"),_8089);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("presolveTolAbsLindep")))
  {
    {
      double _8090 = _8001;
      if ((0.000000e+00 <= _8090))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_ABS_LINDEP"),_8090);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("presolveTolRelLindep")))
  {
    {
      double _8091 = _8001;
      if ((0.000000e+00 <= _8091))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_REL_LINDEP"),_8091);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("simplexAbsTolPiv")))
  {
    {
      double _8092 = _8001;
      if ((1.000000e-12 <= _8092))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_DPAR_SIMPLEX_ABS_TOL_PIV"),_8092);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("mioTolFeas")))
  {
    {
      double _8093 = _8001;
      if (((1.000000e-09 <= _8093) && (_8093 <= 1.000000e-03)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_FEAS"),_8093);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));
        }
      }
    }
  }
  {}
  if ((_8000 == std::string ("mioTolRelDualBoundImprovement")))
  {
    {
      double _8094 = _8001;
      if (((0.000000e+00 <= _8094) && (_8094 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7999.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_DUAL_BOUND_IMPROVEMENT"),_8094);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));
        }
      }
    }
  }
  else if((_8000 == std::string ("dataFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (dataFileName)"));
    }
  }
  else if((_8000 == std::string ("basSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basSolFileName)"));
    }
  }
  else if((_8000 == std::string ("itrSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (itrSolFileName)"));
    }
  }
  else if((_8000 == std::string ("intSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intSolFileName)"));
    }
  }
  else if((_8000 == std::string ("writeLpGenVarName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpGenVarName)"));
    }
  }
  else if((_8000 == std::string ("remoteAccessToken")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (remoteAccessToken)"));
    }
  }
  {}
  throw ::mosek::fusion::ParameterError(std::string ("Unknown parameter"));
}
void mosek::fusion::Parameters::setParameter  ( monty::rc_ptr< ::mosek::fusion::Model > _8095,    const std::string & _8096,    int _8097) { mosek::fusion::p_Parameters::setParameter(_8095,_8096,_8097); }void mosek::fusion::p_Parameters::setParameter(monty::rc_ptr< ::mosek::fusion::Model > _8095,const std::string & _8096,int _8097){
  if (false)
  {
    {
    }
  }
  else if((_8096 == std::string ("autoUpdateSolInfo")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (autoUpdateSolInfo)"));
    }
  }
  else if((_8096 == std::string ("removeUnusedSolutions")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (removeUnusedSolutions)"));
    }
  }
  {}
  if ((_8096 == std::string ("numThreads")))
  {
    {
      int _8098 = _8097;
      if (((int)0 <= _8098))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_NUM_THREADS"),_8098);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
        }
      }
    }
  }
  else if((_8096 == std::string ("intpntMultiThread")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMultiThread)"));
    }
  }
  {}
  if ((_8096 == std::string ("mtSpincount")))
  {
    {
      int _8099 = _8097;
      if ((((int)0 <= _8099) && (_8099 <= (int)1000000000)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_MT_SPINCOUNT"),_8099);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
        }
      }
    }
  }
  else if((_8096 == std::string ("optimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizer)"));
    }
  }
  {}
  if ((_8096 == std::string ("biMaxIterations")))
  {
    {
      int _8100 = _8097;
      if (((int)0 <= _8100))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_BI_MAX_ITERATIONS"),_8100);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("licenseTrhExpiryWrn")))
  {
    {
      int _8101 = _8097;
      if (((int)0 <= _8101))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_TRH_EXPIRY_WRN"),_8101);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("logCutSecondOpt")))
  {
    {
      int _8102 = _8097;
      if (((int)0 <= _8102))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_LOG_CUT_SECOND_OPT"),_8102);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("logResponse")))
  {
    {
      int _8103 = _8097;
      if (((int)0 <= _8103))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_LOG_RESPONSE"),_8103);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));
        }
      }
    }
  }
  else if((_8096 == std::string ("logLocalInfo")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logLocalInfo)"));
    }
  }
  {}
  if ((_8096 == std::string ("logBi")))
  {
    {
      int _8104 = _8097;
      if (((int)0 <= _8104))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI"),_8104);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("logBiFreq")))
  {
    {
      int _8105 = _8097;
      if (((int)0 <= _8105))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI_FREQ"),_8105);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
        }
      }
    }
  }
  else if((_8096 == std::string ("biCleanOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biCleanOptimizer)"));
    }
  }
  else if((_8096 == std::string ("intpntStartingPoint")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntStartingPoint)"));
    }
  }
  else if((_8096 == std::string ("intpntDiffStep")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntDiffStep)"));
    }
  }
  else if((_8096 == std::string ("intpntScaling")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntScaling)"));
    }
  }
  else if((_8096 == std::string ("intpntSolveForm")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntSolveForm)"));
    }
  }
  {}
  if ((_8096 == std::string ("logIntpnt")))
  {
    {
      int _8106 = _8097;
      if (((int)0 <= _8106))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_LOG_INTPNT"),_8106);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("intpntMaxIterations")))
  {
    {
      int _8107 = _8097;
      if (((int)0 <= _8107))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_ITERATIONS"),_8107);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("intpntOffColTrh")))
  {
    {
      int _8108 = _8097;
      if (((int)0 <= _8108))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_OFF_COL_TRH"),_8108);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
        }
      }
    }
  }
  else if((_8096 == std::string ("intpntOrderMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderMethod)"));
    }
  }
  {}
  if ((_8096 == std::string ("intpntOrderGpNumSeeds")))
  {
    {
      int _8109 = _8097;
      if (((int)0 <= _8109))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_ORDER_GP_NUM_SEEDS"),_8109);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
        }
      }
    }
  }
  else if((_8096 == std::string ("intpntBasis")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntBasis)"));
    }
  }
  else if((_8096 == std::string ("biIgnoreMaxIter")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreMaxIter)"));
    }
  }
  else if((_8096 == std::string ("biIgnoreNumError")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreNumError)"));
    }
  }
  {}
  if ((_8096 == std::string ("intpntMaxNumCor")))
  {
    {
      int _8110 = _8097;
      if (((-(int)1) <= _8110))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_NUM_COR"),_8110);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
        }
      }
    }
  }
  else if((_8096 == std::string ("presolveUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveUse)"));
    }
  }
  {}
  if ((_8096 == std::string ("presolveLevel")))
  {
    {
      int _8111 = _8097;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LEVEL"),_8111);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("logPresolve")))
  {
    {
      int _8112 = _8097;
      if (((int)0 <= _8112))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_LOG_PRESOLVE"),_8112);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
        }
      }
    }
  }
  else if((_8096 == std::string ("presolveLindepUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepUse)"));
    }
  }
  {}
  if ((_8096 == std::string ("presolveMaxNumPass")))
  {
    {
      int _8113 = _8097;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_MAX_NUM_PASS"),_8113);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("presolveEliminatorMaxNumTries")))
  {
    {
      int _8114 = _8097;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_NUM_TRIES"),_8114);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("presolveEliminatorMaxFill")))
  {
    {
      int _8115 = _8097;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_FILL"),_8115);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("simPrimalCrash")))
  {
    {
      int _8116 = _8097;
      if (((int)0 <= _8116))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_CRASH"),_8116);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("logSim")))
  {
    {
      int _8117 = _8097;
      if (((int)0 <= _8117))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM"),_8117);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("logSimMinor")))
  {
    {
      int _8118 = _8097;
      if (((int)0 <= _8118))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_MINOR"),_8118);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("logSimFreq")))
  {
    {
      int _8119 = _8097;
      if (((int)0 <= _8119))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_FREQ"),_8119);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("simPrimalRestrictSelection")))
  {
    {
      int _8120 = _8097;
      if ((((int)0 <= _8120) && (_8120 <= (int)100)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_RESTRICT_SELECTION"),_8120);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
        }
      }
    }
  }
  else if((_8096 == std::string ("simPrimalSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalSelection)"));
    }
  }
  {}
  if ((_8096 == std::string ("simDualRestrictSelection")))
  {
    {
      int _8121 = _8097;
      if ((((int)0 <= _8121) && (_8121 <= (int)100)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_RESTRICT_SELECTION"),_8121);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
        }
      }
    }
  }
  else if((_8096 == std::string ("simDualSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualSelection)"));
    }
  }
  {}
  if ((_8096 == std::string ("simMaxIterations")))
  {
    {
      int _8122 = _8097;
      if (((int)0 <= _8122))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_ITERATIONS"),_8122);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
        }
      }
    }
  }
  else if((_8096 == std::string ("simHotstartLu")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstartLu)"));
    }
  }
  {}
  if ((_8096 == std::string ("simRefactorFreq")))
  {
    {
      int _8123 = _8097;
      if (((int)0 <= _8123))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFACTOR_FREQ"),_8123);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("simSeed")))
  {
    {
      int _8124 = _8097;
      if ((((int)0 <= _8124) && (_8124 <= (int)32749)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_SIM_SEED"),_8124);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
        }
      }
    }
  }
  else if((_8096 == std::string ("mioMode")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMode)"));
    }
  }
  {}
  if ((_8096 == std::string ("logMio")))
  {
    {
      int _8125 = _8097;
      if (((int)0 <= _8125))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO"),_8125);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("logMioFreq")))
  {
    {
      int _8126 = _8097;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO_FREQ"),_8126);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("mioMaxNumRelaxs")))
  {
    {
      int _8127 = _8097;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_RELAXS"),_8127);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("mioMaxNumBranches")))
  {
    {
      int _8128 = _8097;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_BRANCHES"),_8128);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("mioMaxNumRootCutRounds")))
  {
    {
      int _8129 = _8097;
      if (((int)0 <= _8129))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_ROOT_CUT_ROUNDS"),_8129);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("mioMaxNumSolutions")))
  {
    {
      int _8130 = _8097;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_SOLUTIONS"),_8130);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
        }
      }
    }
  }
  else if((_8096 == std::string ("mioNodeSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeSelection)"));
    }
  }
  {}
  if ((_8096 == std::string ("mioHeuristicLevel")))
  {
    {
      int _8131 = _8097;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_MIO_HEURISTIC_LEVEL"),_8131);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("mioProbingLevel")))
  {
    {
      int _8132 = _8097;
      if ((((-(int)1) <= _8132) && (_8132 <= (int)3)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROBING_LEVEL"),_8132);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("mioCutSelectionLevel")))
  {
    {
      int _8133 = _8097;
      if ((((-(int)1) <= _8133) && (_8133 <= (int)1)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_SELECTION_LEVEL"),_8133);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("mioVbDetectionLevel")))
  {
    {
      int _8134 = _8097;
      if ((((-(int)1) <= _8134) && (_8134 <= (int)2)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_MIO_VB_DETECTION_LEVEL"),_8134);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
        }
      }
    }
  }
  else if((_8096 == std::string ("mioBranchDir")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioBranchDir)"));
    }
  }
  else if((_8096 == std::string ("mioRootOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootOptimizer)"));
    }
  }
  else if((_8096 == std::string ("mioNodeOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeOptimizer)"));
    }
  }
  else if((_8096 == std::string ("mioPerspectiveReformulate")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPerspectiveReformulate)"));
    }
  }
  else if((_8096 == std::string ("mioPropagateObjectiveConstraint")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPropagateObjectiveConstraint)"));
    }
  }
  {}
  if ((_8096 == std::string ("mioSeed")))
  {
    {
      int _8135 = _8097;
      if (((int)0 <= _8135))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_MIO_SEED"),_8135);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
        }
      }
    }
  }
  else if((_8096 == std::string ("mioConicOuterApproximation")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConicOuterApproximation)"));
    }
  }
  else if((_8096 == std::string ("writeLpQuotedNames")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpQuotedNames)"));
    }
  }
  {}
  if ((_8096 == std::string ("writeLpLineWidth")))
  {
    {
      int _8136 = _8097;
      if (((int)40 <= _8136))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_LINE_WIDTH"),_8136);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("writeLpTermsPerLine")))
  {
    {
      int _8137 = _8097;
      if (((int)0 <= _8137))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_TERMS_PER_LINE"),_8137);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));
        }
      }
    }
  }
  else if((_8096 == std::string ("writeLpFullObj")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpFullObj)"));
    }
  }
  {}
  if ((_8096 == std::string ("logInfeasAna")))
  {
    {
      int _8138 = _8097;
      if (((int)0 <= _8138))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_LOG_INFEAS_ANA"),_8138);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));
        }
      }
    }
  }
  else if((_8096 == std::string ("licenseWait")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseWait)"));
    }
  }
  else if((_8096 == std::string ("licenseSuppressExpireWrns")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseSuppressExpireWrns)"));
    }
  }
  {}
  if ((_8096 == std::string ("licensePauseTime")))
  {
    {
      int _8139 = _8097;
      if ((((int)0 <= _8139) && (_8139 <= (int)1000000)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_PAUSE_TIME"),_8139);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
        }
      }
    }
  }
  else if((_8096 == std::string ("licenseDebug")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseDebug)"));
    }
  }
  {}
  if ((_8096 == std::string ("log")))
  {
    {
      int _8140 = _8097;
      if (((int)0 <= _8140))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_LOG"),_8140);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("logExpand")))
  {
    {
      int _8141 = _8097;
      if (((int)0 <= _8141))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_LOG_EXPAND"),_8141);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("logFile")))
  {
    {
      int _8142 = _8097;
      if (((int)0 <= _8142))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_LOG_FILE"),_8142);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("logOrder")))
  {
    {
      int _8143 = _8097;
      if (((int)0 <= _8143))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_LOG_ORDER"),_8143);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
        }
      }
    }
  }
  else if((_8096 == std::string ("simScaling")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScaling)"));
    }
  }
  else if((_8096 == std::string ("simScalingMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScalingMethod)"));
    }
  }
  {}
  if ((_8096 == std::string ("simPrimalPhaseoneMethod")))
  {
    {
      int _8144 = _8097;
      if ((((int)0 <= _8144) && (_8144 <= (int)10)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_PHASEONE_METHOD"),_8144);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("simDualPhaseoneMethod")))
  {
    {
      int _8145 = _8097;
      if ((((int)0 <= _8145) && (_8145 <= (int)10)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_PHASEONE_METHOD"),_8145);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("simMaxNumSetbacks")))
  {
    {
      int _8146 = _8097;
      if (((int)0 <= _8146))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_NUM_SETBACKS"),_8146);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
        }
      }
    }
  }
  else if((_8096 == std::string ("simHotstart")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstart)"));
    }
  }
  else if((_8096 == std::string ("simBasisFactorUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simBasisFactorUse)"));
    }
  }
  else if((_8096 == std::string ("simDegen")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDegen)"));
    }
  }
  else if((_8096 == std::string ("simReformulation")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simReformulation)"));
    }
  }
  else if((_8096 == std::string ("simExploitDupvec")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simExploitDupvec)"));
    }
  }
  else if((_8096 == std::string ("simSaveLu")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSaveLu)"));
    }
  }
  else if((_8096 == std::string ("simNonSingular")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simNonSingular)"));
    }
  }
  {}
  if ((_8096 == std::string ("simDualCrash")))
  {
    {
      int _8147 = _8097;
      if (((int)0 <= _8147))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_CRASH"),_8147);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
        }
      }
    }
  }
  else if((_8096 == std::string ("infeasPreferPrimal")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (infeasPreferPrimal)"));
    }
  }
  {}
  if ((_8096 == std::string ("mioRootRepeatPresolveLevel")))
  {
    {
      int _8148 = _8097;
      if ((((-(int)1) <= _8148) && (_8148 <= (int)1)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_REPEAT_PRESOLVE_LEVEL"),_8148);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));
        }
      }
    }
  }
  else if((_8096 == std::string ("mioCutCmir")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutCmir)"));
    }
  }
  else if((_8096 == std::string ("mioCutClique")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutClique)"));
    }
  }
  else if((_8096 == std::string ("mioCutImpliedBound")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutImpliedBound)"));
    }
  }
  else if((_8096 == std::string ("mioCutKnapsackCover")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutKnapsackCover)"));
    }
  }
  else if((_8096 == std::string ("mioCutGmi")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutGmi)"));
    }
  }
  {}
  if ((_8096 == std::string ("presolveLindepRelWorkTrh")))
  {
    {
      int _8149 = _8097;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_REL_WORK_TRH"),_8149);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("presolveLindepAbsWorkTrh")))
  {
    {
      int _8150 = _8097;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_ABS_WORK_TRH"),_8150);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
        }
      }
    }
  }
  else if((_8096 == std::string ("cacheLicense")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (cacheLicense)"));
    }
  }
  else if((_8096 == std::string ("intpntRegularizationUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntRegularizationUse)"));
    }
  }
  else if((_8096 == std::string ("simSolveForm")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSolveForm)"));
    }
  }
  else if((_8096 == std::string ("simSwitchOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSwitchOptimizer)"));
    }
  }
  {}
  if ((_8096 == std::string ("mioRinsMaxNodes")))
  {
    {
      int _8151 = _8097;
      if (((-(int)1) <= _8151))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_MIO_RINS_MAX_NODES"),_8151);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("mioFeaspumpLevel")))
  {
    {
      int _8152 = _8097;
      if ((((-(int)1) <= _8152) && (_8152 <= (int)2)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_IPAR_MIO_FEASPUMP_LEVEL"),_8152);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("optimizerMaxTime")))
  {
    {
      double _8153 = (double)_8097;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_DPAR_OPTIMIZER_MAX_TIME"),_8153);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("lowerObjCut")))
  {
    {
      double _8154 = (double)_8097;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT"),_8154);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("upperObjCut")))
  {
    {
      double _8155 = (double)_8097;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT"),_8155);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("upperObjCutFiniteTrh")))
  {
    {
      double _8156 = (double)_8097;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT_FINITE_TRH"),_8156);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("lowerObjCutFiniteTrh")))
  {
    {
      double _8157 = (double)_8097;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT_FINITE_TRH"),_8157);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("intpntTolRelGap")))
  {
    {
      double _8158 = (double)_8097;
      if ((1.000000e-14 <= _8158))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_GAP"),_8158);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("intpntTolStepSize")))
  {
    {
      double _8159 = (double)_8097;
      if (((0.000000e+00 <= _8159) && (_8159 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_STEP_SIZE"),_8159);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("simLuTolRelPiv")))
  {
    {
      double _8160 = (double)_8097;
      if (((1.000000e-06 <= _8160) && (_8160 <= 9.999990e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_DPAR_SIM_LU_TOL_REL_PIV"),_8160);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("intpntTolRelStep")))
  {
    {
      double _8161 = (double)_8097;
      if (((1.000000e-04 <= _8161) && (_8161 <= 9.999990e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_STEP"),_8161);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("intpntTolPath")))
  {
    {
      double _8162 = (double)_8097;
      if (((0.000000e+00 <= _8162) && (_8162 <= 9.999000e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PATH"),_8162);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("intpntTolPfeas")))
  {
    {
      double _8163 = (double)_8097;
      if (((0.000000e+00 <= _8163) && (_8163 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PFEAS"),_8163);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("intpntTolDfeas")))
  {
    {
      double _8164 = (double)_8097;
      if (((0.000000e+00 <= _8164) && (_8164 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DFEAS"),_8164);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("intpntTolMuRed")))
  {
    {
      double _8165 = (double)_8097;
      if (((0.000000e+00 <= _8165) && (_8165 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_MU_RED"),_8165);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("intpntTolInfeas")))
  {
    {
      double _8166 = (double)_8097;
      if (((0.000000e+00 <= _8166) && (_8166 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_INFEAS"),_8166);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("intpntCoTolRelGap")))
  {
    {
      double _8167 = (double)_8097;
      if (((0.000000e+00 <= _8167) && (_8167 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_REL_GAP"),_8167);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("intpntCoTolPfeas")))
  {
    {
      double _8168 = (double)_8097;
      if (((0.000000e+00 <= _8168) && (_8168 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_PFEAS"),_8168);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("intpntCoTolDfeas")))
  {
    {
      double _8169 = (double)_8097;
      if (((0.000000e+00 <= _8169) && (_8169 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_DFEAS"),_8169);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("intpntCoTolMuRed")))
  {
    {
      double _8170 = (double)_8097;
      if (((0.000000e+00 <= _8170) && (_8170 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_MU_RED"),_8170);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("intpntCoTolNearRel")))
  {
    {
      double _8171 = (double)_8097;
      if ((1.000000e+00 <= _8171))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_NEAR_REL"),_8171);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("intpntCoTolInfeas")))
  {
    {
      double _8172 = (double)_8097;
      if (((0.000000e+00 <= _8172) && (_8172 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_INFEAS"),_8172);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("intpntTolPsafe")))
  {
    {
      double _8173 = (double)_8097;
      if ((1.000000e-04 <= _8173))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PSAFE"),_8173);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("intpntTolDsafe")))
  {
    {
      double _8174 = (double)_8097;
      if ((1.000000e-04 <= _8174))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DSAFE"),_8174);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("mioMaxTime")))
  {
    {
      double _8175 = (double)_8097;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_DPAR_MIO_MAX_TIME"),_8175);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("mioRelGapConst")))
  {
    {
      double _8176 = (double)_8097;
      if ((1.000000e-15 <= _8176))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_DPAR_MIO_REL_GAP_CONST"),_8176);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("mioTolRelGap")))
  {
    {
      double _8177 = (double)_8097;
      if ((0.000000e+00 <= _8177))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_GAP"),_8177);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("mioTolAbsGap")))
  {
    {
      double _8178 = (double)_8097;
      if ((0.000000e+00 <= _8178))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_GAP"),_8178);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("mioTolAbsRelaxInt")))
  {
    {
      double _8179 = (double)_8097;
      if ((1.000000e-09 <= _8179))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_RELAX_INT"),_8179);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("basisTolX")))
  {
    {
      double _8180 = (double)_8097;
      if ((1.000000e-09 <= _8180))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_X"),_8180);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("basisTolS")))
  {
    {
      double _8181 = (double)_8097;
      if ((1.000000e-09 <= _8181))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_S"),_8181);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("basisRelTolS")))
  {
    {
      double _8182 = (double)_8097;
      if ((0.000000e+00 <= _8182))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_DPAR_BASIS_REL_TOL_S"),_8182);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("presolveTolX")))
  {
    {
      double _8183 = (double)_8097;
      if ((0.000000e+00 <= _8183))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_X"),_8183);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("presolveTolS")))
  {
    {
      double _8184 = (double)_8097;
      if ((0.000000e+00 <= _8184))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_S"),_8184);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("presolveTolAij")))
  {
    {
      double _8185 = (double)_8097;
      if ((1.000000e-15 <= _8185))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_AIJ"),_8185);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("presolveTolAbsLindep")))
  {
    {
      double _8186 = (double)_8097;
      if ((0.000000e+00 <= _8186))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_ABS_LINDEP"),_8186);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("presolveTolRelLindep")))
  {
    {
      double _8187 = (double)_8097;
      if ((0.000000e+00 <= _8187))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_REL_LINDEP"),_8187);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("simplexAbsTolPiv")))
  {
    {
      double _8188 = (double)_8097;
      if ((1.000000e-12 <= _8188))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_DPAR_SIMPLEX_ABS_TOL_PIV"),_8188);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("mioTolFeas")))
  {
    {
      double _8189 = (double)_8097;
      if (((1.000000e-09 <= _8189) && (_8189 <= 1.000000e-03)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_FEAS"),_8189);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));
        }
      }
    }
  }
  {}
  if ((_8096 == std::string ("mioTolRelDualBoundImprovement")))
  {
    {
      double _8190 = (double)_8097;
      if (((0.000000e+00 <= _8190) && (_8190 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8095.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_DUAL_BOUND_IMPROVEMENT"),_8190);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));
        }
      }
    }
  }
  else if((_8096 == std::string ("dataFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (dataFileName)"));
    }
  }
  else if((_8096 == std::string ("basSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basSolFileName)"));
    }
  }
  else if((_8096 == std::string ("itrSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (itrSolFileName)"));
    }
  }
  else if((_8096 == std::string ("intSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intSolFileName)"));
    }
  }
  else if((_8096 == std::string ("writeLpGenVarName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpGenVarName)"));
    }
  }
  else if((_8096 == std::string ("remoteAccessToken")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (remoteAccessToken)"));
    }
  }
  {}
  throw ::mosek::fusion::ParameterError(std::string ("Unknown parameter"));
}
void mosek::fusion::Parameters::setParameter  ( monty::rc_ptr< ::mosek::fusion::Model > _8191,    const std::string & _8192,    const std::string & _8193) { mosek::fusion::p_Parameters::setParameter(_8191,_8192,_8193); }void mosek::fusion::p_Parameters::setParameter(monty::rc_ptr< ::mosek::fusion::Model > _8191,const std::string & _8192,const std::string & _8193){
  if (false)
  {
    {
    }
  }
  {}
  if ((_8192 == std::string ("autoUpdateSolInfo")))
  {
    {
      int _8194 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8193);
      if ((_8194 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (autoUpdateSolInfo)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_AUTO_UPDATE_SOL_INFO"),_8194);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("removeUnusedSolutions")))
  {
    {
      int _8195 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8193);
      if ((_8195 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (removeUnusedSolutions)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_REMOVE_UNUSED_SOLUTIONS"),_8195);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("numThreads")))
  {
    {
      try
      {
        {
          int _8197 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if (((int)0 <= _8197))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_NUM_THREADS"),_8197);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8196)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("intpntMultiThread")))
  {
    {
      int _8198 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8193);
      if ((_8198 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMultiThread)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MULTI_THREAD"),_8198);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("mtSpincount")))
  {
    {
      try
      {
        {
          int _8200 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if ((((int)0 <= _8200) && (_8200 <= (int)1000000000)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_MT_SPINCOUNT"),_8200);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8199)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("optimizer")))
  {
    {
      int _8201 = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_8193);
      if ((_8201 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_OPTIMIZER"),_8201);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("biMaxIterations")))
  {
    {
      try
      {
        {
          int _8203 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if (((int)0 <= _8203))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_BI_MAX_ITERATIONS"),_8203);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8202)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("licenseTrhExpiryWrn")))
  {
    {
      try
      {
        {
          int _8205 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if (((int)0 <= _8205))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_TRH_EXPIRY_WRN"),_8205);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8204)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("logCutSecondOpt")))
  {
    {
      try
      {
        {
          int _8207 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if (((int)0 <= _8207))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_LOG_CUT_SECOND_OPT"),_8207);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8206)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("logResponse")))
  {
    {
      try
      {
        {
          int _8209 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if (((int)0 <= _8209))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_LOG_RESPONSE"),_8209);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8208)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("logLocalInfo")))
  {
    {
      int _8210 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8193);
      if ((_8210 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logLocalInfo)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_LOG_LOCAL_INFO"),_8210);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("logBi")))
  {
    {
      try
      {
        {
          int _8212 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if (((int)0 <= _8212))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI"),_8212);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8211)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("logBiFreq")))
  {
    {
      try
      {
        {
          int _8214 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if (((int)0 <= _8214))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI_FREQ"),_8214);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8213)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("biCleanOptimizer")))
  {
    {
      int _8215 = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_8193);
      if ((_8215 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biCleanOptimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_BI_CLEAN_OPTIMIZER"),_8215);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("intpntStartingPoint")))
  {
    {
      int _8216 = ::mosek::fusion::p_Parameters::string_to_startpointtype_value(_8193);
      if ((_8216 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntStartingPoint)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_STARTING_POINT"),_8216);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("intpntDiffStep")))
  {
    {
      int _8217 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8193);
      if ((_8217 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntDiffStep)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_DIFF_STEP"),_8217);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("intpntScaling")))
  {
    {
      int _8218 = ::mosek::fusion::p_Parameters::string_to_scalingtype_value(_8193);
      if ((_8218 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntScaling)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_SCALING"),_8218);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("intpntSolveForm")))
  {
    {
      int _8219 = ::mosek::fusion::p_Parameters::string_to_solveform_value(_8193);
      if ((_8219 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntSolveForm)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_SOLVE_FORM"),_8219);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("logIntpnt")))
  {
    {
      try
      {
        {
          int _8221 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if (((int)0 <= _8221))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_LOG_INTPNT"),_8221);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8220)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("intpntMaxIterations")))
  {
    {
      try
      {
        {
          int _8223 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if (((int)0 <= _8223))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_ITERATIONS"),_8223);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8222)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("intpntOffColTrh")))
  {
    {
      try
      {
        {
          int _8225 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if (((int)0 <= _8225))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_OFF_COL_TRH"),_8225);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8224)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("intpntOrderMethod")))
  {
    {
      int _8226 = ::mosek::fusion::p_Parameters::string_to_orderingtype_value(_8193);
      if ((_8226 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderMethod)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_ORDER_METHOD"),_8226);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("intpntOrderGpNumSeeds")))
  {
    {
      try
      {
        {
          int _8228 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if (((int)0 <= _8228))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_ORDER_GP_NUM_SEEDS"),_8228);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8227)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("intpntBasis")))
  {
    {
      int _8229 = ::mosek::fusion::p_Parameters::string_to_basindtype_value(_8193);
      if ((_8229 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntBasis)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_BASIS"),_8229);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("biIgnoreMaxIter")))
  {
    {
      int _8230 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8193);
      if ((_8230 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreMaxIter)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_BI_IGNORE_MAX_ITER"),_8230);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("biIgnoreNumError")))
  {
    {
      int _8231 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8193);
      if ((_8231 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreNumError)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_BI_IGNORE_NUM_ERROR"),_8231);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("intpntMaxNumCor")))
  {
    {
      try
      {
        {
          int _8233 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if (((-(int)1) <= _8233))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_NUM_COR"),_8233);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8232)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("presolveUse")))
  {
    {
      int _8234 = ::mosek::fusion::p_Parameters::string_to_presolvemode_value(_8193);
      if ((_8234 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveUse)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_USE"),_8234);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("presolveLevel")))
  {
    {
      try
      {
        {
          int _8236 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LEVEL"),_8236);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8235)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("logPresolve")))
  {
    {
      try
      {
        {
          int _8238 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if (((int)0 <= _8238))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_LOG_PRESOLVE"),_8238);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8237)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("presolveLindepUse")))
  {
    {
      int _8239 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8193);
      if ((_8239 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepUse)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_USE"),_8239);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("presolveMaxNumPass")))
  {
    {
      try
      {
        {
          int _8241 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_MAX_NUM_PASS"),_8241);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8240)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("presolveEliminatorMaxNumTries")))
  {
    {
      try
      {
        {
          int _8243 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_NUM_TRIES"),_8243);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8242)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("presolveEliminatorMaxFill")))
  {
    {
      try
      {
        {
          int _8245 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_FILL"),_8245);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8244)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("simPrimalCrash")))
  {
    {
      try
      {
        {
          int _8247 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if (((int)0 <= _8247))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_CRASH"),_8247);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8246)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("logSim")))
  {
    {
      try
      {
        {
          int _8249 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if (((int)0 <= _8249))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM"),_8249);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8248)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("logSimMinor")))
  {
    {
      try
      {
        {
          int _8251 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if (((int)0 <= _8251))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_MINOR"),_8251);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8250)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("logSimFreq")))
  {
    {
      try
      {
        {
          int _8253 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if (((int)0 <= _8253))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_FREQ"),_8253);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8252)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("simPrimalRestrictSelection")))
  {
    {
      try
      {
        {
          int _8255 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if ((((int)0 <= _8255) && (_8255 <= (int)100)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_RESTRICT_SELECTION"),_8255);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8254)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("simPrimalSelection")))
  {
    {
      int _8256 = ::mosek::fusion::p_Parameters::string_to_simseltype_value(_8193);
      if ((_8256 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalSelection)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_SELECTION"),_8256);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("simDualRestrictSelection")))
  {
    {
      try
      {
        {
          int _8258 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if ((((int)0 <= _8258) && (_8258 <= (int)100)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_RESTRICT_SELECTION"),_8258);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8257)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("simDualSelection")))
  {
    {
      int _8259 = ::mosek::fusion::p_Parameters::string_to_simseltype_value(_8193);
      if ((_8259 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualSelection)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_SELECTION"),_8259);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("simMaxIterations")))
  {
    {
      try
      {
        {
          int _8261 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if (((int)0 <= _8261))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_ITERATIONS"),_8261);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8260)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("simHotstartLu")))
  {
    {
      int _8262 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8193);
      if ((_8262 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstartLu)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_SIM_HOTSTART_LU"),_8262);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("simRefactorFreq")))
  {
    {
      try
      {
        {
          int _8264 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if (((int)0 <= _8264))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFACTOR_FREQ"),_8264);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8263)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("simSeed")))
  {
    {
      try
      {
        {
          int _8266 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if ((((int)0 <= _8266) && (_8266 <= (int)32749)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_SIM_SEED"),_8266);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8265)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("mioMode")))
  {
    {
      int _8267 = ::mosek::fusion::p_Parameters::string_to_miomode_value(_8193);
      if ((_8267 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMode)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_MIO_MODE"),_8267);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("logMio")))
  {
    {
      try
      {
        {
          int _8269 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if (((int)0 <= _8269))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO"),_8269);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8268)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("logMioFreq")))
  {
    {
      try
      {
        {
          int _8271 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO_FREQ"),_8271);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8270)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("mioMaxNumRelaxs")))
  {
    {
      try
      {
        {
          int _8273 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_RELAXS"),_8273);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8272)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("mioMaxNumBranches")))
  {
    {
      try
      {
        {
          int _8275 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_BRANCHES"),_8275);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8274)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("mioMaxNumRootCutRounds")))
  {
    {
      try
      {
        {
          int _8277 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if (((int)0 <= _8277))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_ROOT_CUT_ROUNDS"),_8277);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8276)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("mioMaxNumSolutions")))
  {
    {
      try
      {
        {
          int _8279 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_SOLUTIONS"),_8279);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8278)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("mioNodeSelection")))
  {
    {
      int _8280 = ::mosek::fusion::p_Parameters::string_to_mionodeseltype_value(_8193);
      if ((_8280 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeSelection)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_MIO_NODE_SELECTION"),_8280);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("mioHeuristicLevel")))
  {
    {
      try
      {
        {
          int _8282 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_MIO_HEURISTIC_LEVEL"),_8282);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8281)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("mioProbingLevel")))
  {
    {
      try
      {
        {
          int _8284 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if ((((-(int)1) <= _8284) && (_8284 <= (int)3)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROBING_LEVEL"),_8284);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8283)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("mioCutSelectionLevel")))
  {
    {
      try
      {
        {
          int _8286 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if ((((-(int)1) <= _8286) && (_8286 <= (int)1)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_SELECTION_LEVEL"),_8286);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8285)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("mioVbDetectionLevel")))
  {
    {
      try
      {
        {
          int _8288 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if ((((-(int)1) <= _8288) && (_8288 <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_MIO_VB_DETECTION_LEVEL"),_8288);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8287)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("mioBranchDir")))
  {
    {
      int _8289 = ::mosek::fusion::p_Parameters::string_to_branchdir_value(_8193);
      if ((_8289 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioBranchDir)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_MIO_BRANCH_DIR"),_8289);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("mioRootOptimizer")))
  {
    {
      int _8290 = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_8193);
      if ((_8290 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootOptimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_OPTIMIZER"),_8290);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("mioNodeOptimizer")))
  {
    {
      int _8291 = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_8193);
      if ((_8291 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeOptimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_MIO_NODE_OPTIMIZER"),_8291);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("mioPerspectiveReformulate")))
  {
    {
      int _8292 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8193);
      if ((_8292 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPerspectiveReformulate)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_MIO_PERSPECTIVE_REFORMULATE"),_8292);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("mioPropagateObjectiveConstraint")))
  {
    {
      int _8293 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8193);
      if ((_8293 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPropagateObjectiveConstraint)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROPAGATE_OBJECTIVE_CONSTRAINT"),_8293);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("mioSeed")))
  {
    {
      try
      {
        {
          int _8295 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if (((int)0 <= _8295))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_MIO_SEED"),_8295);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8294)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("mioConicOuterApproximation")))
  {
    {
      int _8296 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8193);
      if ((_8296 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConicOuterApproximation)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_MIO_CONIC_OUTER_APPROXIMATION"),_8296);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("writeLpQuotedNames")))
  {
    {
      int _8297 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8193);
      if ((_8297 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpQuotedNames)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_QUOTED_NAMES"),_8297);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("writeLpLineWidth")))
  {
    {
      try
      {
        {
          int _8299 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if (((int)40 <= _8299))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_LINE_WIDTH"),_8299);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8298)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("writeLpTermsPerLine")))
  {
    {
      try
      {
        {
          int _8301 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if (((int)0 <= _8301))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_TERMS_PER_LINE"),_8301);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8300)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("writeLpFullObj")))
  {
    {
      int _8302 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8193);
      if ((_8302 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpFullObj)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_FULL_OBJ"),_8302);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("logInfeasAna")))
  {
    {
      try
      {
        {
          int _8304 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if (((int)0 <= _8304))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_LOG_INFEAS_ANA"),_8304);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8303)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("licenseWait")))
  {
    {
      int _8305 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8193);
      if ((_8305 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseWait)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_WAIT"),_8305);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("licenseSuppressExpireWrns")))
  {
    {
      int _8306 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8193);
      if ((_8306 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseSuppressExpireWrns)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_SUPPRESS_EXPIRE_WRNS"),_8306);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("licensePauseTime")))
  {
    {
      try
      {
        {
          int _8308 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if ((((int)0 <= _8308) && (_8308 <= (int)1000000)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_PAUSE_TIME"),_8308);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8307)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("licenseDebug")))
  {
    {
      int _8309 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8193);
      if ((_8309 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseDebug)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_DEBUG"),_8309);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("log")))
  {
    {
      try
      {
        {
          int _8311 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if (((int)0 <= _8311))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_LOG"),_8311);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8310)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("logExpand")))
  {
    {
      try
      {
        {
          int _8313 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if (((int)0 <= _8313))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_LOG_EXPAND"),_8313);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8312)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("logFile")))
  {
    {
      try
      {
        {
          int _8315 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if (((int)0 <= _8315))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_LOG_FILE"),_8315);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8314)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("logOrder")))
  {
    {
      try
      {
        {
          int _8317 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if (((int)0 <= _8317))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_LOG_ORDER"),_8317);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8316)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("simScaling")))
  {
    {
      int _8318 = ::mosek::fusion::p_Parameters::string_to_scalingtype_value(_8193);
      if ((_8318 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScaling)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_SIM_SCALING"),_8318);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("simScalingMethod")))
  {
    {
      int _8319 = ::mosek::fusion::p_Parameters::string_to_scalingmethod_value(_8193);
      if ((_8319 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScalingMethod)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_SIM_SCALING_METHOD"),_8319);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("simPrimalPhaseoneMethod")))
  {
    {
      try
      {
        {
          int _8321 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if ((((int)0 <= _8321) && (_8321 <= (int)10)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_PHASEONE_METHOD"),_8321);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8320)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("simDualPhaseoneMethod")))
  {
    {
      try
      {
        {
          int _8323 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if ((((int)0 <= _8323) && (_8323 <= (int)10)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_PHASEONE_METHOD"),_8323);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8322)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("simMaxNumSetbacks")))
  {
    {
      try
      {
        {
          int _8325 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if (((int)0 <= _8325))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_NUM_SETBACKS"),_8325);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8324)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("simHotstart")))
  {
    {
      int _8326 = ::mosek::fusion::p_Parameters::string_to_simhotstart_value(_8193);
      if ((_8326 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstart)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_SIM_HOTSTART"),_8326);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("simBasisFactorUse")))
  {
    {
      int _8327 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8193);
      if ((_8327 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simBasisFactorUse)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_SIM_BASIS_FACTOR_USE"),_8327);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("simDegen")))
  {
    {
      int _8328 = ::mosek::fusion::p_Parameters::string_to_simdegen_value(_8193);
      if ((_8328 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDegen)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_SIM_DEGEN"),_8328);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("simReformulation")))
  {
    {
      int _8329 = ::mosek::fusion::p_Parameters::string_to_simreform_value(_8193);
      if ((_8329 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simReformulation)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFORMULATION"),_8329);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("simExploitDupvec")))
  {
    {
      int _8330 = ::mosek::fusion::p_Parameters::string_to_simdupvec_value(_8193);
      if ((_8330 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simExploitDupvec)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_SIM_EXPLOIT_DUPVEC"),_8330);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("simSaveLu")))
  {
    {
      int _8331 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8193);
      if ((_8331 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSaveLu)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_SIM_SAVE_LU"),_8331);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("simNonSingular")))
  {
    {
      int _8332 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8193);
      if ((_8332 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simNonSingular)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_SIM_NON_SINGULAR"),_8332);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("simDualCrash")))
  {
    {
      try
      {
        {
          int _8334 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if (((int)0 <= _8334))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_CRASH"),_8334);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8333)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("infeasPreferPrimal")))
  {
    {
      int _8335 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8193);
      if ((_8335 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (infeasPreferPrimal)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_INFEAS_PREFER_PRIMAL"),_8335);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("mioRootRepeatPresolveLevel")))
  {
    {
      try
      {
        {
          int _8337 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if ((((-(int)1) <= _8337) && (_8337 <= (int)1)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_REPEAT_PRESOLVE_LEVEL"),_8337);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8336)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("mioCutCmir")))
  {
    {
      int _8338 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8193);
      if ((_8338 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutCmir)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_CMIR"),_8338);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("mioCutClique")))
  {
    {
      int _8339 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8193);
      if ((_8339 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutClique)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_CLIQUE"),_8339);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("mioCutImpliedBound")))
  {
    {
      int _8340 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8193);
      if ((_8340 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutImpliedBound)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_IMPLIED_BOUND"),_8340);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("mioCutKnapsackCover")))
  {
    {
      int _8341 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8193);
      if ((_8341 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutKnapsackCover)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_KNAPSACK_COVER"),_8341);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("mioCutGmi")))
  {
    {
      int _8342 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8193);
      if ((_8342 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutGmi)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_GMI"),_8342);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("presolveLindepRelWorkTrh")))
  {
    {
      try
      {
        {
          int _8344 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_REL_WORK_TRH"),_8344);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8343)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("presolveLindepAbsWorkTrh")))
  {
    {
      try
      {
        {
          int _8346 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_ABS_WORK_TRH"),_8346);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8345)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("cacheLicense")))
  {
    {
      int _8347 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8193);
      if ((_8347 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (cacheLicense)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_CACHE_LICENSE"),_8347);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("intpntRegularizationUse")))
  {
    {
      int _8348 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8193);
      if ((_8348 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntRegularizationUse)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_REGULARIZATION_USE"),_8348);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("simSolveForm")))
  {
    {
      int _8349 = ::mosek::fusion::p_Parameters::string_to_solveform_value(_8193);
      if ((_8349 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSolveForm)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_SIM_SOLVE_FORM"),_8349);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("simSwitchOptimizer")))
  {
    {
      int _8350 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8193);
      if ((_8350 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSwitchOptimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_SIM_SWITCH_OPTIMIZER"),_8350);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("mioRinsMaxNodes")))
  {
    {
      try
      {
        {
          int _8352 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if (((-(int)1) <= _8352))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_MIO_RINS_MAX_NODES"),_8352);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8351)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("mioFeaspumpLevel")))
  {
    {
      try
      {
        {
          int _8354 = ::mosek::fusion::Utils::Tools::toInt(_8193);
          if ((((-(int)1) <= _8354) && (_8354 <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_IPAR_MIO_FEASPUMP_LEVEL"),_8354);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8353)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("optimizerMaxTime")))
  {
    {
      try
      {
        {
          double _8356 = ::mosek::fusion::Utils::Tools::toDouble(_8193);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_DPAR_OPTIMIZER_MAX_TIME"),_8356);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8355)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("lowerObjCut")))
  {
    {
      try
      {
        {
          double _8358 = ::mosek::fusion::Utils::Tools::toDouble(_8193);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT"),_8358);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8357)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("upperObjCut")))
  {
    {
      try
      {
        {
          double _8360 = ::mosek::fusion::Utils::Tools::toDouble(_8193);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT"),_8360);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8359)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("upperObjCutFiniteTrh")))
  {
    {
      try
      {
        {
          double _8362 = ::mosek::fusion::Utils::Tools::toDouble(_8193);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT_FINITE_TRH"),_8362);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8361)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("lowerObjCutFiniteTrh")))
  {
    {
      try
      {
        {
          double _8364 = ::mosek::fusion::Utils::Tools::toDouble(_8193);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT_FINITE_TRH"),_8364);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8363)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("intpntTolRelGap")))
  {
    {
      try
      {
        {
          double _8366 = ::mosek::fusion::Utils::Tools::toDouble(_8193);
          if ((1.000000e-14 <= _8366))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_GAP"),_8366);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8365)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("intpntTolStepSize")))
  {
    {
      try
      {
        {
          double _8368 = ::mosek::fusion::Utils::Tools::toDouble(_8193);
          if (((0.000000e+00 <= _8368) && (_8368 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_STEP_SIZE"),_8368);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8367)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("simLuTolRelPiv")))
  {
    {
      try
      {
        {
          double _8370 = ::mosek::fusion::Utils::Tools::toDouble(_8193);
          if (((1.000000e-06 <= _8370) && (_8370 <= 9.999990e-01)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_DPAR_SIM_LU_TOL_REL_PIV"),_8370);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8369)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("intpntTolRelStep")))
  {
    {
      try
      {
        {
          double _8372 = ::mosek::fusion::Utils::Tools::toDouble(_8193);
          if (((1.000000e-04 <= _8372) && (_8372 <= 9.999990e-01)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_STEP"),_8372);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8371)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("intpntTolPath")))
  {
    {
      try
      {
        {
          double _8374 = ::mosek::fusion::Utils::Tools::toDouble(_8193);
          if (((0.000000e+00 <= _8374) && (_8374 <= 9.999000e-01)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PATH"),_8374);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8373)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("intpntTolPfeas")))
  {
    {
      try
      {
        {
          double _8376 = ::mosek::fusion::Utils::Tools::toDouble(_8193);
          if (((0.000000e+00 <= _8376) && (_8376 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PFEAS"),_8376);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8375)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("intpntTolDfeas")))
  {
    {
      try
      {
        {
          double _8378 = ::mosek::fusion::Utils::Tools::toDouble(_8193);
          if (((0.000000e+00 <= _8378) && (_8378 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DFEAS"),_8378);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8377)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("intpntTolMuRed")))
  {
    {
      try
      {
        {
          double _8380 = ::mosek::fusion::Utils::Tools::toDouble(_8193);
          if (((0.000000e+00 <= _8380) && (_8380 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_MU_RED"),_8380);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8379)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("intpntTolInfeas")))
  {
    {
      try
      {
        {
          double _8382 = ::mosek::fusion::Utils::Tools::toDouble(_8193);
          if (((0.000000e+00 <= _8382) && (_8382 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_INFEAS"),_8382);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8381)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("intpntCoTolRelGap")))
  {
    {
      try
      {
        {
          double _8384 = ::mosek::fusion::Utils::Tools::toDouble(_8193);
          if (((0.000000e+00 <= _8384) && (_8384 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_REL_GAP"),_8384);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8383)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("intpntCoTolPfeas")))
  {
    {
      try
      {
        {
          double _8386 = ::mosek::fusion::Utils::Tools::toDouble(_8193);
          if (((0.000000e+00 <= _8386) && (_8386 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_PFEAS"),_8386);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8385)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("intpntCoTolDfeas")))
  {
    {
      try
      {
        {
          double _8388 = ::mosek::fusion::Utils::Tools::toDouble(_8193);
          if (((0.000000e+00 <= _8388) && (_8388 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_DFEAS"),_8388);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8387)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("intpntCoTolMuRed")))
  {
    {
      try
      {
        {
          double _8390 = ::mosek::fusion::Utils::Tools::toDouble(_8193);
          if (((0.000000e+00 <= _8390) && (_8390 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_MU_RED"),_8390);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8389)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("intpntCoTolNearRel")))
  {
    {
      try
      {
        {
          double _8392 = ::mosek::fusion::Utils::Tools::toDouble(_8193);
          if ((1.000000e+00 <= _8392))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_NEAR_REL"),_8392);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8391)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("intpntCoTolInfeas")))
  {
    {
      try
      {
        {
          double _8394 = ::mosek::fusion::Utils::Tools::toDouble(_8193);
          if (((0.000000e+00 <= _8394) && (_8394 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_INFEAS"),_8394);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8393)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("intpntTolPsafe")))
  {
    {
      try
      {
        {
          double _8396 = ::mosek::fusion::Utils::Tools::toDouble(_8193);
          if ((1.000000e-04 <= _8396))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PSAFE"),_8396);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8395)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("intpntTolDsafe")))
  {
    {
      try
      {
        {
          double _8398 = ::mosek::fusion::Utils::Tools::toDouble(_8193);
          if ((1.000000e-04 <= _8398))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DSAFE"),_8398);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8397)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("mioMaxTime")))
  {
    {
      try
      {
        {
          double _8400 = ::mosek::fusion::Utils::Tools::toDouble(_8193);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_DPAR_MIO_MAX_TIME"),_8400);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8399)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("mioRelGapConst")))
  {
    {
      try
      {
        {
          double _8402 = ::mosek::fusion::Utils::Tools::toDouble(_8193);
          if ((1.000000e-15 <= _8402))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_DPAR_MIO_REL_GAP_CONST"),_8402);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8401)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("mioTolRelGap")))
  {
    {
      try
      {
        {
          double _8404 = ::mosek::fusion::Utils::Tools::toDouble(_8193);
          if ((0.000000e+00 <= _8404))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_GAP"),_8404);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8403)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("mioTolAbsGap")))
  {
    {
      try
      {
        {
          double _8406 = ::mosek::fusion::Utils::Tools::toDouble(_8193);
          if ((0.000000e+00 <= _8406))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_GAP"),_8406);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8405)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("mioTolAbsRelaxInt")))
  {
    {
      try
      {
        {
          double _8408 = ::mosek::fusion::Utils::Tools::toDouble(_8193);
          if ((1.000000e-09 <= _8408))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_RELAX_INT"),_8408);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8407)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("basisTolX")))
  {
    {
      try
      {
        {
          double _8410 = ::mosek::fusion::Utils::Tools::toDouble(_8193);
          if ((1.000000e-09 <= _8410))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_X"),_8410);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8409)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("basisTolS")))
  {
    {
      try
      {
        {
          double _8412 = ::mosek::fusion::Utils::Tools::toDouble(_8193);
          if ((1.000000e-09 <= _8412))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_S"),_8412);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8411)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("basisRelTolS")))
  {
    {
      try
      {
        {
          double _8414 = ::mosek::fusion::Utils::Tools::toDouble(_8193);
          if ((0.000000e+00 <= _8414))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_DPAR_BASIS_REL_TOL_S"),_8414);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8413)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("presolveTolX")))
  {
    {
      try
      {
        {
          double _8416 = ::mosek::fusion::Utils::Tools::toDouble(_8193);
          if ((0.000000e+00 <= _8416))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_X"),_8416);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8415)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("presolveTolS")))
  {
    {
      try
      {
        {
          double _8418 = ::mosek::fusion::Utils::Tools::toDouble(_8193);
          if ((0.000000e+00 <= _8418))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_S"),_8418);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8417)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("presolveTolAij")))
  {
    {
      try
      {
        {
          double _8420 = ::mosek::fusion::Utils::Tools::toDouble(_8193);
          if ((1.000000e-15 <= _8420))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_AIJ"),_8420);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8419)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("presolveTolAbsLindep")))
  {
    {
      try
      {
        {
          double _8422 = ::mosek::fusion::Utils::Tools::toDouble(_8193);
          if ((0.000000e+00 <= _8422))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_ABS_LINDEP"),_8422);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8421)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("presolveTolRelLindep")))
  {
    {
      try
      {
        {
          double _8424 = ::mosek::fusion::Utils::Tools::toDouble(_8193);
          if ((0.000000e+00 <= _8424))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_REL_LINDEP"),_8424);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8423)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("simplexAbsTolPiv")))
  {
    {
      try
      {
        {
          double _8426 = ::mosek::fusion::Utils::Tools::toDouble(_8193);
          if ((1.000000e-12 <= _8426))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_DPAR_SIMPLEX_ABS_TOL_PIV"),_8426);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8425)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("mioTolFeas")))
  {
    {
      try
      {
        {
          double _8428 = ::mosek::fusion::Utils::Tools::toDouble(_8193);
          if (((1.000000e-09 <= _8428) && (_8428 <= 1.000000e-03)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_FEAS"),_8428);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8427)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("mioTolRelDualBoundImprovement")))
  {
    {
      try
      {
        {
          double _8430 = ::mosek::fusion::Utils::Tools::toDouble(_8193);
          if (((0.000000e+00 <= _8430) && (_8430 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_DUAL_BOUND_IMPROVEMENT"),_8430);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8429)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));
        }
      }
    }
  }
  {}
  if ((_8192 == std::string ("dataFileName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_SPAR_DATA_FILE_NAME"),_8193);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("basSolFileName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_SPAR_BAS_SOL_FILE_NAME"),_8193);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("itrSolFileName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_SPAR_ITR_SOL_FILE_NAME"),_8193);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("intSolFileName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_SPAR_INT_SOL_FILE_NAME"),_8193);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("writeLpGenVarName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_SPAR_WRITE_LP_GEN_VAR_NAME"),_8193);
      return;
    }
  }
  {}
  if ((_8192 == std::string ("remoteAccessToken")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_8191.get())->task_put_param(std::string ("MSK_SPAR_REMOTE_ACCESS_TOKEN"),_8193);
      return;
    }
  }
  {}
  throw ::mosek::fusion::ParameterError(std::string ("Unknown parameter"));
}
int mosek::fusion::p_Parameters::string_to_variabletype_value(const std::string & _8431){
  if ((_8431 == std::string ("typeCont")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8431 == std::string ("typeInt")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_value_value(const std::string & _8432){
  if ((_8432 == std::string ("maxStrLen")))
  {
    {
      return (int)1024;
    }
  }
  {}
  if ((_8432 == std::string ("licenseBufferLength")))
  {
    {
      return (int)21;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_streamtype_value(const std::string & _8433){
  if ((_8433 == std::string ("log")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8433 == std::string ("msg")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8433 == std::string ("err")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8433 == std::string ("wrn")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_startpointtype_value(const std::string & _8434){
  if ((_8434 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8434 == std::string ("guess")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8434 == std::string ("constant")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8434 == std::string ("satisfyBounds")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_stakey_value(const std::string & _8435){
  if ((_8435 == std::string ("unk")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8435 == std::string ("bas")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8435 == std::string ("supbas")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8435 == std::string ("low")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8435 == std::string ("upr")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8435 == std::string ("fix")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8435 == std::string ("inf")))
  {
    {
      return (int)6;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_sparam_value(const std::string & _8436){
  if ((_8436 == std::string ("dataFileName")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8436 == std::string ("paramReadFileName")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8436 == std::string ("paramWriteFileName")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8436 == std::string ("paramCommentSign")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8436 == std::string ("debugFileName")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8436 == std::string ("basSolFileName")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8436 == std::string ("itrSolFileName")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8436 == std::string ("intSolFileName")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8436 == std::string ("solFilterXcLow")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_8436 == std::string ("solFilterXcUpr")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_8436 == std::string ("solFilterXxLow")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_8436 == std::string ("solFilterXxUpr")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_8436 == std::string ("readMpsObjName")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8436 == std::string ("readMpsRanName")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8436 == std::string ("readMpsRhsName")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_8436 == std::string ("readMpsBouName")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8436 == std::string ("statFileName")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_8436 == std::string ("statName")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_8436 == std::string ("statKey")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_8436 == std::string ("writeLpGenVarName")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_8436 == std::string ("sensitivityResFileName")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_8436 == std::string ("sensitivityFileName")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_8436 == std::string ("mioDebugString")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8436 == std::string ("remoteAccessToken")))
  {
    {
      return (int)13;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_solveform_value(const std::string & _8437){
  if ((_8437 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8437 == std::string ("primal")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8437 == std::string ("dual")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_soltype_value(const std::string & _8438){
  if ((_8438 == std::string ("bas")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8438 == std::string ("itr")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8438 == std::string ("itg")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_solsta_value(const std::string & _8439){
  if ((_8439 == std::string ("unknown")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8439 == std::string ("optimal")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8439 == std::string ("primFeas")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8439 == std::string ("dualFeas")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8439 == std::string ("primAndDualFeas")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8439 == std::string ("primInfeasCer")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8439 == std::string ("dualInfeasCer")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8439 == std::string ("primIllposedCer")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8439 == std::string ("dualIllposedCer")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8439 == std::string ("integerOptimal")))
  {
    {
      return (int)9;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_solitem_value(const std::string & _8440){
  if ((_8440 == std::string ("xc")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8440 == std::string ("xx")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8440 == std::string ("y")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8440 == std::string ("slc")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8440 == std::string ("suc")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8440 == std::string ("slx")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8440 == std::string ("sux")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8440 == std::string ("snx")))
  {
    {
      return (int)7;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_simseltype_value(const std::string & _8441){
  if ((_8441 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8441 == std::string ("full")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8441 == std::string ("ase")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8441 == std::string ("devex")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8441 == std::string ("se")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8441 == std::string ("partial")))
  {
    {
      return (int)5;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_sensitivitytype_value(const std::string & _8442){
  if ((_8442 == std::string ("basis")))
  {
    {
      return (int)0;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_scalingmethod_value(const std::string & _8443){
  if ((_8443 == std::string ("pow2")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8443 == std::string ("free")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_scalingtype_value(const std::string & _8444){
  if ((_8444 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8444 == std::string ("none")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8444 == std::string ("moderate")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8444 == std::string ("aggressive")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_rescodetype_value(const std::string & _8445){
  if ((_8445 == std::string ("ok")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8445 == std::string ("wrn")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8445 == std::string ("trm")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8445 == std::string ("err")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8445 == std::string ("unk")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_rescode_value(const std::string & _8446){
  if ((_8446 == std::string ("ok")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8446 == std::string ("wrnOpenParamFile")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_8446 == std::string ("wrnLargeBound")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_8446 == std::string ("wrnLargeLoBound")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_8446 == std::string ("wrnLargeUpBound")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_8446 == std::string ("wrnLargeConFx")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_8446 == std::string ("wrnLargeCj")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_8446 == std::string ("wrnLargeAij")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_8446 == std::string ("wrnZeroAij")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_8446 == std::string ("wrnNameMaxLen")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_8446 == std::string ("wrnSparMaxLen")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_8446 == std::string ("wrnMpsSplitRhsVector")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_8446 == std::string ("wrnMpsSplitRanVector")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_8446 == std::string ("wrnMpsSplitBouVector")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_8446 == std::string ("wrnLpOldQuadFormat")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_8446 == std::string ("wrnLpDropVariable")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_8446 == std::string ("wrnNzInUprTri")))
  {
    {
      return (int)200;
    }
  }
  {}
  if ((_8446 == std::string ("wrnDroppedNzQobj")))
  {
    {
      return (int)201;
    }
  }
  {}
  if ((_8446 == std::string ("wrnIgnoreInteger")))
  {
    {
      return (int)250;
    }
  }
  {}
  if ((_8446 == std::string ("wrnNoGlobalOptimizer")))
  {
    {
      return (int)251;
    }
  }
  {}
  if ((_8446 == std::string ("wrnMioInfeasibleFinal")))
  {
    {
      return (int)270;
    }
  }
  {}
  if ((_8446 == std::string ("wrnSolFilter")))
  {
    {
      return (int)300;
    }
  }
  {}
  if ((_8446 == std::string ("wrnUndefSolFileName")))
  {
    {
      return (int)350;
    }
  }
  {}
  if ((_8446 == std::string ("wrnSolFileIgnoredCon")))
  {
    {
      return (int)351;
    }
  }
  {}
  if ((_8446 == std::string ("wrnSolFileIgnoredVar")))
  {
    {
      return (int)352;
    }
  }
  {}
  if ((_8446 == std::string ("wrnTooFewBasisVars")))
  {
    {
      return (int)400;
    }
  }
  {}
  if ((_8446 == std::string ("wrnTooManyBasisVars")))
  {
    {
      return (int)405;
    }
  }
  {}
  if ((_8446 == std::string ("wrnLicenseExpire")))
  {
    {
      return (int)500;
    }
  }
  {}
  if ((_8446 == std::string ("wrnLicenseServer")))
  {
    {
      return (int)501;
    }
  }
  {}
  if ((_8446 == std::string ("wrnEmptyName")))
  {
    {
      return (int)502;
    }
  }
  {}
  if ((_8446 == std::string ("wrnUsingGenericNames")))
  {
    {
      return (int)503;
    }
  }
  {}
  if ((_8446 == std::string ("wrnLicenseFeatureExpire")))
  {
    {
      return (int)505;
    }
  }
  {}
  if ((_8446 == std::string ("wrnParamNameDou")))
  {
    {
      return (int)510;
    }
  }
  {}
  if ((_8446 == std::string ("wrnParamNameInt")))
  {
    {
      return (int)511;
    }
  }
  {}
  if ((_8446 == std::string ("wrnParamNameStr")))
  {
    {
      return (int)512;
    }
  }
  {}
  if ((_8446 == std::string ("wrnParamStrValue")))
  {
    {
      return (int)515;
    }
  }
  {}
  if ((_8446 == std::string ("wrnParamIgnoredCmio")))
  {
    {
      return (int)516;
    }
  }
  {}
  if ((_8446 == std::string ("wrnZerosInSparseRow")))
  {
    {
      return (int)705;
    }
  }
  {}
  if ((_8446 == std::string ("wrnZerosInSparseCol")))
  {
    {
      return (int)710;
    }
  }
  {}
  if ((_8446 == std::string ("wrnIncompleteLinearDependencyCheck")))
  {
    {
      return (int)800;
    }
  }
  {}
  if ((_8446 == std::string ("wrnEliminatorSpace")))
  {
    {
      return (int)801;
    }
  }
  {}
  if ((_8446 == std::string ("wrnPresolveOutofspace")))
  {
    {
      return (int)802;
    }
  }
  {}
  if ((_8446 == std::string ("wrnWriteChangedNames")))
  {
    {
      return (int)803;
    }
  }
  {}
  if ((_8446 == std::string ("wrnWriteDiscardedCfix")))
  {
    {
      return (int)804;
    }
  }
  {}
  if ((_8446 == std::string ("wrnDuplicateConstraintNames")))
  {
    {
      return (int)850;
    }
  }
  {}
  if ((_8446 == std::string ("wrnDuplicateVariableNames")))
  {
    {
      return (int)851;
    }
  }
  {}
  if ((_8446 == std::string ("wrnDuplicateBarvariableNames")))
  {
    {
      return (int)852;
    }
  }
  {}
  if ((_8446 == std::string ("wrnDuplicateConeNames")))
  {
    {
      return (int)853;
    }
  }
  {}
  if ((_8446 == std::string ("wrnAnaLargeBounds")))
  {
    {
      return (int)900;
    }
  }
  {}
  if ((_8446 == std::string ("wrnAnaCZero")))
  {
    {
      return (int)901;
    }
  }
  {}
  if ((_8446 == std::string ("wrnAnaEmptyCols")))
  {
    {
      return (int)902;
    }
  }
  {}
  if ((_8446 == std::string ("wrnAnaCloseBounds")))
  {
    {
      return (int)903;
    }
  }
  {}
  if ((_8446 == std::string ("wrnAnaAlmostIntBounds")))
  {
    {
      return (int)904;
    }
  }
  {}
  if ((_8446 == std::string ("wrnQuadConesWithRootFixedAtZero")))
  {
    {
      return (int)930;
    }
  }
  {}
  if ((_8446 == std::string ("wrnRquadConesWithRootFixedAtZero")))
  {
    {
      return (int)931;
    }
  }
  {}
  if ((_8446 == std::string ("wrnExpConesWithVariablesFixedAtZero")))
  {
    {
      return (int)932;
    }
  }
  {}
  if ((_8446 == std::string ("wrnPowConesWithRootFixedAtZero")))
  {
    {
      return (int)933;
    }
  }
  {}
  if ((_8446 == std::string ("wrnNoDualizer")))
  {
    {
      return (int)950;
    }
  }
  {}
  if ((_8446 == std::string ("wrnSymMatLarge")))
  {
    {
      return (int)960;
    }
  }
  {}
  if ((_8446 == std::string ("errLicense")))
  {
    {
      return (int)1000;
    }
  }
  {}
  if ((_8446 == std::string ("errLicenseExpired")))
  {
    {
      return (int)1001;
    }
  }
  {}
  if ((_8446 == std::string ("errLicenseVersion")))
  {
    {
      return (int)1002;
    }
  }
  {}
  if ((_8446 == std::string ("errSizeLicense")))
  {
    {
      return (int)1005;
    }
  }
  {}
  if ((_8446 == std::string ("errProbLicense")))
  {
    {
      return (int)1006;
    }
  }
  {}
  if ((_8446 == std::string ("errFileLicense")))
  {
    {
      return (int)1007;
    }
  }
  {}
  if ((_8446 == std::string ("errMissingLicenseFile")))
  {
    {
      return (int)1008;
    }
  }
  {}
  if ((_8446 == std::string ("errSizeLicenseCon")))
  {
    {
      return (int)1010;
    }
  }
  {}
  if ((_8446 == std::string ("errSizeLicenseVar")))
  {
    {
      return (int)1011;
    }
  }
  {}
  if ((_8446 == std::string ("errSizeLicenseIntvar")))
  {
    {
      return (int)1012;
    }
  }
  {}
  if ((_8446 == std::string ("errOptimizerLicense")))
  {
    {
      return (int)1013;
    }
  }
  {}
  if ((_8446 == std::string ("errFlexlm")))
  {
    {
      return (int)1014;
    }
  }
  {}
  if ((_8446 == std::string ("errLicenseServer")))
  {
    {
      return (int)1015;
    }
  }
  {}
  if ((_8446 == std::string ("errLicenseMax")))
  {
    {
      return (int)1016;
    }
  }
  {}
  if ((_8446 == std::string ("errLicenseMoseklmDaemon")))
  {
    {
      return (int)1017;
    }
  }
  {}
  if ((_8446 == std::string ("errLicenseFeature")))
  {
    {
      return (int)1018;
    }
  }
  {}
  if ((_8446 == std::string ("errPlatformNotLicensed")))
  {
    {
      return (int)1019;
    }
  }
  {}
  if ((_8446 == std::string ("errLicenseCannotAllocate")))
  {
    {
      return (int)1020;
    }
  }
  {}
  if ((_8446 == std::string ("errLicenseCannotConnect")))
  {
    {
      return (int)1021;
    }
  }
  {}
  if ((_8446 == std::string ("errLicenseInvalidHostid")))
  {
    {
      return (int)1025;
    }
  }
  {}
  if ((_8446 == std::string ("errLicenseServerVersion")))
  {
    {
      return (int)1026;
    }
  }
  {}
  if ((_8446 == std::string ("errLicenseNoServerSupport")))
  {
    {
      return (int)1027;
    }
  }
  {}
  if ((_8446 == std::string ("errLicenseNoServerLine")))
  {
    {
      return (int)1028;
    }
  }
  {}
  if ((_8446 == std::string ("errOlderDll")))
  {
    {
      return (int)1035;
    }
  }
  {}
  if ((_8446 == std::string ("errNewerDll")))
  {
    {
      return (int)1036;
    }
  }
  {}
  if ((_8446 == std::string ("errLinkFileDll")))
  {
    {
      return (int)1040;
    }
  }
  {}
  if ((_8446 == std::string ("errThreadMutexInit")))
  {
    {
      return (int)1045;
    }
  }
  {}
  if ((_8446 == std::string ("errThreadMutexLock")))
  {
    {
      return (int)1046;
    }
  }
  {}
  if ((_8446 == std::string ("errThreadMutexUnlock")))
  {
    {
      return (int)1047;
    }
  }
  {}
  if ((_8446 == std::string ("errThreadCreate")))
  {
    {
      return (int)1048;
    }
  }
  {}
  if ((_8446 == std::string ("errThreadCondInit")))
  {
    {
      return (int)1049;
    }
  }
  {}
  if ((_8446 == std::string ("errUnknown")))
  {
    {
      return (int)1050;
    }
  }
  {}
  if ((_8446 == std::string ("errSpace")))
  {
    {
      return (int)1051;
    }
  }
  {}
  if ((_8446 == std::string ("errFileOpen")))
  {
    {
      return (int)1052;
    }
  }
  {}
  if ((_8446 == std::string ("errFileRead")))
  {
    {
      return (int)1053;
    }
  }
  {}
  if ((_8446 == std::string ("errFileWrite")))
  {
    {
      return (int)1054;
    }
  }
  {}
  if ((_8446 == std::string ("errDataFileExt")))
  {
    {
      return (int)1055;
    }
  }
  {}
  if ((_8446 == std::string ("errInvalidFileName")))
  {
    {
      return (int)1056;
    }
  }
  {}
  if ((_8446 == std::string ("errInvalidSolFileName")))
  {
    {
      return (int)1057;
    }
  }
  {}
  if ((_8446 == std::string ("errEndOfFile")))
  {
    {
      return (int)1059;
    }
  }
  {}
  if ((_8446 == std::string ("errNullEnv")))
  {
    {
      return (int)1060;
    }
  }
  {}
  if ((_8446 == std::string ("errNullTask")))
  {
    {
      return (int)1061;
    }
  }
  {}
  if ((_8446 == std::string ("errInvalidStream")))
  {
    {
      return (int)1062;
    }
  }
  {}
  if ((_8446 == std::string ("errNoInitEnv")))
  {
    {
      return (int)1063;
    }
  }
  {}
  if ((_8446 == std::string ("errInvalidTask")))
  {
    {
      return (int)1064;
    }
  }
  {}
  if ((_8446 == std::string ("errNullPointer")))
  {
    {
      return (int)1065;
    }
  }
  {}
  if ((_8446 == std::string ("errLivingTasks")))
  {
    {
      return (int)1066;
    }
  }
  {}
  if ((_8446 == std::string ("errBlankName")))
  {
    {
      return (int)1070;
    }
  }
  {}
  if ((_8446 == std::string ("errDupName")))
  {
    {
      return (int)1071;
    }
  }
  {}
  if ((_8446 == std::string ("errFormatString")))
  {
    {
      return (int)1072;
    }
  }
  {}
  if ((_8446 == std::string ("errInvalidObjName")))
  {
    {
      return (int)1075;
    }
  }
  {}
  if ((_8446 == std::string ("errInvalidConName")))
  {
    {
      return (int)1076;
    }
  }
  {}
  if ((_8446 == std::string ("errInvalidVarName")))
  {
    {
      return (int)1077;
    }
  }
  {}
  if ((_8446 == std::string ("errInvalidConeName")))
  {
    {
      return (int)1078;
    }
  }
  {}
  if ((_8446 == std::string ("errInvalidBarvarName")))
  {
    {
      return (int)1079;
    }
  }
  {}
  if ((_8446 == std::string ("errSpaceLeaking")))
  {
    {
      return (int)1080;
    }
  }
  {}
  if ((_8446 == std::string ("errSpaceNoInfo")))
  {
    {
      return (int)1081;
    }
  }
  {}
  if ((_8446 == std::string ("errReadFormat")))
  {
    {
      return (int)1090;
    }
  }
  {}
  if ((_8446 == std::string ("errMpsFile")))
  {
    {
      return (int)1100;
    }
  }
  {}
  if ((_8446 == std::string ("errMpsInvField")))
  {
    {
      return (int)1101;
    }
  }
  {}
  if ((_8446 == std::string ("errMpsInvMarker")))
  {
    {
      return (int)1102;
    }
  }
  {}
  if ((_8446 == std::string ("errMpsNullConName")))
  {
    {
      return (int)1103;
    }
  }
  {}
  if ((_8446 == std::string ("errMpsNullVarName")))
  {
    {
      return (int)1104;
    }
  }
  {}
  if ((_8446 == std::string ("errMpsUndefConName")))
  {
    {
      return (int)1105;
    }
  }
  {}
  if ((_8446 == std::string ("errMpsUndefVarName")))
  {
    {
      return (int)1106;
    }
  }
  {}
  if ((_8446 == std::string ("errMpsInvConKey")))
  {
    {
      return (int)1107;
    }
  }
  {}
  if ((_8446 == std::string ("errMpsInvBoundKey")))
  {
    {
      return (int)1108;
    }
  }
  {}
  if ((_8446 == std::string ("errMpsInvSecName")))
  {
    {
      return (int)1109;
    }
  }
  {}
  if ((_8446 == std::string ("errMpsNoObjective")))
  {
    {
      return (int)1110;
    }
  }
  {}
  if ((_8446 == std::string ("errMpsSplittedVar")))
  {
    {
      return (int)1111;
    }
  }
  {}
  if ((_8446 == std::string ("errMpsMulConName")))
  {
    {
      return (int)1112;
    }
  }
  {}
  if ((_8446 == std::string ("errMpsMulQsec")))
  {
    {
      return (int)1113;
    }
  }
  {}
  if ((_8446 == std::string ("errMpsMulQobj")))
  {
    {
      return (int)1114;
    }
  }
  {}
  if ((_8446 == std::string ("errMpsInvSecOrder")))
  {
    {
      return (int)1115;
    }
  }
  {}
  if ((_8446 == std::string ("errMpsMulCsec")))
  {
    {
      return (int)1116;
    }
  }
  {}
  if ((_8446 == std::string ("errMpsConeType")))
  {
    {
      return (int)1117;
    }
  }
  {}
  if ((_8446 == std::string ("errMpsConeOverlap")))
  {
    {
      return (int)1118;
    }
  }
  {}
  if ((_8446 == std::string ("errMpsConeRepeat")))
  {
    {
      return (int)1119;
    }
  }
  {}
  if ((_8446 == std::string ("errMpsNonSymmetricQ")))
  {
    {
      return (int)1120;
    }
  }
  {}
  if ((_8446 == std::string ("errMpsDuplicateQElement")))
  {
    {
      return (int)1121;
    }
  }
  {}
  if ((_8446 == std::string ("errMpsInvalidObjsense")))
  {
    {
      return (int)1122;
    }
  }
  {}
  if ((_8446 == std::string ("errMpsTabInField2")))
  {
    {
      return (int)1125;
    }
  }
  {}
  if ((_8446 == std::string ("errMpsTabInField3")))
  {
    {
      return (int)1126;
    }
  }
  {}
  if ((_8446 == std::string ("errMpsTabInField5")))
  {
    {
      return (int)1127;
    }
  }
  {}
  if ((_8446 == std::string ("errMpsInvalidObjName")))
  {
    {
      return (int)1128;
    }
  }
  {}
  if ((_8446 == std::string ("errLpIncompatible")))
  {
    {
      return (int)1150;
    }
  }
  {}
  if ((_8446 == std::string ("errLpEmpty")))
  {
    {
      return (int)1151;
    }
  }
  {}
  if ((_8446 == std::string ("errLpDupSlackName")))
  {
    {
      return (int)1152;
    }
  }
  {}
  if ((_8446 == std::string ("errWriteMpsInvalidName")))
  {
    {
      return (int)1153;
    }
  }
  {}
  if ((_8446 == std::string ("errLpInvalidVarName")))
  {
    {
      return (int)1154;
    }
  }
  {}
  if ((_8446 == std::string ("errLpFreeConstraint")))
  {
    {
      return (int)1155;
    }
  }
  {}
  if ((_8446 == std::string ("errWriteOpfInvalidVarName")))
  {
    {
      return (int)1156;
    }
  }
  {}
  if ((_8446 == std::string ("errLpFileFormat")))
  {
    {
      return (int)1157;
    }
  }
  {}
  if ((_8446 == std::string ("errWriteLpFormat")))
  {
    {
      return (int)1158;
    }
  }
  {}
  if ((_8446 == std::string ("errReadLpMissingEndTag")))
  {
    {
      return (int)1159;
    }
  }
  {}
  if ((_8446 == std::string ("errLpFormat")))
  {
    {
      return (int)1160;
    }
  }
  {}
  if ((_8446 == std::string ("errWriteLpNonUniqueName")))
  {
    {
      return (int)1161;
    }
  }
  {}
  if ((_8446 == std::string ("errReadLpNonexistingName")))
  {
    {
      return (int)1162;
    }
  }
  {}
  if ((_8446 == std::string ("errLpWriteConicProblem")))
  {
    {
      return (int)1163;
    }
  }
  {}
  if ((_8446 == std::string ("errLpWriteGecoProblem")))
  {
    {
      return (int)1164;
    }
  }
  {}
  if ((_8446 == std::string ("errWritingFile")))
  {
    {
      return (int)1166;
    }
  }
  {}
  if ((_8446 == std::string ("errPtfFormat")))
  {
    {
      return (int)1167;
    }
  }
  {}
  if ((_8446 == std::string ("errOpfFormat")))
  {
    {
      return (int)1168;
    }
  }
  {}
  if ((_8446 == std::string ("errOpfNewVariable")))
  {
    {
      return (int)1169;
    }
  }
  {}
  if ((_8446 == std::string ("errInvalidNameInSolFile")))
  {
    {
      return (int)1170;
    }
  }
  {}
  if ((_8446 == std::string ("errLpInvalidConName")))
  {
    {
      return (int)1171;
    }
  }
  {}
  if ((_8446 == std::string ("errOpfPrematureEof")))
  {
    {
      return (int)1172;
    }
  }
  {}
  if ((_8446 == std::string ("errJsonSyntax")))
  {
    {
      return (int)1175;
    }
  }
  {}
  if ((_8446 == std::string ("errJsonString")))
  {
    {
      return (int)1176;
    }
  }
  {}
  if ((_8446 == std::string ("errJsonNumberOverflow")))
  {
    {
      return (int)1177;
    }
  }
  {}
  if ((_8446 == std::string ("errJsonFormat")))
  {
    {
      return (int)1178;
    }
  }
  {}
  if ((_8446 == std::string ("errJsonData")))
  {
    {
      return (int)1179;
    }
  }
  {}
  if ((_8446 == std::string ("errJsonMissingData")))
  {
    {
      return (int)1180;
    }
  }
  {}
  if ((_8446 == std::string ("errArgumentLenneq")))
  {
    {
      return (int)1197;
    }
  }
  {}
  if ((_8446 == std::string ("errArgumentType")))
  {
    {
      return (int)1198;
    }
  }
  {}
  if ((_8446 == std::string ("errNumArguments")))
  {
    {
      return (int)1199;
    }
  }
  {}
  if ((_8446 == std::string ("errInArgument")))
  {
    {
      return (int)1200;
    }
  }
  {}
  if ((_8446 == std::string ("errArgumentDimension")))
  {
    {
      return (int)1201;
    }
  }
  {}
  if ((_8446 == std::string ("errShapeIsTooLarge")))
  {
    {
      return (int)1202;
    }
  }
  {}
  if ((_8446 == std::string ("errIndexIsTooSmall")))
  {
    {
      return (int)1203;
    }
  }
  {}
  if ((_8446 == std::string ("errIndexIsTooLarge")))
  {
    {
      return (int)1204;
    }
  }
  {}
  if ((_8446 == std::string ("errParamName")))
  {
    {
      return (int)1205;
    }
  }
  {}
  if ((_8446 == std::string ("errParamNameDou")))
  {
    {
      return (int)1206;
    }
  }
  {}
  if ((_8446 == std::string ("errParamNameInt")))
  {
    {
      return (int)1207;
    }
  }
  {}
  if ((_8446 == std::string ("errParamNameStr")))
  {
    {
      return (int)1208;
    }
  }
  {}
  if ((_8446 == std::string ("errParamIndex")))
  {
    {
      return (int)1210;
    }
  }
  {}
  if ((_8446 == std::string ("errParamIsTooLarge")))
  {
    {
      return (int)1215;
    }
  }
  {}
  if ((_8446 == std::string ("errParamIsTooSmall")))
  {
    {
      return (int)1216;
    }
  }
  {}
  if ((_8446 == std::string ("errParamValueStr")))
  {
    {
      return (int)1217;
    }
  }
  {}
  if ((_8446 == std::string ("errParamType")))
  {
    {
      return (int)1218;
    }
  }
  {}
  if ((_8446 == std::string ("errInfDouIndex")))
  {
    {
      return (int)1219;
    }
  }
  {}
  if ((_8446 == std::string ("errInfIntIndex")))
  {
    {
      return (int)1220;
    }
  }
  {}
  if ((_8446 == std::string ("errIndexArrIsTooSmall")))
  {
    {
      return (int)1221;
    }
  }
  {}
  if ((_8446 == std::string ("errIndexArrIsTooLarge")))
  {
    {
      return (int)1222;
    }
  }
  {}
  if ((_8446 == std::string ("errInfLintIndex")))
  {
    {
      return (int)1225;
    }
  }
  {}
  if ((_8446 == std::string ("errArgIsTooSmall")))
  {
    {
      return (int)1226;
    }
  }
  {}
  if ((_8446 == std::string ("errArgIsTooLarge")))
  {
    {
      return (int)1227;
    }
  }
  {}
  if ((_8446 == std::string ("errInvalidWhichsol")))
  {
    {
      return (int)1228;
    }
  }
  {}
  if ((_8446 == std::string ("errInfDouName")))
  {
    {
      return (int)1230;
    }
  }
  {}
  if ((_8446 == std::string ("errInfIntName")))
  {
    {
      return (int)1231;
    }
  }
  {}
  if ((_8446 == std::string ("errInfType")))
  {
    {
      return (int)1232;
    }
  }
  {}
  if ((_8446 == std::string ("errInfLintName")))
  {
    {
      return (int)1234;
    }
  }
  {}
  if ((_8446 == std::string ("errIndex")))
  {
    {
      return (int)1235;
    }
  }
  {}
  if ((_8446 == std::string ("errWhichsol")))
  {
    {
      return (int)1236;
    }
  }
  {}
  if ((_8446 == std::string ("errSolitem")))
  {
    {
      return (int)1237;
    }
  }
  {}
  if ((_8446 == std::string ("errWhichitemNotAllowed")))
  {
    {
      return (int)1238;
    }
  }
  {}
  if ((_8446 == std::string ("errMaxnumcon")))
  {
    {
      return (int)1240;
    }
  }
  {}
  if ((_8446 == std::string ("errMaxnumvar")))
  {
    {
      return (int)1241;
    }
  }
  {}
  if ((_8446 == std::string ("errMaxnumbarvar")))
  {
    {
      return (int)1242;
    }
  }
  {}
  if ((_8446 == std::string ("errMaxnumqnz")))
  {
    {
      return (int)1243;
    }
  }
  {}
  if ((_8446 == std::string ("errTooSmallMaxNumNz")))
  {
    {
      return (int)1245;
    }
  }
  {}
  if ((_8446 == std::string ("errInvalidIdx")))
  {
    {
      return (int)1246;
    }
  }
  {}
  if ((_8446 == std::string ("errInvalidMaxNum")))
  {
    {
      return (int)1247;
    }
  }
  {}
  if ((_8446 == std::string ("errNumconlim")))
  {
    {
      return (int)1250;
    }
  }
  {}
  if ((_8446 == std::string ("errNumvarlim")))
  {
    {
      return (int)1251;
    }
  }
  {}
  if ((_8446 == std::string ("errTooSmallMaxnumanz")))
  {
    {
      return (int)1252;
    }
  }
  {}
  if ((_8446 == std::string ("errInvAptre")))
  {
    {
      return (int)1253;
    }
  }
  {}
  if ((_8446 == std::string ("errMulAElement")))
  {
    {
      return (int)1254;
    }
  }
  {}
  if ((_8446 == std::string ("errInvBk")))
  {
    {
      return (int)1255;
    }
  }
  {}
  if ((_8446 == std::string ("errInvBkc")))
  {
    {
      return (int)1256;
    }
  }
  {}
  if ((_8446 == std::string ("errInvBkx")))
  {
    {
      return (int)1257;
    }
  }
  {}
  if ((_8446 == std::string ("errInvVarType")))
  {
    {
      return (int)1258;
    }
  }
  {}
  if ((_8446 == std::string ("errSolverProbtype")))
  {
    {
      return (int)1259;
    }
  }
  {}
  if ((_8446 == std::string ("errObjectiveRange")))
  {
    {
      return (int)1260;
    }
  }
  {}
  if ((_8446 == std::string ("errUndefSolution")))
  {
    {
      return (int)1265;
    }
  }
  {}
  if ((_8446 == std::string ("errBasis")))
  {
    {
      return (int)1266;
    }
  }
  {}
  if ((_8446 == std::string ("errInvSkc")))
  {
    {
      return (int)1267;
    }
  }
  {}
  if ((_8446 == std::string ("errInvSkx")))
  {
    {
      return (int)1268;
    }
  }
  {}
  if ((_8446 == std::string ("errInvSkn")))
  {
    {
      return (int)1274;
    }
  }
  {}
  if ((_8446 == std::string ("errInvSkStr")))
  {
    {
      return (int)1269;
    }
  }
  {}
  if ((_8446 == std::string ("errInvSk")))
  {
    {
      return (int)1270;
    }
  }
  {}
  if ((_8446 == std::string ("errInvConeTypeStr")))
  {
    {
      return (int)1271;
    }
  }
  {}
  if ((_8446 == std::string ("errInvConeType")))
  {
    {
      return (int)1272;
    }
  }
  {}
  if ((_8446 == std::string ("errInvalidSurplus")))
  {
    {
      return (int)1275;
    }
  }
  {}
  if ((_8446 == std::string ("errInvNameItem")))
  {
    {
      return (int)1280;
    }
  }
  {}
  if ((_8446 == std::string ("errProItem")))
  {
    {
      return (int)1281;
    }
  }
  {}
  if ((_8446 == std::string ("errInvalidFormatType")))
  {
    {
      return (int)1283;
    }
  }
  {}
  if ((_8446 == std::string ("errFirsti")))
  {
    {
      return (int)1285;
    }
  }
  {}
  if ((_8446 == std::string ("errLasti")))
  {
    {
      return (int)1286;
    }
  }
  {}
  if ((_8446 == std::string ("errFirstj")))
  {
    {
      return (int)1287;
    }
  }
  {}
  if ((_8446 == std::string ("errLastj")))
  {
    {
      return (int)1288;
    }
  }
  {}
  if ((_8446 == std::string ("errMaxLenIsTooSmall")))
  {
    {
      return (int)1289;
    }
  }
  {}
  if ((_8446 == std::string ("errNonlinearEquality")))
  {
    {
      return (int)1290;
    }
  }
  {}
  if ((_8446 == std::string ("errNonconvex")))
  {
    {
      return (int)1291;
    }
  }
  {}
  if ((_8446 == std::string ("errNonlinearRanged")))
  {
    {
      return (int)1292;
    }
  }
  {}
  if ((_8446 == std::string ("errConQNotPsd")))
  {
    {
      return (int)1293;
    }
  }
  {}
  if ((_8446 == std::string ("errConQNotNsd")))
  {
    {
      return (int)1294;
    }
  }
  {}
  if ((_8446 == std::string ("errObjQNotPsd")))
  {
    {
      return (int)1295;
    }
  }
  {}
  if ((_8446 == std::string ("errObjQNotNsd")))
  {
    {
      return (int)1296;
    }
  }
  {}
  if ((_8446 == std::string ("errArgumentPermArray")))
  {
    {
      return (int)1299;
    }
  }
  {}
  if ((_8446 == std::string ("errConeIndex")))
  {
    {
      return (int)1300;
    }
  }
  {}
  if ((_8446 == std::string ("errConeSize")))
  {
    {
      return (int)1301;
    }
  }
  {}
  if ((_8446 == std::string ("errConeOverlap")))
  {
    {
      return (int)1302;
    }
  }
  {}
  if ((_8446 == std::string ("errConeRepVar")))
  {
    {
      return (int)1303;
    }
  }
  {}
  if ((_8446 == std::string ("errMaxnumcone")))
  {
    {
      return (int)1304;
    }
  }
  {}
  if ((_8446 == std::string ("errConeType")))
  {
    {
      return (int)1305;
    }
  }
  {}
  if ((_8446 == std::string ("errConeTypeStr")))
  {
    {
      return (int)1306;
    }
  }
  {}
  if ((_8446 == std::string ("errConeOverlapAppend")))
  {
    {
      return (int)1307;
    }
  }
  {}
  if ((_8446 == std::string ("errRemoveConeVariable")))
  {
    {
      return (int)1310;
    }
  }
  {}
  if ((_8446 == std::string ("errAppendingTooBigCone")))
  {
    {
      return (int)1311;
    }
  }
  {}
  if ((_8446 == std::string ("errConeParameter")))
  {
    {
      return (int)1320;
    }
  }
  {}
  if ((_8446 == std::string ("errSolFileInvalidNumber")))
  {
    {
      return (int)1350;
    }
  }
  {}
  if ((_8446 == std::string ("errHugeC")))
  {
    {
      return (int)1375;
    }
  }
  {}
  if ((_8446 == std::string ("errHugeAij")))
  {
    {
      return (int)1380;
    }
  }
  {}
  if ((_8446 == std::string ("errDuplicateAij")))
  {
    {
      return (int)1385;
    }
  }
  {}
  if ((_8446 == std::string ("errLowerBoundIsANan")))
  {
    {
      return (int)1390;
    }
  }
  {}
  if ((_8446 == std::string ("errUpperBoundIsANan")))
  {
    {
      return (int)1391;
    }
  }
  {}
  if ((_8446 == std::string ("errInfiniteBound")))
  {
    {
      return (int)1400;
    }
  }
  {}
  if ((_8446 == std::string ("errInvQobjSubi")))
  {
    {
      return (int)1401;
    }
  }
  {}
  if ((_8446 == std::string ("errInvQobjSubj")))
  {
    {
      return (int)1402;
    }
  }
  {}
  if ((_8446 == std::string ("errInvQobjVal")))
  {
    {
      return (int)1403;
    }
  }
  {}
  if ((_8446 == std::string ("errInvQconSubk")))
  {
    {
      return (int)1404;
    }
  }
  {}
  if ((_8446 == std::string ("errInvQconSubi")))
  {
    {
      return (int)1405;
    }
  }
  {}
  if ((_8446 == std::string ("errInvQconSubj")))
  {
    {
      return (int)1406;
    }
  }
  {}
  if ((_8446 == std::string ("errInvQconVal")))
  {
    {
      return (int)1407;
    }
  }
  {}
  if ((_8446 == std::string ("errQconSubiTooSmall")))
  {
    {
      return (int)1408;
    }
  }
  {}
  if ((_8446 == std::string ("errQconSubiTooLarge")))
  {
    {
      return (int)1409;
    }
  }
  {}
  if ((_8446 == std::string ("errQobjUpperTriangle")))
  {
    {
      return (int)1415;
    }
  }
  {}
  if ((_8446 == std::string ("errQconUpperTriangle")))
  {
    {
      return (int)1417;
    }
  }
  {}
  if ((_8446 == std::string ("errFixedBoundValues")))
  {
    {
      return (int)1420;
    }
  }
  {}
  if ((_8446 == std::string ("errTooSmallATruncationValue")))
  {
    {
      return (int)1421;
    }
  }
  {}
  if ((_8446 == std::string ("errInvalidObjectiveSense")))
  {
    {
      return (int)1445;
    }
  }
  {}
  if ((_8446 == std::string ("errUndefinedObjectiveSense")))
  {
    {
      return (int)1446;
    }
  }
  {}
  if ((_8446 == std::string ("errYIsUndefined")))
  {
    {
      return (int)1449;
    }
  }
  {}
  if ((_8446 == std::string ("errNanInDoubleData")))
  {
    {
      return (int)1450;
    }
  }
  {}
  if ((_8446 == std::string ("errNanInBlc")))
  {
    {
      return (int)1461;
    }
  }
  {}
  if ((_8446 == std::string ("errNanInBuc")))
  {
    {
      return (int)1462;
    }
  }
  {}
  if ((_8446 == std::string ("errNanInC")))
  {
    {
      return (int)1470;
    }
  }
  {}
  if ((_8446 == std::string ("errNanInBlx")))
  {
    {
      return (int)1471;
    }
  }
  {}
  if ((_8446 == std::string ("errNanInBux")))
  {
    {
      return (int)1472;
    }
  }
  {}
  if ((_8446 == std::string ("errInvalidAij")))
  {
    {
      return (int)1473;
    }
  }
  {}
  if ((_8446 == std::string ("errInvalidCj")))
  {
    {
      return (int)1474;
    }
  }
  {}
  if ((_8446 == std::string ("errSymMatInvalid")))
  {
    {
      return (int)1480;
    }
  }
  {}
  if ((_8446 == std::string ("errSymMatHuge")))
  {
    {
      return (int)1482;
    }
  }
  {}
  if ((_8446 == std::string ("errInvProblem")))
  {
    {
      return (int)1500;
    }
  }
  {}
  if ((_8446 == std::string ("errMixedConicAndNl")))
  {
    {
      return (int)1501;
    }
  }
  {}
  if ((_8446 == std::string ("errGlobalInvConicProblem")))
  {
    {
      return (int)1503;
    }
  }
  {}
  if ((_8446 == std::string ("errInvOptimizer")))
  {
    {
      return (int)1550;
    }
  }
  {}
  if ((_8446 == std::string ("errMioNoOptimizer")))
  {
    {
      return (int)1551;
    }
  }
  {}
  if ((_8446 == std::string ("errNoOptimizerVarType")))
  {
    {
      return (int)1552;
    }
  }
  {}
  if ((_8446 == std::string ("errFinalSolution")))
  {
    {
      return (int)1560;
    }
  }
  {}
  if ((_8446 == std::string ("errFirst")))
  {
    {
      return (int)1570;
    }
  }
  {}
  if ((_8446 == std::string ("errLast")))
  {
    {
      return (int)1571;
    }
  }
  {}
  if ((_8446 == std::string ("errSliceSize")))
  {
    {
      return (int)1572;
    }
  }
  {}
  if ((_8446 == std::string ("errNegativeSurplus")))
  {
    {
      return (int)1573;
    }
  }
  {}
  if ((_8446 == std::string ("errNegativeAppend")))
  {
    {
      return (int)1578;
    }
  }
  {}
  if ((_8446 == std::string ("errPostsolve")))
  {
    {
      return (int)1580;
    }
  }
  {}
  if ((_8446 == std::string ("errOverflow")))
  {
    {
      return (int)1590;
    }
  }
  {}
  if ((_8446 == std::string ("errNoBasisSol")))
  {
    {
      return (int)1600;
    }
  }
  {}
  if ((_8446 == std::string ("errBasisFactor")))
  {
    {
      return (int)1610;
    }
  }
  {}
  if ((_8446 == std::string ("errBasisSingular")))
  {
    {
      return (int)1615;
    }
  }
  {}
  if ((_8446 == std::string ("errFactor")))
  {
    {
      return (int)1650;
    }
  }
  {}
  if ((_8446 == std::string ("errFeasrepairCannotRelax")))
  {
    {
      return (int)1700;
    }
  }
  {}
  if ((_8446 == std::string ("errFeasrepairSolvingRelaxed")))
  {
    {
      return (int)1701;
    }
  }
  {}
  if ((_8446 == std::string ("errFeasrepairInconsistentBound")))
  {
    {
      return (int)1702;
    }
  }
  {}
  if ((_8446 == std::string ("errRepairInvalidProblem")))
  {
    {
      return (int)1710;
    }
  }
  {}
  if ((_8446 == std::string ("errRepairOptimizationFailed")))
  {
    {
      return (int)1711;
    }
  }
  {}
  if ((_8446 == std::string ("errNameMaxLen")))
  {
    {
      return (int)1750;
    }
  }
  {}
  if ((_8446 == std::string ("errNameIsNull")))
  {
    {
      return (int)1760;
    }
  }
  {}
  if ((_8446 == std::string ("errInvalidCompression")))
  {
    {
      return (int)1800;
    }
  }
  {}
  if ((_8446 == std::string ("errInvalidIomode")))
  {
    {
      return (int)1801;
    }
  }
  {}
  if ((_8446 == std::string ("errNoPrimalInfeasCer")))
  {
    {
      return (int)2000;
    }
  }
  {}
  if ((_8446 == std::string ("errNoDualInfeasCer")))
  {
    {
      return (int)2001;
    }
  }
  {}
  if ((_8446 == std::string ("errNoSolutionInCallback")))
  {
    {
      return (int)2500;
    }
  }
  {}
  if ((_8446 == std::string ("errInvMarki")))
  {
    {
      return (int)2501;
    }
  }
  {}
  if ((_8446 == std::string ("errInvMarkj")))
  {
    {
      return (int)2502;
    }
  }
  {}
  if ((_8446 == std::string ("errInvNumi")))
  {
    {
      return (int)2503;
    }
  }
  {}
  if ((_8446 == std::string ("errInvNumj")))
  {
    {
      return (int)2504;
    }
  }
  {}
  if ((_8446 == std::string ("errTaskIncompatible")))
  {
    {
      return (int)2560;
    }
  }
  {}
  if ((_8446 == std::string ("errTaskInvalid")))
  {
    {
      return (int)2561;
    }
  }
  {}
  if ((_8446 == std::string ("errTaskWrite")))
  {
    {
      return (int)2562;
    }
  }
  {}
  if ((_8446 == std::string ("errLuMaxNumTries")))
  {
    {
      return (int)2800;
    }
  }
  {}
  if ((_8446 == std::string ("errInvalidUtf8")))
  {
    {
      return (int)2900;
    }
  }
  {}
  if ((_8446 == std::string ("errInvalidWchar")))
  {
    {
      return (int)2901;
    }
  }
  {}
  if ((_8446 == std::string ("errNoDualForItgSol")))
  {
    {
      return (int)2950;
    }
  }
  {}
  if ((_8446 == std::string ("errNoSnxForBasSol")))
  {
    {
      return (int)2953;
    }
  }
  {}
  if ((_8446 == std::string ("errInternal")))
  {
    {
      return (int)3000;
    }
  }
  {}
  if ((_8446 == std::string ("errApiArrayTooSmall")))
  {
    {
      return (int)3001;
    }
  }
  {}
  if ((_8446 == std::string ("errApiCbConnect")))
  {
    {
      return (int)3002;
    }
  }
  {}
  if ((_8446 == std::string ("errApiFatalError")))
  {
    {
      return (int)3005;
    }
  }
  {}
  if ((_8446 == std::string ("errApiInternal")))
  {
    {
      return (int)3999;
    }
  }
  {}
  if ((_8446 == std::string ("errSenFormat")))
  {
    {
      return (int)3050;
    }
  }
  {}
  if ((_8446 == std::string ("errSenUndefName")))
  {
    {
      return (int)3051;
    }
  }
  {}
  if ((_8446 == std::string ("errSenIndexRange")))
  {
    {
      return (int)3052;
    }
  }
  {}
  if ((_8446 == std::string ("errSenBoundInvalidUp")))
  {
    {
      return (int)3053;
    }
  }
  {}
  if ((_8446 == std::string ("errSenBoundInvalidLo")))
  {
    {
      return (int)3054;
    }
  }
  {}
  if ((_8446 == std::string ("errSenIndexInvalid")))
  {
    {
      return (int)3055;
    }
  }
  {}
  if ((_8446 == std::string ("errSenInvalidRegexp")))
  {
    {
      return (int)3056;
    }
  }
  {}
  if ((_8446 == std::string ("errSenSolutionStatus")))
  {
    {
      return (int)3057;
    }
  }
  {}
  if ((_8446 == std::string ("errSenNumerical")))
  {
    {
      return (int)3058;
    }
  }
  {}
  if ((_8446 == std::string ("errSenUnhandledProblemType")))
  {
    {
      return (int)3080;
    }
  }
  {}
  if ((_8446 == std::string ("errUnbStepSize")))
  {
    {
      return (int)3100;
    }
  }
  {}
  if ((_8446 == std::string ("errIdenticalTasks")))
  {
    {
      return (int)3101;
    }
  }
  {}
  if ((_8446 == std::string ("errAdInvalidCodelist")))
  {
    {
      return (int)3102;
    }
  }
  {}
  if ((_8446 == std::string ("errInternalTestFailed")))
  {
    {
      return (int)3500;
    }
  }
  {}
  if ((_8446 == std::string ("errXmlInvalidProblemType")))
  {
    {
      return (int)3600;
    }
  }
  {}
  if ((_8446 == std::string ("errInvalidAmplStub")))
  {
    {
      return (int)3700;
    }
  }
  {}
  if ((_8446 == std::string ("errInt64ToInt32Cast")))
  {
    {
      return (int)3800;
    }
  }
  {}
  if ((_8446 == std::string ("errSizeLicenseNumcores")))
  {
    {
      return (int)3900;
    }
  }
  {}
  if ((_8446 == std::string ("errInfeasUndefined")))
  {
    {
      return (int)3910;
    }
  }
  {}
  if ((_8446 == std::string ("errNoBarxForSolution")))
  {
    {
      return (int)3915;
    }
  }
  {}
  if ((_8446 == std::string ("errNoBarsForSolution")))
  {
    {
      return (int)3916;
    }
  }
  {}
  if ((_8446 == std::string ("errBarVarDim")))
  {
    {
      return (int)3920;
    }
  }
  {}
  if ((_8446 == std::string ("errSymMatInvalidRowIndex")))
  {
    {
      return (int)3940;
    }
  }
  {}
  if ((_8446 == std::string ("errSymMatInvalidColIndex")))
  {
    {
      return (int)3941;
    }
  }
  {}
  if ((_8446 == std::string ("errSymMatNotLowerTringular")))
  {
    {
      return (int)3942;
    }
  }
  {}
  if ((_8446 == std::string ("errSymMatInvalidValue")))
  {
    {
      return (int)3943;
    }
  }
  {}
  if ((_8446 == std::string ("errSymMatDuplicate")))
  {
    {
      return (int)3944;
    }
  }
  {}
  if ((_8446 == std::string ("errInvalidSymMatDim")))
  {
    {
      return (int)3950;
    }
  }
  {}
  if ((_8446 == std::string ("errInvalidFileFormatForSymMat")))
  {
    {
      return (int)4000;
    }
  }
  {}
  if ((_8446 == std::string ("errInvalidFileFormatForCfix")))
  {
    {
      return (int)4001;
    }
  }
  {}
  if ((_8446 == std::string ("errInvalidFileFormatForRangedConstraints")))
  {
    {
      return (int)4002;
    }
  }
  {}
  if ((_8446 == std::string ("errInvalidFileFormatForFreeConstraints")))
  {
    {
      return (int)4003;
    }
  }
  {}
  if ((_8446 == std::string ("errInvalidFileFormatForCones")))
  {
    {
      return (int)4005;
    }
  }
  {}
  if ((_8446 == std::string ("errInvalidFileFormatForNonlinear")))
  {
    {
      return (int)4010;
    }
  }
  {}
  if ((_8446 == std::string ("errDuplicateConstraintNames")))
  {
    {
      return (int)4500;
    }
  }
  {}
  if ((_8446 == std::string ("errDuplicateVariableNames")))
  {
    {
      return (int)4501;
    }
  }
  {}
  if ((_8446 == std::string ("errDuplicateBarvariableNames")))
  {
    {
      return (int)4502;
    }
  }
  {}
  if ((_8446 == std::string ("errDuplicateConeNames")))
  {
    {
      return (int)4503;
    }
  }
  {}
  if ((_8446 == std::string ("errNonUniqueArray")))
  {
    {
      return (int)5000;
    }
  }
  {}
  if ((_8446 == std::string ("errArgumentIsTooLarge")))
  {
    {
      return (int)5005;
    }
  }
  {}
  if ((_8446 == std::string ("errMioInternal")))
  {
    {
      return (int)5010;
    }
  }
  {}
  if ((_8446 == std::string ("errInvalidProblemType")))
  {
    {
      return (int)6000;
    }
  }
  {}
  if ((_8446 == std::string ("errUnhandledSolutionStatus")))
  {
    {
      return (int)6010;
    }
  }
  {}
  if ((_8446 == std::string ("errUpperTriangle")))
  {
    {
      return (int)6020;
    }
  }
  {}
  if ((_8446 == std::string ("errLauSingularMatrix")))
  {
    {
      return (int)7000;
    }
  }
  {}
  if ((_8446 == std::string ("errLauNotPositiveDefinite")))
  {
    {
      return (int)7001;
    }
  }
  {}
  if ((_8446 == std::string ("errLauInvalidLowerTriangularMatrix")))
  {
    {
      return (int)7002;
    }
  }
  {}
  if ((_8446 == std::string ("errLauUnknown")))
  {
    {
      return (int)7005;
    }
  }
  {}
  if ((_8446 == std::string ("errLauArgM")))
  {
    {
      return (int)7010;
    }
  }
  {}
  if ((_8446 == std::string ("errLauArgN")))
  {
    {
      return (int)7011;
    }
  }
  {}
  if ((_8446 == std::string ("errLauArgK")))
  {
    {
      return (int)7012;
    }
  }
  {}
  if ((_8446 == std::string ("errLauArgTransa")))
  {
    {
      return (int)7015;
    }
  }
  {}
  if ((_8446 == std::string ("errLauArgTransb")))
  {
    {
      return (int)7016;
    }
  }
  {}
  if ((_8446 == std::string ("errLauArgUplo")))
  {
    {
      return (int)7017;
    }
  }
  {}
  if ((_8446 == std::string ("errLauArgTrans")))
  {
    {
      return (int)7018;
    }
  }
  {}
  if ((_8446 == std::string ("errLauInvalidSparseSymmetricMatrix")))
  {
    {
      return (int)7019;
    }
  }
  {}
  if ((_8446 == std::string ("errCbfParse")))
  {
    {
      return (int)7100;
    }
  }
  {}
  if ((_8446 == std::string ("errCbfObjSense")))
  {
    {
      return (int)7101;
    }
  }
  {}
  if ((_8446 == std::string ("errCbfNoVariables")))
  {
    {
      return (int)7102;
    }
  }
  {}
  if ((_8446 == std::string ("errCbfTooManyConstraints")))
  {
    {
      return (int)7103;
    }
  }
  {}
  if ((_8446 == std::string ("errCbfTooManyVariables")))
  {
    {
      return (int)7104;
    }
  }
  {}
  if ((_8446 == std::string ("errCbfNoVersionSpecified")))
  {
    {
      return (int)7105;
    }
  }
  {}
  if ((_8446 == std::string ("errCbfSyntax")))
  {
    {
      return (int)7106;
    }
  }
  {}
  if ((_8446 == std::string ("errCbfDuplicateObj")))
  {
    {
      return (int)7107;
    }
  }
  {}
  if ((_8446 == std::string ("errCbfDuplicateCon")))
  {
    {
      return (int)7108;
    }
  }
  {}
  if ((_8446 == std::string ("errCbfDuplicateVar")))
  {
    {
      return (int)7109;
    }
  }
  {}
  if ((_8446 == std::string ("errCbfDuplicateInt")))
  {
    {
      return (int)7110;
    }
  }
  {}
  if ((_8446 == std::string ("errCbfInvalidVarType")))
  {
    {
      return (int)7111;
    }
  }
  {}
  if ((_8446 == std::string ("errCbfInvalidConType")))
  {
    {
      return (int)7112;
    }
  }
  {}
  if ((_8446 == std::string ("errCbfInvalidDomainDimension")))
  {
    {
      return (int)7113;
    }
  }
  {}
  if ((_8446 == std::string ("errCbfDuplicateObjacoord")))
  {
    {
      return (int)7114;
    }
  }
  {}
  if ((_8446 == std::string ("errCbfDuplicateBcoord")))
  {
    {
      return (int)7115;
    }
  }
  {}
  if ((_8446 == std::string ("errCbfDuplicateAcoord")))
  {
    {
      return (int)7116;
    }
  }
  {}
  if ((_8446 == std::string ("errCbfTooFewVariables")))
  {
    {
      return (int)7117;
    }
  }
  {}
  if ((_8446 == std::string ("errCbfTooFewConstraints")))
  {
    {
      return (int)7118;
    }
  }
  {}
  if ((_8446 == std::string ("errCbfTooFewInts")))
  {
    {
      return (int)7119;
    }
  }
  {}
  if ((_8446 == std::string ("errCbfTooManyInts")))
  {
    {
      return (int)7120;
    }
  }
  {}
  if ((_8446 == std::string ("errCbfInvalidIntIndex")))
  {
    {
      return (int)7121;
    }
  }
  {}
  if ((_8446 == std::string ("errCbfUnsupported")))
  {
    {
      return (int)7122;
    }
  }
  {}
  if ((_8446 == std::string ("errCbfDuplicatePsdvar")))
  {
    {
      return (int)7123;
    }
  }
  {}
  if ((_8446 == std::string ("errCbfInvalidPsdvarDimension")))
  {
    {
      return (int)7124;
    }
  }
  {}
  if ((_8446 == std::string ("errCbfTooFewPsdvar")))
  {
    {
      return (int)7125;
    }
  }
  {}
  if ((_8446 == std::string ("errCbfInvalidExpDimension")))
  {
    {
      return (int)7126;
    }
  }
  {}
  if ((_8446 == std::string ("errCbfDuplicatePowCones")))
  {
    {
      return (int)7130;
    }
  }
  {}
  if ((_8446 == std::string ("errCbfDuplicatePowStarCones")))
  {
    {
      return (int)7131;
    }
  }
  {}
  if ((_8446 == std::string ("errCbfInvalidPower")))
  {
    {
      return (int)7132;
    }
  }
  {}
  if ((_8446 == std::string ("errCbfPowerConeIsTooLong")))
  {
    {
      return (int)7133;
    }
  }
  {}
  if ((_8446 == std::string ("errCbfInvalidPowerConeIndex")))
  {
    {
      return (int)7134;
    }
  }
  {}
  if ((_8446 == std::string ("errCbfInvalidPowerStarConeIndex")))
  {
    {
      return (int)7135;
    }
  }
  {}
  if ((_8446 == std::string ("errCbfUnhandledPowerConeType")))
  {
    {
      return (int)7136;
    }
  }
  {}
  if ((_8446 == std::string ("errCbfUnhandledPowerStarConeType")))
  {
    {
      return (int)7137;
    }
  }
  {}
  if ((_8446 == std::string ("errCbfPowerConeMismatch")))
  {
    {
      return (int)7138;
    }
  }
  {}
  if ((_8446 == std::string ("errCbfPowerStarConeMismatch")))
  {
    {
      return (int)7139;
    }
  }
  {}
  if ((_8446 == std::string ("errCbfInvalidNumberOfCones")))
  {
    {
      return (int)7740;
    }
  }
  {}
  if ((_8446 == std::string ("errCbfInvalidDimensionOfCones")))
  {
    {
      return (int)7741;
    }
  }
  {}
  if ((_8446 == std::string ("errMioInvalidRootOptimizer")))
  {
    {
      return (int)7700;
    }
  }
  {}
  if ((_8446 == std::string ("errMioInvalidNodeOptimizer")))
  {
    {
      return (int)7701;
    }
  }
  {}
  if ((_8446 == std::string ("errToconicConstrQNotPsd")))
  {
    {
      return (int)7800;
    }
  }
  {}
  if ((_8446 == std::string ("errToconicConstraintFx")))
  {
    {
      return (int)7801;
    }
  }
  {}
  if ((_8446 == std::string ("errToconicConstraintRa")))
  {
    {
      return (int)7802;
    }
  }
  {}
  if ((_8446 == std::string ("errToconicConstrNotConic")))
  {
    {
      return (int)7803;
    }
  }
  {}
  if ((_8446 == std::string ("errToconicObjectiveNotPsd")))
  {
    {
      return (int)7804;
    }
  }
  {}
  if ((_8446 == std::string ("errServerConnect")))
  {
    {
      return (int)8000;
    }
  }
  {}
  if ((_8446 == std::string ("errServerProtocol")))
  {
    {
      return (int)8001;
    }
  }
  {}
  if ((_8446 == std::string ("errServerStatus")))
  {
    {
      return (int)8002;
    }
  }
  {}
  if ((_8446 == std::string ("errServerToken")))
  {
    {
      return (int)8003;
    }
  }
  {}
  if ((_8446 == std::string ("errServerProblemSize")))
  {
    {
      return (int)8008;
    }
  }
  {}
  if ((_8446 == std::string ("trmMaxIterations")))
  {
    {
      return (int)10000;
    }
  }
  {}
  if ((_8446 == std::string ("trmMaxTime")))
  {
    {
      return (int)10001;
    }
  }
  {}
  if ((_8446 == std::string ("trmObjectiveRange")))
  {
    {
      return (int)10002;
    }
  }
  {}
  if ((_8446 == std::string ("trmMioNumRelaxs")))
  {
    {
      return (int)10008;
    }
  }
  {}
  if ((_8446 == std::string ("trmMioNumBranches")))
  {
    {
      return (int)10009;
    }
  }
  {}
  if ((_8446 == std::string ("trmNumMaxNumIntSolutions")))
  {
    {
      return (int)10015;
    }
  }
  {}
  if ((_8446 == std::string ("trmStall")))
  {
    {
      return (int)10006;
    }
  }
  {}
  if ((_8446 == std::string ("trmUserCallback")))
  {
    {
      return (int)10007;
    }
  }
  {}
  if ((_8446 == std::string ("trmMaxNumSetbacks")))
  {
    {
      return (int)10020;
    }
  }
  {}
  if ((_8446 == std::string ("trmNumericalProblem")))
  {
    {
      return (int)10025;
    }
  }
  {}
  if ((_8446 == std::string ("trmInternal")))
  {
    {
      return (int)10030;
    }
  }
  {}
  if ((_8446 == std::string ("trmInternalStop")))
  {
    {
      return (int)10031;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_xmlwriteroutputtype_value(const std::string & _8447){
  if ((_8447 == std::string ("row")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8447 == std::string ("col")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_prosta_value(const std::string & _8448){
  if ((_8448 == std::string ("unknown")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8448 == std::string ("primAndDualFeas")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8448 == std::string ("primFeas")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8448 == std::string ("dualFeas")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8448 == std::string ("primInfeas")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8448 == std::string ("dualInfeas")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8448 == std::string ("primAndDualInfeas")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8448 == std::string ("illPosed")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8448 == std::string ("primInfeasOrUnbounded")))
  {
    {
      return (int)8;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_problemtype_value(const std::string & _8449){
  if ((_8449 == std::string ("lo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8449 == std::string ("qo")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8449 == std::string ("qcqo")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8449 == std::string ("conic")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8449 == std::string ("mixed")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_problemitem_value(const std::string & _8450){
  if ((_8450 == std::string ("var")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8450 == std::string ("con")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8450 == std::string ("cone")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_parametertype_value(const std::string & _8451){
  if ((_8451 == std::string ("invalidType")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8451 == std::string ("douType")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8451 == std::string ("intType")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8451 == std::string ("strType")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_presolvemode_value(const std::string & _8452){
  if ((_8452 == std::string ("off")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8452 == std::string ("on")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8452 == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_orderingtype_value(const std::string & _8453){
  if ((_8453 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8453 == std::string ("appminloc")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8453 == std::string ("experimental")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8453 == std::string ("tryGraphpar")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8453 == std::string ("forceGraphpar")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8453 == std::string ("none")))
  {
    {
      return (int)5;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_optimizertype_value(const std::string & _8454){
  if ((_8454 == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8454 == std::string ("intpnt")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8454 == std::string ("conic")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8454 == std::string ("primalSimplex")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8454 == std::string ("dualSimplex")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8454 == std::string ("freeSimplex")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8454 == std::string ("mixedInt")))
  {
    {
      return (int)5;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_onoffkey_value(const std::string & _8455){
  if ((_8455 == std::string ("on")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8455 == std::string ("off")))
  {
    {
      return (int)0;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_objsense_value(const std::string & _8456){
  if ((_8456 == std::string ("minimize")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8456 == std::string ("maximize")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_mpsformat_value(const std::string & _8457){
  if ((_8457 == std::string ("strict")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8457 == std::string ("relaxed")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8457 == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8457 == std::string ("cplex")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_mionodeseltype_value(const std::string & _8458){
  if ((_8458 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8458 == std::string ("first")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8458 == std::string ("best")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8458 == std::string ("pseudo")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_miomode_value(const std::string & _8459){
  if ((_8459 == std::string ("ignored")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8459 == std::string ("satisfied")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_miocontsoltype_value(const std::string & _8460){
  if ((_8460 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8460 == std::string ("root")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8460 == std::string ("itg")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8460 == std::string ("itgRel")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_branchdir_value(const std::string & _8461){
  if ((_8461 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8461 == std::string ("up")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8461 == std::string ("down")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8461 == std::string ("near")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8461 == std::string ("far")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8461 == std::string ("rootLp")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8461 == std::string ("guided")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8461 == std::string ("pseudocost")))
  {
    {
      return (int)7;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_iparam_value(const std::string & _8462){
  if ((_8462 == std::string ("autoUpdateSolInfo")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8462 == std::string ("removeUnusedSolutions")))
  {
    {
      return (int)118;
    }
  }
  {}
  if ((_8462 == std::string ("intpntHotstart")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_8462 == std::string ("intpntPurify")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_8462 == std::string ("numThreads")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_8462 == std::string ("intpntMultiThread")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_8462 == std::string ("timingLevel")))
  {
    {
      return (int)152;
    }
  }
  {}
  if ((_8462 == std::string ("mtSpincount")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_8462 == std::string ("maxNumWarnings")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_8462 == std::string ("optimizer")))
  {
    {
      return (int)97;
    }
  }
  {}
  if ((_8462 == std::string ("biMaxIterations")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8462 == std::string ("licenseTrhExpiryWrn")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_8462 == std::string ("logIncludeSummary")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_8462 == std::string ("logCutSecondOpt")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_8462 == std::string ("logAnaPro")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_8462 == std::string ("logResponse")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_8462 == std::string ("logLocalInfo")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_8462 == std::string ("logBi")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_8462 == std::string ("logBiFreq")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_8462 == std::string ("biCleanOptimizer")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8462 == std::string ("intpntMaxNumRefinementSteps")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_8462 == std::string ("intpntStartingPoint")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_8462 == std::string ("intpntDiffStep")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_8462 == std::string ("intpntScaling")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_8462 == std::string ("intpntSolveForm")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_8462 == std::string ("logIntpnt")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_8462 == std::string ("intpntMaxIterations")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_8462 == std::string ("intpntOffColTrh")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_8462 == std::string ("intpntOrderMethod")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_8462 == std::string ("intpntOrderGpNumSeeds")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_8462 == std::string ("intpntBasis")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_8462 == std::string ("biIgnoreMaxIter")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8462 == std::string ("biIgnoreNumError")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8462 == std::string ("intpntMaxNumCor")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_8462 == std::string ("presolveUse")))
  {
    {
      return (int)108;
    }
  }
  {}
  if ((_8462 == std::string ("presolveLevel")))
  {
    {
      return (int)102;
    }
  }
  {}
  if ((_8462 == std::string ("logPresolve")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_8462 == std::string ("presolveLindepUse")))
  {
    {
      return (int)105;
    }
  }
  {}
  if ((_8462 == std::string ("presolveMaxNumPass")))
  {
    {
      return (int)106;
    }
  }
  {}
  if ((_8462 == std::string ("presolveEliminatorMaxNumTries")))
  {
    {
      return (int)101;
    }
  }
  {}
  if ((_8462 == std::string ("presolveEliminatorMaxFill")))
  {
    {
      return (int)100;
    }
  }
  {}
  if ((_8462 == std::string ("presolveMaxNumReductions")))
  {
    {
      return (int)107;
    }
  }
  {}
  if ((_8462 == std::string ("simStabilityPriority")))
  {
    {
      return (int)145;
    }
  }
  {}
  if ((_8462 == std::string ("simPrimalCrash")))
  {
    {
      return (int)134;
    }
  }
  {}
  if ((_8462 == std::string ("logSim")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_8462 == std::string ("logSimMinor")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_8462 == std::string ("logSimFreq")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_8462 == std::string ("simPrimalRestrictSelection")))
  {
    {
      return (int)136;
    }
  }
  {}
  if ((_8462 == std::string ("simPrimalSelection")))
  {
    {
      return (int)137;
    }
  }
  {}
  if ((_8462 == std::string ("simDualRestrictSelection")))
  {
    {
      return (int)126;
    }
  }
  {}
  if ((_8462 == std::string ("simDualSelection")))
  {
    {
      return (int)127;
    }
  }
  {}
  if ((_8462 == std::string ("simMaxIterations")))
  {
    {
      return (int)131;
    }
  }
  {}
  if ((_8462 == std::string ("simHotstartLu")))
  {
    {
      return (int)130;
    }
  }
  {}
  if ((_8462 == std::string ("simRefactorFreq")))
  {
    {
      return (int)138;
    }
  }
  {}
  if ((_8462 == std::string ("simSeed")))
  {
    {
      return (int)143;
    }
  }
  {}
  if ((_8462 == std::string ("mioMode")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_8462 == std::string ("logMio")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_8462 == std::string ("logMioFreq")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_8462 == std::string ("mioMaxNumRelaxs")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_8462 == std::string ("mioMaxNumBranches")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_8462 == std::string ("mioMaxNumRootCutRounds")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_8462 == std::string ("mioMaxNumSolutions")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_8462 == std::string ("mioNodeSelection")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_8462 == std::string ("mioHeuristicLevel")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_8462 == std::string ("mioProbingLevel")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_8462 == std::string ("mioCutSelectionLevel")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_8462 == std::string ("mioVbDetectionLevel")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_8462 == std::string ("mioBranchDir")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_8462 == std::string ("mioRootOptimizer")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_8462 == std::string ("mioNodeOptimizer")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_8462 == std::string ("mioPerspectiveReformulate")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_8462 == std::string ("mioPropagateObjectiveConstraint")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_8462 == std::string ("mioSeed")))
  {
    {
      return (int)84;
    }
  }
  {}
  if ((_8462 == std::string ("mioConicOuterApproximation")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_8462 == std::string ("readKeepFreeCon")))
  {
    {
      return (int)112;
    }
  }
  {}
  if ((_8462 == std::string ("readMpsFormat")))
  {
    {
      return (int)115;
    }
  }
  {}
  if ((_8462 == std::string ("writeMpsFormat")))
  {
    {
      return (int)170;
    }
  }
  {}
  if ((_8462 == std::string ("readMpsWidth")))
  {
    {
      return (int)116;
    }
  }
  {}
  if ((_8462 == std::string ("readDebug")))
  {
    {
      return (int)111;
    }
  }
  {}
  if ((_8462 == std::string ("readLpQuotedNames")))
  {
    {
      return (int)114;
    }
  }
  {}
  if ((_8462 == std::string ("writeDataParam")))
  {
    {
      return (int)157;
    }
  }
  {}
  if ((_8462 == std::string ("writeFreeCon")))
  {
    {
      return (int)158;
    }
  }
  {}
  if ((_8462 == std::string ("writeGenericNames")))
  {
    {
      return (int)159;
    }
  }
  {}
  if ((_8462 == std::string ("writeGenericNamesIo")))
  {
    {
      return (int)160;
    }
  }
  {}
  if ((_8462 == std::string ("writeCompression")))
  {
    {
      return (int)156;
    }
  }
  {}
  if ((_8462 == std::string ("writeMpsInt")))
  {
    {
      return (int)171;
    }
  }
  {}
  if ((_8462 == std::string ("writeLpStrictFormat")))
  {
    {
      return (int)168;
    }
  }
  {}
  if ((_8462 == std::string ("writeLpQuotedNames")))
  {
    {
      return (int)167;
    }
  }
  {}
  if ((_8462 == std::string ("writeLpLineWidth")))
  {
    {
      return (int)166;
    }
  }
  {}
  if ((_8462 == std::string ("writeLpTermsPerLine")))
  {
    {
      return (int)169;
    }
  }
  {}
  if ((_8462 == std::string ("writeLpFullObj")))
  {
    {
      return (int)165;
    }
  }
  {}
  if ((_8462 == std::string ("writePrecision")))
  {
    {
      return (int)172;
    }
  }
  {}
  if ((_8462 == std::string ("writeSolIgnoreInvalidNames")))
  {
    {
      return (int)176;
    }
  }
  {}
  if ((_8462 == std::string ("writeSolHead")))
  {
    {
      return (int)175;
    }
  }
  {}
  if ((_8462 == std::string ("writeSolConstraints")))
  {
    {
      return (int)174;
    }
  }
  {}
  if ((_8462 == std::string ("writeSolVariables")))
  {
    {
      return (int)177;
    }
  }
  {}
  if ((_8462 == std::string ("writeSolBarvariables")))
  {
    {
      return (int)173;
    }
  }
  {}
  if ((_8462 == std::string ("writeBasHead")))
  {
    {
      return (int)154;
    }
  }
  {}
  if ((_8462 == std::string ("writeBasConstraints")))
  {
    {
      return (int)153;
    }
  }
  {}
  if ((_8462 == std::string ("writeBasVariables")))
  {
    {
      return (int)155;
    }
  }
  {}
  if ((_8462 == std::string ("writeIntHead")))
  {
    {
      return (int)163;
    }
  }
  {}
  if ((_8462 == std::string ("writeIntConstraints")))
  {
    {
      return (int)162;
    }
  }
  {}
  if ((_8462 == std::string ("writeIntVariables")))
  {
    {
      return (int)164;
    }
  }
  {}
  if ((_8462 == std::string ("solReadNameWidth")))
  {
    {
      return (int)149;
    }
  }
  {}
  if ((_8462 == std::string ("solReadWidth")))
  {
    {
      return (int)150;
    }
  }
  {}
  if ((_8462 == std::string ("infeasReportAuto")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_8462 == std::string ("infeasReportLevel")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_8462 == std::string ("infeasGenericNames")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_8462 == std::string ("logInfeasAna")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_8462 == std::string ("licenseWait")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_8462 == std::string ("licenseSuppressExpireWrns")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_8462 == std::string ("licensePauseTime")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_8462 == std::string ("licenseDebug")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_8462 == std::string ("solFilterKeepBasic")))
  {
    {
      return (int)147;
    }
  }
  {}
  if ((_8462 == std::string ("solFilterKeepRanged")))
  {
    {
      return (int)148;
    }
  }
  {}
  if ((_8462 == std::string ("log")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_8462 == std::string ("logExpand")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_8462 == std::string ("logFile")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_8462 == std::string ("logOrder")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_8462 == std::string ("logSensitivity")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_8462 == std::string ("logSensitivityOpt")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_8462 == std::string ("readTaskIgnoreParam")))
  {
    {
      return (int)117;
    }
  }
  {}
  if ((_8462 == std::string ("writeTaskIncSol")))
  {
    {
      return (int)178;
    }
  }
  {}
  if ((_8462 == std::string ("paramReadCaseName")))
  {
    {
      return (int)98;
    }
  }
  {}
  if ((_8462 == std::string ("paramReadIgnError")))
  {
    {
      return (int)99;
    }
  }
  {}
  if ((_8462 == std::string ("solutionCallback")))
  {
    {
      return (int)151;
    }
  }
  {}
  if ((_8462 == std::string ("simScaling")))
  {
    {
      return (int)141;
    }
  }
  {}
  if ((_8462 == std::string ("simScalingMethod")))
  {
    {
      return (int)142;
    }
  }
  {}
  if ((_8462 == std::string ("simPrimalPhaseoneMethod")))
  {
    {
      return (int)135;
    }
  }
  {}
  if ((_8462 == std::string ("simDualPhaseoneMethod")))
  {
    {
      return (int)125;
    }
  }
  {}
  if ((_8462 == std::string ("simMaxNumSetbacks")))
  {
    {
      return (int)132;
    }
  }
  {}
  if ((_8462 == std::string ("simHotstart")))
  {
    {
      return (int)129;
    }
  }
  {}
  if ((_8462 == std::string ("simBasisFactorUse")))
  {
    {
      return (int)122;
    }
  }
  {}
  if ((_8462 == std::string ("simDegen")))
  {
    {
      return (int)123;
    }
  }
  {}
  if ((_8462 == std::string ("simReformulation")))
  {
    {
      return (int)139;
    }
  }
  {}
  if ((_8462 == std::string ("simExploitDupvec")))
  {
    {
      return (int)128;
    }
  }
  {}
  if ((_8462 == std::string ("simSaveLu")))
  {
    {
      return (int)140;
    }
  }
  {}
  if ((_8462 == std::string ("simNonSingular")))
  {
    {
      return (int)133;
    }
  }
  {}
  if ((_8462 == std::string ("simDualCrash")))
  {
    {
      return (int)124;
    }
  }
  {}
  if ((_8462 == std::string ("logStorage")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_8462 == std::string ("infeasPreferPrimal")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_8462 == std::string ("readLpDropNewVarsInBou")))
  {
    {
      return (int)113;
    }
  }
  {}
  if ((_8462 == std::string ("opfWriteLineLength")))
  {
    {
      return (int)90;
    }
  }
  {}
  if ((_8462 == std::string ("opfWriteHints")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_8462 == std::string ("opfWriteParameters")))
  {
    {
      return (int)91;
    }
  }
  {}
  if ((_8462 == std::string ("opfWriteProblem")))
  {
    {
      return (int)92;
    }
  }
  {}
  if ((_8462 == std::string ("opfWriteHeader")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_8462 == std::string ("opfWriteSolutions")))
  {
    {
      return (int)96;
    }
  }
  {}
  if ((_8462 == std::string ("opfWriteSolBas")))
  {
    {
      return (int)93;
    }
  }
  {}
  if ((_8462 == std::string ("opfWriteSolItg")))
  {
    {
      return (int)94;
    }
  }
  {}
  if ((_8462 == std::string ("opfWriteSolItr")))
  {
    {
      return (int)95;
    }
  }
  {}
  if ((_8462 == std::string ("ptfWriteTransform")))
  {
    {
      return (int)110;
    }
  }
  {}
  if ((_8462 == std::string ("primalRepairOptimizer")))
  {
    {
      return (int)109;
    }
  }
  {}
  if ((_8462 == std::string ("mioRootRepeatPresolveLevel")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_8462 == std::string ("mioCutCmir")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_8462 == std::string ("mioCutClique")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_8462 == std::string ("mioCutImpliedBound")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_8462 == std::string ("mioCutKnapsackCover")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_8462 == std::string ("mioCutGmi")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_8462 == std::string ("sensitivityType")))
  {
    {
      return (int)121;
    }
  }
  {}
  if ((_8462 == std::string ("presolveLindepRelWorkTrh")))
  {
    {
      return (int)104;
    }
  }
  {}
  if ((_8462 == std::string ("presolveLindepAbsWorkTrh")))
  {
    {
      return (int)103;
    }
  }
  {}
  if ((_8462 == std::string ("sensitivityAll")))
  {
    {
      return (int)119;
    }
  }
  {}
  if ((_8462 == std::string ("logFeasRepair")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_8462 == std::string ("cacheLicense")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8462 == std::string ("intpntRegularizationUse")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_8462 == std::string ("simSolveForm")))
  {
    {
      return (int)144;
    }
  }
  {}
  if ((_8462 == std::string ("simSwitchOptimizer")))
  {
    {
      return (int)146;
    }
  }
  {}
  if ((_8462 == std::string ("writeIgnoreIncompatibleItems")))
  {
    {
      return (int)161;
    }
  }
  {}
  if ((_8462 == std::string ("checkConvexity")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8462 == std::string ("logCheckConvexity")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_8462 == std::string ("autoSortABeforeOpt")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8462 == std::string ("sensitivityOptimizer")))
  {
    {
      return (int)120;
    }
  }
  {}
  if ((_8462 == std::string ("writeXmlMode")))
  {
    {
      return (int)179;
    }
  }
  {}
  if ((_8462 == std::string ("anaSolBasis")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8462 == std::string ("anaSolPrintViolated")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8462 == std::string ("basisSolveUsePlusOne")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8462 == std::string ("compressStatfile")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8462 == std::string ("mioRinsMaxNodes")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_8462 == std::string ("mioFeaspumpLevel")))
  {
    {
      return (int)69;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_iomode_value(const std::string & _8463){
  if ((_8463 == std::string ("read")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8463 == std::string ("write")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8463 == std::string ("readwrite")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_internal_iinf_value(const std::string & _8464){
  if ((_8464 == std::string ("versionMajor")))
  {
    {
      return (int)95;
    }
  }
  {}
  if ((_8464 == std::string ("versionMinor")))
  {
    {
      return (int)96;
    }
  }
  {}
  if ((_8464 == std::string ("versionRevision")))
  {
    {
      return (int)97;
    }
  }
  {}
  if ((_8464 == std::string ("presolveLindepWork")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_8464 == std::string ("presolveLindepPivots")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_8464 == std::string ("presolveLindepSkipped")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_8464 == std::string ("presolveOutofspace")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_8464 == std::string ("presolveBadPrecision")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_8464 == std::string ("optObjectiveSense")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_8464 == std::string ("optimizer")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_8464 == std::string ("intpntFirRefIter")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8464 == std::string ("intpntNumRefSteps")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_8464 == std::string ("intpntFactorDim")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8464 == std::string ("intpntFactorSchurNumSingular")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8464 == std::string ("intpntFactorNumDenseA")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8464 == std::string ("intpntFactorNumDenseADup")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8464 == std::string ("intpntFactorNumDenseW")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8464 == std::string ("intpntNumcon")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_8464 == std::string ("intpntNumvar")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_8464 == std::string ("intpntNumbarvar")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_8464 == std::string ("intpntNumblo")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_8464 == std::string ("intpntNumbup")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_8464 == std::string ("intpntNumbfr")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_8464 == std::string ("intpntNumbfx")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_8464 == std::string ("intpntNumcone")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_8464 == std::string ("intpntNumconevar")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_8464 == std::string ("intpntNumbndcone")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_8464 == std::string ("intpntNumrqcones")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_8464 == std::string ("intpntNumqcones")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_8464 == std::string ("intpntNumpexpcones")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_8464 == std::string ("intpntNumppowcones")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_8464 == std::string ("intpntMinconedim")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_8464 == std::string ("intpntMaxconedim")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_8464 == std::string ("intpntMaxbarvardim")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8464 == std::string ("presolveNumcon")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_8464 == std::string ("presolveNumcfr")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_8464 == std::string ("presolveNumcfx")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_8464 == std::string ("presolveNumclo")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_8464 == std::string ("presolveNumcup")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_8464 == std::string ("presolveNumcra")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_8464 == std::string ("presolveNumcnl")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_8464 == std::string ("presolveNumvar")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_8464 == std::string ("presolveNumvfr")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_8464 == std::string ("presolveNumvfx")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_8464 == std::string ("presolveNumvlo")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_8464 == std::string ("presolveNumvup")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_8464 == std::string ("presolveNumvra")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_8464 == std::string ("presolveNumvnl")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_8464 == std::string ("presolveNumnza")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_8464 == std::string ("presolveFnumcon")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_8464 == std::string ("presolveFnumcfr")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_8464 == std::string ("presolveFnumcfx")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_8464 == std::string ("presolveFnumclo")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_8464 == std::string ("presolveFnumcup")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_8464 == std::string ("presolveFnumcra")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_8464 == std::string ("presolveFnumcnl")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_8464 == std::string ("presolveFnumvar")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_8464 == std::string ("presolveFnumvfr")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_8464 == std::string ("presolveFnumvfx")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_8464 == std::string ("presolveFnumvlo")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_8464 == std::string ("presolveFnumvup")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_8464 == std::string ("presolveFnumvra")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_8464 == std::string ("presolveFnumvnl")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_8464 == std::string ("presolveFnumnza")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_8464 == std::string ("presolveNumElimns")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_8464 == std::string ("presolveEliNumTries")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_8464 == std::string ("presolveEliNumFreedCon")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_8464 == std::string ("presolveEliNumFreedConTotal")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_8464 == std::string ("presolveLindepNumTries")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_8464 == std::string ("presolveLindepNum")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_8464 == std::string ("presolveForceConNum")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_8464 == std::string ("presolveForceConNumVar")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_8464 == std::string ("presolveForceVarNum")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_8464 == std::string ("presolveForceVarNumCon")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_8464 == std::string ("presolvePivOnConNum")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_8464 == std::string ("presolveNumDouBlocks")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_8464 == std::string ("presolveNumSimplifiedDouBlocks")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_8464 == std::string ("presolveSizeSimplifiedDouBlocks")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_8464 == std::string ("presolveNumQuadConeOrthoTrans")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_8464 == std::string ("intpntFactorNum")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8464 == std::string ("intpntFactorNumSolve")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8464 == std::string ("simPrimalHotstartNumBasics")))
  {
    {
      return (int)92;
    }
  }
  {}
  if ((_8464 == std::string ("simPrimalHotstartBasisRank")))
  {
    {
      return (int)91;
    }
  }
  {}
  if ((_8464 == std::string ("simDualHotstartNumBasics")))
  {
    {
      return (int)84;
    }
  }
  {}
  if ((_8464 == std::string ("simDualHotstartBasisRank")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_8464 == std::string ("intpntGpOrderEmployed")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8464 == std::string ("numLuFactorizations")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_8464 == std::string ("simPrimalTrust")))
  {
    {
      return (int)94;
    }
  }
  {}
  if ((_8464 == std::string ("simDualTrust")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_8464 == std::string ("simPrimalNumSetbacks")))
  {
    {
      return (int)93;
    }
  }
  {}
  if ((_8464 == std::string ("simDualNumSetbacks")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_8464 == std::string ("simNumDupvec")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_8464 == std::string ("simNumPrimalBoundswaps")))
  {
    {
      return (int)90;
    }
  }
  {}
  if ((_8464 == std::string ("simNumDualBoundswaps")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_8464 == std::string ("simNumDualIntegerPivots")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_8464 == std::string ("biPrimalInfo")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8464 == std::string ("biDualInfo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8464 == std::string ("presolveLindepNumTruncTries")))
  {
    {
      return (int)57;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_internal_dinf_value(const std::string & _8465){
  if ((_8465 == std::string ("sensitivityPrimalTime")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_8465 == std::string ("sensitivityDualTime")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_8465 == std::string ("intpntGfeas")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_8465 == std::string ("intpntMu")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_8465 == std::string ("intpntInitIterTime")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_8465 == std::string ("intpntFactorTime")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_8465 == std::string ("intpntInitSearchTime")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_8465 == std::string ("intpntFormSearchTime")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_8465 == std::string ("intpntUpdateTime")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_8465 == std::string ("intpntFactorSetupTime")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_8465 == std::string ("intpntFactorSchurTime")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_8465 == std::string ("intpntFactorHatSchurTime")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_8465 == std::string ("intpntFactorHatSchurPushTime")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_8465 == std::string ("intpntFactorHatSchurPullTime")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_8465 == std::string ("intpntFactorBarSchurTime")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_8465 == std::string ("intpntFactorBarSchurDeTabTime")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8465 == std::string ("intpntFactorBarSchurSpTabTime")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_8465 == std::string ("intpntFactorSparseLTime")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_8465 == std::string ("intpntFactorSparseLUpdateLastTime")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_8465 == std::string ("intpntFactorSparseLFactorLastTime")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_8465 == std::string ("intpntFactorDenseLTime")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_8465 == std::string ("intpntFactorDenseTime")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_8465 == std::string ("intpntFactorDenseDotaTime")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_8465 == std::string ("intpntFactorDenseDotaSolveTime")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_8465 == std::string ("intpntFactorDenseDotatdotaTime")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_8465 == std::string ("intpntFactorDenseDotlInitTime")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_8465 == std::string ("intpntFactorDenseDotlFactorTime")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_8465 == std::string ("intpntIterNonCorrectorFlops")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_8465 == std::string ("intpntIterOneCorrectorFlops")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_8465 == std::string ("intpntSolveTime")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_8465 == std::string ("intpntIterRefTime")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_8465 == std::string ("intpntSolveSparseLTime")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_8465 == std::string ("intpntSolveDenseLTime")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_8465 == std::string ("intpntFactorSetupFlops")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_8465 == std::string ("intpntFactorSetupHatSchurFlops")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_8465 == std::string ("intpntFactorSchurFlops")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_8465 == std::string ("intpntFactorHatSchurFlops")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_8465 == std::string ("intpntFactorHatSchurPushFlops")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_8465 == std::string ("intpntFactorHatSchurPullFlops")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_8465 == std::string ("intpntFactorBarSchurFlops")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_8465 == std::string ("intpntFactorSparseLFlops")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_8465 == std::string ("intpntFactorMlOrderSparseLFlops")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_8465 == std::string ("intpntFactorGpOrderSparseLFlops")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_8465 == std::string ("intpntFactorSparseLUpdateLastFlops")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_8465 == std::string ("intpntFactorSparseLFactorLastFlops")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_8465 == std::string ("intpntFactorDenseLFlops")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_8465 == std::string ("intpntFactorDenseFlops")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_8465 == std::string ("intpntFactorDenseDotaFlops")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_8465 == std::string ("intpntFactorDenseDotatdotaFlops")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_8465 == std::string ("intpntFactorDenseDotlFactor_initFlops")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_8465 == std::string ("intpntFactorDenseDotlFactorFlops")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_8465 == std::string ("intpntFactorDenseDotl11FactorFlops")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_8465 == std::string ("intpntFactorDenseDotl21FactorFlops")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_8465 == std::string ("intpntFactorDenseDotl22FactorFlops")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_8465 == std::string ("presolveAcoltTime")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_8465 == std::string ("presolveSetupTime")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_8465 == std::string ("presolveCheckproTime")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_8465 == std::string ("presolveDupconTime")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_8465 == std::string ("presolveDupvarTime")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_8465 == std::string ("presolveFinalTime")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_8465 == std::string ("presolveSubDomvarTime")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_8465 == std::string ("presolveSubRelaxTime")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_8465 == std::string ("primalSimplexInftime")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_8465 == std::string ("dualSimplexInftime")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8465 == std::string ("intpntGpOrderSavedFlops")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_8465 == std::string ("intpntFactorSetupDetectDenseTime")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_8465 == std::string ("intpntFactorSetupMlOrderTime")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_8465 == std::string ("intpntFactorSetupGpOrderTime")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_8465 == std::string ("biCrashTime")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8465 == std::string ("biCrashLuTime")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8465 == std::string ("biFactorTime")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8465 == std::string ("biFactorWork")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8465 == std::string ("biPrimalDone")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8465 == std::string ("biDualDone")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8465 == std::string ("simPrimalObj")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_8465 == std::string ("simPrimalFeas")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_8465 == std::string ("simDualObj")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_8465 == std::string ("simDualFeas")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_8465 == std::string ("biPrimalObj")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8465 == std::string ("biDualObj")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8465 == std::string ("biPrimalFeas")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8465 == std::string ("biDualFeas")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8465 == std::string ("intpntPurifyTime")))
  {
    {
      return (int)63;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_inftype_value(const std::string & _8466){
  if ((_8466 == std::string ("douType")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8466 == std::string ("intType")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8466 == std::string ("lintType")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_iinfitem_value(const std::string & _8467){
  if ((_8467 == std::string ("anaProNumCon")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8467 == std::string ("anaProNumConLo")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8467 == std::string ("anaProNumConUp")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8467 == std::string ("anaProNumConRa")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8467 == std::string ("anaProNumConEq")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8467 == std::string ("anaProNumConFr")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8467 == std::string ("anaProNumVar")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8467 == std::string ("anaProNumVarLo")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_8467 == std::string ("anaProNumVarUp")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_8467 == std::string ("anaProNumVarRa")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_8467 == std::string ("anaProNumVarEq")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8467 == std::string ("anaProNumVarFr")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8467 == std::string ("anaProNumVarCont")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8467 == std::string ("anaProNumVarBin")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8467 == std::string ("anaProNumVarInt")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8467 == std::string ("optimizeResponse")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_8467 == std::string ("intpntIter")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_8467 == std::string ("intpntFactorDimDense")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_8467 == std::string ("intpntSolveDual")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_8467 == std::string ("mioNodeDepth")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_8467 == std::string ("mioNumvar")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_8467 == std::string ("mioNumbin")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_8467 == std::string ("mioNumint")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_8467 == std::string ("mioNumcont")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_8467 == std::string ("mioNumcon")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_8467 == std::string ("mioNumcone")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_8467 == std::string ("mioNumqcones")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_8467 == std::string ("mioNumrqcones")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_8467 == std::string ("mioNumpexpcones")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_8467 == std::string ("mioNumdexpcones")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_8467 == std::string ("mioNumppowcones")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_8467 == std::string ("mioNumdpowcones")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_8467 == std::string ("mioNumconevar")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_8467 == std::string ("mioNumbinconevar")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_8467 == std::string ("mioNumintconevar")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_8467 == std::string ("mioNumcontconevar")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_8467 == std::string ("mioPresolvedNumvar")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_8467 == std::string ("mioPresolvedNumbin")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_8467 == std::string ("mioPresolvedNumint")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_8467 == std::string ("mioPresolvedNumcont")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_8467 == std::string ("mioPresolvedNumcon")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_8467 == std::string ("mioPresolvedNumcone")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_8467 == std::string ("mioPresolvedNumqcones")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_8467 == std::string ("mioPresolvedNumrqcones")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_8467 == std::string ("mioPresolvedNumpexpcones")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_8467 == std::string ("mioPresolvedNumdexpcones")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_8467 == std::string ("mioPresolvedNumppowcones")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_8467 == std::string ("mioPresolvedNumdpowcones")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_8467 == std::string ("mioPresolvedNumconevar")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_8467 == std::string ("mioPresolvedNumbinconevar")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_8467 == std::string ("mioPresolvedNumintconevar")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_8467 == std::string ("mioPresolvedNumcontconevar")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_8467 == std::string ("mioCliqueTableSize")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_8467 == std::string ("mioConstructSolution")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_8467 == std::string ("mioNumIntSolutions")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_8467 == std::string ("mioObjBoundDefined")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_8467 == std::string ("mioNumActiveNodes")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_8467 == std::string ("mioNumRelax")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_8467 == std::string ("mioNumBranch")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_8467 == std::string ("mioTotalNumCuts")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_8467 == std::string ("mioNumCmirCuts")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_8467 == std::string ("mioNumCliqueCuts")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_8467 == std::string ("mioNumImpliedBoundCuts")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_8467 == std::string ("mioNumKnapsackCoverCuts")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_8467 == std::string ("mioNumGomoryCuts")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_8467 == std::string ("mioNumRepeatedPresolve")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_8467 == std::string ("mioUserObjCut")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_8467 == std::string ("mioRelgapSatisfied")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_8467 == std::string ("mioAbsgapSatisfied")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_8467 == std::string ("rdProtype")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_8467 == std::string ("rdNumcon")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_8467 == std::string ("rdNumvar")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_8467 == std::string ("rdNumbarvar")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_8467 == std::string ("rdNumintvar")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_8467 == std::string ("rdNumq")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_8467 == std::string ("simDualDegIter")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_8467 == std::string ("simDualInfIter")))
  {
    {
      return (int)84;
    }
  }
  {}
  if ((_8467 == std::string ("simDualHotstartLu")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_8467 == std::string ("simPrimalIter")))
  {
    {
      return (int)92;
    }
  }
  {}
  if ((_8467 == std::string ("simDualIter")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_8467 == std::string ("intpntNumThreads")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_8467 == std::string ("simPrimalInfIter")))
  {
    {
      return (int)91;
    }
  }
  {}
  if ((_8467 == std::string ("simPrimalDegIter")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_8467 == std::string ("simPrimalHotstart")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_8467 == std::string ("simPrimalHotstartLu")))
  {
    {
      return (int)90;
    }
  }
  {}
  if ((_8467 == std::string ("simDualHotstart")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_8467 == std::string ("solItrProsta")))
  {
    {
      return (int)98;
    }
  }
  {}
  if ((_8467 == std::string ("solItrSolsta")))
  {
    {
      return (int)99;
    }
  }
  {}
  if ((_8467 == std::string ("solBasProsta")))
  {
    {
      return (int)94;
    }
  }
  {}
  if ((_8467 == std::string ("solBasSolsta")))
  {
    {
      return (int)95;
    }
  }
  {}
  if ((_8467 == std::string ("solItgProsta")))
  {
    {
      return (int)96;
    }
  }
  {}
  if ((_8467 == std::string ("solItgSolsta")))
  {
    {
      return (int)97;
    }
  }
  {}
  if ((_8467 == std::string ("simNumcon")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_8467 == std::string ("simNumvar")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_8467 == std::string ("optNumcon")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_8467 == std::string ("optNumvar")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_8467 == std::string ("stoNumARealloc")))
  {
    {
      return (int)100;
    }
  }
  {}
  if ((_8467 == std::string ("rdNumcone")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_8467 == std::string ("simSolveDual")))
  {
    {
      return (int)93;
    }
  }
  {}
  if ((_8467 == std::string ("purifyPrimalSuccess")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_8467 == std::string ("purifyDualSuccess")))
  {
    {
      return (int)72;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_internal_liinf_value(const std::string & _8468){
  if ((_8468 == std::string ("intpntLenbarvar")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8468 == std::string ("intpntFactorNumNzBefore")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8468 == std::string ("intpntFactorNumNzAfter")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8468 == std::string ("intpntFactorMlOrderSparseLNz")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8468 == std::string ("intpntFactorGpOrderSparseLNz")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8468 == std::string ("presolveStackSize")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8468 == std::string ("intpntFactorVNz")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8468 == std::string ("intpntFactorUpdatedVNz")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_liinfitem_value(const std::string & _8469){
  if ((_8469 == std::string ("mioAnz")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8469 == std::string ("mioPresolvedAnz")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8469 == std::string ("mioSimplexIter")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8469 == std::string ("mioIntpntIter")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8469 == std::string ("biPrimalIter")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8469 == std::string ("biDualIter")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8469 == std::string ("biCleanPrimalIter")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8469 == std::string ("biCleanDualIter")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8469 == std::string ("biCleanPrimalDegIter")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8469 == std::string ("biCleanDualDegIter")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8469 == std::string ("intpntFactorNumNz")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8469 == std::string ("rdNumanz")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8469 == std::string ("rdNumqnz")))
  {
    {
      return (int)12;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_dparam_value(const std::string & _8470){
  if ((_8470 == std::string ("dataTolCjLarge")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_8470 == std::string ("dataTolCHuge")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_8470 == std::string ("dataTolAijLarge")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8470 == std::string ("dataTolAijHuge")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8470 == std::string ("dataSymMatTol")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8470 == std::string ("dataSymMatTolLarge")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8470 == std::string ("dataSymMatTolHuge")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8470 == std::string ("dataTolBoundInf")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8470 == std::string ("dataTolBoundWrn")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8470 == std::string ("dataTolQij")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_8470 == std::string ("dataTolX")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_8470 == std::string ("semidefiniteTolApprox")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_8470 == std::string ("optimizerMaxTime")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_8470 == std::string ("lowerObjCut")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_8470 == std::string ("upperObjCut")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_8470 == std::string ("upperObjCutFiniteTrh")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_8470 == std::string ("lowerObjCutFiniteTrh")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_8470 == std::string ("intpntTolRelGap")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_8470 == std::string ("intpntTolStepSize")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_8470 == std::string ("simLuTolRelPiv")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_8470 == std::string ("intpntTolRelStep")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_8470 == std::string ("intpntTolPath")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_8470 == std::string ("intpntTolPfeas")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_8470 == std::string ("intpntTolDfeas")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_8470 == std::string ("intpntTolMuRed")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_8470 == std::string ("intpntTolInfeas")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_8470 == std::string ("intpntCoTolRelGap")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_8470 == std::string ("intpntCoTolPfeas")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_8470 == std::string ("intpntCoTolDfeas")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_8470 == std::string ("intpntCoTolMuRed")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_8470 == std::string ("intpntCoTolNearRel")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_8470 == std::string ("intpntCoTolInfeas")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_8470 == std::string ("intpntQoTolRelGap")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_8470 == std::string ("intpntQoTolPfeas")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_8470 == std::string ("intpntQoTolDfeas")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_8470 == std::string ("intpntQoTolMuRed")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_8470 == std::string ("intpntQoTolNearRel")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_8470 == std::string ("intpntQoTolInfeas")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_8470 == std::string ("intpntTolPsafe")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_8470 == std::string ("intpntTolDsafe")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_8470 == std::string ("mioMaxTime")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_8470 == std::string ("mioRelGapConst")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_8470 == std::string ("mioTolRelGap")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_8470 == std::string ("mioTolAbsGap")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_8470 == std::string ("mioTolAbsRelaxInt")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_8470 == std::string ("basisTolX")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8470 == std::string ("basisTolS")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8470 == std::string ("basisRelTolS")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8470 == std::string ("presolveTolX")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_8470 == std::string ("presolveTolS")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_8470 == std::string ("presolveTolAij")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_8470 == std::string ("presolveTolAbsLindep")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_8470 == std::string ("presolveTolRelLindep")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_8470 == std::string ("simplexAbsTolPiv")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_8470 == std::string ("mioTolFeas")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_8470 == std::string ("anaSolInfeasTol")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8470 == std::string ("checkConvexityRelTol")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8470 == std::string ("qcqoReformulateRelDropTol")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_8470 == std::string ("mioTolRelDualBoundImprovement")))
  {
    {
      return (int)45;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_feature_value(const std::string & _8471){
  if ((_8471 == std::string ("pts")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8471 == std::string ("pton")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_dinfitem_value(const std::string & _8472){
  if ((_8472 == std::string ("biTime")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8472 == std::string ("biPrimalTime")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8472 == std::string ("biDualTime")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8472 == std::string ("biCleanTime")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8472 == std::string ("biCleanPrimalTime")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8472 == std::string ("biCleanDualTime")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8472 == std::string ("intpntTime")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_8472 == std::string ("intpntOrderTime")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8472 == std::string ("intpntPrimalObj")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_8472 == std::string ("intpntDualObj")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8472 == std::string ("intpntPrimalFeas")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8472 == std::string ("intpntDualFeas")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8472 == std::string ("intpntOptStatus")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8472 == std::string ("simTime")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_8472 == std::string ("simPrimalTime")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_8472 == std::string ("simDualTime")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_8472 == std::string ("simObj")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_8472 == std::string ("simFeas")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_8472 == std::string ("mioTime")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_8472 == std::string ("mioRootPresolveTime")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_8472 == std::string ("mioRootOptimizerTime")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_8472 == std::string ("toConicTime")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_8472 == std::string ("mioConstructSolutionObj")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_8472 == std::string ("mioObjInt")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_8472 == std::string ("mioObjBound")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_8472 == std::string ("mioObjRelGap")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_8472 == std::string ("mioObjAbsGap")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_8472 == std::string ("mioUserObjCut")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_8472 == std::string ("mioCmirSeparationTime")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_8472 == std::string ("mioCliqueSeparationTime")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_8472 == std::string ("mioKnapsackCoverSeparationTime")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_8472 == std::string ("mioGmiSeparationTime")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_8472 == std::string ("mioImpliedBoundTime")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_8472 == std::string ("mioRootCutgenTime")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_8472 == std::string ("mioProbingTime")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_8472 == std::string ("optimizerTime")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_8472 == std::string ("presolveTime")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_8472 == std::string ("mioDualBoundAfterPresolve")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_8472 == std::string ("presolveEliTime")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_8472 == std::string ("presolveLindepTime")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_8472 == std::string ("rdTime")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_8472 == std::string ("solItrPrimalObj")))
  {
    {
      return (int)84;
    }
  }
  {}
  if ((_8472 == std::string ("solItrPviolcon")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_8472 == std::string ("solItrPviolvar")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_8472 == std::string ("solItrPviolbarvar")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_8472 == std::string ("solItrPviolcones")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_8472 == std::string ("solItrDualObj")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_8472 == std::string ("solItrDviolcon")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_8472 == std::string ("solItrDviolvar")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_8472 == std::string ("solItrDviolbarvar")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_8472 == std::string ("solItrDviolcones")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_8472 == std::string ("solItrNrmXc")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_8472 == std::string ("solItrNrmXx")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_8472 == std::string ("solItrNrmBarx")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_8472 == std::string ("solItrNrmY")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_8472 == std::string ("solItrNrmSlc")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_8472 == std::string ("solItrNrmSuc")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_8472 == std::string ("solItrNrmSlx")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_8472 == std::string ("solItrNrmSux")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_8472 == std::string ("solItrNrmSnx")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_8472 == std::string ("solItrNrmBars")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_8472 == std::string ("solBasPrimalObj")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_8472 == std::string ("solBasPviolcon")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_8472 == std::string ("solBasPviolvar")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_8472 == std::string ("solBasDualObj")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_8472 == std::string ("solBasDviolcon")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_8472 == std::string ("solBasDviolvar")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_8472 == std::string ("solBasNrmXc")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_8472 == std::string ("solBasNrmXx")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_8472 == std::string ("solBasNrmBarx")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_8472 == std::string ("solBasNrmY")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_8472 == std::string ("solBasNrmSlc")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_8472 == std::string ("solBasNrmSuc")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_8472 == std::string ("solBasNrmSlx")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_8472 == std::string ("solBasNrmSux")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_8472 == std::string ("solItgPrimalObj")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_8472 == std::string ("solItgPviolcon")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_8472 == std::string ("solItgPviolvar")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_8472 == std::string ("solItgPviolbarvar")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_8472 == std::string ("solItgPviolcones")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_8472 == std::string ("solItgPviolitg")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_8472 == std::string ("solItgNrmXc")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_8472 == std::string ("solItgNrmXx")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_8472 == std::string ("solItgNrmBarx")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_8472 == std::string ("intpntFactorNumFlops")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8472 == std::string ("qcqoReformulateTime")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_8472 == std::string ("qcqoReformulateMaxPerturbation")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_8472 == std::string ("qcqoReformulateWorstCholeskyDiagScaling")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_8472 == std::string ("qcqoReformulateWorstCholeskyColumnScaling")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_8472 == std::string ("primalRepairPenaltyObj")))
  {
    {
      return (int)35;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_dataformat_value(const std::string & _8473){
  if ((_8473 == std::string ("extension")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8473 == std::string ("mps")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8473 == std::string ("lp")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8473 == std::string ("op")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8473 == std::string ("freeMps")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8473 == std::string ("task")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8473 == std::string ("ptf")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8473 == std::string ("cb")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8473 == std::string ("jsonTask")))
  {
    {
      return (int)8;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_symmattype_value(const std::string & _8474){
  if ((_8474 == std::string ("sparse")))
  {
    {
      return (int)0;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_scopr_value(const std::string & _8475){
  if ((_8475 == std::string ("ent")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8475 == std::string ("exp")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8475 == std::string ("log")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8475 == std::string ("pow")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8475 == std::string ("sqrt")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_nametype_value(const std::string & _8476){
  if ((_8476 == std::string ("gen")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8476 == std::string ("mps")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8476 == std::string ("lp")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_conetype_value(const std::string & _8477){
  if ((_8477 == std::string ("quad")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8477 == std::string ("rquad")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8477 == std::string ("pexp")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8477 == std::string ("dexp")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8477 == std::string ("ppow")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8477 == std::string ("dpow")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8477 == std::string ("zero")))
  {
    {
      return (int)6;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_compresstype_value(const std::string & _8478){
  if ((_8478 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8478 == std::string ("free")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8478 == std::string ("gzip")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8478 == std::string ("zstd")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_checkconvexitytype_value(const std::string & _8479){
  if ((_8479 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8479 == std::string ("simple")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8479 == std::string ("full")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_callbackcode_value(const std::string & _8480){
  if ((_8480 == std::string ("beginRootCutgen")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_8480 == std::string ("imRootCutgen")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_8480 == std::string ("endRootCutgen")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_8480 == std::string ("beginOptimizer")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_8480 == std::string ("endOptimizer")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_8480 == std::string ("beginPresolve")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_8480 == std::string ("updatePresolve")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_8480 == std::string ("imPresolve")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_8480 == std::string ("endPresolve")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_8480 == std::string ("beginIntpnt")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8480 == std::string ("intpnt")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_8480 == std::string ("imIntpnt")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_8480 == std::string ("endIntpnt")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_8480 == std::string ("beginConic")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8480 == std::string ("conic")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_8480 == std::string ("imConic")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_8480 == std::string ("endConic")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_8480 == std::string ("primalSimplex")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_8480 == std::string ("dualSimplex")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_8480 == std::string ("beginBi")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8480 == std::string ("imBi")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_8480 == std::string ("endBi")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_8480 == std::string ("beginPrimalBi")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_8480 == std::string ("imPrimalBi")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_8480 == std::string ("updatePrimalBi")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_8480 == std::string ("endPrimalBi")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_8480 == std::string ("beginDualBi")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8480 == std::string ("imDualBi")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_8480 == std::string ("updateDualBi")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_8480 == std::string ("endDualBi")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_8480 == std::string ("beginSimplexBi")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_8480 == std::string ("imSimplexBi")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_8480 == std::string ("beginPrimalSimplexBi")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_8480 == std::string ("updatePrimalSimplexBi")))
  {
    {
      return (int)91;
    }
  }
  {}
  if ((_8480 == std::string ("endPrimalSimplexBi")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_8480 == std::string ("beginDualSimplexBi")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8480 == std::string ("updateDualSimplexBi")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_8480 == std::string ("endDualSimplexBi")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_8480 == std::string ("endSimplexBi")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_8480 == std::string ("beginMio")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8480 == std::string ("imMio")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_8480 == std::string ("newIntMio")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_8480 == std::string ("endMio")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_8480 == std::string ("beginSimplex")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_8480 == std::string ("beginDualSimplex")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8480 == std::string ("imDualSimplex")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_8480 == std::string ("updateDualSimplex")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_8480 == std::string ("endDualSimplex")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_8480 == std::string ("beginPrimalSimplex")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_8480 == std::string ("imPrimalSimplex")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_8480 == std::string ("updatePrimalSimplex")))
  {
    {
      return (int)90;
    }
  }
  {}
  if ((_8480 == std::string ("endPrimalSimplex")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_8480 == std::string ("endSimplex")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_8480 == std::string ("beginInfeasAna")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8480 == std::string ("endInfeasAna")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_8480 == std::string ("imPrimalSensivity")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_8480 == std::string ("imDualSensivity")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_8480 == std::string ("imMioIntpnt")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_8480 == std::string ("imMioPrimalSimplex")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_8480 == std::string ("imMioDualSimplex")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_8480 == std::string ("beginPrimalSetupBi")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_8480 == std::string ("endPrimalSetupBi")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_8480 == std::string ("beginDualSetupBi")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8480 == std::string ("endDualSetupBi")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_8480 == std::string ("beginPrimalSensitivity")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_8480 == std::string ("endPrimalSensitivity")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_8480 == std::string ("beginDualSensitivity")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8480 == std::string ("endDualSensitivity")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_8480 == std::string ("beginLicenseWait")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8480 == std::string ("endLicenseWait")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_8480 == std::string ("imLicenseWait")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_8480 == std::string ("beginQcqoReformulate")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_8480 == std::string ("endQcqoReformulate")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_8480 == std::string ("imQoReformulate")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_8480 == std::string ("beginToConic")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_8480 == std::string ("endToConic")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_8480 == std::string ("beginFullConvexityCheck")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8480 == std::string ("endFullConvexityCheck")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_8480 == std::string ("imFullConvexityCheck")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_8480 == std::string ("beginPrimalRepair")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_8480 == std::string ("endPrimalRepair")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_8480 == std::string ("beginRead")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_8480 == std::string ("imRead")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_8480 == std::string ("endRead")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_8480 == std::string ("beginWrite")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_8480 == std::string ("endWrite")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_8480 == std::string ("readOpfSection")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_8480 == std::string ("imLu")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_8480 == std::string ("imOrder")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_8480 == std::string ("imSimplex")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_8480 == std::string ("readOpf")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_8480 == std::string ("writeOpf")))
  {
    {
      return (int)92;
    }
  }
  {}
  if ((_8480 == std::string ("solvingRemote")))
  {
    {
      return (int)84;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_purify_value(const std::string & _8481){
  if ((_8481 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8481 == std::string ("primal")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8481 == std::string ("dual")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8481 == std::string ("primalDual")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8481 == std::string ("auto")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_intpnthotstart_value(const std::string & _8482){
  if ((_8482 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8482 == std::string ("primal")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8482 == std::string ("dual")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8482 == std::string ("primalDual")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_simhotstart_value(const std::string & _8483){
  if ((_8483 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8483 == std::string ("free")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8483 == std::string ("statusKeys")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_simdupvec_value(const std::string & _8484){
  if ((_8484 == std::string ("on")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8484 == std::string ("off")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8484 == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_simreform_value(const std::string & _8485){
  if ((_8485 == std::string ("on")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8485 == std::string ("off")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8485 == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8485 == std::string ("aggressive")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_uplo_value(const std::string & _8486){
  if ((_8486 == std::string ("lo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8486 == std::string ("up")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_transpose_value(const std::string & _8487){
  if ((_8487 == std::string ("no")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8487 == std::string ("yes")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_simdegen_value(const std::string & _8488){
  if ((_8488 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8488 == std::string ("free")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8488 == std::string ("aggressive")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8488 == std::string ("moderate")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8488 == std::string ("minimum")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_mark_value(const std::string & _8489){
  if ((_8489 == std::string ("lo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8489 == std::string ("up")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_boundkey_value(const std::string & _8490){
  if ((_8490 == std::string ("lo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8490 == std::string ("up")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8490 == std::string ("fx")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8490 == std::string ("fr")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8490 == std::string ("ra")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_basindtype_value(const std::string & _8491){
  if ((_8491 == std::string ("never")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8491 == std::string ("always")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8491 == std::string ("noError")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8491 == std::string ("ifFeasible")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8491 == std::string ("reservered")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_language_value(const std::string & _8492){
  if ((_8492 == std::string ("eng")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8492 == std::string ("dan")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
void mosek::fusion::p_Parameters::destroy(){}void mosek::fusion::Parameters::destroy() { mosek::fusion::p_Parameters::_get_impl(this)->destroy(); }